
panelcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a5e2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003fe  00802000  0000a5e2  0000a696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000070c  008023fe  008023fe  0000aa94  2**0
                  ALLOC
  3 .eeprom       00000082  00810000  00810000  0000aa94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000d08  00000000  00000000  0000ab18  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000070  00000000  00000000  0000b820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000140  00000000  00000000  0000b890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000e1d  00000000  00000000  0000b9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00008bd1  00000000  00000000  0000c7ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001570  00000000  00000000  000153be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000568c  00000000  00000000  0001692e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000008e0  00000000  00000000  0001bfbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001f82  00000000  00000000  0001c89c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000510d  00000000  00000000  0001e81e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000320  00000000  00000000  0002392b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__ctors_end>
       4:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
       8:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
       c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      10:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      14:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      18:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      1c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      20:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      24:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      28:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      2c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      30:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      34:	0c 94 a9 29 	jmp	0x5352	; 0x5352 <__vector_13>
      38:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      3c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      40:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      44:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      48:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      4c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      50:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      54:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      58:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      5c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      60:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      64:	0c 94 64 37 	jmp	0x6ec8	; 0x6ec8 <__vector_25>
      68:	0c 94 b4 37 	jmp	0x6f68	; 0x6f68 <__vector_26>
      6c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      70:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      74:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      78:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      7c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      80:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      84:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      88:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      8c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      90:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      94:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      98:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      9c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      a0:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      a4:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      a8:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      ac:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      b0:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      b4:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      b8:	0c 94 3f 29 	jmp	0x527e	; 0x527e <__vector_46>
      bc:	0c 94 29 38 	jmp	0x7052	; 0x7052 <__vector_47>
      c0:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      c4:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      c8:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      cc:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      d0:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      d4:	0c 94 1a 4a 	jmp	0x9434	; 0x9434 <__vector_53>
      d8:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      dc:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      e0:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      e4:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      e8:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      ec:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      f0:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      f4:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      f8:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
      fc:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     100:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     104:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     108:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     10c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     110:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     114:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     118:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     11c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     120:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     124:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     128:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     12c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     130:	0c 94 74 29 	jmp	0x52e8	; 0x52e8 <__vector_76>
     134:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     138:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     13c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     140:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     144:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     148:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     14c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     150:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     154:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     158:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     15c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     160:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     164:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     168:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     16c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     170:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     174:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     178:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     17c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     180:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     184:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     188:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     18c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     190:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__vector_100>
     194:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     198:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     19c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1a0:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1a4:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1a8:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1ac:	0c 94 0a 29 	jmp	0x5214	; 0x5214 <__vector_107>
     1b0:	0c 94 6a 4a 	jmp	0x94d4	; 0x94d4 <__vector_108>
     1b4:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1b8:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1bc:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1c0:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1c4:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1c8:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1cc:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1d0:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1d4:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1d8:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1dc:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1e0:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1e4:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1e8:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1ec:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1f0:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__bad_interrupt>
     1f4:	cd 21       	and	r28, r13
     1f6:	d2 21       	and	r29, r2
     1f8:	d7 21       	and	r29, r7
     1fa:	db 21       	and	r29, r11
     1fc:	df 21       	and	r29, r15
     1fe:	e3 21       	and	r30, r3
     200:	ec 21       	and	r30, r12
     202:	f0 21       	and	r31, r0
     204:	f4 21       	and	r31, r4
     206:	11 22       	and	r1, r17
     208:	11 22       	and	r1, r17
     20a:	11 22       	and	r1, r17
     20c:	11 22       	and	r1, r17
     20e:	11 22       	and	r1, r17
     210:	11 22       	and	r1, r17
     212:	f8 21       	and	r31, r8
     214:	0d 22       	and	r0, r29
     216:	6a 48       	sbci	r22, 0x8A	; 138
     218:	7e 48       	sbci	r23, 0x8E	; 142
     21a:	ee 48       	sbci	r30, 0x8E	; 142
     21c:	f4 48       	sbci	r31, 0x84	; 132
     21e:	67 48       	sbci	r22, 0x87	; 135
     220:	67 48       	sbci	r22, 0x87	; 135
     222:	67 48       	sbci	r22, 0x87	; 135
     224:	67 48       	sbci	r22, 0x87	; 135
     226:	67 48       	sbci	r22, 0x87	; 135
     228:	67 48       	sbci	r22, 0x87	; 135
     22a:	8f 49       	sbci	r24, 0x9F	; 159
     22c:	94 49       	sbci	r25, 0x94	; 148
     22e:	96 49       	sbci	r25, 0x96	; 150
     230:	a4 49       	sbci	r26, 0x94	; 148
     232:	c3 49       	sbci	r28, 0x93	; 147

00000234 <__c.6109>:
     234:	49 6e 74 33 20 63 61 74 63 68 65 73 20 61 20 72     Int3 catches a r
     244:	69 73 69 6e 67 20 65 64 67 65 20 74 72 69 67 67     ising edge trigg
     254:	65 72 21 0a 00                                      er!..

00000259 <__c.6080>:
     259:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     269:	53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00              SDInfo.mat...

00000276 <__c.6078>:
     276:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     286:	20 72 65 6d 61 69 6e 65 64 20 64 61 74 61 2e 0a      remained data..
	...

00000297 <__c.6073>:
     297:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     2a7:	20 53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00            SDInfo.mat...

000002b5 <__c.6009>:
     2b5:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     2c5:	74 69 6f 6e 5f 59 20 69 73 20 65 6d 70 74 79 0a     tion_Y is empty.
	...

000002d6 <__c.6007>:
     2d6:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     2e6:	74 69 6f 6e 5f 78 20 69 73 20 65 6d 70 74 79 0a     tion_x is empty.
	...

000002f7 <__c.5962>:
     2f7:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     307:	20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e 63 43      in update_funcC
     317:	6e 74 5f 79 20 6c 6f 61 64 20 6e 65 78 74 20 62     nt_y load next b
     327:	75 66 66 65 72 0a 00                                uffer..

0000032e <__c.5960>:
     32e:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

00000339 <__c.5955>:
     339:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     349:	69 6e 20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e     in in update_fun
     359:	63 43 6e 74 5f 79 0a 00                             cCnt_y..

00000361 <__c.5953>:
     361:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

0000036c <__c.5951>:
     36c:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     37c:	74 69 6f 6e 5f 59 20 69 73 20 66 75 6c 6c 0a 00     tion_Y is full..

0000038c <__c.5904>:
     38c:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     39c:	74 69 6f 6e 5f 59 20 69 73 20 65 6d 70 74 79 0a     tion_Y is empty.
	...

000003ad <__c.5861>:
     3ad:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     3bd:	20 69 6e 20 66 65 74 63 68 5f 75 70 64 61 74 65      in fetch_update
     3cd:	5f 66 75 6e 63 58 0a 00                             _funcX..

000003d5 <__c.5859>:
     3d5:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

000003e0 <__c.5854>:
     3e0:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     3f0:	69 6e 20 69 6e 20 66 65 74 63 68 5f 75 70 64 61     in in fetch_upda
     400:	74 65 5f 66 75 6e 63 58 0a 00                       te_funcX..

0000040a <__c.5852>:
     40a:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

00000415 <__c.5850>:
     415:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     425:	74 69 6f 6e 5f 78 20 69 73 20 66 75 6c 6c 0a 00     tion_x is full..

00000435 <__c.5804>:
     435:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     445:	74 69 6f 6e 5f 78 20 69 73 20 65 6d 70 74 79 0a     tion_x is empty.
	...

00000456 <__c.5752>:
     456:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     466:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     476:	2e 0a 00                                            ...

00000479 <__c.5749>:
     479:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     489:	79 20 3d 20 25 75 0a 00                             y = %u..

00000491 <__c.5747>:
     491:	6c 61 73 74 5f 6c 6f 61 64 5f 79 20 3d 20 25 75     last_load_y = %u
     4a1:	0a 00                                               ..

000004a3 <__c.5745>:
     4a3:	66 75 6e 63 53 69 7a 65 5f 79 20 3d 20 25 75 0a     funcSize_y = %u.
	...

000004b4 <__c.5743>:
     4b4:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     4c4:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 59 2e 0a     set_vel_func Y..
	...

000004d5 <__c.5741>:
     4d5:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 69 6e 20     Error f_read in 
     4e5:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 59 2e 0a     set_vel_func Y..
	...

000004f6 <__c.5739>:
     4f6:	53 65 74 74 69 6e 67 20 76 65 6c 6f 63 69 74 79     Setting velocity
     506:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     516:	20 59 0a 00                                          Y..

0000051a <__c.5735>:
     51a:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     52a:	78 20 3d 20 25 75 0a 00                             x = %u..

00000532 <__c.5733>:
     532:	6c 61 73 74 5f 6c 6f 61 64 5f 78 20 3d 20 25 75     last_load_x = %u
     542:	0a 00                                               ..

00000544 <__c.5731>:
     544:	66 75 6e 63 53 69 7a 65 5f 78 20 3d 20 25 75 0a     funcSize_x = %u.
	...

00000555 <__c.5729>:
     555:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     565:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 58 2e 0a     set_vel_func X..
	...

00000576 <__c.5727>:
     576:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 69 6e 20     Error f_read in 
     586:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 58 2e 0a     set_vel_func X..
	...

00000597 <__c.5725>:
     597:	53 65 74 74 69 6e 67 20 76 65 6c 6f 63 69 74 79     Setting velocity
     5a7:	20 66 75 6e 63 74 69 6f 6e 20 20 25 75 20 66 6f      function  %u fo
     5b7:	72 20 58 0a 00                                      r X..

000005bc <__c.5665>:
     5bc:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     5cc:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     5dc:	2e 0a 00                                            ...

000005df <__c.5662>:
     5df:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     5ef:	79 20 3d 20 25 75 0a 00                             y = %u..

000005f7 <__c.5660>:
     5f7:	6c 61 73 74 5f 6c 6f 61 64 5f 79 20 3d 20 25 75     last_load_y = %u
     607:	20 0a 00                                             ..

0000060a <__c.5658>:
     60a:	66 75 6e 63 53 69 7a 65 5f 79 20 3d 20 25 75 0a     funcSize_y = %u.
	...

0000061b <__c.5656>:
     61b:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     62b:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a     set_pos_func Y..
	...

0000063c <__c.5654>:
     63c:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     64c:	5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a 00           _pos_func Y...

0000065a <__c.5652>:
     65a:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     66a:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     67a:	20 59 0a 00                                          Y..

0000067e <__c.5648>:
     67e:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     68e:	78 20 3d 20 25 75 0a 00                             x = %u..

00000696 <__c.5646>:
     696:	6c 61 73 74 5f 6c 6f 61 64 5f 78 20 3d 20 25 75     last_load_x = %u
     6a6:	0a 00                                               ..

000006a8 <__c.5644>:
     6a8:	66 75 6e 63 53 69 7a 65 5f 78 20 3d 20 25 75 0a     funcSize_x = %u.
	...

000006b9 <__c.5642>:
     6b9:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     6c9:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 58 2e 0a     set_pos_func X..
	...

000006da <__c.5640>:
     6da:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     6ea:	5f 70 6f 73 5f 66 75 6e 63 20 58 0a 00              _pos_func X..

000006f7 <__c.5638>:
     6f7:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     707:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     717:	20 58 0a 00                                          X..

0000071b <__c.5620>:
     71b:	57 72 6f 6e 67 20 66 75 6e 63 74 69 6f 6e 20 63     Wrong function c
     72b:	68 61 6e 6e 65 6c 20 6e 75 6d 62 65 72 2e 0a 00     hannel number...

0000073b <__c.5614>:
     73b:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     74b:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 59 2e 0a     function for Y..
	...

0000075c <__c.5607>:
     75c:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     76c:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 58 2e 0a     function for X..
	...

0000077d <__c.5544>:
     77d:	20 62 65 6e 63 68 5f 74 69 6d 65 20 3d 20 25 6c      bench_time = %l
     78d:	75 20 6d 73 2c 20 66 72 61 6d 65 5f 72 61 74 65     u ms, frame_rate
     79d:	20 3d 20 25 75 0a 00                                 = %u..

000007a4 <__c.5518>:
     7a4:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     7b4:	68 61 72 64 77 61 72 65 20 63 6f 6e 66 69 67 20     hardware config 
     7c4:	66 69 6c 65 20 6f 6e 20 74 68 65 20 53 44 20 63     file on the SD c
     7d4:	61 72 64 2e 0a 00                                   ard...

000007da <__c.5516>:
     7da:	53 75 63 63 65 73 73 66 75 6c 6c 79 20 6c 6f 61     Successfully loa
     7ea:	64 20 74 68 65 20 68 61 72 64 77 61 72 65 20 63     d the hardware c
     7fa:	6f 6e 66 69 67 20 66 69 6c 65 20 74 6f 20 45 45     onfig file to EE
     80a:	50 52 4f 4d 0a 00                                   PROM..

00000810 <__c.5465>:
     810:	45 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 70 61     Error opening pa
     820:	74 74 65 72 6e 20 66 69 6c 65 0a 00                 ttern file..

0000082c <__c.5463>:
     82c:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 69 6e     Error reading in
     83c:	20 70 61 74 74 65 72 6e 20 66 69 6c 65 0a 00         pattern file..

0000084b <__c.5461>:
     84b:	20 20 78 5f 6e 75 6d 20 3d 20 25 75 0a 20 20 79       x_num = %u.  y
     85b:	5f 6e 75 6d 20 3d 20 25 75 0a 20 20 6e 75 6d 5f     _num = %u.  num_
     86b:	70 61 6e 65 6c 73 20 3d 20 25 75 0a 20 20 67 73     panels = %u.  gs
     87b:	5f 76 61 6c 75 65 20 3d 20 25 75 0a 20 72 6f 77     _value = %u. row
     88b:	5f 63 6f 6d 70 72 65 73 73 69 6f 6e 20 3d 20 25     _compression = %
     89b:	75 0a 00                                            u..

0000089e <__c.5459>:
     89e:	53 65 74 74 69 6e 67 20 70 61 74 74 65 72 6e 20     Setting pattern 
     8ae:	25 75 3a 0a 00                                      %u:..

000008b3 <__c.5371>:
     8b3:	53 75 63 63 65 73 73 66 75 6c 6c 79 20 6c 6f 61     Successfully loa
     8c3:	64 20 70 61 74 74 65 72 6e 20 25 75 20 74 6f 20     d pattern %u to 
     8d3:	74 68 65 20 70 61 6e 65 6c 73 0a 00                 the panels..

000008df <__c.5369>:
     8df:	45 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 70 61     Error opening pa
     8ef:	74 74 65 72 6e 20 66 69 6c 65 0a 00                 ttern file..

000008fb <__c.5367>:
     8fb:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 69 6e     Error reading in
     90b:	20 70 61 74 74 65 72 6e 20 66 69 6c 65 0a 00         pattern file..

0000091a <__c.5365>:
     91a:	46 61 69 6c 65 64 20 74 6f 20 6c 6f 61 64 20 74     Failed to load t
     92a:	68 69 73 20 50 61 74 74 65 72 6e 20 74 6f 20 50     his Pattern to P
     93a:	61 6e 65 6c 73 0a 00                                anels..

00000941 <__c.5363>:
     941:	54 68 69 73 20 70 61 74 74 65 72 6e 20 73 69 7a     This pattern siz
     951:	65 20 69 73 20 25 6c 75 0a 00                       e is %lu..

0000095b <__c.5361>:
     95b:	50 61 74 74 65 72 6e 20 73 69 7a 65 20 69 73 20     Pattern size is 
     96b:	75 70 74 6f 20 38 30 30 20 62 79 74 65 20 70 65     upto 800 byte pe
     97b:	72 20 70 61 6e 65 6c 2e 0a 00                       r panel...

00000985 <__c.5356>:
     985:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     995:	20 25 75 2c 20 6f 66 66 73 65 74 20 3d 20 25 6c      %u, offset = %l
     9a5:	75 0a 00                                            u..

000009a8 <__c.5354>:
     9a8:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     9b8:	20 69 6e 20 6c 6f 61 64 50 61 74 74 65 72 6e 32      in loadPattern2
     9c8:	50 61 6e 65 6c 73 21 0a 00                          Panels!..

000009d1 <__c.5352>:
     9d1:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     9e1:	20 25 75 2c 20 63 6e 74 3d 20 25 75 0a 00            %u, cnt= %u..

000009ef <__c.5350>:
     9ef:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     9ff:	69 6e 20 6c 6f 61 64 50 61 74 74 65 72 6e 32 50     in loadPattern2P
     a0f:	61 6e 65 6c 73 21 0a 00                             anels!..

00000a17 <__c.5336>:
     a17:	20 20 62 79 74 65 73 5f 70 65 72 5f 70 61 6e 65       bytes_per_pane
     a27:	6c 5f 66 72 61 6d 65 20 3d 20 25 75 0a 20 20 62     l_frame = %u.  b
     a37:	79 74 65 73 5f 70 65 72 5f 70 61 6e 65 6c 5f 70     ytes_per_panel_p
     a47:	61 74 74 65 72 6e 20 3d 20 25 75 0a 00              attern = %u..

00000a54 <__c.5334>:
     a54:	20 20 78 5f 6e 75 6d 20 3d 20 25 75 0a 20 20 79       x_num = %u.  y
     a64:	5f 6e 75 6d 20 3d 20 25 75 0a 20 20 6e 75 6d 5f     _num = %u.  num_
     a74:	70 61 6e 65 6c 73 20 3d 20 25 75 0a 20 20 67 73     panels = %u.  gs
     a84:	5f 76 61 6c 75 65 20 3d 20 25 75 0a 20 72 6f 77     _value = %u. row
     a94:	5f 63 6f 6d 70 72 65 73 73 69 6f 6e 20 3d 20 25     _compression = %
     aa4:	75 0a 00                                            u..

00000aa7 <__c.5332>:
     aa7:	70 72 65 6c 6f 61 64 20 70 61 74 74 65 72 6e 20     preload pattern 
     ab7:	25 75 3a 0a 00                                      %u:..

00000abc <__c.5012>:
     abc:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     acc:	20 25 75 2c 20 6f 66 66 73 65 74 20 3d 20 25 6c      %u, offset = %l
     adc:	75 0a 00                                            u..

00000adf <__c.5010>:
     adf:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     aef:	20 69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61      in fetch_displa
     aff:	79 5f 66 72 61 6d 65 21 0a 00                       y_frame!..

00000b09 <__c.5008>:
     b09:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     b19:	20 25 75 2c 20 63 6e 74 3d 20 25 75 0a 00            %u, cnt= %u..

00000b27 <__c.5006>:
     b27:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     b37:	69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61 79     in fetch_display
     b47:	5f 66 72 61 6d 65 21 0a 00                          _frame!..

00000b50 <__c.4902>:
     b50:	53 75 63 63 65 73 73 20 73 65 74 20 74 68 65 20     Success set the 
     b60:	6e 65 77 20 6c 61 73 65 72 20 70 61 74 74 65 72     new laser patter
     b70:	6e 2e 0a 00                                         n...

00000b74 <__c.4832>:
     b74:	73 65 74 5f 67 61 69 6e 5f 62 69 61 73 3a 20 67     set_gain_bias: g
     b84:	61 69 6e 5f 78 3d 20 25 64 2c 20 20 62 69 61 73     ain_x= %d,  bias
     b94:	5f 78 3d 20 25 64 2c 20 67 61 69 6e 5f 79 3d 20     _x= %d, gain_y= 
     ba4:	25 64 2c 20 62 69 61 73 5f 79 3d 25 64 0a 00        %d, bias_y=%d..

00000bb3 <__c.4783>:
     bb3:	73 65 74 5f 70 6f 73 69 74 69 6f 6e 3a 20 69 6e     set_position: in
     bc3:	64 65 78 5f 78 3d 20 25 75 2c 20 20 69 6e 64 65     dex_x= %u,  inde
     bd3:	78 5f 79 3d 20 25 75 2c 20 61 6e 64 20 66 72 61     x_y= %u, and fra
     be3:	6d 65 5f 6e 75 6d 3d 20 25 75 0a 00                 me_num= %u..

00000bef <__c.4720>:
     bef:	66 75 6e 63 74 69 6f 6e 20 59 20 75 70 64 61 74     function Y updat
     bff:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     c0f:	2e 0a 00                                            ...

00000c12 <__c.4717>:
     c12:	66 75 6e 63 74 69 6f 6e 20 58 20 75 70 64 61 74     function X updat
     c22:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     c32:	2e 0a 00                                            ...

00000c35 <__c.4667>:
     c35:	41 44 43 5f 76 61 6c 75 65 20 3d 20 20 25 64 3a     ADC_value =  %d:
     c45:	0a 00                                               ..

00000c47 <__c.4572>:
     c47:	72 65 73 6f 6c 75 74 69 6f 6e 5f 79 20 3d 20 20     resolution_y =  
     c57:	25 64 3a 0a 00                                      %d:..

00000c5c <__c.4570>:
     c5c:	72 65 73 6f 6c 75 74 69 6f 6e 5f 78 20 3d 20 20     resolution_x =  
     c6c:	25 64 3a 0a 00                                      %d:..

00000c71 <__c.4564>:
     c71:	44 69 73 61 62 6c 65 64 20 49 6e 74 33 20 65 78     Disabled Int3 ex
     c81:	74 65 72 6e 61 6c 20 74 72 69 67 67 65 72 20 6d     ternal trigger m
     c91:	6f 64 65 21 0a 00                                   ode!..

00000c97 <__c.4561>:
     c97:	45 6e 61 62 6c 65 64 20 49 6e 74 33 20 65 78 74     Enabled Int3 ext
     ca7:	65 72 6e 61 6c 20 74 72 69 67 67 65 72 20 6d 6f     ernal trigger mo
     cb7:	64 65 20 69 73 20 6f 6e 21 0a 00                    de is on!..

00000cc2 <__c.4558>:
     cc2:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     cd2:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     ce2:	50 43 20 64 75 6d 70 69 6e 67 20 6d 6f 64 65 21     PC dumping mode!
     cf2:	0a 00                                               ..

00000cf4 <__c.4555>:
     cf4:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     d04:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     d14:	63 6f 6e 74 72 6f 6c 6c 65 72 20 6d 6f 64 65 21     controller mode!
     d24:	0a 00                                               ..

00000d26 <__c.4552>:
     d26:	75 70 64 61 74 65 3a 20 25 64 20 25 64 20 25 64     update: %d %d %d
     d36:	20 25 64 20 25 64 20 25 64 20 25 64 20 25 64 3a      %d %d %d %d %d:
     d46:	0a 00                                               ..

00000d48 <__c.4543>:
     d48:	43 75 72 72 65 6e 74 20 76 65 72 73 69 6f 6e 20     Current version 
     d58:	6e 75 6d 62 65 72 20 69 73 20 25 73 2e 0a 00        number is %s...

00000d67 <__c.4502>:
     d67:	46 75 6e 63 74 69 6f 6e 20 58 20 61 6e 64 20 59     Function X and Y
     d77:	20 61 72 65 20 73 79 6e 63 68 72 6f 6e 69 7a 65      are synchronize
     d87:	64 2e 0a 00                                         d...

00000d8b <__c.4412>:
     d8b:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
     d9b:	6d 6f 64 65 20 69 73 20 74 68 65 20 50 43 20 64     mode is the PC d
     dab:	75 6d 70 69 6e 67 20 6d 6f 64 65 21 0a 00           umping mode!..

00000db9 <__c.4398>:
     db9:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
     dc9:	6d 6f 64 65 20 69 73 20 74 68 65 20 43 6f 6e 74     mode is the Cont
     dd9:	72 6f 6c 6c 65 72 20 6d 6f 64 65 21 0a 00           roller mode!..

00000de7 <__c.4395>:
     de7:	3f 3f 3f 0a 00                                      ???..

00000dec <__c.4392>:
     dec:	20 4e 4f 54 20 52 45 41 44 59 21 0a 00               NOT READY!..

00000df9 <__c.4389>:
     df9:	20 57 52 49 54 45 20 50 52 4f 54 45 43 54 45 44      WRITE PROTECTED
     e09:	21 0a 00                                            !..

00000e0c <__c.4386>:
     e0c:	20 45 52 52 4f 52 21 0a 00                           ERROR!..

00000e15 <__c.4382>:
     e15:	20 46 41 54 20 4f 4b 21 0a 00                        FAT OK!..

00000e1f <__c.4379>:
     e1f:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 46 41 54     Initializing FAT
     e2f:	20 44 69 73 6b 2e 2e 2e 00                           Disk....

00000e38 <__c.4377>:
     e38:	3f 3f 3f 0a 00                                      ???..

00000e3d <__c.4374>:
     e3d:	53 44 48 43 0a 00                                   SDHC..

00000e43 <__c.4371>:
     e43:	42 4c 4b 0a 00                                      BLK..

00000e48 <__c.4368>:
     e48:	53 44 43 0a 00                                      SDC..

00000e4d <__c.4365>:
     e4d:	53 44 32 0a 00                                      SD2..

00000e52 <__c.4362>:
     e52:	53 44 0a 00                                         SD..

00000e56 <__c.4358>:
     e56:	4d 4d 43 0a 00                                      MMC..

00000e5b <__c.4355>:
     e5b:	43 61 72 64 20 74 79 70 65 3a 20 00                 Card type: .

00000e67 <__c.4353>:
     e67:	53 44 20 63 61 72 64 20 69 73 20 69 6e 69 74 69     SD card is initi
     e77:	61 6c 69 7a 65 64 0a 00                             alized..

00000e7f <__c.4345>:
     e7f:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 66     Initialization f
     e8f:	61 69 6c 65 64 21 21 21 0a 00                       ailed!!!..

00000e99 <__c.4340>:
     e99:	53 44 20 63 61 72 64 20 69 73 20 57 72 69 74 65     SD card is Write
     ea9:	20 50 72 6f 74 65 63 74 65 64 21 0a 00               Protected!..

00000eb6 <__c.4335>:
     eb6:	49 6e 73 65 72 74 20 53 44 20 63 61 72 64 00        Insert SD card.

00000ec5 <__c.4333>:
     ec5:	0a 4d 61 69 6e 20 43 6f 6e 74 72 6f 6c 6c 65 72     .Main Controller
     ed5:	20 57 6f 72 6b 73 0a 00                              Works..

00000edd <__c.4518>:
     edd:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     eed:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

00000ef8 <__c.4516>:
     ef8:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
     f08:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

00000f13 <__c.4510>:
     f13:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     f23:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     f33:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     f43:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 0a     d of eeprom.hex.
	...

00000f54 <__c.4508>:
     f54:	0a 00                                               ..

00000f56 <__c.4506>:
     f56:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     f66:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000f73 <__c.4501>:
     f73:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     f83:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000f90 <__c.4499>:
     f90:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     fa0:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     fb0:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000fbb <__c.4497>:
     fbb:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     fcb:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     fdb:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
     feb:	78 0a 00                                            x..

00000fee <__c.4491>:
     fee:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

00000ffb <__c.4489>:
     ffb:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
    100b:	20 65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00            eeprom.hex...

00001019 <__c.4486>:
    1019:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
    1029:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
    1039:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
    1049:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 2e     d of eeprom.hex.
    1059:	0a 00                                               ..

0000105b <__c.4481>:
    105b:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
    106b:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
    107b:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00001086 <__c.4479>:
    1086:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
    1096:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
    10a6:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
    10b6:	78 2e 0a 00                                         x...

000010ba <__c.4473>:
    10ba:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

000010c7 <__c.4471>:
    10c7:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
    10d7:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

000010e5 <__c.4466>:
    10e5:	65 65 70 72 6f 6d 20 70 61 6e 65 6c 20 25 75 2e     eeprom panel %u.
    10f5:	0a 00                                               ..

000010f7 <__c.4464>:
    10f7:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
    1107:	65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00              eeprom.hex...

00001114 <__c.4588>:
    1114:	25 53 0a 00                                         %S..

00001118 <str.4574>:
    1118:	4f 4b 00 44 49 53 4b 5f 45 52 52 00 49 4e 54 5f     OK.DISK_ERR.INT_
    1128:	45 52 52 00 4e 4f 54 5f 52 45 41 44 59 00 4e 4f     ERR.NOT_READY.NO
    1138:	5f 46 49 4c 45 00 4e 4f 5f 50 41 54 48 00 49 4e     _FILE.NO_PATH.IN
    1148:	56 41 4c 49 44 5f 4e 41 4d 45 00 44 45 4e 49 45     VALID_NAME.DENIE
    1158:	44 00 45 58 49 53 54 00 49 4e 56 41 4c 49 44 5f     D.EXIST.INVALID_
    1168:	4f 42 4a 45 43 54 00 57 52 49 54 45 5f 50 52 4f     OBJECT.WRITE_PRO
    1178:	54 45 43 54 45 44 00 49 4e 56 41 4c 49 44 5f 44     TECTED.INVALID_D
    1188:	52 49 56 45 00 4e 4f 54 5f 45 4e 41 42 4c 45 44     RIVE.NOT_ENABLED
    1198:	00 4e 4f 5f 46 49 4c 45 5f 53 59 53 54 45 4d 00     .NO_FILE_SYSTEM.
    11a8:	4d 4b 46 53 5f 41 42 4f 52 54 45 44 00 54 49 4d     MKFS_ABORTED.TIM
    11b8:	45 4f 55 54 00 00                                   EOUT..

000011be <__c.4385>:
    11be:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
    11ce:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

000011d9 <__c.4383>:
    11d9:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
    11e9:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

000011f4 <__c.4377>:
    11f4:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
    1204:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
    1214:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
    1224:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

00001234 <__c.4375>:
    1234:	0a 00                                               ..

00001236 <__c.4373>:
    1236:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
    1246:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00001253 <__c.4368>:
    1253:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
    1263:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00001270 <__c.4366>:
    1270:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
    1280:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
    1290:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

0000129b <__c.4364>:
    129b:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
    12ab:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
    12bb:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
    12cb:	0a 00                                               ..

000012cd <__c.4358>:
    12cd:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

000012da <__c.4356>:
    12da:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
    12ea:	20 70 61 6e 65 6c 2e 68 65 78 2e 0a 00               panel.hex...

000012f7 <__c.4353>:
    12f7:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
    1307:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
    1317:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
    1327:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

00001337 <__c.4348>:
    1337:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
    1347:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
    1357:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00001362 <__c.4346>:
    1362:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
    1372:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
    1382:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
    1392:	2e 0a 00                                            ...

00001395 <__c.4340>:
    1395:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

000013a2 <__c.4338>:
    13a2:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
    13b2:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

000013c0 <__c.4333>:
    13c0:	66 6c 61 73 68 20 70 61 6e 65 6c 20 25 75 2e 0a     flash panel %u..
	...

000013d1 <__c.4331>:
    13d1:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
    13e1:	70 61 6e 65 6c 2e 68 65 78 2e 0a 00                 panel.hex...

000013ed <__c.4281>:
    13ed:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    13fd:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

0000140a <__c.4276>:
    140a:	23 00                                               #.

0000140c <__c.4246>:
    140c:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    141c:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00001429 <__c.4241>:
    1429:	23 00                                               #.

0000142b <__c.4220>:
    142b:	42 61 64 20 65 65 70 72 6f 6d 20 77 72 69 74 65     Bad eeprom write
    143b:	2c 20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00        , result = %u..

0000144a <__c.4215>:
    144a:	23 00                                               #.

0000144c <__c.4184>:
    144c:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    145c:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00001469 <__c.4179>:
    1469:	23 00                                               #.

0000146b <__c.4148>:
    146b:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    147b:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00001488 <__c.4143>:
    1488:	23 00                                               #.

0000148a <__c.4121>:
    148a:	42 61 64 20 66 6c 61 73 68 20 77 72 69 74 65 2c     Bad flash write,
    149a:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

000014a8 <__c.4116>:
    14a8:	23 00                                               #.

000014aa <__ctors_end>:
    14aa:	11 24       	eor	r1, r1
    14ac:	1f be       	out	0x3f, r1	; 63
    14ae:	cf ef       	ldi	r28, 0xFF	; 255
    14b0:	df e3       	ldi	r29, 0x3F	; 63
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	00 e0       	ldi	r16, 0x00	; 0
    14b8:	0c bf       	out	0x3c, r16	; 60
    14ba:	18 be       	out	0x38, r1	; 56
    14bc:	19 be       	out	0x39, r1	; 57
    14be:	1a be       	out	0x3a, r1	; 58
    14c0:	1b be       	out	0x3b, r1	; 59

000014c2 <__do_copy_data>:
    14c2:	13 e2       	ldi	r17, 0x23	; 35
    14c4:	a0 e0       	ldi	r26, 0x00	; 0
    14c6:	b0 e2       	ldi	r27, 0x20	; 32
    14c8:	e2 ee       	ldi	r30, 0xE2	; 226
    14ca:	f5 ea       	ldi	r31, 0xA5	; 165
    14cc:	00 e0       	ldi	r16, 0x00	; 0
    14ce:	0b bf       	out	0x3b, r16	; 59
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <__do_copy_data+0x14>
    14d2:	07 90       	elpm	r0, Z+
    14d4:	0d 92       	st	X+, r0
    14d6:	ae 3f       	cpi	r26, 0xFE	; 254
    14d8:	b1 07       	cpc	r27, r17
    14da:	d9 f7       	brne	.-10     	; 0x14d2 <__do_copy_data+0x10>
    14dc:	1b be       	out	0x3b, r1	; 59

000014de <__do_clear_bss>:
    14de:	1b e2       	ldi	r17, 0x2B	; 43
    14e0:	ae ef       	ldi	r26, 0xFE	; 254
    14e2:	b3 e2       	ldi	r27, 0x23	; 35
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <.do_clear_bss_start>

000014e6 <.do_clear_bss_loop>:
    14e6:	1d 92       	st	X+, r1

000014e8 <.do_clear_bss_start>:
    14e8:	aa 30       	cpi	r26, 0x0A	; 10
    14ea:	b1 07       	cpc	r27, r17
    14ec:	e1 f7       	brne	.-8      	; 0x14e6 <.do_clear_bss_loop>
    14ee:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <main>
    14f2:	0c 94 ef 52 	jmp	0xa5de	; 0xa5de <_exit>

000014f6 <__bad_interrupt>:
    14f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000014fa <handle_message_length_62>:
	}
}

			
void handle_message_length_62(uint8_t *msg_buffer)
{   
    14fa:	ac 01       	movw	r20, r24
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;

	for (i = 0; i<62; i++)
	{
		laserPattern[i] = msg_buffer[i];
    1500:	f9 01       	movw	r30, r18
    1502:	ee 55       	subi	r30, 0x5E	; 94
    1504:	fa 4d       	sbci	r31, 0xDA	; 218
    1506:	da 01       	movw	r26, r20
    1508:	a2 0f       	add	r26, r18
    150a:	b3 1f       	adc	r27, r19
    150c:	8c 91       	ld	r24, X
    150e:	80 83       	st	Z, r24
    1510:	2f 5f       	subi	r18, 0xFF	; 255
    1512:	3f 4f       	sbci	r19, 0xFF	; 255
			
void handle_message_length_62(uint8_t *msg_buffer)
{   
	uint8_t i;

	for (i = 0; i<62; i++)
    1514:	2e 33       	cpi	r18, 0x3E	; 62
    1516:	31 05       	cpc	r19, r1
    1518:	99 f7       	brne	.-26     	; 0x1500 <handle_message_length_62+0x6>
	{
		laserPattern[i] = msg_buffer[i];
	}

}
    151a:	08 95       	ret

0000151c <increment_index_x>:
}


void increment_index_x(void) {
	
    index_x++;
    151c:	80 91 ce 26 	lds	r24, 0x26CE
    1520:	90 91 cf 26 	lds	r25, 0x26CF
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	80 93 ce 26 	sts	0x26CE, r24
    152a:	90 93 cf 26 	sts	0x26CF, r25
    if (index_x >= x_num)
    152e:	80 91 ce 26 	lds	r24, 0x26CE
    1532:	90 91 cf 26 	lds	r25, 0x26CF
    1536:	40 91 27 27 	lds	r20, 0x2727
    153a:	50 91 28 27 	lds	r21, 0x2728
    153e:	84 17       	cp	r24, r20
    1540:	95 07       	cpc	r25, r21
    1542:	20 f0       	brcs	.+8      	; 0x154c <increment_index_x+0x30>
		index_x = 0;
    1544:	10 92 ce 26 	sts	0x26CE, r1
    1548:	10 92 cf 26 	sts	0x26CF, r1
    
    
    frame_num = index_y*x_num + index_x;
    154c:	80 91 72 28 	lds	r24, 0x2872
    1550:	90 91 73 28 	lds	r25, 0x2873
    1554:	20 91 ce 26 	lds	r18, 0x26CE
    1558:	30 91 cf 26 	lds	r19, 0x26CF
    155c:	bc 01       	movw	r22, r24
    155e:	64 9f       	mul	r22, r20
    1560:	c0 01       	movw	r24, r0
    1562:	65 9f       	mul	r22, r21
    1564:	90 0d       	add	r25, r0
    1566:	74 9f       	mul	r23, r20
    1568:	90 0d       	add	r25, r0
    156a:	11 24       	eor	r1, r1
    156c:	82 0f       	add	r24, r18
    156e:	93 1f       	adc	r25, r19
    1570:	80 93 04 24 	sts	0x2404, r24
    1574:	90 93 05 24 	sts	0x2405, r25
    if (x_gt_y) display_flag++;
    1578:	80 91 ff 23 	lds	r24, 0x23FF
    157c:	88 23       	and	r24, r24
    157e:	29 f0       	breq	.+10     	; 0x158a <increment_index_x+0x6e>
    1580:	80 91 fe 23 	lds	r24, 0x23FE
    1584:	8f 5f       	subi	r24, 0xFF	; 255
    1586:	80 93 fe 23 	sts	0x23FE, r24
    158a:	08 95       	ret

0000158c <increment_index_y>:
}


void increment_index_y(void) {
    index_y++;
    158c:	80 91 72 28 	lds	r24, 0x2872
    1590:	90 91 73 28 	lds	r25, 0x2873
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	80 93 72 28 	sts	0x2872, r24
    159a:	90 93 73 28 	sts	0x2873, r25
    if (index_y >= y_num)
    159e:	20 91 72 28 	lds	r18, 0x2872
    15a2:	30 91 73 28 	lds	r19, 0x2873
    15a6:	80 91 c6 24 	lds	r24, 0x24C6
    15aa:	90 91 c7 24 	lds	r25, 0x24C7
    15ae:	28 17       	cp	r18, r24
    15b0:	39 07       	cpc	r19, r25
    15b2:	20 f0       	brcs	.+8      	; 0x15bc <increment_index_y+0x30>
		{index_y = 0;}
    15b4:	10 92 72 28 	sts	0x2872, r1
    15b8:	10 92 73 28 	sts	0x2873, r1
    
    frame_num = index_y*x_num + index_x;	
    15bc:	20 91 72 28 	lds	r18, 0x2872
    15c0:	30 91 73 28 	lds	r19, 0x2873
    15c4:	40 91 ce 26 	lds	r20, 0x26CE
    15c8:	50 91 cf 26 	lds	r21, 0x26CF
    15cc:	80 91 27 27 	lds	r24, 0x2727
    15d0:	90 91 28 27 	lds	r25, 0x2728
    15d4:	bc 01       	movw	r22, r24
    15d6:	26 9f       	mul	r18, r22
    15d8:	c0 01       	movw	r24, r0
    15da:	27 9f       	mul	r18, r23
    15dc:	90 0d       	add	r25, r0
    15de:	36 9f       	mul	r19, r22
    15e0:	90 0d       	add	r25, r0
    15e2:	11 24       	eor	r1, r1
    15e4:	84 0f       	add	r24, r20
    15e6:	95 1f       	adc	r25, r21
    15e8:	80 93 04 24 	sts	0x2404, r24
    15ec:	90 93 05 24 	sts	0x2405, r25
	
    if (x_gt_y == 0) display_flag++;
    15f0:	80 91 ff 23 	lds	r24, 0x23FF
    15f4:	88 23       	and	r24, r24
    15f6:	29 f4       	brne	.+10     	; 0x1602 <increment_index_y+0x76>
    15f8:	80 91 fe 23 	lds	r24, 0x23FE
    15fc:	8f 5f       	subi	r24, 0xFF	; 255
    15fe:	80 93 fe 23 	sts	0x23FE, r24
    1602:	08 95       	ret

00001604 <decrement_index_x>:
}


void decrement_index_x(void) {
	
    if (index_x <= 0)    //just to be safe, use less than
    1604:	80 91 ce 26 	lds	r24, 0x26CE
    1608:	90 91 cf 26 	lds	r25, 0x26CF
    160c:	89 2b       	or	r24, r25
    160e:	29 f4       	brne	.+10     	; 0x161a <decrement_index_x+0x16>
    {index_x = x_num - 1;}    //but these are unsigned
    1610:	80 91 27 27 	lds	r24, 0x2727
    1614:	90 91 28 27 	lds	r25, 0x2728
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <decrement_index_x+0x1e>
    else
    {index_x--;}
    161a:	80 91 ce 26 	lds	r24, 0x26CE
    161e:	90 91 cf 26 	lds	r25, 0x26CF
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	80 93 ce 26 	sts	0x26CE, r24
    1628:	90 93 cf 26 	sts	0x26CF, r25
    
    frame_num = index_y*x_num + index_x;	
    162c:	20 91 72 28 	lds	r18, 0x2872
    1630:	30 91 73 28 	lds	r19, 0x2873
    1634:	40 91 ce 26 	lds	r20, 0x26CE
    1638:	50 91 cf 26 	lds	r21, 0x26CF
    163c:	80 91 27 27 	lds	r24, 0x2727
    1640:	90 91 28 27 	lds	r25, 0x2728
    1644:	bc 01       	movw	r22, r24
    1646:	26 9f       	mul	r18, r22
    1648:	c0 01       	movw	r24, r0
    164a:	27 9f       	mul	r18, r23
    164c:	90 0d       	add	r25, r0
    164e:	36 9f       	mul	r19, r22
    1650:	90 0d       	add	r25, r0
    1652:	11 24       	eor	r1, r1
    1654:	84 0f       	add	r24, r20
    1656:	95 1f       	adc	r25, r21
    1658:	80 93 04 24 	sts	0x2404, r24
    165c:	90 93 05 24 	sts	0x2405, r25
	
    if (x_gt_y) display_flag++;
    1660:	80 91 ff 23 	lds	r24, 0x23FF
    1664:	88 23       	and	r24, r24
    1666:	29 f0       	breq	.+10     	; 0x1672 <decrement_index_x+0x6e>
    1668:	80 91 fe 23 	lds	r24, 0x23FE
    166c:	8f 5f       	subi	r24, 0xFF	; 255
    166e:	80 93 fe 23 	sts	0x23FE, r24
    1672:	08 95       	ret

00001674 <decrement_index_y>:
}


void decrement_index_y(void) {
    if (index_y <= 0)    //just to be safe, use less than
    1674:	80 91 72 28 	lds	r24, 0x2872
    1678:	90 91 73 28 	lds	r25, 0x2873
    167c:	89 2b       	or	r24, r25
    167e:	29 f4       	brne	.+10     	; 0x168a <decrement_index_y+0x16>
    {index_y = y_num - 1;}    //but these are unsigned
    1680:	80 91 c6 24 	lds	r24, 0x24C6
    1684:	90 91 c7 24 	lds	r25, 0x24C7
    1688:	04 c0       	rjmp	.+8      	; 0x1692 <decrement_index_y+0x1e>
    else
    {index_y--;}
    168a:	80 91 72 28 	lds	r24, 0x2872
    168e:	90 91 73 28 	lds	r25, 0x2873
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	80 93 72 28 	sts	0x2872, r24
    1698:	90 93 73 28 	sts	0x2873, r25
    
    frame_num = index_y*x_num + index_x;
    169c:	20 91 72 28 	lds	r18, 0x2872
    16a0:	30 91 73 28 	lds	r19, 0x2873
    16a4:	40 91 ce 26 	lds	r20, 0x26CE
    16a8:	50 91 cf 26 	lds	r21, 0x26CF
    16ac:	80 91 27 27 	lds	r24, 0x2727
    16b0:	90 91 28 27 	lds	r25, 0x2728
    16b4:	bc 01       	movw	r22, r24
    16b6:	26 9f       	mul	r18, r22
    16b8:	c0 01       	movw	r24, r0
    16ba:	27 9f       	mul	r18, r23
    16bc:	90 0d       	add	r25, r0
    16be:	36 9f       	mul	r19, r22
    16c0:	90 0d       	add	r25, r0
    16c2:	11 24       	eor	r1, r1
    16c4:	84 0f       	add	r24, r20
    16c6:	95 1f       	adc	r25, r21
    16c8:	80 93 04 24 	sts	0x2404, r24
    16cc:	90 93 05 24 	sts	0x2405, r25
	
    if (x_gt_y == 0) display_flag++;
    16d0:	80 91 ff 23 	lds	r24, 0x23FF
    16d4:	88 23       	and	r24, r24
    16d6:	29 f4       	brne	.+10     	; 0x16e2 <decrement_index_y+0x6e>
    16d8:	80 91 fe 23 	lds	r24, 0x23FE
    16dc:	8f 5f       	subi	r24, 0xFF	; 255
    16de:	80 93 fe 23 	sts	0x23FE, r24
    16e2:	08 95       	ret

000016e4 <set_default_func>:

void set_default_func(uint8_t func_channel) {
    uint16_t funcCnt;
	
    
    switch (func_channel) {
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	21 f0       	breq	.+8      	; 0x16f0 <set_default_func+0xc>
    16e8:	82 30       	cpi	r24, 0x02	; 2
    16ea:	09 f0       	breq	.+2      	; 0x16ee <set_default_func+0xa>
    16ec:	65 c0       	rjmp	.+202    	; 0x17b8 <set_default_func+0xd4>
    16ee:	32 c0       	rjmp	.+100    	; 0x1754 <set_default_func+0x70>
        case 1:
            if (quiet_mode_on == 0)
    16f0:	80 91 b3 20 	lds	r24, 0x20B3
    16f4:	88 23       	and	r24, r24
    16f6:	21 f4       	brne	.+8      	; 0x1700 <set_default_func+0x1c>
                xputs(PSTR("Setting default function for X.\n"));
    16f8:	8c e5       	ldi	r24, 0x5C	; 92
    16fa:	97 e0       	ldi	r25, 0x07	; 7
    16fc:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
            
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            func_ID_X = 0;
    1700:	10 92 0d 24 	sts	0x240D, r1
    1704:	10 92 0e 24 	sts	0x240E, r1
            funcSize_x = FUNCTION_LENGTH;
    1708:	84 e6       	ldi	r24, 0x64	; 100
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	a0 e0       	ldi	r26, 0x00	; 0
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	80 93 ab 20 	sts	0x20AB, r24
    1714:	90 93 ac 20 	sts	0x20AC, r25
    1718:	a0 93 ad 20 	sts	0x20AD, r26
    171c:	b0 93 ae 20 	sts	0x20AE, r27
    1720:	e9 e2       	ldi	r30, 0x29	; 41
    1722:	f7 e2       	ldi	r31, 0x27	; 39
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
				{ function_X[funcCnt] = 10; }
    1724:	8a e0       	ldi	r24, 0x0A	; 10
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	81 93       	st	Z+, r24
    172a:	91 93       	st	Z+, r25
                xputs(PSTR("Setting default function for X.\n"));
            
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            func_ID_X = 0;
            funcSize_x = FUNCTION_LENGTH;
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
    172c:	27 e2       	ldi	r18, 0x27	; 39
    172e:	e1 3f       	cpi	r30, 0xF1	; 241
    1730:	f2 07       	cpc	r31, r18
    1732:	d1 f7       	brne	.-12     	; 0x1728 <set_default_func+0x44>
				{ function_X[funcCnt] = 10; }
            func_read_index_x = 0;
    1734:	10 92 06 24 	sts	0x2406, r1
			default_func_x = 1;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	80 93 a3 20 	sts	0x20A3, r24
			num_buffer_load_x = 1;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	80 93 b4 20 	sts	0x20B4, r24
    1746:	90 93 b5 20 	sts	0x20B5, r25
			last_load_x = 0;
    174a:	10 92 11 24 	sts	0x2411, r1
    174e:	10 92 12 24 	sts	0x2412, r1
    1752:	08 95       	ret
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);//don't need to enable ISR
            break;
        case 2:
            if (quiet_mode_on == 0)
    1754:	80 91 b3 20 	lds	r24, 0x20B3
    1758:	88 23       	and	r24, r24
    175a:	21 f4       	brne	.+8      	; 0x1764 <set_default_func+0x80>
                xputs(PSTR("Setting default function for Y.\n"));
    175c:	8b e3       	ldi	r24, 0x3B	; 59
    175e:	97 e0       	ldi	r25, 0x07	; 7
    1760:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0);//disable ISR
            func_ID_Y = 0;
    1764:	10 92 0f 24 	sts	0x240F, r1
    1768:	10 92 10 24 	sts	0x2410, r1
            funcSize_y = FUNCTION_LENGTH;
    176c:	84 e6       	ldi	r24, 0x64	; 100
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a0 e0       	ldi	r26, 0x00	; 0
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	80 93 af 20 	sts	0x20AF, r24
    1778:	90 93 b0 20 	sts	0x20B0, r25
    177c:	a0 93 b1 20 	sts	0x20B1, r26
    1780:	b0 93 b2 20 	sts	0x20B2, r27
    1784:	e9 ec       	ldi	r30, 0xC9	; 201
    1786:	f4 e2       	ldi	r31, 0x24	; 36
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
            { function_Y[funcCnt] = 10; }
    1788:	8a e0       	ldi	r24, 0x0A	; 10
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	81 93       	st	Z+, r24
    178e:	91 93       	st	Z+, r25
            if (quiet_mode_on == 0)
                xputs(PSTR("Setting default function for Y.\n"));
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0);//disable ISR
            func_ID_Y = 0;
            funcSize_y = FUNCTION_LENGTH;
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
    1790:	25 e2       	ldi	r18, 0x25	; 37
    1792:	e1 39       	cpi	r30, 0x91	; 145
    1794:	f2 07       	cpc	r31, r18
    1796:	d1 f7       	brne	.-12     	; 0x178c <set_default_func+0xa8>
            { function_Y[funcCnt] = 10; }
			func_read_index_y = 0;
    1798:	10 92 07 24 	sts	0x2407, r1
			default_func_y = 1;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	80 93 a4 20 	sts	0x20A4, r24
			num_buffer_load_y = 1;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	80 93 b6 20 	sts	0x20B6, r24
    17aa:	90 93 b7 20 	sts	0x20B7, r25
			last_load_y = 0;
    17ae:	10 92 13 24 	sts	0x2413, r1
    17b2:	10 92 14 24 	sts	0x2414, r1
    17b6:	08 95       	ret
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);//don't need to enable ISR
            break;
        default:
                xputs(PSTR("Wrong function channel number.\n"));
    17b8:	8b e1       	ldi	r24, 0x1B	; 27
    17ba:	97 e0       	ldi	r25, 0x07	; 7
    17bc:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    17c0:	08 95       	ret

000017c2 <handle_message_length_63>:
//load laser trigger pattern second 63 byte data. Laer patter has 128 bytes, but since
//the value is either 0 or 1, we can combined them in 12 bytes to 
//save serial communicaiton time

void handle_message_length_63(uint8_t *msg_buffer)
{   
    17c2:	ac 01       	movw	r20, r24
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	
	 for (i = 0; i<63; i++)
	{
	laserPattern[62 + i] = msg_buffer[i];
    17c8:	f9 01       	movw	r30, r18
    17ca:	ee 55       	subi	r30, 0x5E	; 94
    17cc:	fa 4d       	sbci	r31, 0xDA	; 218
    17ce:	da 01       	movw	r26, r20
    17d0:	a2 0f       	add	r26, r18
    17d2:	b3 1f       	adc	r27, r19
    17d4:	8c 91       	ld	r24, X
    17d6:	86 af       	std	Z+62, r24	; 0x3e
    17d8:	2f 5f       	subi	r18, 0xFF	; 255
    17da:	3f 4f       	sbci	r19, 0xFF	; 255

void handle_message_length_63(uint8_t *msg_buffer)
{   
	uint8_t i;
	
	 for (i = 0; i<63; i++)
    17dc:	2f 33       	cpi	r18, 0x3F	; 63
    17de:	31 05       	cpc	r19, r1
    17e0:	99 f7       	brne	.-26     	; 0x17c8 <handle_message_length_63+0x6>
	{
	laserPattern[62 + i] = msg_buffer[i];
	}
	
	if (quiet_mode_on == 0)
    17e2:	80 91 b3 20 	lds	r24, 0x20B3
    17e6:	88 23       	and	r24, r24
    17e8:	21 f4       	brne	.+8      	; 0x17f2 <handle_message_length_63+0x30>
        xputs(PSTR("Success set the new laser pattern.\n"));
    17ea:	80 e5       	ldi	r24, 0x50	; 80
    17ec:	9b e0       	ldi	r25, 0x0B	; 11
    17ee:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    17f2:	08 95       	ret

000017f4 <dump_mat>:
	
	func_buffer_size_y--;
}

//synchronize the SD.mat from SD card to PC
void dump_mat(void) {
    17f4:	a4 e3       	ldi	r26, 0x34	; 52
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e0 e0       	ldi	r30, 0x00	; 0
    17fa:	fc e0       	ldi	r31, 0x0C	; 12
    17fc:	0c 94 8f 4d 	jmp	0x9b1e	; 0x9b1e <__prologue_saves__+0x2>
    uint8_t res;
    uint16_t cnt;
    uint8_t matBuff[50];
    
    // try to read in the SD.mat filfil
    res = f_open(&file4, SDInfo, FA_OPEN_EXISTING | FA_READ);
    1800:	8d e0       	ldi	r24, 0x0D	; 13
    1802:	97 e2       	ldi	r25, 0x27	; 39
    1804:	68 eb       	ldi	r22, 0xB8	; 184
    1806:	70 e2       	ldi	r23, 0x20	; 32
    1808:	41 e0       	ldi	r20, 0x01	; 1
    180a:	0e 94 91 40 	call	0x8122	; 0x8122 <f_open>
    if (res == FR_OK) {
    180e:	88 23       	and	r24, r24
    1810:	09 f0       	breq	.+2      	; 0x1814 <dump_mat+0x20>
    1812:	ad c0       	rjmp	.+346    	; 0x196e <dump_mat+0x17a>
        // looks good
        iteration = file4.fsize/50;
    1814:	80 90 17 27 	lds	r8, 0x2717
    1818:	70 91 18 27 	lds	r23, 0x2718
    181c:	68 2d       	mov	r22, r8
    181e:	80 91 19 27 	lds	r24, 0x2719
    1822:	90 91 1a 27 	lds	r25, 0x271A
    1826:	22 e3       	ldi	r18, 0x32	; 50
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    1832:	79 01       	movw	r14, r18
    1834:	8a 01       	movw	r16, r20
    1836:	99 24       	eor	r9, r9
    1838:	93 94       	inc	r9
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
            offset = (b1 -1)*50;
    183a:	22 e3       	ldi	r18, 0x32	; 50
    183c:	32 2e       	mov	r3, r18
            
            res = f_lseek(&file4, offset);
            if ((res == FR_OK) && (file4.fptr == offset)) {
                res = f_read(&file4, matBuff, 50, &cnt);
    183e:	93 e0       	ldi	r25, 0x03	; 3
    1840:	69 2e       	mov	r6, r25
    1842:	71 2c       	mov	r7, r1
    1844:	6c 0e       	add	r6, r28
    1846:	7d 1e       	adc	r7, r29
    1848:	2e 01       	movw	r4, r28
    184a:	08 94       	sec
    184c:	41 1c       	adc	r4, r1
    184e:	51 1c       	adc	r5, r1
    1850:	36 c0       	rjmp	.+108    	; 0x18be <dump_mat+0xca>
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
            offset = (b1 -1)*50;
    1852:	93 9c       	mul	r9, r3
    1854:	c0 01       	movw	r24, r0
    1856:	11 24       	eor	r1, r1
    1858:	c2 97       	sbiw	r24, 0x32	; 50
    185a:	5c 01       	movw	r10, r24
    185c:	cc 24       	eor	r12, r12
    185e:	b7 fc       	sbrc	r11, 7
    1860:	c0 94       	com	r12
    1862:	dc 2c       	mov	r13, r12
            
            res = f_lseek(&file4, offset);
    1864:	8d e0       	ldi	r24, 0x0D	; 13
    1866:	97 e2       	ldi	r25, 0x27	; 39
    1868:	b6 01       	movw	r22, r12
    186a:	a5 01       	movw	r20, r10
    186c:	0e 94 31 3c 	call	0x7862	; 0x7862 <f_lseek>
            if ((res == FR_OK) && (file4.fptr == offset)) {
    1870:	88 23       	and	r24, r24
    1872:	01 f5       	brne	.+64     	; 0x18b4 <dump_mat+0xc0>
    1874:	80 91 13 27 	lds	r24, 0x2713
    1878:	90 91 14 27 	lds	r25, 0x2714
    187c:	a0 91 15 27 	lds	r26, 0x2715
    1880:	b0 91 16 27 	lds	r27, 0x2716
    1884:	8a 15       	cp	r24, r10
    1886:	9b 05       	cpc	r25, r11
    1888:	ac 05       	cpc	r26, r12
    188a:	bd 05       	cpc	r27, r13
    188c:	99 f4       	brne	.+38     	; 0x18b4 <dump_mat+0xc0>
                res = f_read(&file4, matBuff, 50, &cnt);
    188e:	8d e0       	ldi	r24, 0x0D	; 13
    1890:	97 e2       	ldi	r25, 0x27	; 39
    1892:	b3 01       	movw	r22, r6
    1894:	42 e3       	ldi	r20, 0x32	; 50
    1896:	50 e0       	ldi	r21, 0x00	; 0
    1898:	92 01       	movw	r18, r4
    189a:	0e 94 a3 3e 	call	0x7d46	; 0x7d46 <f_read>
                if ((res == FR_OK) && (cnt == 50)) {
    189e:	88 23       	and	r24, r24
    18a0:	69 f4       	brne	.+26     	; 0x18bc <dump_mat+0xc8>
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	9a 81       	ldd	r25, Y+2	; 0x02
    18a6:	c2 97       	sbiw	r24, 0x32	; 50
    18a8:	49 f4       	brne	.+18     	; 0x18bc <dump_mat+0xc8>
                    send_Tx_buffer(matBuff, 50);
    18aa:	c3 01       	movw	r24, r6
    18ac:	62 e3       	ldi	r22, 0x32	; 50
    18ae:	0e 94 48 37 	call	0x6e90	; 0x6e90 <send_Tx_buffer>
    18b2:	04 c0       	rjmp	.+8      	; 0x18bc <dump_mat+0xc8>
                }
            }else 
                xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
    18b4:	87 e9       	ldi	r24, 0x97	; 151
    18b6:	92 e0       	ldi	r25, 0x02	; 2
    18b8:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
        iteration = file4.fsize/50;
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
    18bc:	93 94       	inc	r9
    18be:	89 2d       	mov	r24, r9
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	a0 e0       	ldi	r26, 0x00	; 0
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e8 16       	cp	r14, r24
    18c8:	f9 06       	cpc	r15, r25
    18ca:	0a 07       	cpc	r16, r26
    18cc:	1b 07       	cpc	r17, r27
    18ce:	08 f0       	brcs	.+2      	; 0x18d2 <dump_mat+0xde>
    18d0:	c0 cf       	rjmp	.-128    	; 0x1852 <dump_mat+0x5e>
                }
            }else 
                xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
        }
        //send the remained data
        offset = (b1-1)*50;
    18d2:	82 e3       	ldi	r24, 0x32	; 50
    18d4:	98 9e       	mul	r9, r24
    18d6:	c0 01       	movw	r24, r0
    18d8:	11 24       	eor	r1, r1
    18da:	c2 97       	sbiw	r24, 0x32	; 50
    18dc:	5c 01       	movw	r10, r24
    18de:	cc 24       	eor	r12, r12
    18e0:	b7 fc       	sbrc	r11, 7
    18e2:	c0 94       	com	r12
    18e4:	dc 2c       	mov	r13, r12
        res=f_lseek(&file4, offset);
    18e6:	8d e0       	ldi	r24, 0x0D	; 13
    18e8:	97 e2       	ldi	r25, 0x27	; 39
    18ea:	b6 01       	movw	r22, r12
    18ec:	a5 01       	movw	r20, r10
    18ee:	0e 94 31 3c 	call	0x7862	; 0x7862 <f_lseek>
        if ((res == FR_OK) && (file4.fptr == offset)) {
    18f2:	88 23       	and	r24, r24
    18f4:	99 f5       	brne	.+102    	; 0x195c <dump_mat+0x168>
    18f6:	80 91 13 27 	lds	r24, 0x2713
    18fa:	90 91 14 27 	lds	r25, 0x2714
    18fe:	a0 91 15 27 	lds	r26, 0x2715
    1902:	b0 91 16 27 	lds	r27, 0x2716
    1906:	8a 15       	cp	r24, r10
    1908:	9b 05       	cpc	r25, r11
    190a:	ac 05       	cpc	r26, r12
    190c:	bd 05       	cpc	r27, r13
    190e:	31 f5       	brne	.+76     	; 0x195c <dump_mat+0x168>
    // try to read in the SD.mat filfil
    res = f_open(&file4, SDInfo, FA_OPEN_EXISTING | FA_READ);
    if (res == FR_OK) {
        // looks good
        iteration = file4.fsize/50;
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
    1910:	c8 01       	movw	r24, r16
    1912:	b7 01       	movw	r22, r14
    1914:	22 e3       	ldi	r18, 0x32	; 50
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    1920:	d8 2c       	mov	r13, r8
    1922:	d6 1a       	sub	r13, r22
        }
        //send the remained data
        offset = (b1-1)*50;
        res=f_lseek(&file4, offset);
        if ((res == FR_OK) && (file4.fptr == offset)) {
            res = f_read(&file4, matBuff, fileRemain, &cnt);
    1924:	0d 2d       	mov	r16, r13
    1926:	10 e0       	ldi	r17, 0x00	; 0
    1928:	83 e0       	ldi	r24, 0x03	; 3
    192a:	e8 2e       	mov	r14, r24
    192c:	f1 2c       	mov	r15, r1
    192e:	ec 0e       	add	r14, r28
    1930:	fd 1e       	adc	r15, r29
    1932:	8d e0       	ldi	r24, 0x0D	; 13
    1934:	97 e2       	ldi	r25, 0x27	; 39
    1936:	b7 01       	movw	r22, r14
    1938:	a8 01       	movw	r20, r16
    193a:	9e 01       	movw	r18, r28
    193c:	2f 5f       	subi	r18, 0xFF	; 255
    193e:	3f 4f       	sbci	r19, 0xFF	; 255
    1940:	0e 94 a3 3e 	call	0x7d46	; 0x7d46 <f_read>
            if ((res == FR_OK) && (cnt == fileRemain)) {
    1944:	88 23       	and	r24, r24
    1946:	71 f4       	brne	.+28     	; 0x1964 <dump_mat+0x170>
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	80 17       	cp	r24, r16
    194e:	91 07       	cpc	r25, r17
    1950:	49 f4       	brne	.+18     	; 0x1964 <dump_mat+0x170>
                send_Tx_buffer(matBuff, fileRemain);
    1952:	c7 01       	movw	r24, r14
    1954:	6d 2d       	mov	r22, r13
    1956:	0e 94 48 37 	call	0x6e90	; 0x6e90 <send_Tx_buffer>
    195a:	04 c0       	rjmp	.+8      	; 0x1964 <dump_mat+0x170>
            }
        }else
            xputs(PSTR("Error f_lseek in remained data.\n"));
    195c:	86 e7       	ldi	r24, 0x76	; 118
    195e:	92 e0       	ldi	r25, 0x02	; 2
    1960:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
        
        f_close(&file4);
    1964:	8d e0       	ldi	r24, 0x0D	; 13
    1966:	97 e2       	ldi	r25, 0x27	; 39
    1968:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <f_close>
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <dump_mat+0x182>
    } else 
            xputs(PSTR("Error f_open in SDInfo.mat.\n"));//end if (res == FR_OK
    196e:	89 e5       	ldi	r24, 0x59	; 89
    1970:	92 e0       	ldi	r25, 0x02	; 2
    1972:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    
}
    1976:	e4 96       	adiw	r28, 0x34	; 52
    1978:	e1 e1       	ldi	r30, 0x11	; 17
    197a:	0c 94 ab 4d 	jmp	0x9b56	; 0x9b56 <__epilogue_restores__+0x2>

0000197e <update_funcCnt_xy>:
void update_funcCnt_xy(void) {
    int16_t X_dac_val, Y_dac_val;
    int16_t temp_ADC_val;

	
	if (!func_buffer_size_x){
    197e:	80 91 0a 24 	lds	r24, 0x240A
    1982:	88 23       	and	r24, r24
    1984:	19 f4       	brne	.+6      	; 0x198c <update_funcCnt_xy+0xe>
		xputs(PSTR("Ring buffer function_x is empty\n"));
    1986:	86 ed       	ldi	r24, 0xD6	; 214
    1988:	92 e0       	ldi	r25, 0x02	; 2
    198a:	06 c0       	rjmp	.+12     	; 0x1998 <update_funcCnt_xy+0x1a>
		return;
	}
	
	if (!func_buffer_size_y){
    198c:	80 91 0b 24 	lds	r24, 0x240B
    1990:	88 23       	and	r24, r24
    1992:	29 f4       	brne	.+10     	; 0x199e <update_funcCnt_xy+0x20>
		xputs(PSTR("Ring buffer function_Y is empty\n"));
    1994:	85 eb       	ldi	r24, 0xB5	; 181
    1996:	92 e0       	ldi	r25, 0x02	; 2
    1998:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    199c:	08 95       	ret
		return;
	}
	
	//if sync_xy_func== 1, we preassume Y_mode is always equal x_mode are the same
	switch(x_mode){
    199e:	80 91 cc 26 	lds	r24, 0x26CC
    19a2:	84 30       	cpi	r24, 0x04	; 4
    19a4:	21 f0       	breq	.+8      	; 0x19ae <update_funcCnt_xy+0x30>
    19a6:	85 30       	cpi	r24, 0x05	; 5
    19a8:	09 f0       	breq	.+2      	; 0x19ac <update_funcCnt_xy+0x2e>
    19aa:	a2 c0       	rjmp	.+324    	; 0x1af0 <update_funcCnt_xy+0x172>
    19ac:	79 c0       	rjmp	.+242    	; 0x1aa0 <update_funcCnt_xy+0x122>
		case 3:
			break;			
			
		case 4:
			//only use temp_ADC_val as a temp variable, just not to create an additional one		
			temp_ADC_val = X_pos_index + function_X[func_read_index_x];
    19ae:	e0 91 06 24 	lds	r30, 0x2406
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	ee 0f       	add	r30, r30
    19b6:	ff 1f       	adc	r31, r31
    19b8:	e7 5d       	subi	r30, 0xD7	; 215
    19ba:	f8 4d       	sbci	r31, 0xD8	; 216
    19bc:	01 90       	ld	r0, Z+
    19be:	f0 81       	ld	r31, Z
    19c0:	e0 2d       	mov	r30, r0
    19c2:	80 91 1f 26 	lds	r24, 0x261F
    19c6:	90 91 20 26 	lds	r25, 0x2620
    19ca:	e8 0f       	add	r30, r24
    19cc:	f9 1f       	adc	r31, r25
    19ce:	20 91 27 27 	lds	r18, 0x2727
    19d2:	30 91 28 27 	lds	r19, 0x2728
			if (temp_ADC_val >= 0) {index_x = temp_ADC_val%x_num; }
    19d6:	f7 fd       	sbrc	r31, 7
    19d8:	09 c0       	rjmp	.+18     	; 0x19ec <update_funcCnt_xy+0x6e>
    19da:	cf 01       	movw	r24, r30
    19dc:	b9 01       	movw	r22, r18
    19de:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <__udivmodhi4>
    19e2:	80 93 ce 26 	sts	0x26CE, r24
    19e6:	90 93 cf 26 	sts	0x26CF, r25
    19ea:	10 c0       	rjmp	.+32     	; 0x1a0c <update_funcCnt_xy+0x8e>
			if (temp_ADC_val < 0) {index_x = x_num - ((abs(temp_ADC_val))%x_num) -1;} //index_x should already be smaller than x_num
    19ec:	88 27       	eor	r24, r24
    19ee:	99 27       	eor	r25, r25
    19f0:	8e 1b       	sub	r24, r30
    19f2:	9f 0b       	sbc	r25, r31
    19f4:	b9 01       	movw	r22, r18
    19f6:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <__udivmodhi4>
    19fa:	21 50       	subi	r18, 0x01	; 1
    19fc:	30 40       	sbci	r19, 0x00	; 0
    19fe:	a9 01       	movw	r20, r18
    1a00:	48 1b       	sub	r20, r24
    1a02:	59 0b       	sbc	r21, r25
    1a04:	40 93 ce 26 	sts	0x26CE, r20
    1a08:	50 93 cf 26 	sts	0x26CF, r21
			
			temp_ADC_val = (Y_pos_index + function_Y[func_read_index_y]);
    1a0c:	e0 91 07 24 	lds	r30, 0x2407
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	ee 0f       	add	r30, r30
    1a14:	ff 1f       	adc	r31, r31
    1a16:	e7 53       	subi	r30, 0x37	; 55
    1a18:	fb 4d       	sbci	r31, 0xDB	; 219
    1a1a:	01 90       	ld	r0, Z+
    1a1c:	f0 81       	ld	r31, Z
    1a1e:	e0 2d       	mov	r30, r0
    1a20:	80 91 91 25 	lds	r24, 0x2591
    1a24:	90 91 92 25 	lds	r25, 0x2592
    1a28:	e8 0f       	add	r30, r24
    1a2a:	f9 1f       	adc	r31, r25
    1a2c:	20 91 c6 24 	lds	r18, 0x24C6
    1a30:	30 91 c7 24 	lds	r19, 0x24C7
			if (temp_ADC_val >= 0) {index_y = temp_ADC_val%y_num; }
    1a34:	f7 fd       	sbrc	r31, 7
    1a36:	09 c0       	rjmp	.+18     	; 0x1a4a <update_funcCnt_xy+0xcc>
    1a38:	cf 01       	movw	r24, r30
    1a3a:	b9 01       	movw	r22, r18
    1a3c:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <__udivmodhi4>
    1a40:	80 93 72 28 	sts	0x2872, r24
    1a44:	90 93 73 28 	sts	0x2873, r25
    1a48:	10 c0       	rjmp	.+32     	; 0x1a6a <update_funcCnt_xy+0xec>
			if (temp_ADC_val < 0) {index_y = y_num - ((abs(temp_ADC_val))%y_num) - 1;} //index_y should always be smaller than y_num
    1a4a:	88 27       	eor	r24, r24
    1a4c:	99 27       	eor	r25, r25
    1a4e:	8e 1b       	sub	r24, r30
    1a50:	9f 0b       	sbc	r25, r31
    1a52:	b9 01       	movw	r22, r18
    1a54:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <__udivmodhi4>
    1a58:	21 50       	subi	r18, 0x01	; 1
    1a5a:	30 40       	sbci	r19, 0x00	; 0
    1a5c:	b9 01       	movw	r22, r18
    1a5e:	68 1b       	sub	r22, r24
    1a60:	79 0b       	sbc	r23, r25
    1a62:	60 93 72 28 	sts	0x2872, r22
    1a66:	70 93 73 28 	sts	0x2873, r23
			
			frame_num = index_y*x_num + index_x;
    1a6a:	20 91 72 28 	lds	r18, 0x2872
    1a6e:	30 91 73 28 	lds	r19, 0x2873
    1a72:	40 91 ce 26 	lds	r20, 0x26CE
    1a76:	50 91 cf 26 	lds	r21, 0x26CF
    1a7a:	80 91 27 27 	lds	r24, 0x2727
    1a7e:	90 91 28 27 	lds	r25, 0x2728
    1a82:	bc 01       	movw	r22, r24
    1a84:	26 9f       	mul	r18, r22
    1a86:	c0 01       	movw	r24, r0
    1a88:	27 9f       	mul	r18, r23
    1a8a:	90 0d       	add	r25, r0
    1a8c:	36 9f       	mul	r19, r22
    1a8e:	90 0d       	add	r25, r0
    1a90:	11 24       	eor	r1, r1
    1a92:	84 0f       	add	r24, r20
    1a94:	95 1f       	adc	r25, r21
    1a96:	80 93 04 24 	sts	0x2404, r24
    1a9a:	90 93 05 24 	sts	0x2405, r25
    1a9e:	28 c0       	rjmp	.+80     	; 0x1af0 <update_funcCnt_xy+0x172>
			break;
			
		case 5:   // in function DBG mode - show the function gen
			//3277 is converted to 1V by DAC, we amplify function value so value 100 is about 1V 
			X_dac_val = function_X[func_read_index_x]*33;
    1aa0:	e0 91 06 24 	lds	r30, 0x2406
			analogWrite(0, X_dac_val); // make it a value in the range -32767 - 32767 (-10V - 10V)
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	ee 0f       	add	r30, r30
    1aa8:	ff 1f       	adc	r31, r31
    1aaa:	e7 5d       	subi	r30, 0xD7	; 215
    1aac:	f8 4d       	sbci	r31, 0xD8	; 216
    1aae:	80 81       	ld	r24, Z
    1ab0:	91 81       	ldd	r25, Z+1	; 0x01
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	55 e0       	ldi	r21, 0x05	; 5
    1ab6:	66 0f       	add	r22, r22
    1ab8:	77 1f       	adc	r23, r23
    1aba:	5a 95       	dec	r21
    1abc:	e1 f7       	brne	.-8      	; 0x1ab6 <update_funcCnt_xy+0x138>
    1abe:	68 0f       	add	r22, r24
    1ac0:	79 1f       	adc	r23, r25
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	0e 94 2a 2b 	call	0x5654	; 0x5654 <analogWrite>
			//3277 is converted to 1V by DAC, we amplify function value so value 100 is about 1V 
			Y_dac_val = function_Y[func_read_index_y]*33;  
    1ac8:	e0 91 07 24 	lds	r30, 0x2407
			analogWrite(1, Y_dac_val); // make it a value in the range -32767 - 32767 (-10V - 10V)			
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	ee 0f       	add	r30, r30
    1ad0:	ff 1f       	adc	r31, r31
    1ad2:	e7 53       	subi	r30, 0x37	; 55
    1ad4:	fb 4d       	sbci	r31, 0xDB	; 219
    1ad6:	80 81       	ld	r24, Z
    1ad8:	91 81       	ldd	r25, Z+1	; 0x01
    1ada:	bc 01       	movw	r22, r24
    1adc:	35 e0       	ldi	r19, 0x05	; 5
    1ade:	66 0f       	add	r22, r22
    1ae0:	77 1f       	adc	r23, r23
    1ae2:	3a 95       	dec	r19
    1ae4:	e1 f7       	brne	.-8      	; 0x1ade <update_funcCnt_xy+0x160>
    1ae6:	68 0f       	add	r22, r24
    1ae8:	79 1f       	adc	r23, r25
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	0e 94 2a 2b 	call	0x5654	; 0x5654 <analogWrite>
			break;
    }
	
	
    func_read_index_x++; 
    1af0:	80 91 06 24 	lds	r24, 0x2406
    1af4:	8f 5f       	subi	r24, 0xFF	; 255
    1af6:	80 93 06 24 	sts	0x2406, r24
	if (func_read_index_x >= BUFFER_LENGTH/2)
    1afa:	80 91 06 24 	lds	r24, 0x2406
    1afe:	84 36       	cpi	r24, 0x64	; 100
    1b00:	10 f0       	brcs	.+4      	; 0x1b06 <update_funcCnt_xy+0x188>
		func_read_index_x = 0;
    1b02:	10 92 06 24 	sts	0x2406, r1
		
    func_buffer_size_x--;
    1b06:	80 91 0a 24 	lds	r24, 0x240A
    1b0a:	81 50       	subi	r24, 0x01	; 1
    1b0c:	80 93 0a 24 	sts	0x240A, r24
	
	func_read_index_y++; 
    1b10:	80 91 07 24 	lds	r24, 0x2407
    1b14:	8f 5f       	subi	r24, 0xFF	; 255
    1b16:	80 93 07 24 	sts	0x2407, r24
	if (func_read_index_y >= BUFFER_LENGTH/2)
    1b1a:	80 91 07 24 	lds	r24, 0x2407
    1b1e:	84 36       	cpi	r24, 0x64	; 100
    1b20:	10 f0       	brcs	.+4      	; 0x1b26 <update_funcCnt_xy+0x1a8>
		func_read_index_y = 0;
    1b22:	10 92 07 24 	sts	0x2407, r1
	
	func_buffer_size_y--;
    1b26:	80 91 0b 24 	lds	r24, 0x240B
    1b2a:	81 50       	subi	r24, 0x01	; 1
    1b2c:	80 93 0b 24 	sts	0x240B, r24
    1b30:	08 95       	ret

00001b32 <update_funcCnt_y>:
void update_funcCnt_y(void) {
    int16_t Y_dac_val;
    int16_t temp_ADC_val;

	
	if (!func_buffer_size_y){
    1b32:	80 91 0b 24 	lds	r24, 0x240B
    1b36:	88 23       	and	r24, r24
    1b38:	29 f4       	brne	.+10     	; 0x1b44 <update_funcCnt_y+0x12>
		xputs(PSTR("Ring buffer function_Y is empty\n"));
    1b3a:	8c e8       	ldi	r24, 0x8C	; 140
    1b3c:	93 e0       	ldi	r25, 0x03	; 3
    1b3e:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    1b42:	08 95       	ret
		return;
		}
    
	switch(y_mode){
    1b44:	80 91 0a 27 	lds	r24, 0x270A
    1b48:	84 30       	cpi	r24, 0x04	; 4
    1b4a:	21 f0       	breq	.+8      	; 0x1b54 <update_funcCnt_y+0x22>
    1b4c:	85 30       	cpi	r24, 0x05	; 5
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <update_funcCnt_y+0x20>
    1b50:	5f c0       	rjmp	.+190    	; 0x1c10 <update_funcCnt_y+0xde>
    1b52:	4a c0       	rjmp	.+148    	; 0x1be8 <update_funcCnt_y+0xb6>
		case 3:
			break;
			
        case 4:
            //only use temp_ADC_val as a temp variable, just not to create an additional one
            temp_ADC_val = (Y_pos_index + function_Y[func_read_index_y]);
    1b54:	e0 91 07 24 	lds	r30, 0x2407
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	ee 0f       	add	r30, r30
    1b5c:	ff 1f       	adc	r31, r31
    1b5e:	e7 53       	subi	r30, 0x37	; 55
    1b60:	fb 4d       	sbci	r31, 0xDB	; 219
    1b62:	01 90       	ld	r0, Z+
    1b64:	f0 81       	ld	r31, Z
    1b66:	e0 2d       	mov	r30, r0
    1b68:	80 91 91 25 	lds	r24, 0x2591
    1b6c:	90 91 92 25 	lds	r25, 0x2592
    1b70:	e8 0f       	add	r30, r24
    1b72:	f9 1f       	adc	r31, r25
    1b74:	20 91 c6 24 	lds	r18, 0x24C6
    1b78:	30 91 c7 24 	lds	r19, 0x24C7
            if (temp_ADC_val >= 0) {index_y = temp_ADC_val%y_num; }
    1b7c:	f7 fd       	sbrc	r31, 7
    1b7e:	09 c0       	rjmp	.+18     	; 0x1b92 <update_funcCnt_y+0x60>
    1b80:	cf 01       	movw	r24, r30
    1b82:	b9 01       	movw	r22, r18
    1b84:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <__udivmodhi4>
    1b88:	80 93 72 28 	sts	0x2872, r24
    1b8c:	90 93 73 28 	sts	0x2873, r25
    1b90:	10 c0       	rjmp	.+32     	; 0x1bb2 <update_funcCnt_y+0x80>
            if (temp_ADC_val < 0) {index_y = y_num - ((abs(temp_ADC_val))%y_num) - 1;  } //index_y should always smaller than y_num
    1b92:	88 27       	eor	r24, r24
    1b94:	99 27       	eor	r25, r25
    1b96:	8e 1b       	sub	r24, r30
    1b98:	9f 0b       	sbc	r25, r31
    1b9a:	b9 01       	movw	r22, r18
    1b9c:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <__udivmodhi4>
    1ba0:	21 50       	subi	r18, 0x01	; 1
    1ba2:	30 40       	sbci	r19, 0x00	; 0
    1ba4:	a9 01       	movw	r20, r18
    1ba6:	48 1b       	sub	r20, r24
    1ba8:	59 0b       	sbc	r21, r25
    1baa:	40 93 72 28 	sts	0x2872, r20
    1bae:	50 93 73 28 	sts	0x2873, r21
            frame_num = index_y*x_num + index_x;		
    1bb2:	20 91 72 28 	lds	r18, 0x2872
    1bb6:	30 91 73 28 	lds	r19, 0x2873
    1bba:	40 91 ce 26 	lds	r20, 0x26CE
    1bbe:	50 91 cf 26 	lds	r21, 0x26CF
    1bc2:	80 91 27 27 	lds	r24, 0x2727
    1bc6:	90 91 28 27 	lds	r25, 0x2728
    1bca:	bc 01       	movw	r22, r24
    1bcc:	26 9f       	mul	r18, r22
    1bce:	c0 01       	movw	r24, r0
    1bd0:	27 9f       	mul	r18, r23
    1bd2:	90 0d       	add	r25, r0
    1bd4:	36 9f       	mul	r19, r22
    1bd6:	90 0d       	add	r25, r0
    1bd8:	11 24       	eor	r1, r1
    1bda:	84 0f       	add	r24, r20
    1bdc:	95 1f       	adc	r25, r21
    1bde:	80 93 04 24 	sts	0x2404, r24
    1be2:	90 93 05 24 	sts	0x2405, r25
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <update_funcCnt_y+0xde>
            break;
	
		case 5:   // in function DBG mode - show the function gen
			//3277 is converted to 1V by DAC, we amplify function value so value 100 is about 1V 
			Y_dac_val = function_Y[func_read_index_y]*33;  
    1be8:	e0 91 07 24 	lds	r30, 0x2407
			analogWrite(1, Y_dac_val); // make it a value in the range -32767 - 32767 (-10V - 10V)
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	ee 0f       	add	r30, r30
    1bf0:	ff 1f       	adc	r31, r31
    1bf2:	e7 53       	subi	r30, 0x37	; 55
    1bf4:	fb 4d       	sbci	r31, 0xDB	; 219
    1bf6:	80 81       	ld	r24, Z
    1bf8:	91 81       	ldd	r25, Z+1	; 0x01
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	b5 e0       	ldi	r27, 0x05	; 5
    1bfe:	66 0f       	add	r22, r22
    1c00:	77 1f       	adc	r23, r23
    1c02:	ba 95       	dec	r27
    1c04:	e1 f7       	brne	.-8      	; 0x1bfe <update_funcCnt_y+0xcc>
    1c06:	68 0f       	add	r22, r24
    1c08:	79 1f       	adc	r23, r25
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	0e 94 2a 2b 	call	0x5654	; 0x5654 <analogWrite>
			break;
		
    }
	
	func_read_index_y++; 
    1c10:	80 91 07 24 	lds	r24, 0x2407
    1c14:	8f 5f       	subi	r24, 0xFF	; 255
    1c16:	80 93 07 24 	sts	0x2407, r24
	if (func_read_index_y >= BUFFER_LENGTH/2)
    1c1a:	80 91 07 24 	lds	r24, 0x2407
    1c1e:	84 36       	cpi	r24, 0x64	; 100
    1c20:	10 f0       	brcs	.+4      	; 0x1c26 <update_funcCnt_y+0xf4>
		func_read_index_y = 0;
    1c22:	10 92 07 24 	sts	0x2407, r1
	func_buffer_size_y--;
    1c26:	80 91 0b 24 	lds	r24, 0x240B
    1c2a:	81 50       	subi	r24, 0x01	; 1
    1c2c:	80 93 0b 24 	sts	0x240B, r24
    1c30:	08 95       	ret

00001c32 <update_funcCnt_x>:
    int16_t X_dac_val;
    int16_t temp_ADC_val;


	
	if (!func_buffer_size_x){
    1c32:	80 91 0a 24 	lds	r24, 0x240A
    1c36:	88 23       	and	r24, r24
    1c38:	29 f4       	brne	.+10     	; 0x1c44 <update_funcCnt_x+0x12>
		xputs(PSTR("Ring buffer function_x is empty\n"));
    1c3a:	85 e3       	ldi	r24, 0x35	; 53
    1c3c:	94 e0       	ldi	r25, 0x04	; 4
    1c3e:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    1c42:	08 95       	ret
		return;
	}
	
	
	//Move mode 4 and 5 from update_display() to here since the update frequency can be changed
	switch(x_mode){
    1c44:	80 91 cc 26 	lds	r24, 0x26CC
    1c48:	84 30       	cpi	r24, 0x04	; 4
    1c4a:	21 f0       	breq	.+8      	; 0x1c54 <update_funcCnt_x+0x22>
    1c4c:	85 30       	cpi	r24, 0x05	; 5
    1c4e:	09 f0       	breq	.+2      	; 0x1c52 <update_funcCnt_x+0x20>
    1c50:	5f c0       	rjmp	.+190    	; 0x1d10 <update_funcCnt_x+0xde>
    1c52:	4a c0       	rjmp	.+148    	; 0x1ce8 <update_funcCnt_x+0xb6>
		case 3:
			break;
			
		case 4:
			//only use temp_ADC_val as a temp variable, just not to create an additional one		
			temp_ADC_val = X_pos_index + function_X[func_read_index_x];
    1c54:	e0 91 06 24 	lds	r30, 0x2406
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	ee 0f       	add	r30, r30
    1c5c:	ff 1f       	adc	r31, r31
    1c5e:	e7 5d       	subi	r30, 0xD7	; 215
    1c60:	f8 4d       	sbci	r31, 0xD8	; 216
    1c62:	01 90       	ld	r0, Z+
    1c64:	f0 81       	ld	r31, Z
    1c66:	e0 2d       	mov	r30, r0
    1c68:	80 91 1f 26 	lds	r24, 0x261F
    1c6c:	90 91 20 26 	lds	r25, 0x2620
    1c70:	e8 0f       	add	r30, r24
    1c72:	f9 1f       	adc	r31, r25
    1c74:	20 91 27 27 	lds	r18, 0x2727
    1c78:	30 91 28 27 	lds	r19, 0x2728
			if (temp_ADC_val >= 0) {index_x = temp_ADC_val%x_num; }
    1c7c:	f7 fd       	sbrc	r31, 7
    1c7e:	09 c0       	rjmp	.+18     	; 0x1c92 <update_funcCnt_x+0x60>
    1c80:	cf 01       	movw	r24, r30
    1c82:	b9 01       	movw	r22, r18
    1c84:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <__udivmodhi4>
    1c88:	80 93 ce 26 	sts	0x26CE, r24
    1c8c:	90 93 cf 26 	sts	0x26CF, r25
    1c90:	10 c0       	rjmp	.+32     	; 0x1cb2 <update_funcCnt_x+0x80>
			if (temp_ADC_val < 0) {index_x = x_num - ((abs(temp_ADC_val))%x_num) -1;} //index_x should already smaller than x_num
    1c92:	88 27       	eor	r24, r24
    1c94:	99 27       	eor	r25, r25
    1c96:	8e 1b       	sub	r24, r30
    1c98:	9f 0b       	sbc	r25, r31
    1c9a:	b9 01       	movw	r22, r18
    1c9c:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <__udivmodhi4>
    1ca0:	21 50       	subi	r18, 0x01	; 1
    1ca2:	30 40       	sbci	r19, 0x00	; 0
    1ca4:	a9 01       	movw	r20, r18
    1ca6:	48 1b       	sub	r20, r24
    1ca8:	59 0b       	sbc	r21, r25
    1caa:	40 93 ce 26 	sts	0x26CE, r20
    1cae:	50 93 cf 26 	sts	0x26CF, r21
			frame_num = index_y*x_num + index_x;
    1cb2:	20 91 72 28 	lds	r18, 0x2872
    1cb6:	30 91 73 28 	lds	r19, 0x2873
    1cba:	40 91 ce 26 	lds	r20, 0x26CE
    1cbe:	50 91 cf 26 	lds	r21, 0x26CF
    1cc2:	80 91 27 27 	lds	r24, 0x2727
    1cc6:	90 91 28 27 	lds	r25, 0x2728
    1cca:	bc 01       	movw	r22, r24
    1ccc:	26 9f       	mul	r18, r22
    1cce:	c0 01       	movw	r24, r0
    1cd0:	27 9f       	mul	r18, r23
    1cd2:	90 0d       	add	r25, r0
    1cd4:	36 9f       	mul	r19, r22
    1cd6:	90 0d       	add	r25, r0
    1cd8:	11 24       	eor	r1, r1
    1cda:	84 0f       	add	r24, r20
    1cdc:	95 1f       	adc	r25, r21
    1cde:	80 93 04 24 	sts	0x2404, r24
    1ce2:	90 93 05 24 	sts	0x2405, r25
    1ce6:	14 c0       	rjmp	.+40     	; 0x1d10 <update_funcCnt_x+0xde>
			break;
			
		case 5:   // in function DBG mode - show the function gen
			//3277 is converted to 1V by DAC, we amplify function value so value 100 is about 1V 
			X_dac_val = function_X[func_read_index_x]*33;
    1ce8:	e0 91 06 24 	lds	r30, 0x2406
			analogWrite(0, X_dac_val); // make it a value in the range -32767 - 32767 (-10V - 10V)
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	ee 0f       	add	r30, r30
    1cf0:	ff 1f       	adc	r31, r31
    1cf2:	e7 5d       	subi	r30, 0xD7	; 215
    1cf4:	f8 4d       	sbci	r31, 0xD8	; 216
    1cf6:	80 81       	ld	r24, Z
    1cf8:	91 81       	ldd	r25, Z+1	; 0x01
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	25 e0       	ldi	r18, 0x05	; 5
    1cfe:	66 0f       	add	r22, r22
    1d00:	77 1f       	adc	r23, r23
    1d02:	2a 95       	dec	r18
    1d04:	e1 f7       	brne	.-8      	; 0x1cfe <update_funcCnt_x+0xcc>
    1d06:	68 0f       	add	r22, r24
    1d08:	79 1f       	adc	r23, r25
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	0e 94 2a 2b 	call	0x5654	; 0x5654 <analogWrite>
			break;
		
    }
	
	
    func_read_index_x++; 
    1d10:	80 91 06 24 	lds	r24, 0x2406
    1d14:	8f 5f       	subi	r24, 0xFF	; 255
    1d16:	80 93 06 24 	sts	0x2406, r24
	if (func_read_index_x >= BUFFER_LENGTH/2)
    1d1a:	80 91 06 24 	lds	r24, 0x2406
    1d1e:	84 36       	cpi	r24, 0x64	; 100
    1d20:	10 f0       	brcs	.+4      	; 0x1d26 <update_funcCnt_x+0xf4>
		func_read_index_x = 0;
    1d22:	10 92 06 24 	sts	0x2406, r1
		
    func_buffer_size_x--;
    1d26:	80 91 0a 24 	lds	r24, 0x240A
    1d2a:	81 50       	subi	r24, 0x01	; 1
    1d2c:	80 93 0a 24 	sts	0x240A, r24
    1d30:	08 95       	ret

00001d32 <__vector_100>:
}

//external trigger mode for Int3 to start playing pattern

ISR(PORTK_INT0_vect)
{
    1d32:	1f 92       	push	r1
    1d34:	0f 92       	push	r0
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	0f 92       	push	r0
    1d3a:	08 b6       	in	r0, 0x38	; 56
    1d3c:	0f 92       	push	r0
    1d3e:	09 b6       	in	r0, 0x39	; 57
    1d40:	0f 92       	push	r0
    1d42:	0b b6       	in	r0, 0x3b	; 59
    1d44:	0f 92       	push	r0
    1d46:	11 24       	eor	r1, r1
    1d48:	18 be       	out	0x38, r1	; 56
    1d4a:	19 be       	out	0x39, r1	; 57
    1d4c:	1b be       	out	0x3b, r1	; 59
    1d4e:	0f 93       	push	r16
    1d50:	2f 93       	push	r18
    1d52:	3f 93       	push	r19
    1d54:	4f 93       	push	r20
    1d56:	5f 93       	push	r21
    1d58:	6f 93       	push	r22
    1d5a:	7f 93       	push	r23
    1d5c:	8f 93       	push	r24
    1d5e:	9f 93       	push	r25
    1d60:	af 93       	push	r26
    1d62:	bf 93       	push	r27
    1d64:	ef 93       	push	r30
    1d66:	ff 93       	push	r31
//set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
func_read_index_x = 0;
    1d68:	10 92 06 24 	sts	0x2406, r1
func_read_index_y = 0;
    1d6c:	10 92 07 24 	sts	0x2407, r1

next_block_x = 1;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	80 93 a1 20 	sts	0x20A1, r24
next_block_y = 1;
    1d76:	80 93 a2 20 	sts	0x20A2, r24

Stop = 0;
    1d7a:	10 92 9c 20 	sts	0x209C, r1
display_flag = 0;  //clear the display flag
    1d7e:	10 92 fe 23 	sts	0x23FE, r1
Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    1d82:	83 ee       	ldi	r24, 0xE3	; 227
    1d84:	99 e1       	ldi	r25, 0x19	; 25
    1d86:	4e e4       	ldi	r20, 0x4E	; 78
    1d88:	50 e0       	ldi	r21, 0x00	; 0
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	70 e0       	ldi	r23, 0x00	; 0
    1d8e:	21 e0       	ldi	r18, 0x01	; 1
    1d90:	01 e0       	ldi	r16, 0x01	; 1
    1d92:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0); //initilize the 2 and 3 priority interupts to a fast rate so that
    1d96:	8e e8       	ldi	r24, 0x8E	; 142
    1d98:	9a e0       	ldi	r25, 0x0A	; 10
    1d9a:	4e e4       	ldi	r20, 0x4E	; 78
    1d9c:	50 e0       	ldi	r21, 0x00	; 0
    1d9e:	60 e0       	ldi	r22, 0x00	; 0
    1da0:	70 e0       	ldi	r23, 0x00	; 0
    1da2:	22 e0       	ldi	r18, 0x02	; 2
    1da4:	00 e0       	ldi	r16, 0x00	; 0
    1da6:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0); // the countdown is fast until the setting of the next rate
    1daa:	86 ec       	ldi	r24, 0xC6	; 198
    1dac:	9a e0       	ldi	r25, 0x0A	; 10
    1dae:	4e e4       	ldi	r20, 0x4E	; 78
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	23 e0       	ldi	r18, 0x03	; 3
    1db8:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
													//by the Update_display interupt.
if(!default_func_x && !default_func_y && functionX_rate == functionY_rate){ 
    1dbc:	80 91 a3 20 	lds	r24, 0x20A3
    1dc0:	88 23       	and	r24, r24
    1dc2:	11 f4       	brne	.+4      	; 0x1dc8 <__vector_100+0x96>
    1dc4:	80 91 a4 20 	lds	r24, 0x20A4
	//We want to synchronize function X and function Y updates in this case	
}													
													
if (default_func_x)
    1dc8:	80 91 a3 20 	lds	r24, 0x20A3
    1dcc:	88 23       	and	r24, r24
    1dce:	59 f0       	breq	.+22     	; 0x1de6 <__vector_100+0xb4>
	Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    1dd0:	40 91 a5 20 	lds	r20, 0x20A5
    1dd4:	50 91 a6 20 	lds	r21, 0x20A6
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	89 e1       	ldi	r24, 0x19	; 25
    1dde:	9e e0       	ldi	r25, 0x0E	; 14
    1de0:	24 e0       	ldi	r18, 0x04	; 4
    1de2:	00 e0       	ldi	r16, 0x00	; 0
    1de4:	0c c0       	rjmp	.+24     	; 0x1dfe <__vector_100+0xcc>
else{
	update_funcCnt_x();//add this because the function cnt is updated without delay
    1de6:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <update_funcCnt_x>
	Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    1dea:	40 91 a5 20 	lds	r20, 0x20A5
    1dee:	50 91 a6 20 	lds	r21, 0x20A6
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	70 e0       	ldi	r23, 0x00	; 0
    1df6:	89 e1       	ldi	r24, 0x19	; 25
    1df8:	9e e0       	ldi	r25, 0x0E	; 14
    1dfa:	24 e0       	ldi	r18, 0x04	; 4
    1dfc:	01 e0       	ldi	r16, 0x01	; 1
    1dfe:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
	}
if (default_func_y)
    1e02:	80 91 a4 20 	lds	r24, 0x20A4
    1e06:	88 23       	and	r24, r24
    1e08:	59 f0       	breq	.+22     	; 0x1e20 <__vector_100+0xee>
	Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    1e0a:	40 91 a7 20 	lds	r20, 0x20A7
    1e0e:	50 91 a8 20 	lds	r21, 0x20A8
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	70 e0       	ldi	r23, 0x00	; 0
    1e16:	89 e9       	ldi	r24, 0x99	; 153
    1e18:	9d e0       	ldi	r25, 0x0D	; 13
    1e1a:	25 e0       	ldi	r18, 0x05	; 5
    1e1c:	00 e0       	ldi	r16, 0x00	; 0
    1e1e:	0c c0       	rjmp	.+24     	; 0x1e38 <__vector_100+0x106>
else{
	update_funcCnt_y();//add this because the function cnt is updated without delay
    1e20:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <update_funcCnt_y>
	Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); 					
    1e24:	40 91 a7 20 	lds	r20, 0x20A7
    1e28:	50 91 a8 20 	lds	r21, 0x20A8
    1e2c:	60 e0       	ldi	r22, 0x00	; 0
    1e2e:	70 e0       	ldi	r23, 0x00	; 0
    1e30:	89 e9       	ldi	r24, 0x99	; 153
    1e32:	9d e0       	ldi	r25, 0x0D	; 13
    1e34:	25 e0       	ldi	r18, 0x05	; 5
    1e36:	01 e0       	ldi	r16, 0x01	; 1
    1e38:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
	}

xputs(PSTR("Int3 catches a rising edge trigger!\n"));
    1e3c:	84 e3       	ldi	r24, 0x34	; 52
    1e3e:	92 e0       	ldi	r25, 0x02	; 2
    1e40:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
}
    1e44:	ff 91       	pop	r31
    1e46:	ef 91       	pop	r30
    1e48:	bf 91       	pop	r27
    1e4a:	af 91       	pop	r26
    1e4c:	9f 91       	pop	r25
    1e4e:	8f 91       	pop	r24
    1e50:	7f 91       	pop	r23
    1e52:	6f 91       	pop	r22
    1e54:	5f 91       	pop	r21
    1e56:	4f 91       	pop	r20
    1e58:	3f 91       	pop	r19
    1e5a:	2f 91       	pop	r18
    1e5c:	0f 91       	pop	r16
    1e5e:	0f 90       	pop	r0
    1e60:	0b be       	out	0x3b, r0	; 59
    1e62:	0f 90       	pop	r0
    1e64:	09 be       	out	0x39, r0	; 57
    1e66:	0f 90       	pop	r0
    1e68:	08 be       	out	0x38, r0	; 56
    1e6a:	0f 90       	pop	r0
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	0f 90       	pop	r0
    1e70:	1f 90       	pop	r1
    1e72:	18 95       	reti

00001e74 <fetch_update_funcY>:
	if (func_read_index_y >= BUFFER_LENGTH/2)
		func_read_index_y = 0;
	func_buffer_size_y--;
}

void fetch_update_funcY(uint8_t fReset, uint8_t num_of_load_y) {
    1e74:	a6 e6       	ldi	r26, 0x66	; 102
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e0 e4       	ldi	r30, 0x40	; 64
    1e7a:	ff e0       	ldi	r31, 0x0F	; 15
    1e7c:	0c 94 99 4d 	jmp	0x9b32	; 0x9b32 <__prologue_saves__+0x16>
    1e80:	98 2f       	mov	r25, r24
    1e82:	d6 2e       	mov	r13, r22
	uint8_t res;
	//uint8_t funcXBuff[2*FUNCTION_LENGTH];
	uint8_t tempBuff[FUNCTION_LENGTH];
    uint16_t loadYBufferSize;
    //xprintf(PSTR("num_of_load_y =  %u\n"), num_of_load_y);		
	if (func_buffer_size_y >= BUFFER_LENGTH/2){
    1e84:	80 91 0b 24 	lds	r24, 0x240B
    1e88:	84 36       	cpi	r24, 0x64	; 100
    1e8a:	18 f0       	brcs	.+6      	; 0x1e92 <fetch_update_funcY+0x1e>
		xputs(PSTR("Ring buffer function_Y is full\n"));
    1e8c:	8c e6       	ldi	r24, 0x6C	; 108
    1e8e:	93 e0       	ldi	r25, 0x03	; 3
    1e90:	ae c0       	rjmp	.+348    	; 0x1fee <fetch_update_funcY+0x17a>
		return;
		}
		
	if (fReset == 1){
    1e92:	91 30       	cpi	r25, 0x01	; 1
    1e94:	31 f4       	brne	.+12     	; 0x1ea2 <fetch_update_funcY+0x2e>
        func_buffer_size_y = 0;
    1e96:	10 92 0b 24 	sts	0x240B, r1
		func_read_index_y = 0;
    1e9a:	10 92 07 24 	sts	0x2407, r1
		func_write_index_y = 0;        
    1e9e:	10 92 09 24 	sts	0x2409, r1
	}
	
	offset = 512 + num_of_load_y * FUNCTION_LENGTH;
            
	res = f_lseek(&file3, offset);
    1ea2:	84 e6       	ldi	r24, 0x64	; 100
    1ea4:	d8 9e       	mul	r13, r24
    1ea6:	c0 01       	movw	r24, r0
    1ea8:	11 24       	eor	r1, r1
    1eaa:	80 50       	subi	r24, 0x00	; 0
    1eac:	9e 4f       	sbci	r25, 0xFE	; 254
    1eae:	7c 01       	movw	r14, r24
    1eb0:	00 e0       	ldi	r16, 0x00	; 0
    1eb2:	10 e0       	ldi	r17, 0x00	; 0
    1eb4:	81 e2       	ldi	r24, 0x21	; 33
    1eb6:	96 e2       	ldi	r25, 0x26	; 38
    1eb8:	b8 01       	movw	r22, r16
    1eba:	a7 01       	movw	r20, r14
    1ebc:	0e 94 31 3c 	call	0x7862	; 0x7862 <f_lseek>
    1ec0:	28 2f       	mov	r18, r24
	if ((res == FR_OK) && (file3.fptr == offset)) {
    1ec2:	88 23       	and	r24, r24
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <fetch_update_funcY+0x54>
    1ec6:	7c c0       	rjmp	.+248    	; 0x1fc0 <fetch_update_funcY+0x14c>
    1ec8:	80 91 27 26 	lds	r24, 0x2627
    1ecc:	90 91 28 26 	lds	r25, 0x2628
    1ed0:	a0 91 29 26 	lds	r26, 0x2629
    1ed4:	b0 91 2a 26 	lds	r27, 0x262A
    1ed8:	8e 15       	cp	r24, r14
    1eda:	9f 05       	cpc	r25, r15
    1edc:	a0 07       	cpc	r26, r16
    1ede:	b1 07       	cpc	r27, r17
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <fetch_update_funcY+0x70>
    1ee2:	6e c0       	rjmp	.+220    	; 0x1fc0 <fetch_update_funcY+0x14c>
		
		if ((num_of_load_y ==  num_buffer_load_y - 1) && (last_load_y != 0))
    1ee4:	2d 2d       	mov	r18, r13
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	80 91 b6 20 	lds	r24, 0x20B6
    1eec:	90 91 b7 20 	lds	r25, 0x20B7
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	28 17       	cp	r18, r24
    1ef4:	39 07       	cpc	r19, r25
    1ef6:	39 f4       	brne	.+14     	; 0x1f06 <fetch_update_funcY+0x92>
    1ef8:	00 91 13 24 	lds	r16, 0x2413
    1efc:	10 91 14 24 	lds	r17, 0x2414
    1f00:	01 15       	cp	r16, r1
    1f02:	11 05       	cpc	r17, r1
    1f04:	11 f4       	brne	.+4      	; 0x1f0a <fetch_update_funcY+0x96>
    1f06:	04 e6       	ldi	r16, 0x64	; 100
    1f08:	10 e0       	ldi	r17, 0x00	; 0
			loadYBufferSize = last_load_y;
		else 
			loadYBufferSize = FUNCTION_LENGTH;
		
		//load 100 bytes data to temBuff
		res = f_read(&file3, tempBuff, loadYBufferSize, &cnt);
    1f0a:	81 e2       	ldi	r24, 0x21	; 33
    1f0c:	96 e2       	ldi	r25, 0x26	; 38
    1f0e:	be 01       	movw	r22, r28
    1f10:	6d 5f       	subi	r22, 0xFD	; 253
    1f12:	7f 4f       	sbci	r23, 0xFF	; 255
    1f14:	a8 01       	movw	r20, r16
    1f16:	9e 01       	movw	r18, r28
    1f18:	2f 5f       	subi	r18, 0xFF	; 255
    1f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1c:	0e 94 a3 3e 	call	0x7d46	; 0x7d46 <f_read>
    1f20:	28 2f       	mov	r18, r24
		if (!((res == FR_OK) && (cnt == loadYBufferSize))) {
    1f22:	88 23       	and	r24, r24
    1f24:	29 f4       	brne	.+10     	; 0x1f30 <fetch_update_funcY+0xbc>
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	80 17       	cp	r24, r16
    1f2c:	91 07       	cpc	r25, r17
    1f2e:	c9 f0       	breq	.+50     	; 0x1f62 <fetch_update_funcY+0xee>
		
			xprintf(PSTR("res =  %u\n"), res);
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <fetch_update_funcY+0xbe>
    1f32:	0f 92       	push	r0
    1f34:	ed b7       	in	r30, 0x3d	; 61
    1f36:	fe b7       	in	r31, 0x3e	; 62
    1f38:	31 96       	adiw	r30, 0x01	; 1
    1f3a:	81 e6       	ldi	r24, 0x61	; 97
    1f3c:	93 e0       	ldi	r25, 0x03	; 3
    1f3e:	ad b7       	in	r26, 0x3d	; 61
    1f40:	be b7       	in	r27, 0x3e	; 62
    1f42:	11 96       	adiw	r26, 0x01	; 1
    1f44:	8d 93       	st	X+, r24
    1f46:	9c 93       	st	X, r25
    1f48:	12 97       	sbiw	r26, 0x02	; 2
    1f4a:	22 83       	std	Z+2, r18	; 0x02
    1f4c:	13 82       	std	Z+3, r1	; 0x03
    1f4e:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
			xputs(PSTR("Error in f_read in in update_funcCnt_y\n"));
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	89 e3       	ldi	r24, 0x39	; 57
    1f5c:	93 e0       	ldi	r25, 0x03	; 3
    1f5e:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
		}
		
		for (j = 0; j< cnt; j+=2){
    1f62:	69 81       	ldd	r22, Y+1	; 0x01
    1f64:	7a 81       	ldd	r23, Y+2	; 0x02
    1f66:	de 01       	movw	r26, r28
    1f68:	13 96       	adiw	r26, 0x03	; 3
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	50 e0       	ldi	r21, 0x00	; 0
    1f6e:	24 c0       	rjmp	.+72     	; 0x1fb8 <fetch_update_funcY+0x144>
			function_Y[func_write_index_y] = (uint16_t)tempBuff[j] + tempBuff[j+1]*256; 
    1f70:	e0 91 09 24 	lds	r30, 0x2409
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	ee 0f       	add	r30, r30
    1f78:	ff 1f       	adc	r31, r31
    1f7a:	e7 53       	subi	r30, 0x37	; 55
    1f7c:	fb 4d       	sbci	r31, 0xDB	; 219
    1f7e:	11 96       	adiw	r26, 0x01	; 1
    1f80:	3c 91       	ld	r19, X
    1f82:	11 97       	sbiw	r26, 0x01	; 1
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	8c 91       	ld	r24, X
    1f88:	89 01       	movw	r16, r18
    1f8a:	08 0f       	add	r16, r24
    1f8c:	11 1d       	adc	r17, r1
    1f8e:	00 83       	st	Z, r16
    1f90:	11 83       	std	Z+1, r17	; 0x01
			func_write_index_y++; 
    1f92:	80 91 09 24 	lds	r24, 0x2409
    1f96:	8f 5f       	subi	r24, 0xFF	; 255
    1f98:	80 93 09 24 	sts	0x2409, r24
			if (func_write_index_y >= BUFFER_LENGTH/2)
    1f9c:	80 91 09 24 	lds	r24, 0x2409
    1fa0:	84 36       	cpi	r24, 0x64	; 100
    1fa2:	10 f0       	brcs	.+4      	; 0x1fa8 <fetch_update_funcY+0x134>
				func_write_index_y = 0;
    1fa4:	10 92 09 24 	sts	0x2409, r1
			func_buffer_size_y++;  //atomic operation
    1fa8:	80 91 0b 24 	lds	r24, 0x240B
    1fac:	8f 5f       	subi	r24, 0xFF	; 255
    1fae:	80 93 0b 24 	sts	0x240B, r24
		
			xprintf(PSTR("res =  %u\n"), res);
			xputs(PSTR("Error in f_read in in update_funcCnt_y\n"));
		}
		
		for (j = 0; j< cnt; j+=2){
    1fb2:	4e 5f       	subi	r20, 0xFE	; 254
    1fb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb6:	12 96       	adiw	r26, 0x02	; 2
    1fb8:	46 17       	cp	r20, r22
    1fba:	57 07       	cpc	r21, r23
    1fbc:	c8 f2       	brcs	.-78     	; 0x1f70 <fetch_update_funcY+0xfc>
    1fbe:	19 c0       	rjmp	.+50     	; 0x1ff2 <fetch_update_funcY+0x17e>
				func_write_index_y = 0;
			func_buffer_size_y++;  //atomic operation
		}
	//xprintf(PSTR("func_write_index_y =  %u\n"), func_write_index_y);			
	} else {
			xprintf(PSTR("res =  %u\n"), res);
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <fetch_update_funcY+0x14e>
    1fc2:	0f 92       	push	r0
    1fc4:	ed b7       	in	r30, 0x3d	; 61
    1fc6:	fe b7       	in	r31, 0x3e	; 62
    1fc8:	31 96       	adiw	r30, 0x01	; 1
    1fca:	8e e2       	ldi	r24, 0x2E	; 46
    1fcc:	93 e0       	ldi	r25, 0x03	; 3
    1fce:	ad b7       	in	r26, 0x3d	; 61
    1fd0:	be b7       	in	r27, 0x3e	; 62
    1fd2:	11 96       	adiw	r26, 0x01	; 1
    1fd4:	8d 93       	st	X+, r24
    1fd6:	9c 93       	st	X, r25
    1fd8:	12 97       	sbiw	r26, 0x02	; 2
    1fda:	22 83       	std	Z+2, r18	; 0x02
    1fdc:	13 82       	std	Z+3, r1	; 0x03
    1fde:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
			xputs(PSTR("Error in f_lseek in update_funcCnt_y load next buffer\n"));
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	87 ef       	ldi	r24, 0xF7	; 247
    1fec:	92 e0       	ldi	r25, 0x02	; 2
    1fee:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
	}
} 
    1ff2:	ca 59       	subi	r28, 0x9A	; 154
    1ff4:	df 4f       	sbci	r29, 0xFF	; 255
    1ff6:	e7 e0       	ldi	r30, 0x07	; 7
    1ff8:	0c 94 b5 4d 	jmp	0x9b6a	; 0x9b6a <__epilogue_restores__+0x16>

00001ffc <fetch_update_funcX>:
		func_read_index_x = 0;
		
    func_buffer_size_x--;
}

void fetch_update_funcX(uint8_t fReset, uint8_t num_of_load_x) {
    1ffc:	a6 e6       	ldi	r26, 0x66	; 102
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e4 e0       	ldi	r30, 0x04	; 4
    2002:	f0 e1       	ldi	r31, 0x10	; 16
    2004:	0c 94 99 4d 	jmp	0x9b32	; 0x9b32 <__prologue_saves__+0x16>
    2008:	98 2f       	mov	r25, r24
    200a:	d6 2e       	mov	r13, r22
	uint8_t tempBuff[FUNCTION_LENGTH];
	uint16_t loadXBufferSize;
	//digitalWrite(0, HIGH);	
			
	//xprintf(PSTR("num_of_load_x =  %u\n"), num_of_load_x);			
	if (func_buffer_size_x >= BUFFER_LENGTH/2){
    200c:	80 91 0a 24 	lds	r24, 0x240A
    2010:	84 36       	cpi	r24, 0x64	; 100
    2012:	18 f0       	brcs	.+6      	; 0x201a <fetch_update_funcX+0x1e>
		xputs(PSTR("Ring buffer function_x is full\n"));
    2014:	85 e1       	ldi	r24, 0x15	; 21
    2016:	94 e0       	ldi	r25, 0x04	; 4
    2018:	ae c0       	rjmp	.+348    	; 0x2176 <fetch_update_funcX+0x17a>
		return;
		}
		
	if (fReset == 1){ 
    201a:	91 30       	cpi	r25, 0x01	; 1
    201c:	31 f4       	brne	.+12     	; 0x202a <fetch_update_funcX+0x2e>
		func_read_index_x = 0;
    201e:	10 92 06 24 	sts	0x2406, r1
		func_write_index_x = 0;
    2022:	10 92 08 24 	sts	0x2408, r1
		func_buffer_size_x = 0;       
    2026:	10 92 0a 24 	sts	0x240A, r1
	}
	
	offset = 512 + num_of_load_x * FUNCTION_LENGTH;
            
	res = f_lseek(&file2, offset);
    202a:	84 e6       	ldi	r24, 0x64	; 100
    202c:	d8 9e       	mul	r13, r24
    202e:	c0 01       	movw	r24, r0
    2030:	11 24       	eor	r1, r1
    2032:	80 50       	subi	r24, 0x00	; 0
    2034:	9e 4f       	sbci	r25, 0xFE	; 254
    2036:	7c 01       	movw	r14, r24
    2038:	00 e0       	ldi	r16, 0x00	; 0
    203a:	10 e0       	ldi	r17, 0x00	; 0
    203c:	8b e9       	ldi	r24, 0x9B	; 155
    203e:	94 e2       	ldi	r25, 0x24	; 36
    2040:	b8 01       	movw	r22, r16
    2042:	a7 01       	movw	r20, r14
    2044:	0e 94 31 3c 	call	0x7862	; 0x7862 <f_lseek>
    2048:	28 2f       	mov	r18, r24
	if ((res == FR_OK) && (file2.fptr == offset)) {
    204a:	88 23       	and	r24, r24
    204c:	09 f0       	breq	.+2      	; 0x2050 <fetch_update_funcX+0x54>
    204e:	7c c0       	rjmp	.+248    	; 0x2148 <fetch_update_funcX+0x14c>
    2050:	80 91 a1 24 	lds	r24, 0x24A1
    2054:	90 91 a2 24 	lds	r25, 0x24A2
    2058:	a0 91 a3 24 	lds	r26, 0x24A3
    205c:	b0 91 a4 24 	lds	r27, 0x24A4
    2060:	8e 15       	cp	r24, r14
    2062:	9f 05       	cpc	r25, r15
    2064:	a0 07       	cpc	r26, r16
    2066:	b1 07       	cpc	r27, r17
    2068:	09 f0       	breq	.+2      	; 0x206c <fetch_update_funcX+0x70>
    206a:	6e c0       	rjmp	.+220    	; 0x2148 <fetch_update_funcX+0x14c>
		//num_of_load_x ranges from 0 to num_buffer_load_x - 1
		if ((num_of_load_x ==  num_buffer_load_x - 1) && (last_load_x != 0))
    206c:	2d 2d       	mov	r18, r13
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	80 91 b4 20 	lds	r24, 0x20B4
    2074:	90 91 b5 20 	lds	r25, 0x20B5
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	28 17       	cp	r18, r24
    207c:	39 07       	cpc	r19, r25
    207e:	39 f4       	brne	.+14     	; 0x208e <fetch_update_funcX+0x92>
    2080:	00 91 11 24 	lds	r16, 0x2411
    2084:	10 91 12 24 	lds	r17, 0x2412
    2088:	01 15       	cp	r16, r1
    208a:	11 05       	cpc	r17, r1
    208c:	11 f4       	brne	.+4      	; 0x2092 <fetch_update_funcX+0x96>
    208e:	04 e6       	ldi	r16, 0x64	; 100
    2090:	10 e0       	ldi	r17, 0x00	; 0
			loadXBufferSize = last_load_x;
		else 
			loadXBufferSize = FUNCTION_LENGTH;
		
		//load 100 bytes data to temBuff
		res = f_read(&file2, tempBuff, loadXBufferSize, &cnt);
    2092:	8b e9       	ldi	r24, 0x9B	; 155
    2094:	94 e2       	ldi	r25, 0x24	; 36
    2096:	be 01       	movw	r22, r28
    2098:	6d 5f       	subi	r22, 0xFD	; 253
    209a:	7f 4f       	sbci	r23, 0xFF	; 255
    209c:	a8 01       	movw	r20, r16
    209e:	9e 01       	movw	r18, r28
    20a0:	2f 5f       	subi	r18, 0xFF	; 255
    20a2:	3f 4f       	sbci	r19, 0xFF	; 255
    20a4:	0e 94 a3 3e 	call	0x7d46	; 0x7d46 <f_read>
    20a8:	28 2f       	mov	r18, r24
		if (!((res == FR_OK) && (cnt == loadXBufferSize))) {
    20aa:	88 23       	and	r24, r24
    20ac:	29 f4       	brne	.+10     	; 0x20b8 <fetch_update_funcX+0xbc>
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	9a 81       	ldd	r25, Y+2	; 0x02
    20b2:	80 17       	cp	r24, r16
    20b4:	91 07       	cpc	r25, r17
    20b6:	c9 f0       	breq	.+50     	; 0x20ea <fetch_update_funcX+0xee>
				xprintf(PSTR("res =  %u\n"), res);
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <fetch_update_funcX+0xbe>
    20ba:	0f 92       	push	r0
    20bc:	ed b7       	in	r30, 0x3d	; 61
    20be:	fe b7       	in	r31, 0x3e	; 62
    20c0:	31 96       	adiw	r30, 0x01	; 1
    20c2:	8a e0       	ldi	r24, 0x0A	; 10
    20c4:	94 e0       	ldi	r25, 0x04	; 4
    20c6:	ad b7       	in	r26, 0x3d	; 61
    20c8:	be b7       	in	r27, 0x3e	; 62
    20ca:	11 96       	adiw	r26, 0x01	; 1
    20cc:	8d 93       	st	X+, r24
    20ce:	9c 93       	st	X, r25
    20d0:	12 97       	sbiw	r26, 0x02	; 2
    20d2:	22 83       	std	Z+2, r18	; 0x02
    20d4:	13 82       	std	Z+3, r1	; 0x03
    20d6:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
				xputs(PSTR("Error in f_read in in fetch_update_funcX\n"));
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	80 ee       	ldi	r24, 0xE0	; 224
    20e4:	93 e0       	ldi	r25, 0x03	; 3
    20e6:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
			}

		
		for (j = 0; j< cnt; j+=2){
    20ea:	69 81       	ldd	r22, Y+1	; 0x01
    20ec:	7a 81       	ldd	r23, Y+2	; 0x02
    20ee:	de 01       	movw	r26, r28
    20f0:	13 96       	adiw	r26, 0x03	; 3
    20f2:	40 e0       	ldi	r20, 0x00	; 0
    20f4:	50 e0       	ldi	r21, 0x00	; 0
    20f6:	24 c0       	rjmp	.+72     	; 0x2140 <fetch_update_funcX+0x144>
		//for (j = 0; j< loadXBufferSize; j+=2){
			function_X[func_write_index_x] = (uint16_t)tempBuff[j] + (uint16_t)tempBuff[j+1]*256 ; 		
    20f8:	e0 91 08 24 	lds	r30, 0x2408
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	ee 0f       	add	r30, r30
    2100:	ff 1f       	adc	r31, r31
    2102:	e7 5d       	subi	r30, 0xD7	; 215
    2104:	f8 4d       	sbci	r31, 0xD8	; 216
    2106:	11 96       	adiw	r26, 0x01	; 1
    2108:	3c 91       	ld	r19, X
    210a:	11 97       	sbiw	r26, 0x01	; 1
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	8c 91       	ld	r24, X
    2110:	89 01       	movw	r16, r18
    2112:	08 0f       	add	r16, r24
    2114:	11 1d       	adc	r17, r1
    2116:	00 83       	st	Z, r16
    2118:	11 83       	std	Z+1, r17	; 0x01
			func_write_index_x++;  
    211a:	80 91 08 24 	lds	r24, 0x2408
    211e:	8f 5f       	subi	r24, 0xFF	; 255
    2120:	80 93 08 24 	sts	0x2408, r24
			if (func_write_index_x >= BUFFER_LENGTH/2) //0-100
    2124:	80 91 08 24 	lds	r24, 0x2408
    2128:	84 36       	cpi	r24, 0x64	; 100
    212a:	10 f0       	brcs	.+4      	; 0x2130 <fetch_update_funcX+0x134>
				func_write_index_x = 0;
    212c:	10 92 08 24 	sts	0x2408, r1
				
			func_buffer_size_x ++;  //atomic operation
    2130:	80 91 0a 24 	lds	r24, 0x240A
    2134:	8f 5f       	subi	r24, 0xFF	; 255
    2136:	80 93 0a 24 	sts	0x240A, r24
				xprintf(PSTR("res =  %u\n"), res);
				xputs(PSTR("Error in f_read in in fetch_update_funcX\n"));
			}

		
		for (j = 0; j< cnt; j+=2){
    213a:	4e 5f       	subi	r20, 0xFE	; 254
    213c:	5f 4f       	sbci	r21, 0xFF	; 255
    213e:	12 96       	adiw	r26, 0x02	; 2
    2140:	46 17       	cp	r20, r22
    2142:	57 07       	cpc	r21, r23
    2144:	c8 f2       	brcs	.-78     	; 0x20f8 <fetch_update_funcX+0xfc>
    2146:	19 c0       	rjmp	.+50     	; 0x217a <fetch_update_funcX+0x17e>
			func_buffer_size_x ++;  //atomic operation
		}
		
            //xprintf(PSTR("func_write_index_x =  %u\n"), func_write_index_x);
	} else {
			xprintf(PSTR("res =  %u\n"), res);
    2148:	00 d0       	rcall	.+0      	; 0x214a <fetch_update_funcX+0x14e>
    214a:	0f 92       	push	r0
    214c:	ed b7       	in	r30, 0x3d	; 61
    214e:	fe b7       	in	r31, 0x3e	; 62
    2150:	31 96       	adiw	r30, 0x01	; 1
    2152:	85 ed       	ldi	r24, 0xD5	; 213
    2154:	93 e0       	ldi	r25, 0x03	; 3
    2156:	ad b7       	in	r26, 0x3d	; 61
    2158:	be b7       	in	r27, 0x3e	; 62
    215a:	11 96       	adiw	r26, 0x01	; 1
    215c:	8d 93       	st	X+, r24
    215e:	9c 93       	st	X, r25
    2160:	12 97       	sbiw	r26, 0x02	; 2
    2162:	22 83       	std	Z+2, r18	; 0x02
    2164:	13 82       	std	Z+3, r1	; 0x03
    2166:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
			xputs(PSTR("Error in f_lseek in fetch_update_funcX\n"));
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	8d ea       	ldi	r24, 0xAD	; 173
    2174:	93 e0       	ldi	r25, 0x03	; 3
    2176:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
	}
	//digitalWrite(0, LOW);
}
    217a:	ca 59       	subi	r28, 0x9A	; 154
    217c:	df 4f       	sbci	r29, 0xFF	; 255
    217e:	e7 e0       	ldi	r30, 0x07	; 7
    2180:	0c 94 b5 4d 	jmp	0x9b6a	; 0x9b6a <__epilogue_restores__+0x16>

00002184 <set_vel_func>:
            break;
    }
}


void set_vel_func(uint8_t func_channel, uint8_t func_id) {
    2184:	ae e0       	ldi	r26, 0x0E	; 14
    2186:	b2 e0       	ldi	r27, 0x02	; 2
    2188:	e8 ec       	ldi	r30, 0xC8	; 200
    218a:	f0 e1       	ldi	r31, 0x10	; 16
    218c:	0c 94 9a 4d 	jmp	0x9b34	; 0x9b34 <__prologue_saves__+0x18>
    2190:	08 2f       	mov	r16, r24
    2192:	16 2f       	mov	r17, r22
    //uint8_t func_name_y[100];
    uint8_t res, func_name_len;
    uint8_t velFuncBuff[512];
    
    
    if (func_id < 10)
    2194:	6a 30       	cpi	r22, 0x0A	; 10
    2196:	80 f4       	brcc	.+32     	; 0x21b8 <set_vel_func+0x34>
        sprintf(str, "vel000%d.fun\0", func_id);
    2198:	00 d0       	rcall	.+0      	; 0x219a <set_vel_func+0x16>
    219a:	00 d0       	rcall	.+0      	; 0x219c <set_vel_func+0x18>
    219c:	ed b7       	in	r30, 0x3d	; 61
    219e:	fe b7       	in	r31, 0x3e	; 62
    21a0:	31 96       	adiw	r30, 0x01	; 1
    21a2:	ce 01       	movw	r24, r28
    21a4:	03 96       	adiw	r24, 0x03	; 3
    21a6:	ad b7       	in	r26, 0x3d	; 61
    21a8:	be b7       	in	r27, 0x3e	; 62
    21aa:	11 96       	adiw	r26, 0x01	; 1
    21ac:	8d 93       	st	X+, r24
    21ae:	9c 93       	st	X, r25
    21b0:	12 97       	sbiw	r26, 0x02	; 2
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e2       	ldi	r25, 0x20	; 32
    21b6:	1f c0       	rjmp	.+62     	; 0x21f6 <set_vel_func+0x72>
    21b8:	ce 01       	movw	r24, r28
    21ba:	03 96       	adiw	r24, 0x03	; 3
    else if (func_id < 100)
    21bc:	64 36       	cpi	r22, 0x64	; 100
    21be:	70 f4       	brcc	.+28     	; 0x21dc <set_vel_func+0x58>
        sprintf(str, "vel00%d.fun\0", func_id);
    21c0:	00 d0       	rcall	.+0      	; 0x21c2 <set_vel_func+0x3e>
    21c2:	00 d0       	rcall	.+0      	; 0x21c4 <set_vel_func+0x40>
    21c4:	ed b7       	in	r30, 0x3d	; 61
    21c6:	fe b7       	in	r31, 0x3e	; 62
    21c8:	31 96       	adiw	r30, 0x01	; 1
    21ca:	ad b7       	in	r26, 0x3d	; 61
    21cc:	be b7       	in	r27, 0x3e	; 62
    21ce:	11 96       	adiw	r26, 0x01	; 1
    21d0:	8d 93       	st	X+, r24
    21d2:	9c 93       	st	X, r25
    21d4:	12 97       	sbiw	r26, 0x02	; 2
    21d6:	8e e0       	ldi	r24, 0x0E	; 14
    21d8:	90 e2       	ldi	r25, 0x20	; 32
    21da:	0d c0       	rjmp	.+26     	; 0x21f6 <set_vel_func+0x72>
    else if (func_id < 1000)
        sprintf(str, "vel0%d.fun\0", func_id);
    21dc:	00 d0       	rcall	.+0      	; 0x21de <set_vel_func+0x5a>
    21de:	00 d0       	rcall	.+0      	; 0x21e0 <set_vel_func+0x5c>
    21e0:	ed b7       	in	r30, 0x3d	; 61
    21e2:	fe b7       	in	r31, 0x3e	; 62
    21e4:	31 96       	adiw	r30, 0x01	; 1
    21e6:	ad b7       	in	r26, 0x3d	; 61
    21e8:	be b7       	in	r27, 0x3e	; 62
    21ea:	11 96       	adiw	r26, 0x01	; 1
    21ec:	8d 93       	st	X+, r24
    21ee:	9c 93       	st	X, r25
    21f0:	12 97       	sbiw	r26, 0x02	; 2
    21f2:	8b e1       	ldi	r24, 0x1B	; 27
    21f4:	90 e2       	ldi	r25, 0x20	; 32
    21f6:	82 83       	std	Z+2, r24	; 0x02
    21f8:	93 83       	std	Z+3, r25	; 0x03
    21fa:	14 83       	std	Z+4, r17	; 0x04
    21fc:	15 82       	std	Z+5, r1	; 0x05
    21fe:	0e 94 ee 4f 	call	0x9fdc	; 0x9fdc <sprintf>
    2202:	ed b7       	in	r30, 0x3d	; 61
    2204:	fe b7       	in	r31, 0x3e	; 62
    2206:	36 96       	adiw	r30, 0x06	; 6
    2208:	ed bf       	out	0x3d, r30	; 61
    220a:	fe bf       	out	0x3e, r31	; 62
    else
            xputs(PSTR("function id is too big.\n"));
    
    switch(func_channel) {
    220c:	01 30       	cpi	r16, 0x01	; 1
    220e:	21 f0       	breq	.+8      	; 0x2218 <set_vel_func+0x94>
    2210:	02 30       	cpi	r16, 0x02	; 2
    2212:	09 f0       	breq	.+2      	; 0x2216 <set_vel_func+0x92>
    2214:	90 c1       	rjmp	.+800    	; 0x2536 <set_vel_func+0x3b2>
    2216:	c7 c0       	rjmp	.+398    	; 0x23a6 <set_vel_func+0x222>
        case 1:    //channel x
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0); //disable ISR
            //read the header block and send back the function name
            res = f_close(&file2);
    2218:	8b e9       	ldi	r24, 0x9B	; 155
    221a:	94 e2       	ldi	r25, 0x24	; 36
    221c:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <f_close>
            
            res = f_open(&file2, str, FA_OPEN_EXISTING | FA_READ);
    2220:	8b e9       	ldi	r24, 0x9B	; 155
    2222:	94 e2       	ldi	r25, 0x24	; 36
    2224:	be 01       	movw	r22, r28
    2226:	6d 5f       	subi	r22, 0xFD	; 253
    2228:	7f 4f       	sbci	r23, 0xFF	; 255
    222a:	41 e0       	ldi	r20, 0x01	; 1
    222c:	0e 94 91 40 	call	0x8122	; 0x8122 <f_open>
            
            if (res == FR_OK) {
    2230:	88 23       	and	r24, r24
    2232:	09 f0       	breq	.+2      	; 0x2236 <set_vel_func+0xb2>
    2234:	44 c0       	rjmp	.+136    	; 0x22be <set_vel_func+0x13a>
                
                res = f_read(&file2, velFuncBuff, 512, &cnt);
    2236:	8b e9       	ldi	r24, 0x9B	; 155
    2238:	94 e2       	ldi	r25, 0x24	; 36
    223a:	be 01       	movw	r22, r28
    223c:	61 5f       	subi	r22, 0xF1	; 241
    223e:	7f 4f       	sbci	r23, 0xFF	; 255
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	52 e0       	ldi	r21, 0x02	; 2
    2244:	9e 01       	movw	r18, r28
    2246:	2f 5f       	subi	r18, 0xFF	; 255
    2248:	3f 4f       	sbci	r19, 0xFF	; 255
    224a:	0e 94 a3 3e 	call	0x7d46	; 0x7d46 <f_read>
                
                if ((res == FR_OK) && (cnt == 512)) {
    224e:	88 23       	and	r24, r24
    2250:	99 f5       	brne	.+102    	; 0x22b8 <set_vel_func+0x134>
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	9a 81       	ldd	r25, Y+2	; 0x02
    2256:	80 50       	subi	r24, 0x00	; 0
    2258:	92 40       	sbci	r25, 0x02	; 2
    225a:	71 f5       	brne	.+92     	; 0x22b8 <set_vel_func+0x134>
                    
                    // get the test header info
                    ((uint8_t*)&funcSize_x)[0] = velFuncBuff[0];
    225c:	8f 85       	ldd	r24, Y+15	; 0x0f
    225e:	80 93 ab 20 	sts	0x20AB, r24
                    ((uint8_t*)&funcSize_x)[1] = velFuncBuff[1];
    2262:	88 89       	ldd	r24, Y+16	; 0x10
    2264:	80 93 ac 20 	sts	0x20AC, r24
                    ((uint8_t*)&funcSize_x)[2] = velFuncBuff[2];
    2268:	89 89       	ldd	r24, Y+17	; 0x11
    226a:	80 93 ad 20 	sts	0x20AD, r24
                    ((uint8_t*)&funcSize_x)[3] = velFuncBuff[3];
    226e:	8a 89       	ldd	r24, Y+18	; 0x12
    2270:	80 93 ae 20 	sts	0x20AE, r24
                    func_name_len = velFuncBuff[4];
                    
                    func_ID_X = func_id;
    2274:	10 93 0d 24 	sts	0x240D, r17
    2278:	10 92 0e 24 	sts	0x240E, r1
                    
                    Stop = 1;
    227c:	00 93 9c 20 	sts	0x209C, r16
                    display_flag = 0;  //clear the display flag
    2280:	10 92 fe 23 	sts	0x23FE, r1
                    if (quiet_mode_on == 0)
    2284:	80 91 b3 20 	lds	r24, 0x20B3
    2288:	88 23       	and	r24, r24
    228a:	e9 f4       	brne	.+58     	; 0x22c6 <set_vel_func+0x142>
                        xprintf(PSTR("Setting velocity function  %u for X\n"), func_id);
    228c:	00 d0       	rcall	.+0      	; 0x228e <set_vel_func+0x10a>
    228e:	0f 92       	push	r0
    2290:	ed b7       	in	r30, 0x3d	; 61
    2292:	fe b7       	in	r31, 0x3e	; 62
    2294:	31 96       	adiw	r30, 0x01	; 1
    2296:	87 e9       	ldi	r24, 0x97	; 151
    2298:	95 e0       	ldi	r25, 0x05	; 5
    229a:	ad b7       	in	r26, 0x3d	; 61
    229c:	be b7       	in	r27, 0x3e	; 62
    229e:	11 96       	adiw	r26, 0x01	; 1
    22a0:	8d 93       	st	X+, r24
    22a2:	9c 93       	st	X, r25
    22a4:	12 97       	sbiw	r26, 0x02	; 2
    22a6:	12 83       	std	Z+2, r17	; 0x02
    22a8:	13 82       	std	Z+3, r1	; 0x03
    22aa:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	07 c0       	rjmp	.+14     	; 0x22c6 <set_vel_func+0x142>
                    
                } else {
                        xputs(PSTR("Error f_read in set_vel_func X.\n"));
    22b8:	86 e7       	ldi	r24, 0x76	; 118
    22ba:	95 e0       	ldi	r25, 0x05	; 5
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <set_vel_func+0x13e>
                }
            } else {
                    xputs(PSTR("Error f_open in set_vel_func X.\n"));
    22be:	85 e5       	ldi	r24, 0x55	; 85
    22c0:	95 e0       	ldi	r25, 0x05	; 5
    22c2:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
            }
			
			last_load_x = funcSize_x % FUNCTION_LENGTH;
    22c6:	e0 90 ab 20 	lds	r14, 0x20AB
    22ca:	f0 90 ac 20 	lds	r15, 0x20AC
    22ce:	00 91 ad 20 	lds	r16, 0x20AD
    22d2:	10 91 ae 20 	lds	r17, 0x20AE
    22d6:	c8 01       	movw	r24, r16
    22d8:	b7 01       	movw	r22, r14
    22da:	24 e6       	ldi	r18, 0x64	; 100
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	50 e0       	ldi	r21, 0x00	; 0
    22e2:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    22e6:	60 93 11 24 	sts	0x2411, r22
    22ea:	70 93 12 24 	sts	0x2412, r23
			
			if(last_load_x == 0)
    22ee:	67 2b       	or	r22, r23
    22f0:	49 f4       	brne	.+18     	; 0x2304 <set_vel_func+0x180>
					num_buffer_load_x = funcSize_x/FUNCTION_LENGTH;
    22f2:	c8 01       	movw	r24, r16
    22f4:	b7 01       	movw	r22, r14
    22f6:	24 e6       	ldi	r18, 0x64	; 100
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	50 e0       	ldi	r21, 0x00	; 0
    22fe:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    2302:	0a c0       	rjmp	.+20     	; 0x2318 <set_vel_func+0x194>
			else
					num_buffer_load_x = funcSize_x / FUNCTION_LENGTH + 1;
    2304:	c8 01       	movw	r24, r16
    2306:	b7 01       	movw	r22, r14
    2308:	24 e6       	ldi	r18, 0x64	; 100
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	50 e0       	ldi	r21, 0x00	; 0
    2310:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    2314:	2f 5f       	subi	r18, 0xFF	; 255
    2316:	3f 4f       	sbci	r19, 0xFF	; 255
    2318:	20 93 b4 20 	sts	0x20B4, r18
    231c:	30 93 b5 20 	sts	0x20B5, r19
				
			
			if (quiet_mode_on == 0)
    2320:	80 91 b3 20 	lds	r24, 0x20B3
    2324:	88 23       	and	r24, r24
    2326:	c1 f5       	brne	.+112    	; 0x2398 <set_vel_func+0x214>
			{
				xprintf(PSTR("funcSize_x = %u\n"), funcSize_x);
    2328:	00 d0       	rcall	.+0      	; 0x232a <set_vel_func+0x1a6>
    232a:	00 d0       	rcall	.+0      	; 0x232c <set_vel_func+0x1a8>
    232c:	84 e4       	ldi	r24, 0x44	; 68
    232e:	95 e0       	ldi	r25, 0x05	; 5
    2330:	ed b7       	in	r30, 0x3d	; 61
    2332:	fe b7       	in	r31, 0x3e	; 62
    2334:	81 83       	std	Z+1, r24	; 0x01
    2336:	92 83       	std	Z+2, r25	; 0x02
    2338:	ad b7       	in	r26, 0x3d	; 61
    233a:	be b7       	in	r27, 0x3e	; 62
    233c:	13 96       	adiw	r26, 0x03	; 3
    233e:	ed 92       	st	X+, r14
    2340:	fd 92       	st	X+, r15
    2342:	0d 93       	st	X+, r16
    2344:	1c 93       	st	X, r17
    2346:	16 97       	sbiw	r26, 0x06	; 6
    2348:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
				xprintf(PSTR("last_load_x = %u\n"), last_load_x);
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	82 e3       	ldi	r24, 0x32	; 50
    2352:	95 e0       	ldi	r25, 0x05	; 5
    2354:	ed b7       	in	r30, 0x3d	; 61
    2356:	fe b7       	in	r31, 0x3e	; 62
    2358:	81 83       	std	Z+1, r24	; 0x01
    235a:	92 83       	std	Z+2, r25	; 0x02
    235c:	80 91 11 24 	lds	r24, 0x2411
    2360:	90 91 12 24 	lds	r25, 0x2412
    2364:	83 83       	std	Z+3, r24	; 0x03
    2366:	94 83       	std	Z+4, r25	; 0x04
    2368:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
				xprintf(PSTR("num_buffer_load_x = %u\n"), num_buffer_load_x);			
    236c:	8a e1       	ldi	r24, 0x1A	; 26
    236e:	95 e0       	ldi	r25, 0x05	; 5
    2370:	ad b7       	in	r26, 0x3d	; 61
    2372:	be b7       	in	r27, 0x3e	; 62
    2374:	11 96       	adiw	r26, 0x01	; 1
    2376:	8d 93       	st	X+, r24
    2378:	9c 93       	st	X, r25
    237a:	12 97       	sbiw	r26, 0x02	; 2
    237c:	80 91 b4 20 	lds	r24, 0x20B4
    2380:	90 91 b5 20 	lds	r25, 0x20B5
    2384:	13 96       	adiw	r26, 0x03	; 3
    2386:	8d 93       	st	X+, r24
    2388:	9c 93       	st	X, r25
    238a:	14 97       	sbiw	r26, 0x04	; 4
    238c:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
			}
			
			default_func_x = 0;
    2398:	10 92 a3 20 	sts	0x20A3, r1
			
			//update the function buffer
			fetch_update_funcX(1,0);
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	60 e0       	ldi	r22, 0x00	; 0
    23a0:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <fetch_update_funcX>
    23a4:	cc c0       	rjmp	.+408    	; 0x253e <set_vel_func+0x3ba>
            
        case 2:
            
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //disable ISR
            
            res = f_close(&file3);
    23a6:	81 e2       	ldi	r24, 0x21	; 33
    23a8:	96 e2       	ldi	r25, 0x26	; 38
    23aa:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <f_close>
            
            //read the header block and send back the function name
            res = f_open(&file3, str, FA_OPEN_EXISTING | FA_READ);
    23ae:	81 e2       	ldi	r24, 0x21	; 33
    23b0:	96 e2       	ldi	r25, 0x26	; 38
    23b2:	be 01       	movw	r22, r28
    23b4:	6d 5f       	subi	r22, 0xFD	; 253
    23b6:	7f 4f       	sbci	r23, 0xFF	; 255
    23b8:	41 e0       	ldi	r20, 0x01	; 1
    23ba:	0e 94 91 40 	call	0x8122	; 0x8122 <f_open>
            
            if (res == FR_OK) {
    23be:	88 23       	and	r24, r24
    23c0:	09 f0       	breq	.+2      	; 0x23c4 <set_vel_func+0x240>
    23c2:	45 c0       	rjmp	.+138    	; 0x244e <set_vel_func+0x2ca>
                
                res = f_read(&file3, velFuncBuff, 512, &cnt);
    23c4:	81 e2       	ldi	r24, 0x21	; 33
    23c6:	96 e2       	ldi	r25, 0x26	; 38
    23c8:	be 01       	movw	r22, r28
    23ca:	61 5f       	subi	r22, 0xF1	; 241
    23cc:	7f 4f       	sbci	r23, 0xFF	; 255
    23ce:	40 e0       	ldi	r20, 0x00	; 0
    23d0:	52 e0       	ldi	r21, 0x02	; 2
    23d2:	9e 01       	movw	r18, r28
    23d4:	2f 5f       	subi	r18, 0xFF	; 255
    23d6:	3f 4f       	sbci	r19, 0xFF	; 255
    23d8:	0e 94 a3 3e 	call	0x7d46	; 0x7d46 <f_read>
                
                if ((res == FR_OK) && (cnt == 512)) {
    23dc:	88 23       	and	r24, r24
    23de:	a1 f5       	brne	.+104    	; 0x2448 <set_vel_func+0x2c4>
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	9a 81       	ldd	r25, Y+2	; 0x02
    23e4:	80 50       	subi	r24, 0x00	; 0
    23e6:	92 40       	sbci	r25, 0x02	; 2
    23e8:	79 f5       	brne	.+94     	; 0x2448 <set_vel_func+0x2c4>
                    // get the test header info
                    ((uint8_t*)&funcSize_y)[0] = velFuncBuff[0];
    23ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ec:	80 93 af 20 	sts	0x20AF, r24
                    ((uint8_t*)&funcSize_y)[1] = velFuncBuff[1];
    23f0:	88 89       	ldd	r24, Y+16	; 0x10
    23f2:	80 93 b0 20 	sts	0x20B0, r24
                    ((uint8_t*)&funcSize_y)[2] = velFuncBuff[2];
    23f6:	89 89       	ldd	r24, Y+17	; 0x11
    23f8:	80 93 b1 20 	sts	0x20B1, r24
                    ((uint8_t*)&funcSize_y)[3] = velFuncBuff[3];
    23fc:	8a 89       	ldd	r24, Y+18	; 0x12
    23fe:	80 93 b2 20 	sts	0x20B2, r24
                    func_name_len = velFuncBuff[4];
                    
                    func_ID_Y = func_id;
    2402:	10 93 0f 24 	sts	0x240F, r17
    2406:	10 92 10 24 	sts	0x2410, r1
                    
                    Stop = 1;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	80 93 9c 20 	sts	0x209C, r24
                    display_flag = 0;  //clear the display flag
    2410:	10 92 fe 23 	sts	0x23FE, r1
                    if (quiet_mode_on == 0)
    2414:	80 91 b3 20 	lds	r24, 0x20B3
    2418:	88 23       	and	r24, r24
    241a:	e9 f4       	brne	.+58     	; 0x2456 <set_vel_func+0x2d2>
                        xprintf(PSTR("Setting velocity function %u for Y\n"), func_id);
    241c:	00 d0       	rcall	.+0      	; 0x241e <set_vel_func+0x29a>
    241e:	0f 92       	push	r0
    2420:	ed b7       	in	r30, 0x3d	; 61
    2422:	fe b7       	in	r31, 0x3e	; 62
    2424:	31 96       	adiw	r30, 0x01	; 1
    2426:	86 ef       	ldi	r24, 0xF6	; 246
    2428:	94 e0       	ldi	r25, 0x04	; 4
    242a:	ad b7       	in	r26, 0x3d	; 61
    242c:	be b7       	in	r27, 0x3e	; 62
    242e:	11 96       	adiw	r26, 0x01	; 1
    2430:	8d 93       	st	X+, r24
    2432:	9c 93       	st	X, r25
    2434:	12 97       	sbiw	r26, 0x02	; 2
    2436:	12 83       	std	Z+2, r17	; 0x02
    2438:	13 82       	std	Z+3, r1	; 0x03
    243a:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	07 c0       	rjmp	.+14     	; 0x2456 <set_vel_func+0x2d2>
                    
                } else {
                        xputs(PSTR("Error f_read in set_vel_func Y.\n"));
    2448:	85 ed       	ldi	r24, 0xD5	; 213
    244a:	94 e0       	ldi	r25, 0x04	; 4
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <set_vel_func+0x2ce>
                }
            } else {
                    xputs(PSTR("Error f_open in set_vel_func Y.\n"));
    244e:	84 eb       	ldi	r24, 0xB4	; 180
    2450:	94 e0       	ldi	r25, 0x04	; 4
    2452:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
            }
			
			last_load_y = funcSize_y % FUNCTION_LENGTH;
    2456:	e0 90 af 20 	lds	r14, 0x20AF
    245a:	f0 90 b0 20 	lds	r15, 0x20B0
    245e:	00 91 b1 20 	lds	r16, 0x20B1
    2462:	10 91 b2 20 	lds	r17, 0x20B2
    2466:	c8 01       	movw	r24, r16
    2468:	b7 01       	movw	r22, r14
    246a:	24 e6       	ldi	r18, 0x64	; 100
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e0       	ldi	r20, 0x00	; 0
    2470:	50 e0       	ldi	r21, 0x00	; 0
    2472:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    2476:	60 93 13 24 	sts	0x2413, r22
    247a:	70 93 14 24 	sts	0x2414, r23
			
			if (last_load_y == 0)
    247e:	67 2b       	or	r22, r23
    2480:	49 f4       	brne	.+18     	; 0x2494 <set_vel_func+0x310>
				num_buffer_load_y = funcSize_y / FUNCTION_LENGTH;		
    2482:	c8 01       	movw	r24, r16
    2484:	b7 01       	movw	r22, r14
    2486:	24 e6       	ldi	r18, 0x64	; 100
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	50 e0       	ldi	r21, 0x00	; 0
    248e:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    2492:	0a c0       	rjmp	.+20     	; 0x24a8 <set_vel_func+0x324>
			else
				num_buffer_load_y = funcSize_y / FUNCTION_LENGTH + 1;
    2494:	c8 01       	movw	r24, r16
    2496:	b7 01       	movw	r22, r14
    2498:	24 e6       	ldi	r18, 0x64	; 100
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e0       	ldi	r20, 0x00	; 0
    249e:	50 e0       	ldi	r21, 0x00	; 0
    24a0:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    24a4:	2f 5f       	subi	r18, 0xFF	; 255
    24a6:	3f 4f       	sbci	r19, 0xFF	; 255
    24a8:	20 93 b6 20 	sts	0x20B6, r18
    24ac:	30 93 b7 20 	sts	0x20B7, r19
			
		
			if (quiet_mode_on == 0){
    24b0:	80 91 b3 20 	lds	r24, 0x20B3
    24b4:	88 23       	and	r24, r24
    24b6:	c1 f5       	brne	.+112    	; 0x2528 <set_vel_func+0x3a4>
				xprintf(PSTR("funcSize_y = %u\n"), funcSize_y);
    24b8:	00 d0       	rcall	.+0      	; 0x24ba <set_vel_func+0x336>
    24ba:	00 d0       	rcall	.+0      	; 0x24bc <set_vel_func+0x338>
    24bc:	83 ea       	ldi	r24, 0xA3	; 163
    24be:	94 e0       	ldi	r25, 0x04	; 4
    24c0:	ed b7       	in	r30, 0x3d	; 61
    24c2:	fe b7       	in	r31, 0x3e	; 62
    24c4:	81 83       	std	Z+1, r24	; 0x01
    24c6:	92 83       	std	Z+2, r25	; 0x02
    24c8:	ad b7       	in	r26, 0x3d	; 61
    24ca:	be b7       	in	r27, 0x3e	; 62
    24cc:	13 96       	adiw	r26, 0x03	; 3
    24ce:	ed 92       	st	X+, r14
    24d0:	fd 92       	st	X+, r15
    24d2:	0d 93       	st	X+, r16
    24d4:	1c 93       	st	X, r17
    24d6:	16 97       	sbiw	r26, 0x06	; 6
    24d8:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
				xprintf(PSTR("last_load_y = %u\n"), last_load_y);
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	81 e9       	ldi	r24, 0x91	; 145
    24e2:	94 e0       	ldi	r25, 0x04	; 4
    24e4:	ed b7       	in	r30, 0x3d	; 61
    24e6:	fe b7       	in	r31, 0x3e	; 62
    24e8:	81 83       	std	Z+1, r24	; 0x01
    24ea:	92 83       	std	Z+2, r25	; 0x02
    24ec:	80 91 13 24 	lds	r24, 0x2413
    24f0:	90 91 14 24 	lds	r25, 0x2414
    24f4:	83 83       	std	Z+3, r24	; 0x03
    24f6:	94 83       	std	Z+4, r25	; 0x04
    24f8:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
				xprintf(PSTR("num_buffer_load_y = %u\n"), num_buffer_load_y);			
    24fc:	89 e7       	ldi	r24, 0x79	; 121
    24fe:	94 e0       	ldi	r25, 0x04	; 4
    2500:	ad b7       	in	r26, 0x3d	; 61
    2502:	be b7       	in	r27, 0x3e	; 62
    2504:	11 96       	adiw	r26, 0x01	; 1
    2506:	8d 93       	st	X+, r24
    2508:	9c 93       	st	X, r25
    250a:	12 97       	sbiw	r26, 0x02	; 2
    250c:	80 91 b6 20 	lds	r24, 0x20B6
    2510:	90 91 b7 20 	lds	r25, 0x20B7
    2514:	13 96       	adiw	r26, 0x03	; 3
    2516:	8d 93       	st	X+, r24
    2518:	9c 93       	st	X, r25
    251a:	14 97       	sbiw	r26, 0x04	; 4
    251c:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
			}
			
			default_func_y = 0;
    2528:	10 92 a4 20 	sts	0x20A4, r1
			
			//update function buffer
            fetch_update_funcY(1,0);
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <fetch_update_funcY>
    2534:	04 c0       	rjmp	.+8      	; 0x253e <set_vel_func+0x3ba>
			
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); //enable ISR
            break;
            
        default:
                xputs(PSTR("Error input for function channel.\n"));
    2536:	86 e5       	ldi	r24, 0x56	; 86
    2538:	94 e0       	ldi	r25, 0x04	; 4
    253a:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
            break;
    }
}
    253e:	c2 5f       	subi	r28, 0xF2	; 242
    2540:	dd 4f       	sbci	r29, 0xFD	; 253
    2542:	e6 e0       	ldi	r30, 0x06	; 6
    2544:	0c 94 b6 4d 	jmp	0x9b6c	; 0x9b6c <__epilogue_restores__+0x18>

00002548 <set_pos_func>:
    }
    
}


void set_pos_func(uint8_t func_channel, uint8_t func_id) {
    2548:	ae e0       	ldi	r26, 0x0E	; 14
    254a:	b2 e0       	ldi	r27, 0x02	; 2
    254c:	ea ea       	ldi	r30, 0xAA	; 170
    254e:	f2 e1       	ldi	r31, 0x12	; 18
    2550:	0c 94 9a 4d 	jmp	0x9b34	; 0x9b34 <__prologue_saves__+0x18>
    2554:	08 2f       	mov	r16, r24
    2556:	16 2f       	mov	r17, r22
    uint8_t str[12];
    uint8_t res, func_name_len;
    uint8_t posFuncBuff[512];
    
    
    if (func_id < 10)
    2558:	6a 30       	cpi	r22, 0x0A	; 10
    255a:	80 f4       	brcc	.+32     	; 0x257c <set_pos_func+0x34>
        sprintf(str, "pos000%d.fun\0", func_id);
    255c:	00 d0       	rcall	.+0      	; 0x255e <set_pos_func+0x16>
    255e:	00 d0       	rcall	.+0      	; 0x2560 <set_pos_func+0x18>
    2560:	ed b7       	in	r30, 0x3d	; 61
    2562:	fe b7       	in	r31, 0x3e	; 62
    2564:	31 96       	adiw	r30, 0x01	; 1
    2566:	ce 01       	movw	r24, r28
    2568:	03 96       	adiw	r24, 0x03	; 3
    256a:	ad b7       	in	r26, 0x3d	; 61
    256c:	be b7       	in	r27, 0x3e	; 62
    256e:	11 96       	adiw	r26, 0x01	; 1
    2570:	8d 93       	st	X+, r24
    2572:	9c 93       	st	X, r25
    2574:	12 97       	sbiw	r26, 0x02	; 2
    2576:	87 e2       	ldi	r24, 0x27	; 39
    2578:	90 e2       	ldi	r25, 0x20	; 32
    257a:	1f c0       	rjmp	.+62     	; 0x25ba <set_pos_func+0x72>
    257c:	ce 01       	movw	r24, r28
    257e:	03 96       	adiw	r24, 0x03	; 3
    else if (func_id < 100)
    2580:	64 36       	cpi	r22, 0x64	; 100
    2582:	70 f4       	brcc	.+28     	; 0x25a0 <set_pos_func+0x58>
        sprintf(str, "pos00%d.fun\0", func_id);
    2584:	00 d0       	rcall	.+0      	; 0x2586 <set_pos_func+0x3e>
    2586:	00 d0       	rcall	.+0      	; 0x2588 <set_pos_func+0x40>
    2588:	ed b7       	in	r30, 0x3d	; 61
    258a:	fe b7       	in	r31, 0x3e	; 62
    258c:	31 96       	adiw	r30, 0x01	; 1
    258e:	ad b7       	in	r26, 0x3d	; 61
    2590:	be b7       	in	r27, 0x3e	; 62
    2592:	11 96       	adiw	r26, 0x01	; 1
    2594:	8d 93       	st	X+, r24
    2596:	9c 93       	st	X, r25
    2598:	12 97       	sbiw	r26, 0x02	; 2
    259a:	85 e3       	ldi	r24, 0x35	; 53
    259c:	90 e2       	ldi	r25, 0x20	; 32
    259e:	0d c0       	rjmp	.+26     	; 0x25ba <set_pos_func+0x72>
    else if (func_id < 1000)
        sprintf(str, "pos0%d.fun\0", func_id);
    25a0:	00 d0       	rcall	.+0      	; 0x25a2 <set_pos_func+0x5a>
    25a2:	00 d0       	rcall	.+0      	; 0x25a4 <set_pos_func+0x5c>
    25a4:	ed b7       	in	r30, 0x3d	; 61
    25a6:	fe b7       	in	r31, 0x3e	; 62
    25a8:	31 96       	adiw	r30, 0x01	; 1
    25aa:	ad b7       	in	r26, 0x3d	; 61
    25ac:	be b7       	in	r27, 0x3e	; 62
    25ae:	11 96       	adiw	r26, 0x01	; 1
    25b0:	8d 93       	st	X+, r24
    25b2:	9c 93       	st	X, r25
    25b4:	12 97       	sbiw	r26, 0x02	; 2
    25b6:	82 e4       	ldi	r24, 0x42	; 66
    25b8:	90 e2       	ldi	r25, 0x20	; 32
    25ba:	82 83       	std	Z+2, r24	; 0x02
    25bc:	93 83       	std	Z+3, r25	; 0x03
    25be:	14 83       	std	Z+4, r17	; 0x04
    25c0:	15 82       	std	Z+5, r1	; 0x05
    25c2:	0e 94 ee 4f 	call	0x9fdc	; 0x9fdc <sprintf>
    25c6:	ed b7       	in	r30, 0x3d	; 61
    25c8:	fe b7       	in	r31, 0x3e	; 62
    25ca:	36 96       	adiw	r30, 0x06	; 6
    25cc:	ed bf       	out	0x3d, r30	; 61
    25ce:	fe bf       	out	0x3e, r31	; 62
    else
            xputs(PSTR("function id is too big.\n"));
    
    switch(func_channel) {
    25d0:	01 30       	cpi	r16, 0x01	; 1
    25d2:	21 f0       	breq	.+8      	; 0x25dc <set_pos_func+0x94>
    25d4:	02 30       	cpi	r16, 0x02	; 2
    25d6:	09 f0       	breq	.+2      	; 0x25da <set_pos_func+0x92>
    25d8:	94 c1       	rjmp	.+808    	; 0x2902 <set_pos_func+0x3ba>
    25da:	c7 c0       	rjmp	.+398    	; 0x276a <set_pos_func+0x222>
        case 1:    //channel x
            //read the header block and send back the function name
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            
            res = f_close(&file2);
    25dc:	8b e9       	ldi	r24, 0x9B	; 155
    25de:	94 e2       	ldi	r25, 0x24	; 36
    25e0:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <f_close>
            
            res = f_open(&file2, str, FA_OPEN_EXISTING | FA_READ);
    25e4:	8b e9       	ldi	r24, 0x9B	; 155
    25e6:	94 e2       	ldi	r25, 0x24	; 36
    25e8:	be 01       	movw	r22, r28
    25ea:	6d 5f       	subi	r22, 0xFD	; 253
    25ec:	7f 4f       	sbci	r23, 0xFF	; 255
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 91 40 	call	0x8122	; 0x8122 <f_open>
            if (res == FR_OK) {
    25f4:	88 23       	and	r24, r24
    25f6:	09 f0       	breq	.+2      	; 0x25fa <set_pos_func+0xb2>
    25f8:	44 c0       	rjmp	.+136    	; 0x2682 <set_pos_func+0x13a>
				
                res = f_read(&file2, posFuncBuff, 512, &cnt);
    25fa:	8b e9       	ldi	r24, 0x9B	; 155
    25fc:	94 e2       	ldi	r25, 0x24	; 36
    25fe:	be 01       	movw	r22, r28
    2600:	61 5f       	subi	r22, 0xF1	; 241
    2602:	7f 4f       	sbci	r23, 0xFF	; 255
    2604:	40 e0       	ldi	r20, 0x00	; 0
    2606:	52 e0       	ldi	r21, 0x02	; 2
    2608:	9e 01       	movw	r18, r28
    260a:	2f 5f       	subi	r18, 0xFF	; 255
    260c:	3f 4f       	sbci	r19, 0xFF	; 255
    260e:	0e 94 a3 3e 	call	0x7d46	; 0x7d46 <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    2612:	88 23       	and	r24, r24
    2614:	99 f5       	brne	.+102    	; 0x267c <set_pos_func+0x134>
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	80 50       	subi	r24, 0x00	; 0
    261c:	92 40       	sbci	r25, 0x02	; 2
    261e:	71 f5       	brne	.+92     	; 0x267c <set_pos_func+0x134>
                    // get the test header info
                    ((uint8_t*)&funcSize_x)[0] = posFuncBuff[0];
    2620:	8f 85       	ldd	r24, Y+15	; 0x0f
    2622:	80 93 ab 20 	sts	0x20AB, r24
                    ((uint8_t*)&funcSize_x)[1] = posFuncBuff[1];
    2626:	88 89       	ldd	r24, Y+16	; 0x10
    2628:	80 93 ac 20 	sts	0x20AC, r24
                    ((uint8_t*)&funcSize_x)[2] = posFuncBuff[2];
    262c:	89 89       	ldd	r24, Y+17	; 0x11
    262e:	80 93 ad 20 	sts	0x20AD, r24
                    ((uint8_t*)&funcSize_x)[3] = posFuncBuff[3];
    2632:	8a 89       	ldd	r24, Y+18	; 0x12
    2634:	80 93 ae 20 	sts	0x20AE, r24
                    
                    //for (tmpCnt=0; tmpCnt<func_name_len; tmpCnt++)
                    //	{func_name_x[tmpCnt] = posFuncBuff[tmpCnt+5];}
                    //func_name_x[func_name_len] = '\0';
                    
                    func_ID_X = func_id;
    2638:	10 93 0d 24 	sts	0x240D, r17
    263c:	10 92 0e 24 	sts	0x240E, r1
                    
                    Stop = 1;
    2640:	00 93 9c 20 	sts	0x209C, r16
                    display_flag = 0;  //clear the display flag
    2644:	10 92 fe 23 	sts	0x23FE, r1
                    if (quiet_mode_on == 0)
    2648:	80 91 b3 20 	lds	r24, 0x20B3
    264c:	88 23       	and	r24, r24
    264e:	e9 f4       	brne	.+58     	; 0x268a <set_pos_func+0x142>
                        xprintf(PSTR("Setting position function %u for X\n"), func_id);
    2650:	00 d0       	rcall	.+0      	; 0x2652 <set_pos_func+0x10a>
    2652:	0f 92       	push	r0
    2654:	ed b7       	in	r30, 0x3d	; 61
    2656:	fe b7       	in	r31, 0x3e	; 62
    2658:	31 96       	adiw	r30, 0x01	; 1
    265a:	87 ef       	ldi	r24, 0xF7	; 247
    265c:	96 e0       	ldi	r25, 0x06	; 6
    265e:	ad b7       	in	r26, 0x3d	; 61
    2660:	be b7       	in	r27, 0x3e	; 62
    2662:	11 96       	adiw	r26, 0x01	; 1
    2664:	8d 93       	st	X+, r24
    2666:	9c 93       	st	X, r25
    2668:	12 97       	sbiw	r26, 0x02	; 2
    266a:	12 83       	std	Z+2, r17	; 0x02
    266c:	13 82       	std	Z+3, r1	; 0x03
    266e:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	07 c0       	rjmp	.+14     	; 0x268a <set_pos_func+0x142>
                    //xprintf(PSTR("fun X: %s\n function X size: %lu bytes\n"),
                    //        func_name_x, funcSize_x);
                    
                } else 
                        xputs(PSTR("Error f_read set_pos_func X\n"));
    267c:	8a ed       	ldi	r24, 0xDA	; 218
    267e:	96 e0       	ldi	r25, 0x06	; 6
    2680:	02 c0       	rjmp	.+4      	; 0x2686 <set_pos_func+0x13e>
            } else 
                    xputs(PSTR("Error f_open in set_pos_func X.\n"));
    2682:	89 eb       	ldi	r24, 0xB9	; 185
    2684:	96 e0       	ldi	r25, 0x06	; 6
    2686:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
					
	
			last_load_x = funcSize_x % FUNCTION_LENGTH;
    268a:	e0 90 ab 20 	lds	r14, 0x20AB
    268e:	f0 90 ac 20 	lds	r15, 0x20AC
    2692:	00 91 ad 20 	lds	r16, 0x20AD
    2696:	10 91 ae 20 	lds	r17, 0x20AE
    269a:	c8 01       	movw	r24, r16
    269c:	b7 01       	movw	r22, r14
    269e:	24 e6       	ldi	r18, 0x64	; 100
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	50 e0       	ldi	r21, 0x00	; 0
    26a6:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    26aa:	60 93 11 24 	sts	0x2411, r22
    26ae:	70 93 12 24 	sts	0x2412, r23
			if (last_load_x == 0)
    26b2:	67 2b       	or	r22, r23
    26b4:	49 f4       	brne	.+18     	; 0x26c8 <set_pos_func+0x180>
				num_buffer_load_x = funcSize_x / FUNCTION_LENGTH;
    26b6:	c8 01       	movw	r24, r16
    26b8:	b7 01       	movw	r22, r14
    26ba:	24 e6       	ldi	r18, 0x64	; 100
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e0       	ldi	r20, 0x00	; 0
    26c0:	50 e0       	ldi	r21, 0x00	; 0
    26c2:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    26c6:	0a c0       	rjmp	.+20     	; 0x26dc <set_pos_func+0x194>
			else
				num_buffer_load_x = funcSize_x / FUNCTION_LENGTH + 1;
    26c8:	c8 01       	movw	r24, r16
    26ca:	b7 01       	movw	r22, r14
    26cc:	24 e6       	ldi	r18, 0x64	; 100
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    26d8:	2f 5f       	subi	r18, 0xFF	; 255
    26da:	3f 4f       	sbci	r19, 0xFF	; 255
    26dc:	20 93 b4 20 	sts	0x20B4, r18
    26e0:	30 93 b5 20 	sts	0x20B5, r19

			if (quiet_mode_on == 0)
    26e4:	80 91 b3 20 	lds	r24, 0x20B3
    26e8:	88 23       	and	r24, r24
    26ea:	c1 f5       	brne	.+112    	; 0x275c <set_pos_func+0x214>
			{
				xprintf(PSTR("funcSize_x = %u\n"), funcSize_x);
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <set_pos_func+0x1a6>
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <set_pos_func+0x1a8>
    26f0:	88 ea       	ldi	r24, 0xA8	; 168
    26f2:	96 e0       	ldi	r25, 0x06	; 6
    26f4:	ed b7       	in	r30, 0x3d	; 61
    26f6:	fe b7       	in	r31, 0x3e	; 62
    26f8:	81 83       	std	Z+1, r24	; 0x01
    26fa:	92 83       	std	Z+2, r25	; 0x02
    26fc:	ad b7       	in	r26, 0x3d	; 61
    26fe:	be b7       	in	r27, 0x3e	; 62
    2700:	13 96       	adiw	r26, 0x03	; 3
    2702:	ed 92       	st	X+, r14
    2704:	fd 92       	st	X+, r15
    2706:	0d 93       	st	X+, r16
    2708:	1c 93       	st	X, r17
    270a:	16 97       	sbiw	r26, 0x06	; 6
    270c:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
				xprintf(PSTR("last_load_x = %u\n"), last_load_x);
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	86 e9       	ldi	r24, 0x96	; 150
    2716:	96 e0       	ldi	r25, 0x06	; 6
    2718:	ed b7       	in	r30, 0x3d	; 61
    271a:	fe b7       	in	r31, 0x3e	; 62
    271c:	81 83       	std	Z+1, r24	; 0x01
    271e:	92 83       	std	Z+2, r25	; 0x02
    2720:	80 91 11 24 	lds	r24, 0x2411
    2724:	90 91 12 24 	lds	r25, 0x2412
    2728:	83 83       	std	Z+3, r24	; 0x03
    272a:	94 83       	std	Z+4, r25	; 0x04
    272c:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
				xprintf(PSTR("num_buffer_load_x = %u\n"), num_buffer_load_x);			
    2730:	8e e7       	ldi	r24, 0x7E	; 126
    2732:	96 e0       	ldi	r25, 0x06	; 6
    2734:	ad b7       	in	r26, 0x3d	; 61
    2736:	be b7       	in	r27, 0x3e	; 62
    2738:	11 96       	adiw	r26, 0x01	; 1
    273a:	8d 93       	st	X+, r24
    273c:	9c 93       	st	X, r25
    273e:	12 97       	sbiw	r26, 0x02	; 2
    2740:	80 91 b4 20 	lds	r24, 0x20B4
    2744:	90 91 b5 20 	lds	r25, 0x20B5
    2748:	13 96       	adiw	r26, 0x03	; 3
    274a:	8d 93       	st	X+, r24
    274c:	9c 93       	st	X, r25
    274e:	14 97       	sbiw	r26, 0x04	; 4
    2750:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
			}
			
			default_func_x = 0;
    275c:	10 92 a3 20 	sts	0x20A3, r1
			
			//update the function buffer
			fetch_update_funcX(1,0);
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	60 e0       	ldi	r22, 0x00	; 0
    2764:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <fetch_update_funcX>
    2768:	d0 c0       	rjmp	.+416    	; 0x290a <set_pos_func+0x3c2>
            break;
            
        case 2:
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //disable ISR
            //read the header block and send back the function name
            res = f_close(&file3);
    276a:	81 e2       	ldi	r24, 0x21	; 33
    276c:	96 e2       	ldi	r25, 0x26	; 38
    276e:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <f_close>
            
            res = f_open(&file3, str, FA_OPEN_EXISTING | FA_READ);
    2772:	81 e2       	ldi	r24, 0x21	; 33
    2774:	96 e2       	ldi	r25, 0x26	; 38
    2776:	be 01       	movw	r22, r28
    2778:	6d 5f       	subi	r22, 0xFD	; 253
    277a:	7f 4f       	sbci	r23, 0xFF	; 255
    277c:	41 e0       	ldi	r20, 0x01	; 1
    277e:	0e 94 91 40 	call	0x8122	; 0x8122 <f_open>
            if (res == FR_OK) {
    2782:	88 23       	and	r24, r24
    2784:	09 f0       	breq	.+2      	; 0x2788 <set_pos_func+0x240>
    2786:	45 c0       	rjmp	.+138    	; 0x2812 <set_pos_func+0x2ca>
                res = f_read(&file3, posFuncBuff, 512, &cnt);
    2788:	81 e2       	ldi	r24, 0x21	; 33
    278a:	96 e2       	ldi	r25, 0x26	; 38
    278c:	be 01       	movw	r22, r28
    278e:	61 5f       	subi	r22, 0xF1	; 241
    2790:	7f 4f       	sbci	r23, 0xFF	; 255
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	52 e0       	ldi	r21, 0x02	; 2
    2796:	9e 01       	movw	r18, r28
    2798:	2f 5f       	subi	r18, 0xFF	; 255
    279a:	3f 4f       	sbci	r19, 0xFF	; 255
    279c:	0e 94 a3 3e 	call	0x7d46	; 0x7d46 <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    27a0:	88 23       	and	r24, r24
    27a2:	a1 f5       	brne	.+104    	; 0x280c <set_pos_func+0x2c4>
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	9a 81       	ldd	r25, Y+2	; 0x02
    27a8:	80 50       	subi	r24, 0x00	; 0
    27aa:	92 40       	sbci	r25, 0x02	; 2
    27ac:	79 f5       	brne	.+94     	; 0x280c <set_pos_func+0x2c4>
                    // get the test header info
                    // get the test header info
                    ((uint8_t*)&funcSize_y)[0] = posFuncBuff[0];
    27ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b0:	80 93 af 20 	sts	0x20AF, r24
                    ((uint8_t*)&funcSize_y)[1] = posFuncBuff[1];
    27b4:	88 89       	ldd	r24, Y+16	; 0x10
    27b6:	80 93 b0 20 	sts	0x20B0, r24
                    ((uint8_t*)&funcSize_y)[2] = posFuncBuff[2];
    27ba:	89 89       	ldd	r24, Y+17	; 0x11
    27bc:	80 93 b1 20 	sts	0x20B1, r24
                    ((uint8_t*)&funcSize_y)[3] = posFuncBuff[3];
    27c0:	8a 89       	ldd	r24, Y+18	; 0x12
    27c2:	80 93 b2 20 	sts	0x20B2, r24
                    func_name_len = posFuncBuff[4];
                    
                    func_ID_Y = func_id;
    27c6:	10 93 0f 24 	sts	0x240F, r17
    27ca:	10 92 10 24 	sts	0x2410, r1
                    
                    Stop = 1;
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	80 93 9c 20 	sts	0x209C, r24
                    display_flag = 0;  //clear the display flag
    27d4:	10 92 fe 23 	sts	0x23FE, r1
                    if (quiet_mode_on == 0)
    27d8:	80 91 b3 20 	lds	r24, 0x20B3
    27dc:	88 23       	and	r24, r24
    27de:	09 f5       	brne	.+66     	; 0x2822 <set_pos_func+0x2da>
                        xprintf(PSTR("Setting position function %u for Y\n"), func_id);
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <set_pos_func+0x29a>
    27e2:	0f 92       	push	r0
    27e4:	ed b7       	in	r30, 0x3d	; 61
    27e6:	fe b7       	in	r31, 0x3e	; 62
    27e8:	31 96       	adiw	r30, 0x01	; 1
    27ea:	8a e5       	ldi	r24, 0x5A	; 90
    27ec:	96 e0       	ldi	r25, 0x06	; 6
    27ee:	ad b7       	in	r26, 0x3d	; 61
    27f0:	be b7       	in	r27, 0x3e	; 62
    27f2:	11 96       	adiw	r26, 0x01	; 1
    27f4:	8d 93       	st	X+, r24
    27f6:	9c 93       	st	X, r25
    27f8:	12 97       	sbiw	r26, 0x02	; 2
    27fa:	12 83       	std	Z+2, r17	; 0x02
    27fc:	13 82       	std	Z+3, r1	; 0x03
    27fe:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0b c0       	rjmp	.+22     	; 0x2822 <set_pos_func+0x2da>
                    //xprintf(PSTR("fun Y: %s\n function Y size: %lu bytes\n"),
                    //       func_name_y, funcSize_y);
                    
                } else {
                        xputs(PSTR("Error f_read set_pos_func Y.\n"));
    280c:	8c e3       	ldi	r24, 0x3C	; 60
    280e:	96 e0       	ldi	r25, 0x06	; 6
    2810:	06 c0       	rjmp	.+12     	; 0x281e <set_pos_func+0x2d6>
                }
            } else {
                if (quiet_mode_on == 0)
    2812:	80 91 b3 20 	lds	r24, 0x20B3
    2816:	88 23       	and	r24, r24
    2818:	21 f4       	brne	.+8      	; 0x2822 <set_pos_func+0x2da>
                    xputs(PSTR("Error f_open in set_pos_func Y.\n"));
    281a:	8b e1       	ldi	r24, 0x1B	; 27
    281c:	96 e0       	ldi	r25, 0x06	; 6
    281e:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
            }
			
			last_load_y = funcSize_y % FUNCTION_LENGTH;
    2822:	e0 90 af 20 	lds	r14, 0x20AF
    2826:	f0 90 b0 20 	lds	r15, 0x20B0
    282a:	00 91 b1 20 	lds	r16, 0x20B1
    282e:	10 91 b2 20 	lds	r17, 0x20B2
    2832:	c8 01       	movw	r24, r16
    2834:	b7 01       	movw	r22, r14
    2836:	24 e6       	ldi	r18, 0x64	; 100
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e0       	ldi	r20, 0x00	; 0
    283c:	50 e0       	ldi	r21, 0x00	; 0
    283e:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    2842:	60 93 13 24 	sts	0x2413, r22
    2846:	70 93 14 24 	sts	0x2414, r23
			if (last_load_y == 0)
    284a:	67 2b       	or	r22, r23
    284c:	49 f4       	brne	.+18     	; 0x2860 <set_pos_func+0x318>
				num_buffer_load_y = funcSize_y / FUNCTION_LENGTH;
    284e:	c8 01       	movw	r24, r16
    2850:	b7 01       	movw	r22, r14
    2852:	24 e6       	ldi	r18, 0x64	; 100
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    285e:	0a c0       	rjmp	.+20     	; 0x2874 <set_pos_func+0x32c>
			else
				num_buffer_load_y = funcSize_y / FUNCTION_LENGTH + 1;
    2860:	c8 01       	movw	r24, r16
    2862:	b7 01       	movw	r22, r14
    2864:	24 e6       	ldi	r18, 0x64	; 100
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e0       	ldi	r20, 0x00	; 0
    286a:	50 e0       	ldi	r21, 0x00	; 0
    286c:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    2870:	2f 5f       	subi	r18, 0xFF	; 255
    2872:	3f 4f       	sbci	r19, 0xFF	; 255
    2874:	20 93 b6 20 	sts	0x20B6, r18
    2878:	30 93 b7 20 	sts	0x20B7, r19
		
	
			if (quiet_mode_on == 0){
    287c:	80 91 b3 20 	lds	r24, 0x20B3
    2880:	88 23       	and	r24, r24
    2882:	c1 f5       	brne	.+112    	; 0x28f4 <set_pos_func+0x3ac>
				xprintf(PSTR("funcSize_y = %u\n"), funcSize_y);
    2884:	00 d0       	rcall	.+0      	; 0x2886 <set_pos_func+0x33e>
    2886:	00 d0       	rcall	.+0      	; 0x2888 <set_pos_func+0x340>
    2888:	8a e0       	ldi	r24, 0x0A	; 10
    288a:	96 e0       	ldi	r25, 0x06	; 6
    288c:	ed b7       	in	r30, 0x3d	; 61
    288e:	fe b7       	in	r31, 0x3e	; 62
    2890:	81 83       	std	Z+1, r24	; 0x01
    2892:	92 83       	std	Z+2, r25	; 0x02
    2894:	ad b7       	in	r26, 0x3d	; 61
    2896:	be b7       	in	r27, 0x3e	; 62
    2898:	13 96       	adiw	r26, 0x03	; 3
    289a:	ed 92       	st	X+, r14
    289c:	fd 92       	st	X+, r15
    289e:	0d 93       	st	X+, r16
    28a0:	1c 93       	st	X, r17
    28a2:	16 97       	sbiw	r26, 0x06	; 6
    28a4:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
				xprintf(PSTR("last_load_y = %u \n"), last_load_y);
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	87 ef       	ldi	r24, 0xF7	; 247
    28ae:	95 e0       	ldi	r25, 0x05	; 5
    28b0:	ed b7       	in	r30, 0x3d	; 61
    28b2:	fe b7       	in	r31, 0x3e	; 62
    28b4:	81 83       	std	Z+1, r24	; 0x01
    28b6:	92 83       	std	Z+2, r25	; 0x02
    28b8:	80 91 13 24 	lds	r24, 0x2413
    28bc:	90 91 14 24 	lds	r25, 0x2414
    28c0:	83 83       	std	Z+3, r24	; 0x03
    28c2:	94 83       	std	Z+4, r25	; 0x04
    28c4:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
				xprintf(PSTR("num_buffer_load_y = %u\n"), num_buffer_load_y);			
    28c8:	8f ed       	ldi	r24, 0xDF	; 223
    28ca:	95 e0       	ldi	r25, 0x05	; 5
    28cc:	ad b7       	in	r26, 0x3d	; 61
    28ce:	be b7       	in	r27, 0x3e	; 62
    28d0:	11 96       	adiw	r26, 0x01	; 1
    28d2:	8d 93       	st	X+, r24
    28d4:	9c 93       	st	X, r25
    28d6:	12 97       	sbiw	r26, 0x02	; 2
    28d8:	80 91 b6 20 	lds	r24, 0x20B6
    28dc:	90 91 b7 20 	lds	r25, 0x20B7
    28e0:	13 96       	adiw	r26, 0x03	; 3
    28e2:	8d 93       	st	X+, r24
    28e4:	9c 93       	st	X, r25
    28e6:	14 97       	sbiw	r26, 0x04	; 4
    28e8:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
			}
			
			default_func_y = 0;
    28f4:	10 92 a4 20 	sts	0x20A4, r1
			
			//update the function buffer
			fetch_update_funcY(1,0);
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	60 e0       	ldi	r22, 0x00	; 0
    28fc:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <fetch_update_funcY>
    2900:	04 c0       	rjmp	.+8      	; 0x290a <set_pos_func+0x3c2>
			
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);//enable ISR
            break;
            
        default:
                xputs(PSTR("Error input for function channel.\n"));
    2902:	8c eb       	ldi	r24, 0xBC	; 188
    2904:	95 e0       	ldi	r25, 0x05	; 5
    2906:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
            break;
    }
}
    290a:	c2 5f       	subi	r28, 0xF2	; 242
    290c:	dd 4f       	sbci	r29, 0xFD	; 253
    290e:	e6 e0       	ldi	r30, 0x06	; 6
    2910:	0c 94 b6 4d 	jmp	0x9b6c	; 0x9b6c <__epilogue_restores__+0x18>

00002914 <i2cMasterSend>:
	//reset index_x and index_y
	index_x=0;
	index_y=0;
}

void i2cMasterSend(uint8_t panel, uint8_t len, uint8_t *data) {
    2914:	1f 93       	push	r17
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	16 2f       	mov	r17, r22
    291c:	ea 01       	movw	r28, r20
    uint8_t ch;
    uint8_t addr;
    TWI_Master_t *twi;
    
    if (panel == 0) {
    291e:	88 23       	and	r24, r24
    2920:	49 f5       	brne	.+82     	; 0x2974 <i2cMasterSend+0x60>
        while (twi1.status != TWIM_STATUS_READY);
    2922:	80 91 a0 25 	lds	r24, 0x25A0
    2926:	88 23       	and	r24, r24
    2928:	e1 f7       	brne	.-8      	; 0x2922 <i2cMasterSend+0xe>
        TWI_MasterWrite(&twi1, 0, data, len);
    292a:	83 e9       	ldi	r24, 0x93	; 147
    292c:	95 e2       	ldi	r25, 0x25	; 37
    292e:	60 e0       	ldi	r22, 0x00	; 0
    2930:	ae 01       	movw	r20, r28
    2932:	21 2f       	mov	r18, r17
    2934:	0e 94 82 39 	call	0x7304	; 0x7304 <TWI_MasterWrite>
        while (twi2.status != TWIM_STATUS_READY);
    2938:	80 91 9b 28 	lds	r24, 0x289B
    293c:	88 23       	and	r24, r24
    293e:	e1 f7       	brne	.-8      	; 0x2938 <i2cMasterSend+0x24>
        TWI_MasterWrite(&twi2, 0, data, len);
    2940:	8e e8       	ldi	r24, 0x8E	; 142
    2942:	98 e2       	ldi	r25, 0x28	; 40
    2944:	60 e0       	ldi	r22, 0x00	; 0
    2946:	ae 01       	movw	r20, r28
    2948:	21 2f       	mov	r18, r17
    294a:	0e 94 82 39 	call	0x7304	; 0x7304 <TWI_MasterWrite>
        while (twi3.status != TWIM_STATUS_READY);
    294e:	80 91 48 26 	lds	r24, 0x2648
    2952:	88 23       	and	r24, r24
    2954:	e1 f7       	brne	.-8      	; 0x294e <i2cMasterSend+0x3a>
        TWI_MasterWrite(&twi3, 0, data, len);
    2956:	8b e3       	ldi	r24, 0x3B	; 59
    2958:	96 e2       	ldi	r25, 0x26	; 38
    295a:	60 e0       	ldi	r22, 0x00	; 0
    295c:	ae 01       	movw	r20, r28
    295e:	21 2f       	mov	r18, r17
    2960:	0e 94 82 39 	call	0x7304	; 0x7304 <TWI_MasterWrite>
        while (twi4.status != TWIM_STATUS_READY);
    2964:	80 91 c4 24 	lds	r24, 0x24C4
    2968:	88 23       	and	r24, r24
    296a:	e1 f7       	brne	.-8      	; 0x2964 <i2cMasterSend+0x50>
        TWI_MasterWrite(&twi4, 0, data, len);
    296c:	87 eb       	ldi	r24, 0xB7	; 183
    296e:	94 e2       	ldi	r25, 0x24	; 36
    2970:	60 e0       	ldi	r22, 0x00	; 0
    2972:	22 c0       	rjmp	.+68     	; 0x29b8 <i2cMasterSend+0xa4>
    }
    else {
        // look up the actual panel address and channel
        ch = chMap[panel];
    2974:	e8 2f       	mov	r30, r24
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	df 01       	movw	r26, r30
    297a:	a5 5b       	subi	r26, 0xB5	; 181
    297c:	b9 4d       	sbci	r27, 0xD9	; 217
    297e:	ac 91       	ld	r26, X
        addr = adrMap[panel];
    2980:	ef 50       	subi	r30, 0x0F	; 15
    2982:	f8 4d       	sbci	r31, 0xD8	; 216
    2984:	60 81       	ld	r22, Z
        if (ch != 0){
    2986:	aa 23       	and	r26, r26
    2988:	d9 f0       	breq	.+54     	; 0x29c0 <i2cMasterSend+0xac>
            
            switch (ch) {
    298a:	a3 30       	cpi	r26, 0x03	; 3
    298c:	51 f0       	breq	.+20     	; 0x29a2 <i2cMasterSend+0x8e>
    298e:	a4 30       	cpi	r26, 0x04	; 4
    2990:	59 f0       	breq	.+22     	; 0x29a8 <i2cMasterSend+0x94>
    2992:	a2 30       	cpi	r26, 0x02	; 2
    2994:	19 f4       	brne	.+6      	; 0x299c <i2cMasterSend+0x88>
    2996:	ae e8       	ldi	r26, 0x8E	; 142
    2998:	b8 e2       	ldi	r27, 0x28	; 40
    299a:	08 c0       	rjmp	.+16     	; 0x29ac <i2cMasterSend+0x98>
    299c:	a3 e9       	ldi	r26, 0x93	; 147
    299e:	b5 e2       	ldi	r27, 0x25	; 37
    29a0:	05 c0       	rjmp	.+10     	; 0x29ac <i2cMasterSend+0x98>
    29a2:	ab e3       	ldi	r26, 0x3B	; 59
    29a4:	b6 e2       	ldi	r27, 0x26	; 38
    29a6:	02 c0       	rjmp	.+4      	; 0x29ac <i2cMasterSend+0x98>
                case 2:
                    twi = &twi2;
                    break;
                case 3:
                    twi = &twi3;
                    break;
    29a8:	a7 eb       	ldi	r26, 0xB7	; 183
    29aa:	b4 e2       	ldi	r27, 0x24	; 36
                default: // send to twi1
                    twi = &twi1;
                    break;
            }
            
			while (twi->status != TWIM_STATUS_READY);
    29ac:	1d 96       	adiw	r26, 0x0d	; 13
    29ae:	8c 91       	ld	r24, X
    29b0:	1d 97       	sbiw	r26, 0x0d	; 13
    29b2:	88 23       	and	r24, r24
    29b4:	d9 f7       	brne	.-10     	; 0x29ac <i2cMasterSend+0x98>
            TWI_MasterWrite(twi, addr, data, len);
    29b6:	cd 01       	movw	r24, r26
    29b8:	ae 01       	movw	r20, r28
    29ba:	21 2f       	mov	r18, r17
    29bc:	0e 94 82 39 	call	0x7304	; 0x7304 <TWI_MasterWrite>
        }
    }
}
    29c0:	df 91       	pop	r29
    29c2:	cf 91       	pop	r28
    29c4:	1f 91       	pop	r17
    29c6:	08 95       	ret

000029c8 <handle_message_length_9>:
            i2cMasterSend(0x00, 8, ERROR_CODES[5]);
    }
}

//set gain and bias
void handle_message_length_9(uint8_t *msg_buffer) {
    29c8:	cf 93       	push	r28
    29ca:	df 93       	push	r29
    29cc:	fc 01       	movw	r30, r24
    switch(msg_buffer[0]) {
    29ce:	80 81       	ld	r24, Z
    29d0:	81 30       	cpi	r24, 0x01	; 1
    29d2:	09 f0       	breq	.+2      	; 0x29d6 <handle_message_length_9+0xe>
    29d4:	49 c0       	rjmp	.+146    	; 0x2a68 <handle_message_length_9+0xa0>
	//the value is either 0 or 1, we can combined them in 12 bytes to 
	//save serial communicaiton time

        case 0x01:
            //'send_gain_bias', all of these are signed byte values
            gain_x = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    29d6:	92 81       	ldd	r25, Z+2	; 0x02
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	21 81       	ldd	r18, Z+1	; 0x01
    29dc:	dc 01       	movw	r26, r24
    29de:	a2 0f       	add	r26, r18
    29e0:	b1 1d       	adc	r27, r1
    29e2:	a0 93 0b 27 	sts	0x270B, r26
    29e6:	b0 93 0c 27 	sts	0x270C, r27
            bias_x = (uint16_t) msg_buffer[3] + (256*msg_buffer[4]);
    29ea:	94 81       	ldd	r25, Z+4	; 0x04
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	23 81       	ldd	r18, Z+3	; 0x03
    29f0:	bc 01       	movw	r22, r24
    29f2:	62 0f       	add	r22, r18
    29f4:	71 1d       	adc	r23, r1
    29f6:	60 93 b5 24 	sts	0x24B5, r22
    29fa:	70 93 b6 24 	sts	0x24B6, r23
            gain_y = (uint16_t) msg_buffer[5] + (256*msg_buffer[6]);
    29fe:	96 81       	ldd	r25, Z+6	; 0x06
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	25 81       	ldd	r18, Z+5	; 0x05
    2a04:	ac 01       	movw	r20, r24
    2a06:	42 0f       	add	r20, r18
    2a08:	51 1d       	adc	r21, r1
    2a0a:	40 93 d0 26 	sts	0x26D0, r20
    2a0e:	50 93 d1 26 	sts	0x26D1, r21
            bias_y = (uint16_t) msg_buffer[7] + (256*msg_buffer[8]);
    2a12:	90 85       	ldd	r25, Z+8	; 0x08
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	27 81       	ldd	r18, Z+7	; 0x07
    2a18:	ec 01       	movw	r28, r24
    2a1a:	c2 0f       	add	r28, r18
    2a1c:	d1 1d       	adc	r29, r1
    2a1e:	9e 01       	movw	r18, r28
    2a20:	c0 93 c0 2a 	sts	0x2AC0, r28
    2a24:	d0 93 c1 2a 	sts	0x2AC1, r29
			if (quiet_mode_on == 0)
    2a28:	80 91 b3 20 	lds	r24, 0x20B3
    2a2c:	88 23       	and	r24, r24
    2a2e:	11 f5       	brne	.+68     	; 0x2a74 <handle_message_length_9+0xac>
                xprintf(PSTR("set_gain_bias: gain_x= %d,  bias_x= %d, gain_y= %d, bias_y=%d\n"), gain_x, bias_x, gain_y, bias_y);
    2a30:	ed b7       	in	r30, 0x3d	; 61
    2a32:	fe b7       	in	r31, 0x3e	; 62
    2a34:	3a 97       	sbiw	r30, 0x0a	; 10
    2a36:	ed bf       	out	0x3d, r30	; 61
    2a38:	fe bf       	out	0x3e, r31	; 62
    2a3a:	31 96       	adiw	r30, 0x01	; 1
    2a3c:	84 e7       	ldi	r24, 0x74	; 116
    2a3e:	9b e0       	ldi	r25, 0x0B	; 11
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	a2 83       	std	Z+2, r26	; 0x02
    2a4a:	b3 83       	std	Z+3, r27	; 0x03
    2a4c:	64 83       	std	Z+4, r22	; 0x04
    2a4e:	75 83       	std	Z+5, r23	; 0x05
    2a50:	46 83       	std	Z+6, r20	; 0x06
    2a52:	57 83       	std	Z+7, r21	; 0x07
    2a54:	20 87       	std	Z+8, r18	; 0x08
    2a56:	31 87       	std	Z+9, r19	; 0x09
    2a58:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    2a5c:	ed b7       	in	r30, 0x3d	; 61
    2a5e:	fe b7       	in	r31, 0x3e	; 62
    2a60:	3a 96       	adiw	r30, 0x0a	; 10
    2a62:	ed bf       	out	0x3d, r30	; 61
    2a64:	fe bf       	out	0x3e, r31	; 62
    2a66:	06 c0       	rjmp	.+12     	; 0x2a74 <handle_message_length_9+0xac>
            break;
		
		default:
            i2cMasterSend(0x00, 8, ERROR_CODES[6]);
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	68 e0       	ldi	r22, 0x08	; 8
    2a6c:	40 ef       	ldi	r20, 0xF0	; 240
    2a6e:	50 e2       	ldi	r21, 0x20	; 32
    2a70:	0e 94 8a 14 	call	0x2914	; 0x2914 <i2cMasterSend>
			
	}
}
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	08 95       	ret

00002a7a <handle_message_length_4>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[3]);
    }
}

void handle_message_length_4(uint8_t *msg_buffer) {
    2a7a:	fc 01       	movw	r30, r24
    int16_t setVal;
	//'set_ao'
    switch(msg_buffer[0]) {
    2a7c:	80 81       	ld	r24, Z
    2a7e:	80 31       	cpi	r24, 0x10	; 16
    2a80:	19 f0       	breq	.+6      	; 0x2a88 <handle_message_length_4+0xe>
    2a82:	81 31       	cpi	r24, 0x11	; 17
    2a84:	a9 f4       	brne	.+42     	; 0x2ab0 <handle_message_length_4+0x36>
    2a86:	07 c0       	rjmp	.+14     	; 0x2a96 <handle_message_length_4+0x1c>
        case 0x10: //set a value ranging from 0-32767 (0-10V) to one of the DAC1~4. 
		    setVal = (int16_t) msg_buffer[2] + (256*msg_buffer[3]);
            analogWrite(msg_buffer[1] - 1, setVal);
    2a88:	81 81       	ldd	r24, Z+1	; 0x01
    2a8a:	73 81       	ldd	r23, Z+3	; 0x03
    2a8c:	60 e0       	ldi	r22, 0x00	; 0
    2a8e:	92 81       	ldd	r25, Z+2	; 0x02
    2a90:	69 0f       	add	r22, r25
    2a92:	71 1d       	adc	r23, r1
    2a94:	09 c0       	rjmp	.+18     	; 0x2aa8 <handle_message_length_4+0x2e>
            break;
		case 0x11:  //set a value ranging from -32767 to 0(-10V-0)  to one of the DAC1-4 
			setVal = (int16_t) msg_buffer[2] + (256*msg_buffer[3]);
    2a96:	73 81       	ldd	r23, Z+3	; 0x03
    2a98:	60 e0       	ldi	r22, 0x00	; 0
    2a9a:	82 81       	ldd	r24, Z+2	; 0x02
    2a9c:	68 0f       	add	r22, r24
    2a9e:	71 1d       	adc	r23, r1
			setVal = -setVal;
            analogWrite(msg_buffer[1] - 1, setVal);
    2aa0:	81 81       	ldd	r24, Z+1	; 0x01
    2aa2:	70 95       	com	r23
    2aa4:	61 95       	neg	r22
    2aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa8:	81 50       	subi	r24, 0x01	; 1
    2aaa:	0e 94 2a 2b 	call	0x5654	; 0x5654 <analogWrite>
    2aae:	08 95       	ret
            break;
        default:   
			i2cMasterSend(0x00, 8, ERROR_CODES[4]);
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	68 e0       	ldi	r22, 0x08	; 8
    2ab4:	40 ee       	ldi	r20, 0xE0	; 224
    2ab6:	50 e2       	ldi	r21, 0x20	; 32
    2ab8:	0e 94 8a 14 	call	0x2914	; 0x2914 <i2cMasterSend>
    2abc:	08 95       	ret

00002abe <handle_message_length_3>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[2]);
    }
}

void handle_message_length_3(uint8_t *msg_buffer) {
    2abe:	a2 e0       	ldi	r26, 0x02	; 2
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	e5 e6       	ldi	r30, 0x65	; 101
    2ac4:	f5 e1       	ldi	r31, 0x15	; 21
    2ac6:	0c 94 9b 4d 	jmp	0x9b36	; 0x9b36 <__prologue_saves__+0x1a>
    2aca:	8c 01       	movw	r16, r24
    uint8_t target_panel_addr;
    uint8_t CMD[2];
    uint16_t funcX_freq, funcY_freq;
    
    switch(msg_buffer[0]) {
    2acc:	fc 01       	movw	r30, r24
    2ace:	80 81       	ld	r24, Z
    2ad0:	85 32       	cpi	r24, 0x25	; 37
    2ad2:	09 f4       	brne	.+2      	; 0x2ad6 <handle_message_length_3+0x18>
    2ad4:	b5 c0       	rjmp	.+362    	; 0x2c40 <handle_message_length_3+0x182>
    2ad6:	86 32       	cpi	r24, 0x26	; 38
    2ad8:	50 f4       	brcc	.+20     	; 0x2aee <handle_message_length_3+0x30>
    2ada:	85 31       	cpi	r24, 0x15	; 21
    2adc:	09 f4       	brne	.+2      	; 0x2ae0 <handle_message_length_3+0x22>
    2ade:	9a c0       	rjmp	.+308    	; 0x2c14 <handle_message_length_3+0x156>
    2ae0:	80 32       	cpi	r24, 0x20	; 32
    2ae2:	09 f4       	brne	.+2      	; 0x2ae6 <handle_message_length_3+0x28>
    2ae4:	a0 c0       	rjmp	.+320    	; 0x2c26 <handle_message_length_3+0x168>
    2ae6:	80 31       	cpi	r24, 0x10	; 16
    2ae8:	09 f0       	breq	.+2      	; 0x2aec <handle_message_length_3+0x2e>
    2aea:	1d c1       	rjmp	.+570    	; 0x2d26 <handle_message_length_3+0x268>
    2aec:	8b c0       	rjmp	.+278    	; 0x2c04 <handle_message_length_3+0x146>
    2aee:	85 33       	cpi	r24, 0x35	; 53
    2af0:	09 f4       	brne	.+2      	; 0x2af4 <handle_message_length_3+0x36>
    2af2:	ee c0       	rjmp	.+476    	; 0x2cd0 <handle_message_length_3+0x212>
    2af4:	8f 3f       	cpi	r24, 0xFF	; 255
    2af6:	21 f0       	breq	.+8      	; 0x2b00 <handle_message_length_3+0x42>
    2af8:	80 33       	cpi	r24, 0x30	; 48
    2afa:	09 f0       	breq	.+2      	; 0x2afe <handle_message_length_3+0x40>
    2afc:	14 c1       	rjmp	.+552    	; 0x2d26 <handle_message_length_3+0x268>
    2afe:	be c0       	rjmp	.+380    	; 0x2c7c <handle_message_length_3+0x1be>
        case 0xFF:  //address panel
            target_panel_addr = msg_buffer[1];  //put in error check, in range < 127
    2b00:	f8 01       	movw	r30, r16
    2b02:	f1 80       	ldd	r15, Z+1	; 0x01
            //sends a reset command out to panel at taget address
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
    2b04:	80 91 a0 25 	lds	r24, 0x25A0
    2b08:	88 23       	and	r24, r24
    2b0a:	e1 f7       	brne	.-8      	; 0x2b04 <handle_message_length_3+0x46>
            TWI_MasterWrite(&twi1, target_panel_addr, RESET, 2);
    2b0c:	83 e9       	ldi	r24, 0x93	; 147
    2b0e:	95 e2       	ldi	r25, 0x25	; 37
    2b10:	6f 2d       	mov	r22, r15
    2b12:	40 e0       	ldi	r20, 0x00	; 0
    2b14:	51 e2       	ldi	r21, 0x21	; 33
    2b16:	22 e0       	ldi	r18, 0x02	; 2
    2b18:	0e 94 82 39 	call	0x7304	; 0x7304 <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    2b1c:	80 91 9b 28 	lds	r24, 0x289B
    2b20:	88 23       	and	r24, r24
    2b22:	e1 f7       	brne	.-8      	; 0x2b1c <handle_message_length_3+0x5e>
            TWI_MasterWrite(&twi2, target_panel_addr, RESET, 2);
    2b24:	8e e8       	ldi	r24, 0x8E	; 142
    2b26:	98 e2       	ldi	r25, 0x28	; 40
    2b28:	6f 2d       	mov	r22, r15
    2b2a:	40 e0       	ldi	r20, 0x00	; 0
    2b2c:	51 e2       	ldi	r21, 0x21	; 33
    2b2e:	22 e0       	ldi	r18, 0x02	; 2
    2b30:	0e 94 82 39 	call	0x7304	; 0x7304 <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    2b34:	80 91 48 26 	lds	r24, 0x2648
    2b38:	88 23       	and	r24, r24
    2b3a:	e1 f7       	brne	.-8      	; 0x2b34 <handle_message_length_3+0x76>
            TWI_MasterWrite(&twi3, target_panel_addr, RESET, 2);
    2b3c:	8b e3       	ldi	r24, 0x3B	; 59
    2b3e:	96 e2       	ldi	r25, 0x26	; 38
    2b40:	6f 2d       	mov	r22, r15
    2b42:	40 e0       	ldi	r20, 0x00	; 0
    2b44:	51 e2       	ldi	r21, 0x21	; 33
    2b46:	22 e0       	ldi	r18, 0x02	; 2
    2b48:	0e 94 82 39 	call	0x7304	; 0x7304 <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    2b4c:	80 91 c4 24 	lds	r24, 0x24C4
    2b50:	88 23       	and	r24, r24
    2b52:	e1 f7       	brne	.-8      	; 0x2b4c <handle_message_length_3+0x8e>
            TWI_MasterWrite(&twi4, target_panel_addr, RESET, 2);
    2b54:	87 eb       	ldi	r24, 0xB7	; 183
    2b56:	94 e2       	ldi	r25, 0x24	; 36
    2b58:	6f 2d       	mov	r22, r15
    2b5a:	40 e0       	ldi	r20, 0x00	; 0
    2b5c:	51 e2       	ldi	r21, 0x21	; 33
    2b5e:	22 e0       	ldi	r18, 0x02	; 2
    2b60:	0e 94 82 39 	call	0x7304	; 0x7304 <TWI_MasterWrite>
    2b64:	80 ef       	ldi	r24, 0xF0	; 240
    2b66:	95 e5       	ldi	r25, 0x55	; 85
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b68:	20 e2       	ldi	r18, 0x20	; 32
    2b6a:	33 e0       	ldi	r19, 0x03	; 3
    2b6c:	f9 01       	movw	r30, r18
    2b6e:	31 97       	sbiw	r30, 0x01	; 1
    2b70:	f1 f7       	brne	.-4      	; 0x2b6e <handle_message_length_3+0xb0>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b72:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b74:	d9 f7       	brne	.-10     	; 0x2b6c <handle_message_length_3+0xae>
            //i2cMasterSend(target_panel_addr, 2, RESET);
            
            _delay_ms(2200);
            CMD[0] = 0xFF; CMD[1] = msg_buffer[2];   //send change address command
    2b76:	8f ef       	ldi	r24, 0xFF	; 255
    2b78:	89 83       	std	Y+1, r24	; 0x01
    2b7a:	f8 01       	movw	r30, r16
    2b7c:	92 81       	ldd	r25, Z+2	; 0x02
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
    2b7e:	80 91 a0 25 	lds	r24, 0x25A0
    2b82:	88 23       	and	r24, r24
    2b84:	e1 f7       	brne	.-8      	; 0x2b7e <handle_message_length_3+0xc0>
            while (twi4.status != TWIM_STATUS_READY);
            TWI_MasterWrite(&twi4, target_panel_addr, RESET, 2);
            //i2cMasterSend(target_panel_addr, 2, RESET);
            
            _delay_ms(2200);
            CMD[0] = 0xFF; CMD[1] = msg_buffer[2];   //send change address command
    2b86:	9a 83       	std	Y+2, r25	; 0x02
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
            TWI_MasterWrite(&twi1, target_panel_addr, CMD, 2);
    2b88:	83 e9       	ldi	r24, 0x93	; 147
    2b8a:	95 e2       	ldi	r25, 0x25	; 37
    2b8c:	6f 2d       	mov	r22, r15
    2b8e:	ae 01       	movw	r20, r28
    2b90:	4f 5f       	subi	r20, 0xFF	; 255
    2b92:	5f 4f       	sbci	r21, 0xFF	; 255
    2b94:	22 e0       	ldi	r18, 0x02	; 2
    2b96:	0e 94 82 39 	call	0x7304	; 0x7304 <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    2b9a:	80 91 9b 28 	lds	r24, 0x289B
    2b9e:	88 23       	and	r24, r24
    2ba0:	e1 f7       	brne	.-8      	; 0x2b9a <handle_message_length_3+0xdc>
            TWI_MasterWrite(&twi2, target_panel_addr, CMD, 2);
    2ba2:	8e e8       	ldi	r24, 0x8E	; 142
    2ba4:	98 e2       	ldi	r25, 0x28	; 40
    2ba6:	6f 2d       	mov	r22, r15
    2ba8:	ae 01       	movw	r20, r28
    2baa:	4f 5f       	subi	r20, 0xFF	; 255
    2bac:	5f 4f       	sbci	r21, 0xFF	; 255
    2bae:	22 e0       	ldi	r18, 0x02	; 2
    2bb0:	0e 94 82 39 	call	0x7304	; 0x7304 <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    2bb4:	80 91 48 26 	lds	r24, 0x2648
    2bb8:	88 23       	and	r24, r24
    2bba:	e1 f7       	brne	.-8      	; 0x2bb4 <handle_message_length_3+0xf6>
            TWI_MasterWrite(&twi3, target_panel_addr, CMD, 2);
    2bbc:	8b e3       	ldi	r24, 0x3B	; 59
    2bbe:	96 e2       	ldi	r25, 0x26	; 38
    2bc0:	6f 2d       	mov	r22, r15
    2bc2:	ae 01       	movw	r20, r28
    2bc4:	4f 5f       	subi	r20, 0xFF	; 255
    2bc6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bc8:	22 e0       	ldi	r18, 0x02	; 2
    2bca:	0e 94 82 39 	call	0x7304	; 0x7304 <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    2bce:	80 91 c4 24 	lds	r24, 0x24C4
    2bd2:	88 23       	and	r24, r24
    2bd4:	e1 f7       	brne	.-8      	; 0x2bce <handle_message_length_3+0x110>
            TWI_MasterWrite(&twi4, target_panel_addr, CMD, 2);
    2bd6:	87 eb       	ldi	r24, 0xB7	; 183
    2bd8:	94 e2       	ldi	r25, 0x24	; 36
    2bda:	6f 2d       	mov	r22, r15
    2bdc:	ae 01       	movw	r20, r28
    2bde:	4f 5f       	subi	r20, 0xFF	; 255
    2be0:	5f 4f       	sbci	r21, 0xFF	; 255
    2be2:	22 e0       	ldi	r18, 0x02	; 2
    2be4:	0e 94 82 39 	call	0x7304	; 0x7304 <TWI_MasterWrite>
    2be8:	84 ef       	ldi	r24, 0xF4	; 244
    2bea:	91 e0       	ldi	r25, 0x01	; 1
    2bec:	20 e2       	ldi	r18, 0x20	; 32
    2bee:	33 e0       	ldi	r19, 0x03	; 3
    2bf0:	f9 01       	movw	r30, r18
    2bf2:	31 97       	sbiw	r30, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <handle_message_length_3+0x134>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf8:	d9 f7       	brne	.-10     	; 0x2bf0 <handle_message_length_3+0x132>
            //i2cMasterSend(target_panel_addr, 2, CMD);
            
            _delay_ms(50);
            //reset all panels again
            i2cMasterSend(0, 2, RESET);
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	62 e0       	ldi	r22, 0x02	; 2
    2bfe:	40 e0       	ldi	r20, 0x00	; 0
    2c00:	51 e2       	ldi	r21, 0x21	; 33
    2c02:	95 c0       	rjmp	.+298    	; 0x2d2e <handle_message_length_3+0x270>
            
            break;
            
        case 0x10:
            x_mode = msg_buffer[1];
    2c04:	f8 01       	movw	r30, r16
    2c06:	81 81       	ldd	r24, Z+1	; 0x01
    2c08:	80 93 cc 26 	sts	0x26CC, r24
            y_mode = msg_buffer[2];
    2c0c:	82 81       	ldd	r24, Z+2	; 0x02
    2c0e:	80 93 0a 27 	sts	0x270A, r24
    2c12:	8f c0       	rjmp	.+286    	; 0x2d32 <handle_message_length_3+0x274>
            //put in an error message if value is not 0, 1, or 2.
            break;
            
        case 0x15:   //this is a set position function
            if (msg_buffer[2] == 0){
    2c14:	f8 01       	movw	r30, r16
    2c16:	62 81       	ldd	r22, Z+2	; 0x02
    2c18:	66 23       	and	r22, r22
    2c1a:	49 f0       	breq	.+18     	; 0x2c2e <handle_message_length_3+0x170>
                set_default_func(msg_buffer[1]);}
            else
                set_pos_func(msg_buffer[1], msg_buffer[2]);
    2c1c:	f8 01       	movw	r30, r16
    2c1e:	81 81       	ldd	r24, Z+1	; 0x01
    2c20:	0e 94 a4 12 	call	0x2548	; 0x2548 <set_pos_func>
    2c24:	86 c0       	rjmp	.+268    	; 0x2d32 <handle_message_length_3+0x274>
            break;
            
        case 0x20:   //this is a set velocity function
            if (msg_buffer[2] == 0){
    2c26:	f8 01       	movw	r30, r16
    2c28:	62 81       	ldd	r22, Z+2	; 0x02
    2c2a:	66 23       	and	r22, r22
    2c2c:	21 f4       	brne	.+8      	; 0x2c36 <handle_message_length_3+0x178>
                set_default_func(msg_buffer[1]);}
    2c2e:	81 81       	ldd	r24, Z+1	; 0x01
    2c30:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <set_default_func>
    2c34:	7e c0       	rjmp	.+252    	; 0x2d32 <handle_message_length_3+0x274>
            else
                set_vel_func(msg_buffer[1], msg_buffer[2]);
    2c36:	f8 01       	movw	r30, r16
    2c38:	81 81       	ldd	r24, Z+1	; 0x01
    2c3a:	0e 94 c2 10 	call	0x2184	; 0x2184 <set_vel_func>
    2c3e:	79 c0       	rjmp	.+242    	; 0x2d32 <handle_message_length_3+0x274>
            break;
            
        case 0x25: // this is a set function generator frequency
            funcX_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    2c40:	f8 01       	movw	r30, r16
    2c42:	92 81       	ldd	r25, Z+2	; 0x02
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	21 81       	ldd	r18, Z+1	; 0x01
    2c48:	8c 01       	movw	r16, r24
    2c4a:	02 0f       	add	r16, r18
    2c4c:	11 1d       	adc	r17, r1
            functionX_rate = OVERFLOW_RATE/funcX_freq;
    2c4e:	98 01       	movw	r18, r16
    2c50:	40 e0       	ldi	r20, 0x00	; 0
    2c52:	50 e0       	ldi	r21, 0x00	; 0
    2c54:	62 e1       	ldi	r22, 0x12	; 18
    2c56:	7a e7       	ldi	r23, 0x7A	; 122
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	0e 94 73 4d 	call	0x9ae6	; 0x9ae6 <__divmodsi4>
    2c60:	20 93 a5 20 	sts	0x20A5, r18
    2c64:	30 93 a6 20 	sts	0x20A6, r19
            if (quiet_mode_on == 0)
    2c68:	80 91 b3 20 	lds	r24, 0x20B3
    2c6c:	88 23       	and	r24, r24
    2c6e:	09 f0       	breq	.+2      	; 0x2c72 <handle_message_length_3+0x1b4>
    2c70:	60 c0       	rjmp	.+192    	; 0x2d32 <handle_message_length_3+0x274>
                xprintf(PSTR("function X update frequency = %u.\n"), funcX_freq);
    2c72:	00 d0       	rcall	.+0      	; 0x2c74 <handle_message_length_3+0x1b6>
    2c74:	0f 92       	push	r0
    2c76:	82 e1       	ldi	r24, 0x12	; 18
    2c78:	9c e0       	ldi	r25, 0x0C	; 12
    2c7a:	1d c0       	rjmp	.+58     	; 0x2cb6 <handle_message_length_3+0x1f8>
            break;
            
        case 0x30: // this is a set function generator frequency
            funcY_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    2c7c:	f8 01       	movw	r30, r16
    2c7e:	92 81       	ldd	r25, Z+2	; 0x02
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	21 81       	ldd	r18, Z+1	; 0x01
    2c84:	8c 01       	movw	r16, r24
    2c86:	02 0f       	add	r16, r18
    2c88:	11 1d       	adc	r17, r1
            functionY_rate = OVERFLOW_RATE/funcY_freq;
    2c8a:	98 01       	movw	r18, r16
    2c8c:	40 e0       	ldi	r20, 0x00	; 0
    2c8e:	50 e0       	ldi	r21, 0x00	; 0
    2c90:	62 e1       	ldi	r22, 0x12	; 18
    2c92:	7a e7       	ldi	r23, 0x7A	; 122
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	0e 94 73 4d 	call	0x9ae6	; 0x9ae6 <__divmodsi4>
    2c9c:	20 93 a7 20 	sts	0x20A7, r18
    2ca0:	30 93 a8 20 	sts	0x20A8, r19
            if (quiet_mode_on == 0)
    2ca4:	80 91 b3 20 	lds	r24, 0x20B3
    2ca8:	88 23       	and	r24, r24
    2caa:	09 f0       	breq	.+2      	; 0x2cae <handle_message_length_3+0x1f0>
    2cac:	42 c0       	rjmp	.+132    	; 0x2d32 <handle_message_length_3+0x274>
                xprintf(PSTR("function Y update frequency = %u.\n"), funcY_freq);
    2cae:	00 d0       	rcall	.+0      	; 0x2cb0 <handle_message_length_3+0x1f2>
    2cb0:	0f 92       	push	r0
    2cb2:	8f ee       	ldi	r24, 0xEF	; 239
    2cb4:	9b e0       	ldi	r25, 0x0B	; 11
    2cb6:	ed b7       	in	r30, 0x3d	; 61
    2cb8:	fe b7       	in	r31, 0x3e	; 62
    2cba:	81 83       	std	Z+1, r24	; 0x01
    2cbc:	92 83       	std	Z+2, r25	; 0x02
    2cbe:	03 83       	std	Z+3, r16	; 0x03
    2cc0:	14 83       	std	Z+4, r17	; 0x04
    2cc2:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	0f 90       	pop	r0
    2ccc:	0f 90       	pop	r0
    2cce:	31 c0       	rjmp	.+98     	; 0x2d32 <handle_message_length_3+0x274>
            break;
			
		case 0x35: //set resoultion_x and resolution_y	
			resolution_x = (uint32_t)msg_buffer[1] * 4095/10;
    2cd0:	f8 01       	movw	r30, r16
    2cd2:	61 81       	ldd	r22, Z+1	; 0x01
    2cd4:	70 e0       	ldi	r23, 0x00	; 0
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	2f ef       	ldi	r18, 0xFF	; 255
    2cdc:	3f e0       	ldi	r19, 0x0F	; 15
    2cde:	40 e0       	ldi	r20, 0x00	; 0
    2ce0:	50 e0       	ldi	r21, 0x00	; 0
    2ce2:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    2ce6:	2a e0       	ldi	r18, 0x0A	; 10
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	40 e0       	ldi	r20, 0x00	; 0
    2cec:	50 e0       	ldi	r21, 0x00	; 0
    2cee:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    2cf2:	20 93 9d 20 	sts	0x209D, r18
    2cf6:	30 93 9e 20 	sts	0x209E, r19
			resolution_y = (uint32_t)msg_buffer[2] * 4095/10;
    2cfa:	f8 01       	movw	r30, r16
    2cfc:	62 81       	ldd	r22, Z+2	; 0x02
    2cfe:	70 e0       	ldi	r23, 0x00	; 0
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	2f ef       	ldi	r18, 0xFF	; 255
    2d06:	3f e0       	ldi	r19, 0x0F	; 15
    2d08:	40 e0       	ldi	r20, 0x00	; 0
    2d0a:	50 e0       	ldi	r21, 0x00	; 0
    2d0c:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    2d10:	2a e0       	ldi	r18, 0x0A	; 10
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	40 e0       	ldi	r20, 0x00	; 0
    2d16:	50 e0       	ldi	r21, 0x00	; 0
    2d18:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    2d1c:	20 93 9f 20 	sts	0x209F, r18
    2d20:	30 93 a0 20 	sts	0x20A0, r19
    2d24:	06 c0       	rjmp	.+12     	; 0x2d32 <handle_message_length_3+0x274>
			break;			
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[3]);
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	68 e0       	ldi	r22, 0x08	; 8
    2d2a:	48 ed       	ldi	r20, 0xD8	; 216
    2d2c:	50 e2       	ldi	r21, 0x20	; 32
    2d2e:	0e 94 8a 14 	call	0x2914	; 0x2914 <i2cMasterSend>
    }
}
    2d32:	22 96       	adiw	r28, 0x02	; 2
    2d34:	e5 e0       	ldi	r30, 0x05	; 5
    2d36:	0c 94 b7 4d 	jmp	0x9b6e	; 0x9b6e <__epilogue_restores__+0x1a>

00002d3a <set_hwConfig>:
    xputs(PSTR("Error opening pattern file\n"));

	usePreloadedPattern = 0;
}

void set_hwConfig(uint8_t config_num) {
    2d3a:	a2 e8       	ldi	r26, 0x82	; 130
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	e3 ea       	ldi	r30, 0xA3	; 163
    2d40:	f6 e1       	ldi	r31, 0x16	; 22
    2d42:	0c 94 98 4d 	jmp	0x9b30	; 0x9b30 <__prologue_saves__+0x14>
    2d46:	28 2f       	mov	r18, r24
	static uint8_t str[12];
    uint8_t res, b1;
    uint8_t  tempBuff[128];
	uint16_t cnt;
		
    if (config_num < 10)
    2d48:	8a 30       	cpi	r24, 0x0A	; 10
    2d4a:	80 f4       	brcc	.+32     	; 0x2d6c <set_hwConfig+0x32>
        sprintf(str, "cfg000%d.cfg\0", config_num);
    2d4c:	00 d0       	rcall	.+0      	; 0x2d4e <set_hwConfig+0x14>
    2d4e:	00 d0       	rcall	.+0      	; 0x2d50 <set_hwConfig+0x16>
    2d50:	ed b7       	in	r30, 0x3d	; 61
    2d52:	fe b7       	in	r31, 0x3e	; 62
    2d54:	31 96       	adiw	r30, 0x01	; 1
    2d56:	85 e1       	ldi	r24, 0x15	; 21
    2d58:	94 e2       	ldi	r25, 0x24	; 36
    2d5a:	ad b7       	in	r26, 0x3d	; 61
    2d5c:	be b7       	in	r27, 0x3e	; 62
    2d5e:	11 96       	adiw	r26, 0x01	; 1
    2d60:	8d 93       	st	X+, r24
    2d62:	9c 93       	st	X, r25
    2d64:	12 97       	sbiw	r26, 0x02	; 2
    2d66:	8e e4       	ldi	r24, 0x4E	; 78
    2d68:	90 e2       	ldi	r25, 0x20	; 32
    2d6a:	1f c0       	rjmp	.+62     	; 0x2daa <set_hwConfig+0x70>
    2d6c:	85 e1       	ldi	r24, 0x15	; 21
    2d6e:	94 e2       	ldi	r25, 0x24	; 36
    else if (config_num < 100)
    2d70:	24 36       	cpi	r18, 0x64	; 100
    2d72:	70 f4       	brcc	.+28     	; 0x2d90 <set_hwConfig+0x56>
        sprintf(str, "cfg00%d.cfg\0", config_num);
    2d74:	00 d0       	rcall	.+0      	; 0x2d76 <set_hwConfig+0x3c>
    2d76:	00 d0       	rcall	.+0      	; 0x2d78 <set_hwConfig+0x3e>
    2d78:	ed b7       	in	r30, 0x3d	; 61
    2d7a:	fe b7       	in	r31, 0x3e	; 62
    2d7c:	31 96       	adiw	r30, 0x01	; 1
    2d7e:	ad b7       	in	r26, 0x3d	; 61
    2d80:	be b7       	in	r27, 0x3e	; 62
    2d82:	11 96       	adiw	r26, 0x01	; 1
    2d84:	8d 93       	st	X+, r24
    2d86:	9c 93       	st	X, r25
    2d88:	12 97       	sbiw	r26, 0x02	; 2
    2d8a:	8c e5       	ldi	r24, 0x5C	; 92
    2d8c:	90 e2       	ldi	r25, 0x20	; 32
    2d8e:	0d c0       	rjmp	.+26     	; 0x2daa <set_hwConfig+0x70>
    else if (config_num < 1000)
        sprintf(str, "cfg0%d.cfg\0", config_num);
    2d90:	00 d0       	rcall	.+0      	; 0x2d92 <set_hwConfig+0x58>
    2d92:	00 d0       	rcall	.+0      	; 0x2d94 <set_hwConfig+0x5a>
    2d94:	ed b7       	in	r30, 0x3d	; 61
    2d96:	fe b7       	in	r31, 0x3e	; 62
    2d98:	31 96       	adiw	r30, 0x01	; 1
    2d9a:	ad b7       	in	r26, 0x3d	; 61
    2d9c:	be b7       	in	r27, 0x3e	; 62
    2d9e:	11 96       	adiw	r26, 0x01	; 1
    2da0:	8d 93       	st	X+, r24
    2da2:	9c 93       	st	X, r25
    2da4:	12 97       	sbiw	r26, 0x02	; 2
    2da6:	89 e6       	ldi	r24, 0x69	; 105
    2da8:	90 e2       	ldi	r25, 0x20	; 32
    2daa:	82 83       	std	Z+2, r24	; 0x02
    2dac:	93 83       	std	Z+3, r25	; 0x03
    2dae:	24 83       	std	Z+4, r18	; 0x04
    2db0:	15 82       	std	Z+5, r1	; 0x05
    2db2:	0e 94 ee 4f 	call	0x9fdc	; 0x9fdc <sprintf>
    2db6:	ed b7       	in	r30, 0x3d	; 61
    2db8:	fe b7       	in	r31, 0x3e	; 62
    2dba:	36 96       	adiw	r30, 0x06	; 6
    2dbc:	ed bf       	out	0x3d, r30	; 61
    2dbe:	fe bf       	out	0x3e, r31	; 62
    else
            xputs(PSTR("config_num is too big.\n"));
			
    res = f_open(&file4, str, FA_OPEN_EXISTING | FA_READ);
    2dc0:	8d e0       	ldi	r24, 0x0D	; 13
    2dc2:	97 e2       	ldi	r25, 0x27	; 39
    2dc4:	65 e1       	ldi	r22, 0x15	; 21
    2dc6:	74 e2       	ldi	r23, 0x24	; 36
    2dc8:	41 e0       	ldi	r20, 0x01	; 1
    2dca:	0e 94 91 40 	call	0x8122	; 0x8122 <f_open>
    if (res == FR_OK) {
    2dce:	88 23       	and	r24, r24
    2dd0:	c9 f5       	brne	.+114    	; 0x2e44 <set_hwConfig+0x10a>
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&file4, tempBuff, 128, &cnt);
    2dd2:	93 e0       	ldi	r25, 0x03	; 3
    2dd4:	c9 2e       	mov	r12, r25
    2dd6:	d1 2c       	mov	r13, r1
    2dd8:	cc 0e       	add	r12, r28
    2dda:	dd 1e       	adc	r13, r29
    2ddc:	8d e0       	ldi	r24, 0x0D	; 13
    2dde:	97 e2       	ldi	r25, 0x27	; 39
    2de0:	b6 01       	movw	r22, r12
    2de2:	40 e8       	ldi	r20, 0x80	; 128
    2de4:	50 e0       	ldi	r21, 0x00	; 0
    2de6:	9e 01       	movw	r18, r28
    2de8:	2f 5f       	subi	r18, 0xFF	; 255
    2dea:	3f 4f       	sbci	r19, 0xFF	; 255
    2dec:	0e 94 a3 3e 	call	0x7d46	; 0x7d46 <f_read>
        if ((res == FR_OK) && (cnt == 128)) {
    2df0:	88 23       	and	r24, r24
    2df2:	09 f5       	brne	.+66     	; 0x2e36 <set_hwConfig+0xfc>
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	9a 81       	ldd	r25, Y+2	; 0x02
    2df8:	80 38       	cpi	r24, 0x80	; 128
    2dfa:	91 05       	cpc	r25, r1
    2dfc:	e1 f4       	brne	.+56     	; 0x2e36 <set_hwConfig+0xfc>
    2dfe:	8c e4       	ldi	r24, 0x4C	; 76
    2e00:	e8 2e       	mov	r14, r24
    2e02:	86 e2       	ldi	r24, 0x26	; 38
    2e04:	f8 2e       	mov	r15, r24
    2e06:	00 e0       	ldi	r16, 0x00	; 0
    2e08:	10 e0       	ldi	r17, 0x00	; 0
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
    2e0a:	f6 01       	movw	r30, r12
    2e0c:	e0 0f       	add	r30, r16
    2e0e:	f1 1f       	adc	r31, r17
    2e10:	60 81       	ld	r22, Z
    2e12:	d7 01       	movw	r26, r14
    2e14:	6d 93       	st	X+, r22
    2e16:	7d 01       	movw	r14, r26
    xputs(PSTR("Error opening pattern file\n"));

	usePreloadedPattern = 0;
}

void set_hwConfig(uint8_t config_num) {
    2e18:	0f 5f       	subi	r16, 0xFF	; 255
    2e1a:	1f 4f       	sbci	r17, 0xFF	; 255
        res = f_read(&file4, tempBuff, 128, &cnt);
        if ((res == FR_OK) && (cnt == 128)) {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
				eeprom_write_byte(arena_config + b1, tempBuff[b1-1]);
    2e1c:	c8 01       	movw	r24, r16
    2e1e:	8f 5f       	subi	r24, 0xFF	; 255
    2e20:	9f 4f       	sbci	r25, 0xFF	; 255
    2e22:	0e 94 29 52 	call	0xa452	; 0xa452 <__eewr_byte_x128a1>
    if (res == FR_OK) {
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&file4, tempBuff, 128, &cnt);
        if ((res == FR_OK) && (cnt == 128)) {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
    2e26:	00 38       	cpi	r16, 0x80	; 128
    2e28:	11 05       	cpc	r17, r1
    2e2a:	79 f7       	brne	.-34     	; 0x2e0a <set_hwConfig+0xd0>
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
				eeprom_write_byte(arena_config + b1, tempBuff[b1-1]);
            }
		    eeprom_write_byte(arena_config, 0x00); //Mark arena configuration file in EEPROM
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	60 e0       	ldi	r22, 0x00	; 0
    2e32:	0e 94 29 52 	call	0xa452	; 0xa452 <__eewr_byte_x128a1>
        }
        f_close(&file4);
    2e36:	8d e0       	ldi	r24, 0x0D	; 13
    2e38:	97 e2       	ldi	r25, 0x27	; 39
    2e3a:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <f_close>
        xputs(PSTR("Successfully load the hardware config file to EEPROM\n"));
    2e3e:	8a ed       	ldi	r24, 0xDA	; 218
    2e40:	97 e0       	ldi	r25, 0x07	; 7
    2e42:	02 c0       	rjmp	.+4      	; 0x2e48 <set_hwConfig+0x10e>
    }
    else{
        xputs(PSTR("Cannot find the hardware config file on the SD card.\n"));
    2e44:	84 ea       	ldi	r24, 0xA4	; 164
    2e46:	97 e0       	ldi	r25, 0x07	; 7
    2e48:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    }
}
    2e4c:	ce 57       	subi	r28, 0x7E	; 126
    2e4e:	df 4f       	sbci	r29, 0xFF	; 255
    2e50:	e8 e0       	ldi	r30, 0x08	; 8
    2e52:	0c 94 b4 4d 	jmp	0x9b68	; 0x9b68 <__epilogue_restores__+0x14>

00002e56 <loadPattern2Panels>:
void toggle_trigger(void) {
    
    digitalToggle(3); //toggle digital 3 to trigger camera
}

void loadPattern2Panels(uint8_t pat_num) {
    2e56:	aa e2       	ldi	r26, 0x2A	; 42
    2e58:	b2 e0       	ldi	r27, 0x02	; 2
    2e5a:	e1 e3       	ldi	r30, 0x31	; 49
    2e5c:	f7 e1       	ldi	r31, 0x17	; 23
    2e5e:	0c 94 8e 4d 	jmp	0x9b1c	; 0x9b1c <__prologue_saves__>
    2e62:	88 2e       	mov	r8, r24
	
	res = f_close(&file1);
	usePreloadedPattern = 1;
	xprintf(PSTR("Successfully load pattern %u to the panels\n"), pat_num);
	
}
    2e64:	8d b7       	in	r24, 0x3d	; 61
    2e66:	9e b7       	in	r25, 0x3e	; 62
    2e68:	c9 5d       	subi	r28, 0xD9	; 217
    2e6a:	dd 4f       	sbci	r29, 0xFD	; 253
    2e6c:	88 83       	st	Y, r24
    2e6e:	99 83       	std	Y+1, r25	; 0x01
    2e70:	c7 52       	subi	r28, 0x27	; 39
    2e72:	d2 40       	sbci	r29, 0x02	; 2
    uint8_t res;
	uint8_t j, panel_index;
	uint16_t len, cnt, buff_index;
	uint32_t offset;
	//uint16_t X_dac_val, Y_dac_val;
	uint8_t sreg = SREG;
    2e74:	8f b7       	in	r24, 0x3f	; 63
	uint8_t CMD[34];
	uint16_t f_num;
	uint16_t bytes_per_panel_patten;
				
    
    if (pat_num < 10)
    2e76:	99 e0       	ldi	r25, 0x09	; 9
    2e78:	98 15       	cp	r25, r8
    2e7a:	80 f0       	brcs	.+32     	; 0x2e9c <loadPattern2Panels+0x46>
        sprintf(str, "pat000%d.pat\0", pat_num);
    2e7c:	00 d0       	rcall	.+0      	; 0x2e7e <loadPattern2Panels+0x28>
    2e7e:	00 d0       	rcall	.+0      	; 0x2e80 <loadPattern2Panels+0x2a>
    2e80:	ed b7       	in	r30, 0x3d	; 61
    2e82:	fe b7       	in	r31, 0x3e	; 62
    2e84:	31 96       	adiw	r30, 0x01	; 1
    2e86:	8d e2       	ldi	r24, 0x2D	; 45
    2e88:	94 e2       	ldi	r25, 0x24	; 36
    2e8a:	ad b7       	in	r26, 0x3d	; 61
    2e8c:	be b7       	in	r27, 0x3e	; 62
    2e8e:	11 96       	adiw	r26, 0x01	; 1
    2e90:	8d 93       	st	X+, r24
    2e92:	9c 93       	st	X, r25
    2e94:	12 97       	sbiw	r26, 0x02	; 2
    2e96:	85 e7       	ldi	r24, 0x75	; 117
    2e98:	90 e2       	ldi	r25, 0x20	; 32
    2e9a:	20 c0       	rjmp	.+64     	; 0x2edc <loadPattern2Panels+0x86>
    2e9c:	8d e2       	ldi	r24, 0x2D	; 45
    2e9e:	94 e2       	ldi	r25, 0x24	; 36
    else if (pat_num < 100)
    2ea0:	f3 e6       	ldi	r31, 0x63	; 99
    2ea2:	f8 15       	cp	r31, r8
    2ea4:	70 f0       	brcs	.+28     	; 0x2ec2 <loadPattern2Panels+0x6c>
        sprintf(str, "pat00%d.pat\0", pat_num);
    2ea6:	00 d0       	rcall	.+0      	; 0x2ea8 <loadPattern2Panels+0x52>
    2ea8:	00 d0       	rcall	.+0      	; 0x2eaa <loadPattern2Panels+0x54>
    2eaa:	ed b7       	in	r30, 0x3d	; 61
    2eac:	fe b7       	in	r31, 0x3e	; 62
    2eae:	31 96       	adiw	r30, 0x01	; 1
    2eb0:	ad b7       	in	r26, 0x3d	; 61
    2eb2:	be b7       	in	r27, 0x3e	; 62
    2eb4:	11 96       	adiw	r26, 0x01	; 1
    2eb6:	8d 93       	st	X+, r24
    2eb8:	9c 93       	st	X, r25
    2eba:	12 97       	sbiw	r26, 0x02	; 2
    2ebc:	83 e8       	ldi	r24, 0x83	; 131
    2ebe:	90 e2       	ldi	r25, 0x20	; 32
    2ec0:	0d c0       	rjmp	.+26     	; 0x2edc <loadPattern2Panels+0x86>
    else if (pat_num < 1000)
        sprintf(str, "pat0%d.pat\0", pat_num);
    2ec2:	00 d0       	rcall	.+0      	; 0x2ec4 <loadPattern2Panels+0x6e>
    2ec4:	00 d0       	rcall	.+0      	; 0x2ec6 <loadPattern2Panels+0x70>
    2ec6:	ed b7       	in	r30, 0x3d	; 61
    2ec8:	fe b7       	in	r31, 0x3e	; 62
    2eca:	31 96       	adiw	r30, 0x01	; 1
    2ecc:	ad b7       	in	r26, 0x3d	; 61
    2ece:	be b7       	in	r27, 0x3e	; 62
    2ed0:	11 96       	adiw	r26, 0x01	; 1
    2ed2:	8d 93       	st	X+, r24
    2ed4:	9c 93       	st	X, r25
    2ed6:	12 97       	sbiw	r26, 0x02	; 2
    2ed8:	80 e9       	ldi	r24, 0x90	; 144
    2eda:	90 e2       	ldi	r25, 0x20	; 32
    2edc:	82 83       	std	Z+2, r24	; 0x02
    2ede:	93 83       	std	Z+3, r25	; 0x03
    2ee0:	84 82       	std	Z+4, r8	; 0x04
    2ee2:	15 82       	std	Z+5, r1	; 0x05
    2ee4:	0e 94 ee 4f 	call	0x9fdc	; 0x9fdc <sprintf>
    2ee8:	ed b7       	in	r30, 0x3d	; 61
    2eea:	fe b7       	in	r31, 0x3e	; 62
    2eec:	36 96       	adiw	r30, 0x06	; 6
    2eee:	ed bf       	out	0x3d, r30	; 61
    2ef0:	fe bf       	out	0x3e, r31	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("pat_num is too big.\n"));
    
    res = f_open(&file1, str, FA_OPEN_EXISTING | FA_READ);
    2ef2:	84 e7       	ldi	r24, 0x74	; 116
    2ef4:	98 e2       	ldi	r25, 0x28	; 40
    2ef6:	6d e2       	ldi	r22, 0x2D	; 45
    2ef8:	74 e2       	ldi	r23, 0x24	; 36
    2efa:	41 e0       	ldi	r20, 0x01	; 1
    2efc:	0e 94 91 40 	call	0x8122	; 0x8122 <f_open>
    if (res == FR_OK) {
    2f00:	88 23       	and	r24, r24
    2f02:	09 f0       	breq	.+2      	; 0x2f06 <loadPattern2Panels+0xb0>
    2f04:	2a c2       	rjmp	.+1108   	; 0x335a <loadPattern2Panels+0x504>
        res = f_read(&file1, pattDataBuff, 512, &cnt); // read the 10 byte test header info block
    2f06:	84 e7       	ldi	r24, 0x74	; 116
    2f08:	98 e2       	ldi	r25, 0x28	; 40
    2f0a:	be 01       	movw	r22, r28
    2f0c:	69 5d       	subi	r22, 0xD9	; 217
    2f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f10:	40 e0       	ldi	r20, 0x00	; 0
    2f12:	52 e0       	ldi	r21, 0x02	; 2
    2f14:	9e 01       	movw	r18, r28
    2f16:	2f 5f       	subi	r18, 0xFF	; 255
    2f18:	3f 4f       	sbci	r19, 0xFF	; 255
    2f1a:	0e 94 a3 3e 	call	0x7d46	; 0x7d46 <f_read>
        if ((res == FR_OK) && (cnt == 512)) {
    2f1e:	88 23       	and	r24, r24
    2f20:	09 f0       	breq	.+2      	; 0x2f24 <loadPattern2Panels+0xce>
    2f22:	14 c2       	rjmp	.+1064   	; 0x334c <loadPattern2Panels+0x4f6>
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	9a 81       	ldd	r25, Y+2	; 0x02
    2f28:	80 50       	subi	r24, 0x00	; 0
    2f2a:	92 40       	sbci	r25, 0x02	; 2
    2f2c:	09 f0       	breq	.+2      	; 0x2f30 <loadPattern2Panels+0xda>
    2f2e:	0e c2       	rjmp	.+1052   	; 0x334c <loadPattern2Panels+0x4f6>

            // get the test header info
            ((uint8_t*)&x_num)[0] = pattDataBuff[0];
    2f30:	8f a1       	ldd	r24, Y+39	; 0x27
    2f32:	80 93 27 27 	sts	0x2727, r24
            ((uint8_t*)&x_num)[1] = pattDataBuff[1];
    2f36:	88 a5       	ldd	r24, Y+40	; 0x28
    2f38:	80 93 28 27 	sts	0x2728, r24
            ((uint8_t*)&y_num)[0] = pattDataBuff[2];
    2f3c:	89 a5       	ldd	r24, Y+41	; 0x29
    2f3e:	80 93 c6 24 	sts	0x24C6, r24
            ((uint8_t*)&y_num)[1] = pattDataBuff[3];
    2f42:	8a a5       	ldd	r24, Y+42	; 0x2a
    2f44:	80 93 c7 24 	sts	0x24C7, r24
            num_panels = pattDataBuff[4];
    2f48:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f4a:	80 93 03 24 	sts	0x2403, r24
            gs_value = pattDataBuff[5];   //11, 12, 13, or 14 means use row compression
    2f4e:	4c a5       	ldd	r20, Y+44	; 0x2c
    2f50:	40 93 4a 26 	sts	0x264A, r20
            
            
            num_frames = x_num * y_num;
    2f54:	20 91 c6 24 	lds	r18, 0x24C6
    2f58:	30 91 c7 24 	lds	r19, 0x24C7
    2f5c:	80 91 27 27 	lds	r24, 0x2727
    2f60:	90 91 28 27 	lds	r25, 0x2728
    2f64:	28 9f       	mul	r18, r24
    2f66:	20 01       	movw	r4, r0
    2f68:	29 9f       	mul	r18, r25
    2f6a:	50 0c       	add	r5, r0
    2f6c:	38 9f       	mul	r19, r24
    2f6e:	50 0c       	add	r5, r0
    2f70:	11 24       	eor	r1, r1
            if ((gs_value >= 11) & (gs_value <= 14)) {
    2f72:	84 2f       	mov	r24, r20
    2f74:	8b 50       	subi	r24, 0x0B	; 11
    2f76:	84 30       	cpi	r24, 0x04	; 4
    2f78:	50 f4       	brcc	.+20     	; 0x2f8e <loadPattern2Panels+0x138>
                gs_value = gs_value - 10;
    2f7a:	94 2f       	mov	r25, r20
    2f7c:	9a 50       	subi	r25, 0x0A	; 10
    2f7e:	90 93 4a 26 	sts	0x264A, r25
                row_compress = 1;
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	80 93 c8 24 	sts	0x24C8, r24
                bytes_per_panel_frame = gs_value;
    2f88:	90 93 cd 26 	sts	0x26CD, r25
    2f8c:	0b c0       	rjmp	.+22     	; 0x2fa4 <loadPattern2Panels+0x14e>
            }
            else {
                row_compress = 0;
    2f8e:	10 92 c8 24 	sts	0x24C8, r1
                bytes_per_panel_frame = gs_value * 8;
    2f92:	84 2f       	mov	r24, r20
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	53 e0       	ldi	r21, 0x03	; 3
    2f98:	88 0f       	add	r24, r24
    2f9a:	99 1f       	adc	r25, r25
    2f9c:	5a 95       	dec	r21
    2f9e:	e1 f7       	brne	.-8      	; 0x2f98 <loadPattern2Panels+0x142>
    2fa0:	80 93 cd 26 	sts	0x26CD, r24
            }
            index_x = index_y = 0;
    2fa4:	10 92 72 28 	sts	0x2872, r1
    2fa8:	10 92 73 28 	sts	0x2873, r1
    2fac:	80 91 72 28 	lds	r24, 0x2872
    2fb0:	90 91 73 28 	lds	r25, 0x2873
    2fb4:	80 93 ce 26 	sts	0x26CE, r24
    2fb8:	90 93 cf 26 	sts	0x26CF, r25
            frame_num = 0;
    2fbc:	10 92 04 24 	sts	0x2404, r1
    2fc0:	10 92 05 24 	sts	0x2405, r1
            Stop = 1;
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	80 93 9c 20 	sts	0x209C, r24
            display_flag = 0;  //clear the display flag
    2fca:	10 92 fe 23 	sts	0x23FE, r1
			bytes_per_panel_patten = num_frames*bytes_per_panel_frame;
    2fce:	80 91 cd 26 	lds	r24, 0x26CD
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	84 9d       	mul	r24, r4
    2fd6:	80 01       	movw	r16, r0
    2fd8:	85 9d       	mul	r24, r5
    2fda:	10 0d       	add	r17, r0
    2fdc:	94 9d       	mul	r25, r4
    2fde:	10 0d       	add	r17, r0
    2fe0:	11 24       	eor	r1, r1
            if (quiet_mode_on == 0){
    2fe2:	80 91 b3 20 	lds	r24, 0x20B3
    2fe6:	88 23       	and	r24, r24
    2fe8:	09 f0       	breq	.+2      	; 0x2fec <loadPattern2Panels+0x196>
    2fea:	54 c0       	rjmp	.+168    	; 0x3094 <loadPattern2Panels+0x23e>
                xprintf(PSTR("preload pattern %u:\n"), pat_num);
    2fec:	00 d0       	rcall	.+0      	; 0x2fee <loadPattern2Panels+0x198>
    2fee:	0f 92       	push	r0
    2ff0:	ed b7       	in	r30, 0x3d	; 61
    2ff2:	fe b7       	in	r31, 0x3e	; 62
    2ff4:	31 96       	adiw	r30, 0x01	; 1
    2ff6:	87 ea       	ldi	r24, 0xA7	; 167
    2ff8:	9a e0       	ldi	r25, 0x0A	; 10
    2ffa:	ad b7       	in	r26, 0x3d	; 61
    2ffc:	be b7       	in	r27, 0x3e	; 62
    2ffe:	11 96       	adiw	r26, 0x01	; 1
    3000:	8d 93       	st	X+, r24
    3002:	9c 93       	st	X, r25
    3004:	12 97       	sbiw	r26, 0x02	; 2
    3006:	82 82       	std	Z+2, r8	; 0x02
    3008:	13 82       	std	Z+3, r1	; 0x03
    300a:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
                xprintf(PSTR("  x_num = %u\n  y_num = %u\n  num_panels = %u\n  gs_value = %u\n row_compression = %u\n"),
    300e:	ed b7       	in	r30, 0x3d	; 61
    3010:	fe b7       	in	r31, 0x3e	; 62
    3012:	38 97       	sbiw	r30, 0x08	; 8
    3014:	ed bf       	out	0x3d, r30	; 61
    3016:	fe bf       	out	0x3e, r31	; 62
    3018:	31 96       	adiw	r30, 0x01	; 1
    301a:	84 e5       	ldi	r24, 0x54	; 84
    301c:	9a e0       	ldi	r25, 0x0A	; 10
    301e:	ad b7       	in	r26, 0x3d	; 61
    3020:	be b7       	in	r27, 0x3e	; 62
    3022:	11 96       	adiw	r26, 0x01	; 1
    3024:	8d 93       	st	X+, r24
    3026:	9c 93       	st	X, r25
    3028:	12 97       	sbiw	r26, 0x02	; 2
    302a:	80 91 27 27 	lds	r24, 0x2727
    302e:	90 91 28 27 	lds	r25, 0x2728
    3032:	82 83       	std	Z+2, r24	; 0x02
    3034:	93 83       	std	Z+3, r25	; 0x03
    3036:	80 91 c6 24 	lds	r24, 0x24C6
    303a:	90 91 c7 24 	lds	r25, 0x24C7
    303e:	84 83       	std	Z+4, r24	; 0x04
    3040:	95 83       	std	Z+5, r25	; 0x05
    3042:	80 91 03 24 	lds	r24, 0x2403
    3046:	86 83       	std	Z+6, r24	; 0x06
    3048:	17 82       	std	Z+7, r1	; 0x07
    304a:	80 91 4a 26 	lds	r24, 0x264A
    304e:	80 87       	std	Z+8, r24	; 0x08
    3050:	11 86       	std	Z+9, r1	; 0x09
    3052:	80 91 c8 24 	lds	r24, 0x24C8
    3056:	82 87       	std	Z+10, r24	; 0x0a
    3058:	13 86       	std	Z+11, r1	; 0x0b
    305a:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
                        x_num, y_num, num_panels, gs_value, row_compress);
				xprintf(PSTR("  bytes_per_panel_frame = %u\n  bytes_per_panel_pattern = %u\n"),
    305e:	ed b7       	in	r30, 0x3d	; 61
    3060:	fe b7       	in	r31, 0x3e	; 62
    3062:	36 96       	adiw	r30, 0x06	; 6
    3064:	ed bf       	out	0x3d, r30	; 61
    3066:	fe bf       	out	0x3e, r31	; 62
    3068:	31 96       	adiw	r30, 0x01	; 1
    306a:	87 e1       	ldi	r24, 0x17	; 23
    306c:	9a e0       	ldi	r25, 0x0A	; 10
    306e:	ad b7       	in	r26, 0x3d	; 61
    3070:	be b7       	in	r27, 0x3e	; 62
    3072:	11 96       	adiw	r26, 0x01	; 1
    3074:	8d 93       	st	X+, r24
    3076:	9c 93       	st	X, r25
    3078:	12 97       	sbiw	r26, 0x02	; 2
    307a:	80 91 cd 26 	lds	r24, 0x26CD
    307e:	82 83       	std	Z+2, r24	; 0x02
    3080:	13 82       	std	Z+3, r1	; 0x03
    3082:	04 83       	std	Z+4, r16	; 0x04
    3084:	15 83       	std	Z+5, r17	; 0x05
    3086:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    308a:	ed b7       	in	r30, 0x3d	; 61
    308c:	fe b7       	in	r31, 0x3e	; 62
    308e:	36 96       	adiw	r30, 0x06	; 6
    3090:	ed bf       	out	0x3d, r30	; 61
    3092:	fe bf       	out	0x3e, r31	; 62
                        bytes_per_panel_frame, bytes_per_panel_patten);
            }
			
			//since panel has only 800 byte for the pattern per panel, we need to check before tranfer
			if (bytes_per_panel_patten <= 800)
    3094:	f3 e0       	ldi	r31, 0x03	; 3
    3096:	01 32       	cpi	r16, 0x21	; 33
    3098:	1f 07       	cpc	r17, r31
    309a:	08 f0       	brcs	.+2      	; 0x309e <loadPattern2Panels+0x248>
    309c:	2e c1       	rjmp	.+604    	; 0x32fa <loadPattern2Panels+0x4a4>
			{
				for(f_num = 0; f_num < num_frames; ++f_num)
    309e:	1b 82       	std	Y+3, r1	; 0x03
    30a0:	1c 82       	std	Y+4, r1	; 0x04
						res = f_read(&file1, frameBuff, len, &cnt);
						if ((res == FR_OK) && (cnt == len)) {							
						
							buff_index = 0;
							
							CMD[bytes_per_panel_frame] = *(uint8_t *)&f_num;
    30a2:	43 e0       	ldi	r20, 0x03	; 3
    30a4:	24 2e       	mov	r2, r20
    30a6:	31 2c       	mov	r3, r1
    30a8:	2c 0e       	add	r2, r28
    30aa:	3d 1e       	adc	r3, r29
    30ac:	35 e0       	ldi	r19, 0x05	; 5
    30ae:	a3 2e       	mov	r10, r19
    30b0:	b1 2c       	mov	r11, r1
    30b2:	ac 0e       	add	r10, r28
    30b4:	bd 1e       	adc	r11, r29
    30b6:	1a c1       	rjmp	.+564    	; 0x32ec <loadPattern2Panels+0x496>
            }
			
			//since panel has only 800 byte for the pattern per panel, we need to check before tranfer
			if (bytes_per_panel_patten <= 800)
			{
				for(f_num = 0; f_num < num_frames; ++f_num)
    30b8:	8d b7       	in	r24, 0x3d	; 61
    30ba:	c7 5d       	subi	r28, 0xD7	; 215
    30bc:	dd 4f       	sbci	r29, 0xFD	; 253
    30be:	88 83       	st	Y, r24
    30c0:	c9 52       	subi	r28, 0x29	; 41
    30c2:	d2 40       	sbci	r29, 0x02	; 2
    30c4:	9e b7       	in	r25, 0x3e	; 62
    30c6:	c6 5d       	subi	r28, 0xD6	; 214
    30c8:	dd 4f       	sbci	r29, 0xFD	; 253
    30ca:	98 83       	st	Y, r25
    30cc:	ca 52       	subi	r28, 0x2A	; 42
    30ce:	d2 40       	sbci	r29, 0x02	; 2
				{
					len = num_panels * bytes_per_panel_frame;
    30d0:	90 91 cd 26 	lds	r25, 0x26CD
    30d4:	80 91 03 24 	lds	r24, 0x2403
    30d8:	98 9f       	mul	r25, r24
    30da:	60 01       	movw	r12, r0
    30dc:	11 24       	eor	r1, r1
					block_per_frame = len/512 + 1;
					uint8_t  frameBuff[len];
    30de:	ad b7       	in	r26, 0x3d	; 61
    30e0:	be b7       	in	r27, 0x3e	; 62
    30e2:	ac 19       	sub	r26, r12
    30e4:	bd 09       	sbc	r27, r13
    30e6:	ad bf       	out	0x3d, r26	; 61
    30e8:	be bf       	out	0x3e, r27	; 62
    30ea:	6d b6       	in	r6, 0x3d	; 61
    30ec:	7e b6       	in	r7, 0x3e	; 62
    30ee:	08 94       	sec
    30f0:	61 1c       	adc	r6, r1
    30f2:	71 1c       	adc	r7, r1
					offset = 512 + (uint32_t)f_num * 512 * block_per_frame;
    30f4:	6d 2d       	mov	r22, r13
    30f6:	66 95       	lsr	r22
    30f8:	6f 5f       	subi	r22, 0xFF	; 255
    30fa:	70 e0       	ldi	r23, 0x00	; 0
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	40 e0       	ldi	r20, 0x00	; 0
    3102:	50 e0       	ldi	r21, 0x00	; 0
    3104:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    3108:	7b 01       	movw	r14, r22
    310a:	8c 01       	movw	r16, r24
    310c:	08 94       	sec
    310e:	e1 1c       	adc	r14, r1
    3110:	f1 1c       	adc	r15, r1
    3112:	01 1d       	adc	r16, r1
    3114:	11 1d       	adc	r17, r1
    3116:	29 e0       	ldi	r18, 0x09	; 9
    3118:	ee 0c       	add	r14, r14
    311a:	ff 1c       	adc	r15, r15
    311c:	00 1f       	adc	r16, r16
    311e:	11 1f       	adc	r17, r17
    3120:	2a 95       	dec	r18
    3122:	d1 f7       	brne	.-12     	; 0x3118 <loadPattern2Panels+0x2c2>
					//xprintf(PSTR("offset %lu, f_num %u\n"), offset, f_num);
					res = f_lseek(&file1, offset);
    3124:	84 e7       	ldi	r24, 0x74	; 116
    3126:	98 e2       	ldi	r25, 0x28	; 40
    3128:	b8 01       	movw	r22, r16
    312a:	a7 01       	movw	r20, r14
    312c:	0e 94 31 3c 	call	0x7862	; 0x7862 <f_lseek>
    3130:	98 2e       	mov	r9, r24
					if ((res == FR_OK) && (file1.fptr == offset)) {
    3132:	88 23       	and	r24, r24
    3134:	09 f0       	breq	.+2      	; 0x3138 <loadPattern2Panels+0x2e2>
    3136:	91 c0       	rjmp	.+290    	; 0x325a <loadPattern2Panels+0x404>
    3138:	80 91 7a 28 	lds	r24, 0x287A
    313c:	90 91 7b 28 	lds	r25, 0x287B
    3140:	a0 91 7c 28 	lds	r26, 0x287C
    3144:	b0 91 7d 28 	lds	r27, 0x287D
    3148:	8e 15       	cp	r24, r14
    314a:	9f 05       	cpc	r25, r15
    314c:	a0 07       	cpc	r26, r16
    314e:	b1 07       	cpc	r27, r17
    3150:	09 f0       	breq	.+2      	; 0x3154 <loadPattern2Panels+0x2fe>
    3152:	83 c0       	rjmp	.+262    	; 0x325a <loadPattern2Panels+0x404>
						res = f_read(&file1, frameBuff, len, &cnt);
    3154:	84 e7       	ldi	r24, 0x74	; 116
    3156:	98 e2       	ldi	r25, 0x28	; 40
    3158:	b3 01       	movw	r22, r6
    315a:	a6 01       	movw	r20, r12
    315c:	9e 01       	movw	r18, r28
    315e:	2f 5f       	subi	r18, 0xFF	; 255
    3160:	3f 4f       	sbci	r19, 0xFF	; 255
    3162:	0e 94 a3 3e 	call	0x7d46	; 0x7d46 <f_read>
    3166:	18 2f       	mov	r17, r24
						if ((res == FR_OK) && (cnt == len)) {							
    3168:	88 23       	and	r24, r24
    316a:	09 f0       	breq	.+2      	; 0x316e <loadPattern2Panels+0x318>
    316c:	4f c0       	rjmp	.+158    	; 0x320c <loadPattern2Panels+0x3b6>
    316e:	89 81       	ldd	r24, Y+1	; 0x01
    3170:	9a 81       	ldd	r25, Y+2	; 0x02
    3172:	8c 15       	cp	r24, r12
    3174:	9d 05       	cpc	r25, r13
    3176:	09 f0       	breq	.+2      	; 0x317a <loadPattern2Panels+0x324>
    3178:	49 c0       	rjmp	.+146    	; 0x320c <loadPattern2Panels+0x3b6>
						
							buff_index = 0;
							
							CMD[bytes_per_panel_frame] = *(uint8_t *)&f_num;
    317a:	e0 91 cd 26 	lds	r30, 0x26CD
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	95 01       	movw	r18, r10
    3182:	2e 0f       	add	r18, r30
    3184:	3f 1f       	adc	r19, r31
    3186:	d1 01       	movw	r26, r2
    3188:	8c 91       	ld	r24, X
    318a:	d9 01       	movw	r26, r18
    318c:	8c 93       	st	X, r24
							CMD[bytes_per_panel_frame+1] = *((uint8_t *)&f_num + 1);	
    318e:	86 e0       	ldi	r24, 0x06	; 6
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	8c 0f       	add	r24, r28
    3194:	9d 1f       	adc	r25, r29
    3196:	e8 0f       	add	r30, r24
    3198:	f9 1f       	adc	r31, r25
    319a:	d1 01       	movw	r26, r2
    319c:	11 96       	adiw	r26, 0x01	; 1
    319e:	8c 91       	ld	r24, X
    31a0:	80 83       	st	Z, r24
    31a2:	11 e0       	ldi	r17, 0x01	; 1
    31a4:	ee 24       	eor	r14, r14
    31a6:	ff 24       	eor	r15, r15
    31a8:	25 c0       	rjmp	.+74     	; 0x31f4 <loadPattern2Panels+0x39e>
							for (panel_index = 1; panel_index <= num_panels; panel_index++){
								//FLASH = &frameBuff[buff_index];

								for(j=0;j<bytes_per_panel_frame;++j)
								{
									CMD[j] = frameBuff[buff_index + j];									
    31aa:	8d 91       	ld	r24, X+
    31ac:	81 93       	st	Z+, r24
							CMD[bytes_per_panel_frame+1] = *((uint8_t *)&f_num + 1);	
								
							for (panel_index = 1; panel_index <= num_panels; panel_index++){
								//FLASH = &frameBuff[buff_index];

								for(j=0;j<bytes_per_panel_frame;++j)
    31ae:	8e 2f       	mov	r24, r30
    31b0:	8a 19       	sub	r24, r10
    31b2:	86 17       	cp	r24, r22
    31b4:	d0 f3       	brcs	.-12     	; 0x31aa <loadPattern2Panels+0x354>
								{
									CMD[j] = frameBuff[buff_index + j];									
								}
					
								
								if (row_compress == 0)
    31b6:	80 91 c8 24 	lds	r24, 0x24C8
    31ba:	88 23       	and	r24, r24
    31bc:	19 f4       	brne	.+6      	; 0x31c4 <loadPattern2Panels+0x36e>
									i2cMasterSend(panel_index, bytes_per_panel_frame+2, CMD);
    31be:	6e 5f       	subi	r22, 0xFE	; 254
    31c0:	81 2f       	mov	r24, r17
    31c2:	10 c0       	rjmp	.+32     	; 0x31e4 <loadPattern2Panels+0x38e>
								else{
									switch(gs_value) {
    31c4:	80 91 4a 26 	lds	r24, 0x264A
    31c8:	83 30       	cpi	r24, 0x03	; 3
    31ca:	39 f0       	breq	.+14     	; 0x31da <loadPattern2Panels+0x384>
    31cc:	84 30       	cpi	r24, 0x04	; 4
    31ce:	41 f0       	breq	.+16     	; 0x31e0 <loadPattern2Panels+0x38a>
    31d0:	81 30       	cpi	r24, 0x01	; 1
    31d2:	59 f4       	brne	.+22     	; 0x31ea <loadPattern2Panels+0x394>
									case 1: //the data format is [5, data, f_num_LB, f_num_HB , x, x]
										i2cMasterSend(panel_index, 5, CMD);
    31d4:	81 2f       	mov	r24, r17
    31d6:	65 e0       	ldi	r22, 0x05	; 5
    31d8:	05 c0       	rjmp	.+10     	; 0x31e4 <loadPattern2Panels+0x38e>
										break;
									case 3: //the data format is [6, data1, data2, data 3, f_num_LB, f_num_HB , x]
										i2cMasterSend(panel_index, 6, CMD);
    31da:	81 2f       	mov	r24, r17
    31dc:	66 e0       	ldi	r22, 0x06	; 6
    31de:	02 c0       	rjmp	.+4      	; 0x31e4 <loadPattern2Panels+0x38e>
										break;
									case 4: //the data format is [7, data1, data2, data 3, data4, f_num_LB, f_num_HB , x]
										i2cMasterSend(panel_index, 7, CMD);
    31e0:	81 2f       	mov	r24, r17
    31e2:	67 e0       	ldi	r22, 0x07	; 7
    31e4:	a5 01       	movw	r20, r10
    31e6:	0e 94 8a 14 	call	0x2914	; 0x2914 <i2cMasterSend>
									default:
										break;
									}
								}
								
								buff_index += bytes_per_panel_frame;
    31ea:	80 91 cd 26 	lds	r24, 0x26CD
    31ee:	e8 0e       	add	r14, r24
    31f0:	f1 1c       	adc	r15, r1
							buff_index = 0;
							
							CMD[bytes_per_panel_frame] = *(uint8_t *)&f_num;
							CMD[bytes_per_panel_frame+1] = *((uint8_t *)&f_num + 1);	
								
							for (panel_index = 1; panel_index <= num_panels; panel_index++){
    31f2:	1f 5f       	subi	r17, 0xFF	; 255
    31f4:	80 91 03 24 	lds	r24, 0x2403
    31f8:	81 17       	cp	r24, r17
    31fa:	08 f4       	brcc	.+2      	; 0x31fe <loadPattern2Panels+0x3a8>
    31fc:	65 c0       	rjmp	.+202    	; 0x32c8 <loadPattern2Panels+0x472>
								//FLASH = &frameBuff[buff_index];

								for(j=0;j<bytes_per_panel_frame;++j)
    31fe:	60 91 cd 26 	lds	r22, 0x26CD
    3202:	d3 01       	movw	r26, r6
    3204:	ae 0d       	add	r26, r14
    3206:	bf 1d       	adc	r27, r15
    3208:	f5 01       	movw	r30, r10
    320a:	d1 cf       	rjmp	.-94     	; 0x31ae <loadPattern2Panels+0x358>

							} //end of for all panels loop
						//xprintf(PSTR("f_num_LB %u, f_num_HB %u\n"), CMD[bytes_per_panel_frame], CMD[bytes_per_panel_frame+1]);		
						}
						else {
							if (quiet_mode_on == 0){
    320c:	80 91 b3 20 	lds	r24, 0x20B3
    3210:	88 23       	and	r24, r24
    3212:	09 f0       	breq	.+2      	; 0x3216 <loadPattern2Panels+0x3c0>
    3214:	59 c0       	rjmp	.+178    	; 0x32c8 <loadPattern2Panels+0x472>
								xputs(PSTR("Error in f_read in loadPattern2Panels!\n"));
    3216:	8f ee       	ldi	r24, 0xEF	; 239
    3218:	99 e0       	ldi	r25, 0x09	; 9
    321a:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
								xprintf(PSTR("RES = %u, f_num= %u, cnt= %u\n"), res, f_num, cnt);
    321e:	ed b7       	in	r30, 0x3d	; 61
    3220:	fe b7       	in	r31, 0x3e	; 62
    3222:	38 97       	sbiw	r30, 0x08	; 8
    3224:	ed bf       	out	0x3d, r30	; 61
    3226:	fe bf       	out	0x3e, r31	; 62
    3228:	31 96       	adiw	r30, 0x01	; 1
    322a:	81 ed       	ldi	r24, 0xD1	; 209
    322c:	99 e0       	ldi	r25, 0x09	; 9
    322e:	ad b7       	in	r26, 0x3d	; 61
    3230:	be b7       	in	r27, 0x3e	; 62
    3232:	11 96       	adiw	r26, 0x01	; 1
    3234:	8d 93       	st	X+, r24
    3236:	9c 93       	st	X, r25
    3238:	12 97       	sbiw	r26, 0x02	; 2
    323a:	12 83       	std	Z+2, r17	; 0x02
    323c:	13 82       	std	Z+3, r1	; 0x03
    323e:	8b 81       	ldd	r24, Y+3	; 0x03
    3240:	9c 81       	ldd	r25, Y+4	; 0x04
    3242:	84 83       	std	Z+4, r24	; 0x04
    3244:	95 83       	std	Z+5, r25	; 0x05
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	9a 81       	ldd	r25, Y+2	; 0x02
    324a:	86 83       	std	Z+6, r24	; 0x06
    324c:	97 83       	std	Z+7, r25	; 0x07
    324e:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    3252:	ed b7       	in	r30, 0x3d	; 61
    3254:	fe b7       	in	r31, 0x3e	; 62
    3256:	38 96       	adiw	r30, 0x08	; 8
    3258:	27 c0       	rjmp	.+78     	; 0x32a8 <loadPattern2Panels+0x452>
								return;
							}
						}
					} else {
						
						if (quiet_mode_on == 0){
    325a:	80 91 b3 20 	lds	r24, 0x20B3
    325e:	88 23       	and	r24, r24
    3260:	99 f5       	brne	.+102    	; 0x32c8 <loadPattern2Panels+0x472>
							xputs(PSTR("Error in f_lseek in loadPattern2Panels!\n"));
    3262:	88 ea       	ldi	r24, 0xA8	; 168
    3264:	99 e0       	ldi	r25, 0x09	; 9
    3266:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
							xprintf(PSTR("RES = %u, f_num= %u, offset = %lu\n"), res, f_num, offset);
    326a:	8d b7       	in	r24, 0x3d	; 61
    326c:	9e b7       	in	r25, 0x3e	; 62
    326e:	0a 97       	sbiw	r24, 0x0a	; 10
    3270:	8d bf       	out	0x3d, r24	; 61
    3272:	9e bf       	out	0x3e, r25	; 62
    3274:	ed b7       	in	r30, 0x3d	; 61
    3276:	fe b7       	in	r31, 0x3e	; 62
    3278:	31 96       	adiw	r30, 0x01	; 1
    327a:	85 e8       	ldi	r24, 0x85	; 133
    327c:	99 e0       	ldi	r25, 0x09	; 9
    327e:	ad b7       	in	r26, 0x3d	; 61
    3280:	be b7       	in	r27, 0x3e	; 62
    3282:	11 96       	adiw	r26, 0x01	; 1
    3284:	8d 93       	st	X+, r24
    3286:	9c 93       	st	X, r25
    3288:	12 97       	sbiw	r26, 0x02	; 2
    328a:	92 82       	std	Z+2, r9	; 0x02
    328c:	13 82       	std	Z+3, r1	; 0x03
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
    3290:	9c 81       	ldd	r25, Y+4	; 0x04
    3292:	84 83       	std	Z+4, r24	; 0x04
    3294:	95 83       	std	Z+5, r25	; 0x05
    3296:	e6 82       	std	Z+6, r14	; 0x06
    3298:	f7 82       	std	Z+7, r15	; 0x07
    329a:	00 87       	std	Z+8, r16	; 0x08
    329c:	11 87       	std	Z+9, r17	; 0x09
    329e:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    32a2:	ed b7       	in	r30, 0x3d	; 61
    32a4:	fe b7       	in	r31, 0x3e	; 62
    32a6:	3a 96       	adiw	r30, 0x0a	; 10
    32a8:	ed bf       	out	0x3d, r30	; 61
    32aa:	fe bf       	out	0x3e, r31	; 62
            }
			
			//since panel has only 800 byte for the pattern per panel, we need to check before tranfer
			if (bytes_per_panel_patten <= 800)
			{
				for(f_num = 0; f_num < num_frames; ++f_num)
    32ac:	c7 5d       	subi	r28, 0xD7	; 215
    32ae:	dd 4f       	sbci	r29, 0xFD	; 253
    32b0:	88 81       	ld	r24, Y
    32b2:	c9 52       	subi	r28, 0x29	; 41
    32b4:	d2 40       	sbci	r29, 0x02	; 2
    32b6:	c6 5d       	subi	r28, 0xD6	; 214
    32b8:	dd 4f       	sbci	r29, 0xFD	; 253
    32ba:	98 81       	ld	r25, Y
    32bc:	ca 52       	subi	r28, 0x2A	; 42
    32be:	d2 40       	sbci	r29, 0x02	; 2
    32c0:	9c 01       	movw	r18, r24
    32c2:	2d bf       	out	0x3d, r18	; 61
    32c4:	3e bf       	out	0x3e, r19	; 62
    32c6:	6e c0       	rjmp	.+220    	; 0x33a4 <loadPattern2Panels+0x54e>
						}
					} else {
						
						if (quiet_mode_on == 0){
							xputs(PSTR("Error in f_lseek in loadPattern2Panels!\n"));
							xprintf(PSTR("RES = %u, f_num= %u, offset = %lu\n"), res, f_num, offset);
    32c8:	c7 5d       	subi	r28, 0xD7	; 215
    32ca:	dd 4f       	sbci	r29, 0xFD	; 253
    32cc:	28 81       	ld	r18, Y
    32ce:	c9 52       	subi	r28, 0x29	; 41
    32d0:	d2 40       	sbci	r29, 0x02	; 2
    32d2:	c6 5d       	subi	r28, 0xD6	; 214
    32d4:	dd 4f       	sbci	r29, 0xFD	; 253
    32d6:	38 81       	ld	r19, Y
    32d8:	ca 52       	subi	r28, 0x2A	; 42
    32da:	d2 40       	sbci	r29, 0x02	; 2
    32dc:	c9 01       	movw	r24, r18
    32de:	8d bf       	out	0x3d, r24	; 61
    32e0:	9e bf       	out	0x3e, r25	; 62
            }
			
			//since panel has only 800 byte for the pattern per panel, we need to check before tranfer
			if (bytes_per_panel_patten <= 800)
			{
				for(f_num = 0; f_num < num_frames; ++f_num)
    32e2:	8b 81       	ldd	r24, Y+3	; 0x03
    32e4:	9c 81       	ldd	r25, Y+4	; 0x04
    32e6:	01 96       	adiw	r24, 0x01	; 1
    32e8:	8b 83       	std	Y+3, r24	; 0x03
    32ea:	9c 83       	std	Y+4, r25	; 0x04
    32ec:	2b 81       	ldd	r18, Y+3	; 0x03
    32ee:	3c 81       	ldd	r19, Y+4	; 0x04
    32f0:	24 15       	cp	r18, r4
    32f2:	35 05       	cpc	r19, r5
    32f4:	08 f4       	brcc	.+2      	; 0x32f8 <loadPattern2Panels+0x4a2>
    32f6:	e0 ce       	rjmp	.-576    	; 0x30b8 <loadPattern2Panels+0x262>
    32f8:	39 c0       	rjmp	.+114    	; 0x336c <loadPattern2Panels+0x516>
						}
					}
				}
			}
			else{
				xprintf(PSTR("Pattern size is upto 800 byte per panel.\n"));
    32fa:	0f 92       	push	r0
    32fc:	0f 92       	push	r0
    32fe:	8b e5       	ldi	r24, 0x5B	; 91
    3300:	99 e0       	ldi	r25, 0x09	; 9
    3302:	ad b7       	in	r26, 0x3d	; 61
    3304:	be b7       	in	r27, 0x3e	; 62
    3306:	11 96       	adiw	r26, 0x01	; 1
    3308:	8d 93       	st	X+, r24
    330a:	9c 93       	st	X, r25
    330c:	12 97       	sbiw	r26, 0x02	; 2
    330e:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
				xprintf(PSTR("This pattern size is %lu\n"), bytes_per_panel_patten);
    3312:	0f 92       	push	r0
    3314:	0f 92       	push	r0
    3316:	81 e4       	ldi	r24, 0x41	; 65
    3318:	99 e0       	ldi	r25, 0x09	; 9
    331a:	ed b7       	in	r30, 0x3d	; 61
    331c:	fe b7       	in	r31, 0x3e	; 62
    331e:	81 83       	std	Z+1, r24	; 0x01
    3320:	92 83       	std	Z+2, r25	; 0x02
    3322:	03 83       	std	Z+3, r16	; 0x03
    3324:	14 83       	std	Z+4, r17	; 0x04
    3326:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
				xprintf(PSTR("Failed to load this Pattern to Panels\n"));
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	8a e1       	ldi	r24, 0x1A	; 26
    3330:	99 e0       	ldi	r25, 0x09	; 9
    3332:	ad b7       	in	r26, 0x3d	; 61
    3334:	be b7       	in	r27, 0x3e	; 62
    3336:	11 96       	adiw	r26, 0x01	; 1
    3338:	8d 93       	st	X+, r24
    333a:	9c 93       	st	X, r25
    333c:	12 97       	sbiw	r26, 0x02	; 2
    333e:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
				usePreloadedPattern = 0;
    3342:	10 92 02 24 	sts	0x2402, r1
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	2c c0       	rjmp	.+88     	; 0x33a4 <loadPattern2Panels+0x54e>
				//set_pattern(pat_num); didn't work
				return;
			}
			
        } else {
            if (quiet_mode_on == 0)
    334c:	80 91 b3 20 	lds	r24, 0x20B3
    3350:	88 23       	and	r24, r24
    3352:	41 f5       	brne	.+80     	; 0x33a4 <loadPattern2Panels+0x54e>
                xputs(PSTR("Error reading in pattern file\n"));
    3354:	8b ef       	ldi	r24, 0xFB	; 251
    3356:	98 e0       	ldi	r25, 0x08	; 8
    3358:	06 c0       	rjmp	.+12     	; 0x3366 <loadPattern2Panels+0x510>
			return;
        }
    } else {
        if (quiet_mode_on == 0)
    335a:	80 91 b3 20 	lds	r24, 0x20B3
    335e:	88 23       	and	r24, r24
    3360:	09 f5       	brne	.+66     	; 0x33a4 <loadPattern2Panels+0x54e>
            xputs(PSTR("Error opening pattern file\n"));
    3362:	8f ed       	ldi	r24, 0xDF	; 223
    3364:	98 e0       	ldi	r25, 0x08	; 8
    3366:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    336a:	1c c0       	rjmp	.+56     	; 0x33a4 <loadPattern2Panels+0x54e>
			return;
    }
	
	res = f_close(&file1);
    336c:	84 e7       	ldi	r24, 0x74	; 116
    336e:	98 e2       	ldi	r25, 0x28	; 40
    3370:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <f_close>
	usePreloadedPattern = 1;
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	80 93 02 24 	sts	0x2402, r24
	xprintf(PSTR("Successfully load pattern %u to the panels\n"), pat_num);
    337a:	00 d0       	rcall	.+0      	; 0x337c <loadPattern2Panels+0x526>
    337c:	0f 92       	push	r0
    337e:	ed b7       	in	r30, 0x3d	; 61
    3380:	fe b7       	in	r31, 0x3e	; 62
    3382:	31 96       	adiw	r30, 0x01	; 1
    3384:	83 eb       	ldi	r24, 0xB3	; 179
    3386:	98 e0       	ldi	r25, 0x08	; 8
    3388:	ad b7       	in	r26, 0x3d	; 61
    338a:	be b7       	in	r27, 0x3e	; 62
    338c:	11 96       	adiw	r26, 0x01	; 1
    338e:	8d 93       	st	X+, r24
    3390:	9c 93       	st	X, r25
    3392:	12 97       	sbiw	r26, 0x02	; 2
    3394:	82 82       	std	Z+2, r8	; 0x02
    3396:	13 82       	std	Z+3, r1	; 0x03
    3398:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    339c:	0f 90       	pop	r0
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	0f 90       	pop	r0
	
}
    33a4:	c9 5d       	subi	r28, 0xD9	; 217
    33a6:	dd 4f       	sbci	r29, 0xFD	; 253
    33a8:	e8 81       	ld	r30, Y
    33aa:	f9 81       	ldd	r31, Y+1	; 0x01
    33ac:	c7 52       	subi	r28, 0x27	; 39
    33ae:	d2 40       	sbci	r29, 0x02	; 2
    33b0:	ed bf       	out	0x3d, r30	; 61
    33b2:	fe bf       	out	0x3e, r31	; 62
    33b4:	c6 5d       	subi	r28, 0xD6	; 214
    33b6:	dd 4f       	sbci	r29, 0xFD	; 253
    33b8:	e2 e1       	ldi	r30, 0x12	; 18
    33ba:	0c 94 aa 4d 	jmp	0x9b54	; 0x9b54 <__epilogue_restores__>

000033be <toggle_trigger>:
}


void toggle_trigger(void) {
    
    digitalToggle(3); //toggle digital 3 to trigger camera
    33be:	83 e0       	ldi	r24, 0x03	; 3
    33c0:	0e 94 a9 2a 	call	0x5552	; 0x5552 <digitalToggle>
}
    33c4:	08 95       	ret

000033c6 <Update_display>:
	
	digitalWrite(1, LOW); // set line low at end of frame write

}

void Update_display(void) {
    33c6:	a0 e0       	ldi	r26, 0x00	; 0
    33c8:	b0 e0       	ldi	r27, 0x00	; 0
    33ca:	e9 ee       	ldi	r30, 0xE9	; 233
    33cc:	f9 e1       	ldi	r31, 0x19	; 25
    33ce:	0c 94 94 4d 	jmp	0x9b28	; 0x9b28 <__prologue_saves__+0xc>
	int32_t temp_index_x, temp_index_y;	
	int16_t  X_val, Y_val;

    //there are five modes 0 - OL, 1 - CL, 2 - CL w Bias, 3 - POS mode with ch5, 4 - POS mode from pos func 5 - function DBG mode
    
    switch(x_mode) {
    33d2:	80 91 cc 26 	lds	r24, 0x26CC
    33d6:	81 30       	cpi	r24, 0x01	; 1
    33d8:	09 f1       	breq	.+66     	; 0x341c <Update_display+0x56>
    33da:	81 30       	cpi	r24, 0x01	; 1
    33dc:	38 f0       	brcs	.+14     	; 0x33ec <Update_display+0x26>
    33de:	82 30       	cpi	r24, 0x02	; 2
    33e0:	09 f4       	brne	.+2      	; 0x33e4 <Update_display+0x1e>
    33e2:	4b c0       	rjmp	.+150    	; 0x347a <Update_display+0xb4>
    33e4:	83 30       	cpi	r24, 0x03	; 3
    33e6:	09 f0       	breq	.+2      	; 0x33ea <Update_display+0x24>
    33e8:	e7 c0       	rjmp	.+462    	; 0x35b8 <Update_display+0x1f2>
    33ea:	89 c0       	rjmp	.+274    	; 0x34fe <Update_display+0x138>
        case 0:   // open loop - use function generator to set x rate
            X_val = 2*function_X[func_read_index_x];
    33ec:	e0 91 06 24 	lds	r30, 0x2406
            X_rate = ((X_val*gain_x)/10 + 5*bias_x)/2;
    33f0:	20 91 0b 27 	lds	r18, 0x270B
    33f4:	30 91 0c 27 	lds	r19, 0x270C
    33f8:	22 0f       	add	r18, r18
    33fa:	33 1f       	adc	r19, r19
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	ee 0f       	add	r30, r30
    3400:	ff 1f       	adc	r31, r31
    3402:	e7 5d       	subi	r30, 0xD7	; 215
    3404:	f8 4d       	sbci	r31, 0xD8	; 216
    3406:	80 81       	ld	r24, Z
    3408:	91 81       	ldd	r25, Z+1	; 0x01
    340a:	ac 01       	movw	r20, r24
    340c:	24 9f       	mul	r18, r20
    340e:	c0 01       	movw	r24, r0
    3410:	25 9f       	mul	r18, r21
    3412:	90 0d       	add	r25, r0
    3414:	34 9f       	mul	r19, r20
    3416:	90 0d       	add	r25, r0
    3418:	11 24       	eor	r1, r1
    341a:	1c c0       	rjmp	.+56     	; 0x3454 <Update_display+0x8e>
            break;
        case 1: //closed loop, use CH0 - CH1 to set x rate
            X_ADC1 = analogRead(0)/4;  // 1 volt = 102 frames/sec
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	0e 94 ba 2a 	call	0x5574	; 0x5574 <analogRead>
            temp_ADC_val = X_val; //the previous value
            X_val = ( 6*temp_ADC_val + 4*X_ADC1 )/10;   //this is a 60% old value, 40% new value smoother
    3422:	64 e0       	ldi	r22, 0x04	; 4
    3424:	70 e0       	ldi	r23, 0x00	; 0
    3426:	0e 94 3e 4d 	call	0x9a7c	; 0x9a7c <__divmodhi4>
    342a:	cb 01       	movw	r24, r22
            X_rate = (int16_t)((int32_t)(X_val*gain_x)/10 + 5*bias_x)/2;  //X_val can go as high as 4095, gain_x 100fiu and bias_x 250
    342c:	88 0f       	add	r24, r24
    342e:	99 1f       	adc	r25, r25
    3430:	88 0f       	add	r24, r24
    3432:	99 1f       	adc	r25, r25
    3434:	6a e0       	ldi	r22, 0x0A	; 10
    3436:	70 e0       	ldi	r23, 0x00	; 0
    3438:	0e 94 3e 4d 	call	0x9a7c	; 0x9a7c <__divmodhi4>
    343c:	80 91 0b 27 	lds	r24, 0x270B
    3440:	90 91 0c 27 	lds	r25, 0x270C
    3444:	9c 01       	movw	r18, r24
    3446:	62 9f       	mul	r22, r18
    3448:	c0 01       	movw	r24, r0
    344a:	63 9f       	mul	r22, r19
    344c:	90 0d       	add	r25, r0
    344e:	72 9f       	mul	r23, r18
    3450:	90 0d       	add	r25, r0
    3452:	11 24       	eor	r1, r1
    3454:	6a e0       	ldi	r22, 0x0A	; 10
    3456:	70 e0       	ldi	r23, 0x00	; 0
    3458:	0e 94 3e 4d 	call	0x9a7c	; 0x9a7c <__divmodhi4>
    345c:	cb 01       	movw	r24, r22
    345e:	40 91 b5 24 	lds	r20, 0x24B5
    3462:	50 91 b6 24 	lds	r21, 0x24B6
    3466:	9a 01       	movw	r18, r20
    3468:	22 0f       	add	r18, r18
    346a:	33 1f       	adc	r19, r19
    346c:	22 0f       	add	r18, r18
    346e:	33 1f       	adc	r19, r19
    3470:	24 0f       	add	r18, r20
    3472:	35 1f       	adc	r19, r21
    3474:	82 0f       	add	r24, r18
    3476:	93 1f       	adc	r25, r19
    3478:	3c c0       	rjmp	.+120    	; 0x34f2 <Update_display+0x12c>
            break;
        case 2: //closed loop w bias - use CH0 - CH1, and function gen. to set x rate
            X_ADC1 = analogRead(0)/4; // 1 volt = 102
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	0e 94 ba 2a 	call	0x5574	; 0x5574 <analogRead>
            temp_ADC_val = X_val; //the previous value
            X_val = ( 6*temp_ADC_val + 4*X_ADC1 )/10;   //this is a 60% old value, 40% new value smoother
    3480:	64 e0       	ldi	r22, 0x04	; 4
    3482:	70 e0       	ldi	r23, 0x00	; 0
    3484:	0e 94 3e 4d 	call	0x9a7c	; 0x9a7c <__divmodhi4>
    3488:	cb 01       	movw	r24, r22
            //add in the bias to CL mode on ch X
            X_rate = (int16_t)((int32_t)(X_val*gain_x)/10 + 2*function_X[func_read_index_x] + 5*bias_x)/2;
    348a:	e0 91 06 24 	lds	r30, 0x2406
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	ee 0f       	add	r30, r30
    3492:	ff 1f       	adc	r31, r31
    3494:	e7 5d       	subi	r30, 0xD7	; 215
    3496:	f8 4d       	sbci	r31, 0xD8	; 216
    3498:	01 90       	ld	r0, Z+
    349a:	f0 81       	ld	r31, Z
    349c:	e0 2d       	mov	r30, r0
    349e:	ee 0f       	add	r30, r30
    34a0:	ff 1f       	adc	r31, r31
    34a2:	40 91 b5 24 	lds	r20, 0x24B5
    34a6:	50 91 b6 24 	lds	r21, 0x24B6
    34aa:	9a 01       	movw	r18, r20
    34ac:	22 0f       	add	r18, r18
    34ae:	33 1f       	adc	r19, r19
    34b0:	22 0f       	add	r18, r18
    34b2:	33 1f       	adc	r19, r19
    34b4:	24 0f       	add	r18, r20
    34b6:	35 1f       	adc	r19, r21
    34b8:	e2 0f       	add	r30, r18
    34ba:	f3 1f       	adc	r31, r19
    34bc:	88 0f       	add	r24, r24
    34be:	99 1f       	adc	r25, r25
    34c0:	88 0f       	add	r24, r24
    34c2:	99 1f       	adc	r25, r25
    34c4:	6a e0       	ldi	r22, 0x0A	; 10
    34c6:	70 e0       	ldi	r23, 0x00	; 0
    34c8:	0e 94 3e 4d 	call	0x9a7c	; 0x9a7c <__divmodhi4>
    34cc:	80 91 0b 27 	lds	r24, 0x270B
    34d0:	90 91 0c 27 	lds	r25, 0x270C
    34d4:	ac 01       	movw	r20, r24
    34d6:	64 9f       	mul	r22, r20
    34d8:	c0 01       	movw	r24, r0
    34da:	65 9f       	mul	r22, r21
    34dc:	90 0d       	add	r25, r0
    34de:	74 9f       	mul	r23, r20
    34e0:	90 0d       	add	r25, r0
    34e2:	11 24       	eor	r1, r1
    34e4:	6a e0       	ldi	r22, 0x0A	; 10
    34e6:	70 e0       	ldi	r23, 0x00	; 0
    34e8:	0e 94 3e 4d 	call	0x9a7c	; 0x9a7c <__divmodhi4>
    34ec:	cf 01       	movw	r24, r30
    34ee:	86 0f       	add	r24, r22
    34f0:	97 1f       	adc	r25, r23
    34f2:	62 e0       	ldi	r22, 0x02	; 2
    34f4:	70 e0       	ldi	r23, 0x00	; 0
    34f6:	0e 94 3e 4d 	call	0x9a7c	; 0x9a7c <__divmodhi4>
    34fa:	4b 01       	movw	r8, r22
    34fc:	5f c0       	rjmp	.+190    	; 0x35bc <Update_display+0x1f6>
            break;
        case 3: // POS mode, use CH2 to set the frame position (pos ctrl, not vel ctrl)
	        X_ADC2 = analogRead(2);  //X_ADC2 ranges from 0-4095 (12bit ADC) when input 0-10V
    34fe:	82 e0       	ldi	r24, 0x02	; 2
    3500:	0e 94 ba 2a 	call	0x5574	; 0x5574 <analogRead>
    3504:	fc 01       	movw	r30, r24

			if (X_ADC2>resolution_x) {X_ADC2 = resolution_x;}
    3506:	80 91 9d 20 	lds	r24, 0x209D
    350a:	90 91 9e 20 	lds	r25, 0x209E
    350e:	8e 17       	cp	r24, r30
    3510:	9f 07       	cpc	r25, r31
    3512:	08 f4       	brcc	.+2      	; 0x3516 <Update_display+0x150>
    3514:	fc 01       	movw	r30, r24
			
			//calculate the index_x                                               
			temp_index_x = ((int32_t)X_ADC2 * x_num * 2 + resolution_x) / ((int32_t) resolution_x * 2) - 1;
    3516:	c0 91 27 27 	lds	r28, 0x2727
    351a:	d0 91 28 27 	lds	r29, 0x2728
    351e:	5e 01       	movw	r10, r28
    3520:	cc 24       	eor	r12, r12
    3522:	dd 24       	eor	r13, r13
    3524:	7c 01       	movw	r14, r24
    3526:	00 e0       	ldi	r16, 0x00	; 0
    3528:	10 e0       	ldi	r17, 0x00	; 0
    352a:	c6 01       	movw	r24, r12
    352c:	b5 01       	movw	r22, r10
    352e:	66 0f       	add	r22, r22
    3530:	77 1f       	adc	r23, r23
    3532:	88 1f       	adc	r24, r24
    3534:	99 1f       	adc	r25, r25
    3536:	9f 01       	movw	r18, r30
    3538:	44 27       	eor	r20, r20
    353a:	37 fd       	sbrc	r19, 7
    353c:	40 95       	com	r20
    353e:	54 2f       	mov	r21, r20
    3540:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    3544:	6e 0d       	add	r22, r14
    3546:	7f 1d       	adc	r23, r15
    3548:	80 1f       	adc	r24, r16
    354a:	91 1f       	adc	r25, r17
    354c:	ee 0c       	add	r14, r14
    354e:	ff 1c       	adc	r15, r15
    3550:	00 1f       	adc	r16, r16
    3552:	11 1f       	adc	r17, r17
    3554:	a8 01       	movw	r20, r16
    3556:	97 01       	movw	r18, r14
    3558:	0e 94 73 4d 	call	0x9ae6	; 0x9ae6 <__divmodsi4>
    355c:	21 50       	subi	r18, 0x01	; 1
    355e:	30 40       	sbci	r19, 0x00	; 0
    3560:	40 40       	sbci	r20, 0x00	; 0
    3562:	50 40       	sbci	r21, 0x00	; 0
				
            if (temp_index_x >= x_num)  {temp_index_x = x_num - 1;} //check if too big
    3564:	2a 15       	cp	r18, r10
    3566:	3b 05       	cpc	r19, r11
    3568:	4c 05       	cpc	r20, r12
    356a:	5d 05       	cpc	r21, r13
    356c:	2c f0       	brlt	.+10     	; 0x3578 <Update_display+0x1b2>
    356e:	21 97       	sbiw	r28, 0x01	; 1
    3570:	9e 01       	movw	r18, r28
    3572:	40 e0       	ldi	r20, 0x00	; 0
    3574:	50 e0       	ldi	r21, 0x00	; 0
    3576:	21 96       	adiw	r28, 0x01	; 1
            if (temp_index_x <= 0)  {temp_index_x = 0;} //or too small
			index_x = temp_index_x;
    3578:	57 ff       	sbrs	r21, 7
    357a:	04 c0       	rjmp	.+8      	; 0x3584 <Update_display+0x1be>
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	40 e0       	ldi	r20, 0x00	; 0
    3582:	50 e0       	ldi	r21, 0x00	; 0
    3584:	20 93 ce 26 	sts	0x26CE, r18
    3588:	30 93 cf 26 	sts	0x26CF, r19
			
            frame_num = index_y*x_num + index_x;
    358c:	80 91 72 28 	lds	r24, 0x2872
    3590:	90 91 73 28 	lds	r25, 0x2873
    3594:	20 91 ce 26 	lds	r18, 0x26CE
    3598:	30 91 cf 26 	lds	r19, 0x26CF
    359c:	bc 01       	movw	r22, r24
    359e:	6c 9f       	mul	r22, r28
    35a0:	c0 01       	movw	r24, r0
    35a2:	6d 9f       	mul	r22, r29
    35a4:	90 0d       	add	r25, r0
    35a6:	7c 9f       	mul	r23, r28
    35a8:	90 0d       	add	r25, r0
    35aa:	11 24       	eor	r1, r1
    35ac:	82 0f       	add	r24, r18
    35ae:	93 1f       	adc	r25, r19
    35b0:	80 93 04 24 	sts	0x2404, r24
    35b4:	90 93 05 24 	sts	0x2405, r25
    35b8:	88 24       	eor	r8, r8
    35ba:	99 24       	eor	r9, r9
		case 5:
			X_rate = 0;
			break;			
    }
    
    switch(y_mode) {
    35bc:	80 91 0a 27 	lds	r24, 0x270A
    35c0:	81 30       	cpi	r24, 0x01	; 1
    35c2:	09 f1       	breq	.+66     	; 0x3606 <Update_display+0x240>
    35c4:	81 30       	cpi	r24, 0x01	; 1
    35c6:	38 f0       	brcs	.+14     	; 0x35d6 <Update_display+0x210>
    35c8:	82 30       	cpi	r24, 0x02	; 2
    35ca:	09 f4       	brne	.+2      	; 0x35ce <Update_display+0x208>
    35cc:	4b c0       	rjmp	.+150    	; 0x3664 <Update_display+0x29e>
    35ce:	83 30       	cpi	r24, 0x03	; 3
    35d0:	09 f0       	breq	.+2      	; 0x35d4 <Update_display+0x20e>
    35d2:	ea c0       	rjmp	.+468    	; 0x37a8 <Update_display+0x3e2>
    35d4:	89 c0       	rjmp	.+274    	; 0x36e8 <Update_display+0x322>
        case 0:   // open loop - use function generator to set x rate
            Y_val = 2*function_Y[func_read_index_y];
    35d6:	e0 91 07 24 	lds	r30, 0x2407
            Y_rate = ((Y_val*gain_y)/10 + 5*bias_y)/2;
    35da:	20 91 d0 26 	lds	r18, 0x26D0
    35de:	30 91 d1 26 	lds	r19, 0x26D1
    35e2:	22 0f       	add	r18, r18
    35e4:	33 1f       	adc	r19, r19
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	ee 0f       	add	r30, r30
    35ea:	ff 1f       	adc	r31, r31
    35ec:	e7 53       	subi	r30, 0x37	; 55
    35ee:	fb 4d       	sbci	r31, 0xDB	; 219
    35f0:	80 81       	ld	r24, Z
    35f2:	91 81       	ldd	r25, Z+1	; 0x01
    35f4:	ac 01       	movw	r20, r24
    35f6:	24 9f       	mul	r18, r20
    35f8:	c0 01       	movw	r24, r0
    35fa:	25 9f       	mul	r18, r21
    35fc:	90 0d       	add	r25, r0
    35fe:	34 9f       	mul	r19, r20
    3600:	90 0d       	add	r25, r0
    3602:	11 24       	eor	r1, r1
    3604:	1c c0       	rjmp	.+56     	; 0x363e <Update_display+0x278>
            break;
        case 1: //closed loop, use CH2 - CH3 to set x rate
            Y_ADC1 = analogRead(1)/4; // 1 volt = 102fps
    3606:	81 e0       	ldi	r24, 0x01	; 1
    3608:	0e 94 ba 2a 	call	0x5574	; 0x5574 <analogRead>
            temp_ADC_val = Y_val; //the previous value
            Y_val = ( 6*temp_ADC_val + 4*Y_ADC1)/10;   //this is a 60% old value, 40% new value smoother
    360c:	64 e0       	ldi	r22, 0x04	; 4
    360e:	70 e0       	ldi	r23, 0x00	; 0
    3610:	0e 94 3e 4d 	call	0x9a7c	; 0x9a7c <__divmodhi4>
    3614:	cb 01       	movw	r24, r22
            Y_rate = (int16_t)((int32_t)(Y_val*gain_y)/10 + 5*bias_y)/2; //Y_val can go as high as 4095, gain_y 100, and bias_y 250.   
    3616:	88 0f       	add	r24, r24
    3618:	99 1f       	adc	r25, r25
    361a:	88 0f       	add	r24, r24
    361c:	99 1f       	adc	r25, r25
    361e:	6a e0       	ldi	r22, 0x0A	; 10
    3620:	70 e0       	ldi	r23, 0x00	; 0
    3622:	0e 94 3e 4d 	call	0x9a7c	; 0x9a7c <__divmodhi4>
    3626:	80 91 d0 26 	lds	r24, 0x26D0
    362a:	90 91 d1 26 	lds	r25, 0x26D1
    362e:	9c 01       	movw	r18, r24
    3630:	62 9f       	mul	r22, r18
    3632:	c0 01       	movw	r24, r0
    3634:	63 9f       	mul	r22, r19
    3636:	90 0d       	add	r25, r0
    3638:	72 9f       	mul	r23, r18
    363a:	90 0d       	add	r25, r0
    363c:	11 24       	eor	r1, r1
    363e:	6a e0       	ldi	r22, 0x0A	; 10
    3640:	70 e0       	ldi	r23, 0x00	; 0
    3642:	0e 94 3e 4d 	call	0x9a7c	; 0x9a7c <__divmodhi4>
    3646:	cb 01       	movw	r24, r22
    3648:	40 91 c0 2a 	lds	r20, 0x2AC0
    364c:	50 91 c1 2a 	lds	r21, 0x2AC1
    3650:	9a 01       	movw	r18, r20
    3652:	22 0f       	add	r18, r18
    3654:	33 1f       	adc	r19, r19
    3656:	22 0f       	add	r18, r18
    3658:	33 1f       	adc	r19, r19
    365a:	24 0f       	add	r18, r20
    365c:	35 1f       	adc	r19, r21
    365e:	82 0f       	add	r24, r18
    3660:	93 1f       	adc	r25, r19
    3662:	3c c0       	rjmp	.+120    	; 0x36dc <Update_display+0x316>
            break;
        case 2: //closed loop w bias - use CH2 - CH3, and function gen. to set x rate
            Y_ADC1 = analogRead(1)/4; // 1 volt = 102
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	0e 94 ba 2a 	call	0x5574	; 0x5574 <analogRead>
            temp_ADC_val = Y_val; //the previous value
            Y_val = ( 6*temp_ADC_val + 4*Y_ADC1)/10;   //this is a 60% old value, 40% new value smoother
    366a:	64 e0       	ldi	r22, 0x04	; 4
    366c:	70 e0       	ldi	r23, 0x00	; 0
    366e:	0e 94 3e 4d 	call	0x9a7c	; 0x9a7c <__divmodhi4>
    3672:	cb 01       	movw	r24, r22
            //add in the bias to CL mode on ch Y
            Y_rate = (int16_t)((int32_t)(Y_val*gain_y)/10 + 2*function_Y[func_read_index_y] + 5*bias_y)/2; //Y_val can go as high as 4095
    3674:	e0 91 07 24 	lds	r30, 0x2407
    3678:	f0 e0       	ldi	r31, 0x00	; 0
    367a:	ee 0f       	add	r30, r30
    367c:	ff 1f       	adc	r31, r31
    367e:	e7 53       	subi	r30, 0x37	; 55
    3680:	fb 4d       	sbci	r31, 0xDB	; 219
    3682:	01 90       	ld	r0, Z+
    3684:	f0 81       	ld	r31, Z
    3686:	e0 2d       	mov	r30, r0
    3688:	ee 0f       	add	r30, r30
    368a:	ff 1f       	adc	r31, r31
    368c:	40 91 c0 2a 	lds	r20, 0x2AC0
    3690:	50 91 c1 2a 	lds	r21, 0x2AC1
    3694:	9a 01       	movw	r18, r20
    3696:	22 0f       	add	r18, r18
    3698:	33 1f       	adc	r19, r19
    369a:	22 0f       	add	r18, r18
    369c:	33 1f       	adc	r19, r19
    369e:	24 0f       	add	r18, r20
    36a0:	35 1f       	adc	r19, r21
    36a2:	e2 0f       	add	r30, r18
    36a4:	f3 1f       	adc	r31, r19
    36a6:	88 0f       	add	r24, r24
    36a8:	99 1f       	adc	r25, r25
    36aa:	88 0f       	add	r24, r24
    36ac:	99 1f       	adc	r25, r25
    36ae:	6a e0       	ldi	r22, 0x0A	; 10
    36b0:	70 e0       	ldi	r23, 0x00	; 0
    36b2:	0e 94 3e 4d 	call	0x9a7c	; 0x9a7c <__divmodhi4>
    36b6:	80 91 d0 26 	lds	r24, 0x26D0
    36ba:	90 91 d1 26 	lds	r25, 0x26D1
    36be:	ac 01       	movw	r20, r24
    36c0:	64 9f       	mul	r22, r20
    36c2:	c0 01       	movw	r24, r0
    36c4:	65 9f       	mul	r22, r21
    36c6:	90 0d       	add	r25, r0
    36c8:	74 9f       	mul	r23, r20
    36ca:	90 0d       	add	r25, r0
    36cc:	11 24       	eor	r1, r1
    36ce:	6a e0       	ldi	r22, 0x0A	; 10
    36d0:	70 e0       	ldi	r23, 0x00	; 0
    36d2:	0e 94 3e 4d 	call	0x9a7c	; 0x9a7c <__divmodhi4>
    36d6:	cf 01       	movw	r24, r30
    36d8:	86 0f       	add	r24, r22
    36da:	97 1f       	adc	r25, r23
    36dc:	62 e0       	ldi	r22, 0x02	; 2
    36de:	70 e0       	ldi	r23, 0x00	; 0
    36e0:	0e 94 3e 4d 	call	0x9a7c	; 0x9a7c <__divmodhi4>
    36e4:	eb 01       	movw	r28, r22
    36e6:	62 c0       	rjmp	.+196    	; 0x37ac <Update_display+0x3e6>
            break;
            //do something with errors here for default case
        case 3: // POS mode, use CH3 to set the frame position (pos ctrl, not vel ctrl)
            Y_ADC2 = analogRead(3);   //Y_ADC2 ranges from 0-4095 when input 0-10V
    36e8:	83 e0       	ldi	r24, 0x03	; 3
    36ea:	0e 94 ba 2a 	call	0x5574	; 0x5574 <analogRead>
    36ee:	fc 01       	movw	r30, r24
			
			if (Y_ADC2>resolution_y) {Y_ADC2 = resolution_y;}
    36f0:	80 91 9f 20 	lds	r24, 0x209F
    36f4:	90 91 a0 20 	lds	r25, 0x20A0
    36f8:	8e 17       	cp	r24, r30
    36fa:	9f 07       	cpc	r25, r31
    36fc:	08 f4       	brcc	.+2      	; 0x3700 <Update_display+0x33a>
    36fe:	fc 01       	movw	r30, r24
			
			//calculate the index_x                                               
			temp_index_y = ((int32_t)Y_ADC2 * y_num * 2 + resolution_y) / ((int32_t) resolution_y * 2) - 1;
    3700:	c0 91 c6 24 	lds	r28, 0x24C6
    3704:	d0 91 c7 24 	lds	r29, 0x24C7
    3708:	5e 01       	movw	r10, r28
    370a:	cc 24       	eor	r12, r12
    370c:	dd 24       	eor	r13, r13
    370e:	7c 01       	movw	r14, r24
    3710:	00 e0       	ldi	r16, 0x00	; 0
    3712:	10 e0       	ldi	r17, 0x00	; 0
    3714:	c6 01       	movw	r24, r12
    3716:	b5 01       	movw	r22, r10
    3718:	66 0f       	add	r22, r22
    371a:	77 1f       	adc	r23, r23
    371c:	88 1f       	adc	r24, r24
    371e:	99 1f       	adc	r25, r25
    3720:	9f 01       	movw	r18, r30
    3722:	44 27       	eor	r20, r20
    3724:	37 fd       	sbrc	r19, 7
    3726:	40 95       	com	r20
    3728:	54 2f       	mov	r21, r20
    372a:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    372e:	6e 0d       	add	r22, r14
    3730:	7f 1d       	adc	r23, r15
    3732:	80 1f       	adc	r24, r16
    3734:	91 1f       	adc	r25, r17
    3736:	ee 0c       	add	r14, r14
    3738:	ff 1c       	adc	r15, r15
    373a:	00 1f       	adc	r16, r16
    373c:	11 1f       	adc	r17, r17
    373e:	a8 01       	movw	r20, r16
    3740:	97 01       	movw	r18, r14
    3742:	0e 94 73 4d 	call	0x9ae6	; 0x9ae6 <__divmodsi4>
    3746:	21 50       	subi	r18, 0x01	; 1
    3748:	30 40       	sbci	r19, 0x00	; 0
    374a:	40 40       	sbci	r20, 0x00	; 0
    374c:	50 40       	sbci	r21, 0x00	; 0
			
            if (temp_index_y >= y_num)  {temp_index_y = y_num - 1;} //check if too big
    374e:	2a 15       	cp	r18, r10
    3750:	3b 05       	cpc	r19, r11
    3752:	4c 05       	cpc	r20, r12
    3754:	5d 05       	cpc	r21, r13
    3756:	24 f0       	brlt	.+8      	; 0x3760 <Update_display+0x39a>
    3758:	21 97       	sbiw	r28, 0x01	; 1
    375a:	9e 01       	movw	r18, r28
    375c:	40 e0       	ldi	r20, 0x00	; 0
    375e:	50 e0       	ldi	r21, 0x00	; 0
            if (temp_index_y <= 0)  {temp_index_y = 0;} //or too small
			index_y = temp_index_y;
    3760:	57 ff       	sbrs	r21, 7
    3762:	04 c0       	rjmp	.+8      	; 0x376c <Update_display+0x3a6>
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	40 e0       	ldi	r20, 0x00	; 0
    376a:	50 e0       	ldi	r21, 0x00	; 0
    376c:	20 93 72 28 	sts	0x2872, r18
    3770:	30 93 73 28 	sts	0x2873, r19
            frame_num = index_y*x_num + index_x;
    3774:	20 91 72 28 	lds	r18, 0x2872
    3778:	30 91 73 28 	lds	r19, 0x2873
    377c:	40 91 ce 26 	lds	r20, 0x26CE
    3780:	50 91 cf 26 	lds	r21, 0x26CF
    3784:	80 91 27 27 	lds	r24, 0x2727
    3788:	90 91 28 27 	lds	r25, 0x2728
    378c:	bc 01       	movw	r22, r24
    378e:	26 9f       	mul	r18, r22
    3790:	c0 01       	movw	r24, r0
    3792:	27 9f       	mul	r18, r23
    3794:	90 0d       	add	r25, r0
    3796:	36 9f       	mul	r19, r22
    3798:	90 0d       	add	r25, r0
    379a:	11 24       	eor	r1, r1
    379c:	84 0f       	add	r24, r20
    379e:	95 1f       	adc	r25, r21
    37a0:	80 93 04 24 	sts	0x2404, r24
    37a4:	90 93 05 24 	sts	0x2405, r25
    37a8:	c0 e0       	ldi	r28, 0x00	; 0
    37aa:	d0 e0       	ldi	r29, 0x00	; 0
    //in the above x,y_val computation, there is a div by 10 to take away gain scaling
    //so gain_x of 10 is 1X gain, gain_x of 20 = 2X ...
    
    //here the 2* the rate is because we want 20 = 1V to correspond to 10 fps. could probably do without,
    // and just divide the a2dConvert output by 4, and not scale function_x,y by 2
    if (Stop == 1){
    37ac:	80 91 9c 20 	lds	r24, 0x209C
    37b0:	81 30       	cpi	r24, 0x01	; 1
    37b2:	59 f1       	breq	.+86     	; 0x380a <Update_display+0x444>
        X_rate = Y_rate = 0;
    }
  
    if (X_rate > 0)
    37b4:	18 14       	cp	r1, r8
    37b6:	19 04       	cpc	r1, r9
    37b8:	74 f4       	brge	.+28     	; 0x37d6 <Update_display+0x410>
        Update_Reg_Handler(increment_index_x, (uint32_t)OVERFLOW_RATE/abs(X_rate), 2, 1);
    37ba:	94 01       	movw	r18, r8
    37bc:	44 27       	eor	r20, r20
    37be:	37 fd       	sbrc	r19, 7
    37c0:	40 95       	com	r20
    37c2:	54 2f       	mov	r21, r20
    37c4:	62 e1       	ldi	r22, 0x12	; 18
    37c6:	7a e7       	ldi	r23, 0x7A	; 122
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    37d0:	8e e8       	ldi	r24, 0x8E	; 142
    37d2:	9a e0       	ldi	r25, 0x0A	; 10
    37d4:	13 c0       	rjmp	.+38     	; 0x37fc <Update_display+0x436>
    else if (X_rate < 0)
    37d6:	81 14       	cp	r8, r1
    37d8:	91 04       	cpc	r9, r1
    37da:	c9 f0       	breq	.+50     	; 0x380e <Update_display+0x448>
        Update_Reg_Handler(decrement_index_x, (uint32_t)OVERFLOW_RATE/abs(X_rate), 2, 1);
    37dc:	22 27       	eor	r18, r18
    37de:	33 27       	eor	r19, r19
    37e0:	28 19       	sub	r18, r8
    37e2:	39 09       	sbc	r19, r9
    37e4:	44 27       	eor	r20, r20
    37e6:	37 fd       	sbrc	r19, 7
    37e8:	40 95       	com	r20
    37ea:	54 2f       	mov	r21, r20
    37ec:	62 e1       	ldi	r22, 0x12	; 18
    37ee:	7a e7       	ldi	r23, 0x7A	; 122
    37f0:	80 e0       	ldi	r24, 0x00	; 0
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    37f8:	82 e0       	ldi	r24, 0x02	; 2
    37fa:	9b e0       	ldi	r25, 0x0B	; 11
    37fc:	ba 01       	movw	r22, r20
    37fe:	a9 01       	movw	r20, r18
    3800:	22 e0       	ldi	r18, 0x02	; 2
    3802:	01 e0       	ldi	r16, 0x01	; 1
    3804:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Update_Reg_Handler>
    3808:	0e c0       	rjmp	.+28     	; 0x3826 <Update_display+0x460>
    380a:	c0 e0       	ldi	r28, 0x00	; 0
    380c:	d0 e0       	ldi	r29, 0x00	; 0
    else     //X_rate == 0
        Update_Reg_Handler(decrement_index_x, (UPDATE_RATE), 2, 0);
    380e:	82 e0       	ldi	r24, 0x02	; 2
    3810:	9b e0       	ldi	r25, 0x0B	; 11
    3812:	4e e4       	ldi	r20, 0x4E	; 78
    3814:	50 e0       	ldi	r21, 0x00	; 0
    3816:	60 e0       	ldi	r22, 0x00	; 0
    3818:	70 e0       	ldi	r23, 0x00	; 0
    381a:	22 e0       	ldi	r18, 0x02	; 2
    381c:	00 e0       	ldi	r16, 0x00	; 0
    381e:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Update_Reg_Handler>
    3822:	88 24       	eor	r8, r8
    3824:	99 24       	eor	r9, r9
	
    if (Y_rate > 0)
    3826:	1c 16       	cp	r1, r28
    3828:	1d 06       	cpc	r1, r29
    382a:	74 f4       	brge	.+28     	; 0x3848 <Update_display+0x482>
        Update_Reg_Handler(increment_index_y, (uint32_t)OVERFLOW_RATE/abs(Y_rate), 3, 1);
    382c:	9e 01       	movw	r18, r28
    382e:	44 27       	eor	r20, r20
    3830:	37 fd       	sbrc	r19, 7
    3832:	40 95       	com	r20
    3834:	54 2f       	mov	r21, r20
    3836:	62 e1       	ldi	r22, 0x12	; 18
    3838:	7a e7       	ldi	r23, 0x7A	; 122
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    3842:	86 ec       	ldi	r24, 0xC6	; 198
    3844:	9a e0       	ldi	r25, 0x0A	; 10
    3846:	12 c0       	rjmp	.+36     	; 0x386c <Update_display+0x4a6>
    else if (Y_rate < 0)
    3848:	20 97       	sbiw	r28, 0x00	; 0
    384a:	a9 f0       	breq	.+42     	; 0x3876 <Update_display+0x4b0>
        Update_Reg_Handler(decrement_index_y, (uint32_t)OVERFLOW_RATE/abs(Y_rate), 3, 1);
    384c:	22 27       	eor	r18, r18
    384e:	33 27       	eor	r19, r19
    3850:	2c 1b       	sub	r18, r28
    3852:	3d 0b       	sbc	r19, r29
    3854:	44 27       	eor	r20, r20
    3856:	37 fd       	sbrc	r19, 7
    3858:	40 95       	com	r20
    385a:	54 2f       	mov	r21, r20
    385c:	62 e1       	ldi	r22, 0x12	; 18
    385e:	7a e7       	ldi	r23, 0x7A	; 122
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    3868:	8a e3       	ldi	r24, 0x3A	; 58
    386a:	9b e0       	ldi	r25, 0x0B	; 11
    386c:	ba 01       	movw	r22, r20
    386e:	a9 01       	movw	r20, r18
    3870:	23 e0       	ldi	r18, 0x03	; 3
    3872:	01 e0       	ldi	r16, 0x01	; 1
    3874:	08 c0       	rjmp	.+16     	; 0x3886 <Update_display+0x4c0>
    else      //Y_rate == 0
        Update_Reg_Handler(decrement_index_y, (UPDATE_RATE), 3, 0);
    3876:	8a e3       	ldi	r24, 0x3A	; 58
    3878:	9b e0       	ldi	r25, 0x0B	; 11
    387a:	4e e4       	ldi	r20, 0x4E	; 78
    387c:	50 e0       	ldi	r21, 0x00	; 0
    387e:	60 e0       	ldi	r22, 0x00	; 0
    3880:	70 e0       	ldi	r23, 0x00	; 0
    3882:	23 e0       	ldi	r18, 0x03	; 3
    3884:	00 e0       	ldi	r16, 0x00	; 0
    3886:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <Update_Reg_Handler>
	
    
    //if the rates are too high, track the largest one to set warning LED
    x_gt_y = (X_rate >= Y_rate);
    388a:	10 92 ff 23 	sts	0x23FF, r1
    388e:	8c 16       	cp	r8, r28
    3890:	9d 06       	cpc	r9, r29
    3892:	1c f0       	brlt	.+6      	; 0x389a <Update_display+0x4d4>
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	80 93 ff 23 	sts	0x23FF, r24
}
    389a:	cd b7       	in	r28, 0x3d	; 61
    389c:	de b7       	in	r29, 0x3e	; 62
    389e:	ec e0       	ldi	r30, 0x0C	; 12
    38a0:	0c 94 b0 4d 	jmp	0x9b60	; 0x9b60 <__epilogue_restores__+0xc>

000038a4 <display_preload_frame>:
    analogWrite(0, x_dac_val); // make it a value in the range 0 - 32767 (0V - 10V)
    analogWrite(1, y_dac_val);  // make it a value in the range 0 - 32767 (0V - 10V)
    digitalWrite(1, LOW); // set line low at end of frame write
}

void display_preload_frame(uint16_t f_num, uint16_t Xindex, uint16_t Yindex){
    38a4:	a4 e0       	ldi	r26, 0x04	; 4
    38a6:	b0 e0       	ldi	r27, 0x00	; 0
    38a8:	e8 e5       	ldi	r30, 0x58	; 88
    38aa:	fc e1       	ldi	r31, 0x1C	; 28
    38ac:	0c 94 96 4d 	jmp	0x9b2c	; 0x9b2c <__prologue_saves__+0x10>
    38b0:	8b 83       	std	Y+3, r24	; 0x03
    38b2:	9c 83       	std	Y+4, r25	; 0x04
    38b4:	7b 01       	movw	r14, r22
    38b6:	5a 01       	movw	r10, r20
	uint8_t CMD[2];

	//when preload pattern to panels (super fast mode), we update frame and analog output in this function in stead of
	//in fetch_display_frame because this fuction is ISR and has a higher priority than fetch_display_frame called by 
	//main funciton. In this way, we can keep update frame during f_read to in order to update function data 
	digitalWrite(1, HIGH); 
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	61 e0       	ldi	r22, 0x01	; 1
    38bc:	0e 94 88 2a 	call	0x5510	; 0x5510 <digitalWrite>
	//ask all panels to load f_num
	CMD[0] = *((uint8_t *)&f_num + 1) | 0xf0;  // this is the high byte
    38c0:	8c 81       	ldd	r24, Y+4	; 0x04
    38c2:	80 6f       	ori	r24, 0xF0	; 240
    38c4:	89 83       	std	Y+1, r24	; 0x01
	CMD[1] = *(uint8_t *)&f_num; //this is the low byte
    38c6:	8b 81       	ldd	r24, Y+3	; 0x03
    38c8:	8a 83       	std	Y+2, r24	; 0x02
		
	i2cMasterSend(0, 2, CMD); 	//use 2 to follow the old protocol temporarily
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	62 e0       	ldi	r22, 0x02	; 2
    38ce:	ae 01       	movw	r20, r28
    38d0:	4f 5f       	subi	r20, 0xFF	; 255
    38d2:	5f 4f       	sbci	r21, 0xFF	; 255
    38d4:	0e 94 8a 14 	call	0x2914	; 0x2914 <i2cMasterSend>
		
	//update analog output after updating frames 		
	X_dac_val = ((uint32_t)Xindex + 1)*32767/x_num; 
	analogWrite(0, X_dac_val); // make it a value in the range 0 - 32767 (0 - 10V)
    38d8:	00 e0       	ldi	r16, 0x00	; 0
    38da:	10 e0       	ldi	r17, 0x00	; 0
    38dc:	08 94       	sec
    38de:	e1 1c       	adc	r14, r1
    38e0:	f1 1c       	adc	r15, r1
    38e2:	01 1d       	adc	r16, r1
    38e4:	11 1d       	adc	r17, r1
    38e6:	c8 01       	movw	r24, r16
    38e8:	b7 01       	movw	r22, r14
    38ea:	2f ef       	ldi	r18, 0xFF	; 255
    38ec:	3f e7       	ldi	r19, 0x7F	; 127
    38ee:	40 e0       	ldi	r20, 0x00	; 0
    38f0:	50 e0       	ldi	r21, 0x00	; 0
    38f2:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    38f6:	20 91 27 27 	lds	r18, 0x2727
    38fa:	30 91 28 27 	lds	r19, 0x2728
    38fe:	40 e0       	ldi	r20, 0x00	; 0
    3900:	50 e0       	ldi	r21, 0x00	; 0
    3902:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    3906:	80 e0       	ldi	r24, 0x00	; 0
    3908:	b9 01       	movw	r22, r18
    390a:	0e 94 2a 2b 	call	0x5654	; 0x5654 <analogWrite>
	Y_dac_val = ((uint32_t)Yindex + 1)*32767/y_num; 
	analogWrite(1, Y_dac_val); // make it a value in the range 0 - 32767 (0 - 10V)
    390e:	cc 24       	eor	r12, r12
    3910:	dd 24       	eor	r13, r13
    3912:	08 94       	sec
    3914:	a1 1c       	adc	r10, r1
    3916:	b1 1c       	adc	r11, r1
    3918:	c1 1c       	adc	r12, r1
    391a:	d1 1c       	adc	r13, r1
    391c:	c6 01       	movw	r24, r12
    391e:	b5 01       	movw	r22, r10
    3920:	2f ef       	ldi	r18, 0xFF	; 255
    3922:	3f e7       	ldi	r19, 0x7F	; 127
    3924:	40 e0       	ldi	r20, 0x00	; 0
    3926:	50 e0       	ldi	r21, 0x00	; 0
    3928:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    392c:	20 91 c6 24 	lds	r18, 0x24C6
    3930:	30 91 c7 24 	lds	r19, 0x24C7
    3934:	40 e0       	ldi	r20, 0x00	; 0
    3936:	50 e0       	ldi	r21, 0x00	; 0
    3938:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	b9 01       	movw	r22, r18
    3940:	0e 94 2a 2b 	call	0x5654	; 0x5654 <analogWrite>
	digitalWrite(1, LOW); // set line low at end of frame write	
    3944:	81 e0       	ldi	r24, 0x01	; 1
    3946:	60 e0       	ldi	r22, 0x00	; 0
    3948:	0e 94 88 2a 	call	0x5510	; 0x5510 <digitalWrite>
}
    394c:	24 96       	adiw	r28, 0x04	; 4
    394e:	ea e0       	ldi	r30, 0x0A	; 10
    3950:	0c 94 b2 4d 	jmp	0x9b64	; 0x9b64 <__epilogue_restores__+0x10>

00003954 <display_dumped_frame>:
	if (quiet_mode_on == 0)
        xputs(PSTR("Success set the new laser pattern.\n"));

}

void display_dumped_frame (uint8_t *msg_buffer) {
    3954:	a1 e0       	ldi	r26, 0x01	; 1
    3956:	b0 e0       	ldi	r27, 0x00	; 0
    3958:	e0 eb       	ldi	r30, 0xB0	; 176
    395a:	fc e1       	ldi	r31, 0x1C	; 28
    395c:	0c 94 96 4d 	jmp	0x9b2c	; 0x9b2c <__prologue_saves__+0x10>
    3960:	5c 01       	movw	r10, r24
    //The first two bytes are the x_dac_val, only support positive number 
    //The second two bytes are the y_dac_val, only support positive number 
    //The fifth byte is the number of panels
    //the sixth byte is the gray scale level
    //the seventh byte is the flag of row compression 
    x_dac_val = (uint16_t)msg_buffer[0] + 256*(uint16_t)msg_buffer[1];
    3962:	fc 01       	movw	r30, r24
    3964:	e0 80       	ld	r14, Z
    3966:	f1 80       	ldd	r15, Z+1	; 0x01
    y_dac_val = (uint16_t)msg_buffer[2] + 256*(uint16_t)msg_buffer[3];
    3968:	c2 80       	ldd	r12, Z+2	; 0x02
    396a:	d3 80       	ldd	r13, Z+3	; 0x03
    num_panels = msg_buffer[4];
    396c:	84 81       	ldd	r24, Z+4	; 0x04
    396e:	80 93 03 24 	sts	0x2403, r24
    gs_value =msg_buffer[5];
    3972:	95 81       	ldd	r25, Z+5	; 0x05
    3974:	90 93 4a 26 	sts	0x264A, r25
    row_compress = msg_buffer[6];
    3978:	86 81       	ldd	r24, Z+6	; 0x06
    397a:	80 93 c8 24 	sts	0x24C8, r24


    if (row_compress)
    397e:	88 23       	and	r24, r24
    3980:	19 f0       	breq	.+6      	; 0x3988 <display_dumped_frame+0x34>
        bytes_per_panel_frame = gs_value;
    3982:	90 93 cd 26 	sts	0x26CD, r25
    3986:	09 c0       	rjmp	.+18     	; 0x399a <display_dumped_frame+0x46>
    else
        bytes_per_panel_frame = gs_value*8;
    3988:	89 2f       	mov	r24, r25
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	23 e0       	ldi	r18, 0x03	; 3
    398e:	88 0f       	add	r24, r24
    3990:	99 1f       	adc	r25, r25
    3992:	2a 95       	dec	r18
    3994:	e1 f7       	brne	.-8      	; 0x398e <display_dumped_frame+0x3a>
    3996:	80 93 cd 26 	sts	0x26CD, r24
  
    buffer_index = 7;
    display_flag = 0;  //clear the display flag
    399a:	10 92 fe 23 	sts	0x23FE, r1
    digitalWrite(1, HIGH); // set line high at beginning of frame write
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	61 e0       	ldi	r22, 0x01	; 1
    39a2:	0e 94 88 2a 	call	0x5510	; 0x5510 <digitalWrite>
    39a6:	91 e0       	ldi	r25, 0x01	; 1
    39a8:	07 e0       	ldi	r16, 0x07	; 7
    39aa:	10 e0       	ldi	r17, 0x00	; 0
    39ac:	0f c0       	rjmp	.+30     	; 0x39cc <display_dumped_frame+0x78>
    
    for (panel_index = 1; panel_index <= num_panels; panel_index++){
        i2cMasterSend(panel_index, bytes_per_panel_frame, &msg_buffer[buffer_index]);
    39ae:	a5 01       	movw	r20, r10
    39b0:	40 0f       	add	r20, r16
    39b2:	51 1f       	adc	r21, r17
    39b4:	89 2f       	mov	r24, r25
    39b6:	60 91 cd 26 	lds	r22, 0x26CD
    39ba:	99 83       	std	Y+1, r25	; 0x01
    39bc:	0e 94 8a 14 	call	0x2914	; 0x2914 <i2cMasterSend>
        buffer_index = buffer_index + bytes_per_panel_frame;
    39c0:	80 91 cd 26 	lds	r24, 0x26CD
    39c4:	08 0f       	add	r16, r24
    39c6:	11 1d       	adc	r17, r1
  
    buffer_index = 7;
    display_flag = 0;  //clear the display flag
    digitalWrite(1, HIGH); // set line high at beginning of frame write
    
    for (panel_index = 1; panel_index <= num_panels; panel_index++){
    39c8:	99 81       	ldd	r25, Y+1	; 0x01
    39ca:	9f 5f       	subi	r25, 0xFF	; 255
    39cc:	80 91 03 24 	lds	r24, 0x2403
    39d0:	89 17       	cp	r24, r25
    39d2:	68 f7       	brcc	.-38     	; 0x39ae <display_dumped_frame+0x5a>
        i2cMasterSend(panel_index, bytes_per_panel_frame, &msg_buffer[buffer_index]);
        buffer_index = buffer_index + bytes_per_panel_frame;
    }
    analogWrite(0, x_dac_val); // make it a value in the range 0 - 32767 (0V - 10V)
    39d4:	7f 2d       	mov	r23, r15
    39d6:	60 e0       	ldi	r22, 0x00	; 0
    39d8:	6e 0d       	add	r22, r14
    39da:	71 1d       	adc	r23, r1
    39dc:	80 e0       	ldi	r24, 0x00	; 0
    39de:	0e 94 2a 2b 	call	0x5654	; 0x5654 <analogWrite>
    analogWrite(1, y_dac_val);  // make it a value in the range 0 - 32767 (0V - 10V)
    39e2:	7d 2d       	mov	r23, r13
    39e4:	60 e0       	ldi	r22, 0x00	; 0
    39e6:	6c 0d       	add	r22, r12
    39e8:	71 1d       	adc	r23, r1
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	0e 94 2a 2b 	call	0x5654	; 0x5654 <analogWrite>
    digitalWrite(1, LOW); // set line low at end of frame write
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	60 e0       	ldi	r22, 0x00	; 0
    39f4:	0e 94 88 2a 	call	0x5510	; 0x5510 <digitalWrite>
}
    39f8:	21 96       	adiw	r28, 0x01	; 1
    39fa:	ea e0       	ldi	r30, 0x0A	; 10
    39fc:	0c 94 b2 4d 	jmp	0x9b64	; 0x9b64 <__epilogue_restores__+0x10>

00003a00 <fetch_display_frame>:
	analogWrite(1, Y_dac_val); // make it a value in the range 0 - 32767 (0 - 10V)
	digitalWrite(1, LOW); // set line low at end of frame write	
}
			

void fetch_display_frame(uint16_t f_num, uint16_t Xindex, uint16_t Yindex){
    3a00:	2f 92       	push	r2
    3a02:	3f 92       	push	r3
    3a04:	4f 92       	push	r4
    3a06:	5f 92       	push	r5
    3a08:	6f 92       	push	r6
    3a0a:	7f 92       	push	r7
    3a0c:	9f 92       	push	r9
    3a0e:	af 92       	push	r10
    3a10:	bf 92       	push	r11
    3a12:	cf 92       	push	r12
    3a14:	df 92       	push	r13
    3a16:	ef 92       	push	r14
    3a18:	ff 92       	push	r15
    3a1a:	0f 93       	push	r16
    3a1c:	1f 93       	push	r17
    3a1e:	df 93       	push	r29
    3a20:	cf 93       	push	r28
    3a22:	cd b7       	in	r28, 0x3d	; 61
    3a24:	de b7       	in	r29, 0x3e	; 62
    3a26:	a8 97       	sbiw	r28, 0x28	; 40
    3a28:	cd bf       	out	0x3d, r28	; 61
    3a2a:	de bf       	out	0x3e, r29	; 62
    3a2c:	5c 01       	movw	r10, r24
    3a2e:	2b 01       	movw	r4, r22
    3a30:	1a 01       	movw	r2, r20
			digitalWrite(0, HIGH);   // turn on laser
	}
	
	digitalWrite(1, LOW); // set line low at end of frame write

}
    3a32:	8d b7       	in	r24, 0x3d	; 61
    3a34:	9e b7       	in	r25, 0x3e	; 62
    3a36:	8f a3       	std	Y+39, r24	; 0x27
    3a38:	98 a7       	std	Y+40, r25	; 0x28
    uint8_t FLASH[32];
    uint16_t len, cnt, buff_index;
    uint32_t offset;
    uint8_t res;
    uint16_t X_dac_val, Y_dac_val;
    uint8_t sreg = SREG;
    3a3a:	8f b7       	in	r24, 0x3f	; 63
	uint8_t block_per_frame;
	uint8_t tempVal, bitIndex, arrayIndex;
	
	digitalWrite(1, HIGH); // set line high at start of frame write			
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	61 e0       	ldi	r22, 0x01	; 1
    3a40:	0e 94 88 2a 	call	0x5510	; 0x5510 <digitalWrite>
	if (display_flag > 1){      //if flag gets bigger than 1 -> frame skipped
    3a44:	80 91 fe 23 	lds	r24, 0x23FE
    3a48:	82 30       	cpi	r24, 0x02	; 2
    3a4a:	18 f0       	brcs	.+6      	; 0x3a52 <fetch_display_frame+0x52>
			ledToggle(1);    //toggle LED 1
    3a4c:	81 e0       	ldi	r24, 0x01	; 1
    3a4e:	0e 94 16 2a 	call	0x542c	; 0x542c <ledToggle>
	}
				
	display_flag = 0;  //clear the display flag
    3a52:	10 92 fe 23 	sts	0x23FE, r1

	len = num_panels * bytes_per_panel_frame;
    3a56:	80 91 cd 26 	lds	r24, 0x26CD
    3a5a:	90 91 03 24 	lds	r25, 0x2403
    3a5e:	89 9f       	mul	r24, r25
    3a60:	60 01       	movw	r12, r0
    3a62:	11 24       	eor	r1, r1
	
	if (len%512 != 0)
    3a64:	c6 01       	movw	r24, r12
    3a66:	91 70       	andi	r25, 0x01	; 1
    3a68:	6d 2d       	mov	r22, r13
    3a6a:	66 95       	lsr	r22
    3a6c:	89 2b       	or	r24, r25
    3a6e:	09 f0       	breq	.+2      	; 0x3a72 <fetch_display_frame+0x72>
		block_per_frame = len/512 + 1;
    3a70:	6f 5f       	subi	r22, 0xFF	; 255
	else 
		block_per_frame = len/512;
		
	uint8_t  frameBuff[len];
    3a72:	ad b7       	in	r26, 0x3d	; 61
    3a74:	be b7       	in	r27, 0x3e	; 62
    3a76:	ac 19       	sub	r26, r12
    3a78:	bd 09       	sbc	r27, r13
    3a7a:	ad bf       	out	0x3d, r26	; 61
    3a7c:	be bf       	out	0x3e, r27	; 62
    3a7e:	6d b6       	in	r6, 0x3d	; 61
    3a80:	7e b6       	in	r7, 0x3e	; 62
    3a82:	08 94       	sec
    3a84:	61 1c       	adc	r6, r1
    3a86:	71 1c       	adc	r7, r1
	offset = 512 + (uint32_t)f_num * 512 * block_per_frame;
    3a88:	70 e0       	ldi	r23, 0x00	; 0
    3a8a:	80 e0       	ldi	r24, 0x00	; 0
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	95 01       	movw	r18, r10
    3a90:	40 e0       	ldi	r20, 0x00	; 0
    3a92:	50 e0       	ldi	r21, 0x00	; 0
    3a94:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    3a98:	7b 01       	movw	r14, r22
    3a9a:	8c 01       	movw	r16, r24
    3a9c:	08 94       	sec
    3a9e:	e1 1c       	adc	r14, r1
    3aa0:	f1 1c       	adc	r15, r1
    3aa2:	01 1d       	adc	r16, r1
    3aa4:	11 1d       	adc	r17, r1
    3aa6:	f9 e0       	ldi	r31, 0x09	; 9
    3aa8:	ee 0c       	add	r14, r14
    3aaa:	ff 1c       	adc	r15, r15
    3aac:	00 1f       	adc	r16, r16
    3aae:	11 1f       	adc	r17, r17
    3ab0:	fa 95       	dec	r31
    3ab2:	d1 f7       	brne	.-12     	; 0x3aa8 <fetch_display_frame+0xa8>

	res = f_lseek(&file1, offset);
    3ab4:	84 e7       	ldi	r24, 0x74	; 116
    3ab6:	98 e2       	ldi	r25, 0x28	; 40
    3ab8:	b8 01       	movw	r22, r16
    3aba:	a7 01       	movw	r20, r14
    3abc:	0e 94 31 3c 	call	0x7862	; 0x7862 <f_lseek>
    3ac0:	98 2e       	mov	r9, r24
	if ((res == FR_OK) && (file1.fptr == offset)) {
    3ac2:	88 23       	and	r24, r24
    3ac4:	09 f0       	breq	.+2      	; 0x3ac8 <fetch_display_frame+0xc8>
    3ac6:	59 c1       	rjmp	.+690    	; 0x3d7a <fetch_display_frame+0x37a>
    3ac8:	80 91 7a 28 	lds	r24, 0x287A
    3acc:	90 91 7b 28 	lds	r25, 0x287B
    3ad0:	a0 91 7c 28 	lds	r26, 0x287C
    3ad4:	b0 91 7d 28 	lds	r27, 0x287D
    3ad8:	8e 15       	cp	r24, r14
    3ada:	9f 05       	cpc	r25, r15
    3adc:	a0 07       	cpc	r26, r16
    3ade:	b1 07       	cpc	r27, r17
    3ae0:	09 f0       	breq	.+2      	; 0x3ae4 <fetch_display_frame+0xe4>
    3ae2:	4b c1       	rjmp	.+662    	; 0x3d7a <fetch_display_frame+0x37a>
		res = f_read(&file1, frameBuff, len, &cnt);
    3ae4:	84 e7       	ldi	r24, 0x74	; 116
    3ae6:	98 e2       	ldi	r25, 0x28	; 40
    3ae8:	b3 01       	movw	r22, r6
    3aea:	a6 01       	movw	r20, r12
    3aec:	9e 01       	movw	r18, r28
    3aee:	2f 5f       	subi	r18, 0xFF	; 255
    3af0:	3f 4f       	sbci	r19, 0xFF	; 255
    3af2:	0e 94 a3 3e 	call	0x7d46	; 0x7d46 <f_read>
    3af6:	18 2f       	mov	r17, r24
		if ((res == FR_OK) && (cnt == len)) {	
    3af8:	88 23       	and	r24, r24
    3afa:	09 f0       	breq	.+2      	; 0x3afe <fetch_display_frame+0xfe>
    3afc:	17 c1       	rjmp	.+558    	; 0x3d2c <fetch_display_frame+0x32c>
    3afe:	89 81       	ldd	r24, Y+1	; 0x01
    3b00:	9a 81       	ldd	r25, Y+2	; 0x02
    3b02:	8c 15       	cp	r24, r12
    3b04:	9d 05       	cpc	r25, r13
    3b06:	09 f0       	breq	.+2      	; 0x3b0a <fetch_display_frame+0x10a>
    3b08:	11 c1       	rjmp	.+546    	; 0x3d2c <fetch_display_frame+0x32c>
    3b0a:	11 e0       	ldi	r17, 0x01	; 1
    3b0c:	ee 24       	eor	r14, r14
    3b0e:	ff 24       	eor	r15, r15
		

			buff_index = 0;
			
			for (panel_index = 1; panel_index <= num_panels; panel_index++){
                for(j = 0;j < bytes_per_panel_frame;j++){
    3b10:	e7 e0       	ldi	r30, 0x07	; 7
    3b12:	ce 2e       	mov	r12, r30
    3b14:	d1 2c       	mov	r13, r1
    3b16:	cc 0e       	add	r12, r28
    3b18:	dd 1e       	adc	r13, r29
													if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
														gscale[0] = FLASH[0];
														gscale[1] = FLASH[8];
														gscale[2] = FLASH[16];
														gscale[3] = FLASH[24];
														i2cMasterSend(panel_index, 4, &gscale[0]); //send a 4 byte packet with the correct row_compressed value.
    3b1a:	73 e0       	ldi	r23, 0x03	; 3
    3b1c:	a7 2e       	mov	r10, r23
    3b1e:	b1 2c       	mov	r11, r1
    3b20:	ac 0e       	add	r10, r28
    3b22:	bd 1e       	adc	r11, r29
    3b24:	f7 c0       	rjmp	.+494    	; 0x3d14 <fetch_display_frame+0x314>

			buff_index = 0;
			
			for (panel_index = 1; panel_index <= num_panels; panel_index++){
                for(j = 0;j < bytes_per_panel_frame;j++){
                    FLASH[j] = frameBuff[buff_index++]; //not good for performance, no need to copy the data
    3b26:	8d 91       	ld	r24, X+
    3b28:	81 93       	st	Z+, r24
		

			buff_index = 0;
			
			for (panel_index = 1; panel_index <= num_panels; panel_index++){
                for(j = 0;j < bytes_per_panel_frame;j++){
    3b2a:	8e 2f       	mov	r24, r30
    3b2c:	8c 19       	sub	r24, r12
    3b2e:	89 17       	cp	r24, r25
    3b30:	d0 f3       	brcs	.-12     	; 0x3b26 <fetch_display_frame+0x126>
    3b32:	e9 0e       	add	r14, r25
    3b34:	f1 1c       	adc	r15, r1
                    FLASH[j] = frameBuff[buff_index++]; //not good for performance, no need to copy the data
                }

				packet_sent = 0; //used with compression to simplify coniditionals.
				if (ident_compress == 1) {
    3b36:	80 91 9d 28 	lds	r24, 0x289D
    3b3a:	81 30       	cpi	r24, 0x01	; 1
    3b3c:	09 f0       	breq	.+2      	; 0x3b40 <fetch_display_frame+0x140>
    3b3e:	e3 c0       	rjmp	.+454    	; 0x3d06 <fetch_display_frame+0x306>
					if (bytes_per_panel_frame == 8){
    3b40:	98 30       	cpi	r25, 0x08	; 8
    3b42:	e9 f4       	brne	.+58     	; 0x3b7e <fetch_display_frame+0x17e>
						if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    3b44:	9f 81       	ldd	r25, Y+7	; 0x07
    3b46:	88 85       	ldd	r24, Y+8	; 0x08
    3b48:	98 17       	cp	r25, r24
    3b4a:	c9 f4       	brne	.+50     	; 0x3b7e <fetch_display_frame+0x17e>
    3b4c:	49 85       	ldd	r20, Y+9	; 0x09
    3b4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b50:	48 17       	cp	r20, r24
    3b52:	a9 f4       	brne	.+42     	; 0x3b7e <fetch_display_frame+0x17e>
    3b54:	3b 85       	ldd	r19, Y+11	; 0x0b
    3b56:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b58:	38 17       	cp	r19, r24
    3b5a:	89 f4       	brne	.+34     	; 0x3b7e <fetch_display_frame+0x17e>
    3b5c:	2d 85       	ldd	r18, Y+13	; 0x0d
    3b5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b60:	28 17       	cp	r18, r24
    3b62:	69 f4       	brne	.+26     	; 0x3b7e <fetch_display_frame+0x17e>
							if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    3b64:	94 17       	cp	r25, r20
    3b66:	59 f4       	brne	.+22     	; 0x3b7e <fetch_display_frame+0x17e>
    3b68:	93 17       	cp	r25, r19
    3b6a:	49 f4       	brne	.+18     	; 0x3b7e <fetch_display_frame+0x17e>
    3b6c:	92 17       	cp	r25, r18
    3b6e:	39 f4       	brne	.+14     	; 0x3b7e <fetch_display_frame+0x17e>
								i2cMasterSend(panel_index, 1, &FLASH[0]); //send a 1 byte packet with the correct row_compressed value.
    3b70:	81 2f       	mov	r24, r17
    3b72:	61 e0       	ldi	r22, 0x01	; 1
    3b74:	a6 01       	movw	r20, r12
    3b76:	0e 94 8a 14 	call	0x2914	; 0x2914 <i2cMasterSend>
    3b7a:	e1 e0       	ldi	r30, 0x01	; 1
    3b7c:	01 c0       	rjmp	.+2      	; 0x3b80 <fetch_display_frame+0x180>
    3b7e:	e0 e0       	ldi	r30, 0x00	; 0
								packet_sent = 1;
							} //end of second round of comparisons
						} //end of first round of byte comparisons
					} // end of check if bytes_per_panel_frame is 8
					
					if (bytes_per_panel_frame == 24){
    3b80:	80 91 cd 26 	lds	r24, 0x26CD
    3b84:	88 31       	cpi	r24, 0x18	; 24
    3b86:	09 f0       	breq	.+2      	; 0x3b8a <fetch_display_frame+0x18a>
    3b88:	4e c0       	rjmp	.+156    	; 0x3c26 <fetch_display_frame+0x226>
						if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    3b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b8c:	88 85       	ldd	r24, Y+8	; 0x08
    3b8e:	68 17       	cp	r22, r24
    3b90:	09 f0       	breq	.+2      	; 0x3b94 <fetch_display_frame+0x194>
    3b92:	49 c0       	rjmp	.+146    	; 0x3c26 <fetch_display_frame+0x226>
    3b94:	39 85       	ldd	r19, Y+9	; 0x09
    3b96:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b98:	38 17       	cp	r19, r24
    3b9a:	09 f0       	breq	.+2      	; 0x3b9e <fetch_display_frame+0x19e>
    3b9c:	44 c0       	rjmp	.+136    	; 0x3c26 <fetch_display_frame+0x226>
    3b9e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3ba0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ba2:	28 17       	cp	r18, r24
    3ba4:	09 f0       	breq	.+2      	; 0x3ba8 <fetch_display_frame+0x1a8>
    3ba6:	3f c0       	rjmp	.+126    	; 0x3c26 <fetch_display_frame+0x226>
    3ba8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3baa:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bac:	98 17       	cp	r25, r24
    3bae:	d9 f5       	brne	.+118    	; 0x3c26 <fetch_display_frame+0x226>
							if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    3bb0:	63 17       	cp	r22, r19
    3bb2:	c9 f5       	brne	.+114    	; 0x3c26 <fetch_display_frame+0x226>
    3bb4:	62 17       	cp	r22, r18
    3bb6:	b9 f5       	brne	.+110    	; 0x3c26 <fetch_display_frame+0x226>
    3bb8:	69 17       	cp	r22, r25
    3bba:	a9 f5       	brne	.+106    	; 0x3c26 <fetch_display_frame+0x226>
								if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    3bbc:	4f 85       	ldd	r20, Y+15	; 0x0f
    3bbe:	88 89       	ldd	r24, Y+16	; 0x10
    3bc0:	48 17       	cp	r20, r24
    3bc2:	89 f5       	brne	.+98     	; 0x3c26 <fetch_display_frame+0x226>
    3bc4:	39 89       	ldd	r19, Y+17	; 0x11
    3bc6:	8a 89       	ldd	r24, Y+18	; 0x12
    3bc8:	38 17       	cp	r19, r24
    3bca:	69 f5       	brne	.+90     	; 0x3c26 <fetch_display_frame+0x226>
    3bcc:	2b 89       	ldd	r18, Y+19	; 0x13
    3bce:	8c 89       	ldd	r24, Y+20	; 0x14
    3bd0:	28 17       	cp	r18, r24
    3bd2:	49 f5       	brne	.+82     	; 0x3c26 <fetch_display_frame+0x226>
    3bd4:	9d 89       	ldd	r25, Y+21	; 0x15
    3bd6:	8e 89       	ldd	r24, Y+22	; 0x16
    3bd8:	98 17       	cp	r25, r24
    3bda:	29 f5       	brne	.+74     	; 0x3c26 <fetch_display_frame+0x226>
									if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    3bdc:	43 17       	cp	r20, r19
    3bde:	19 f5       	brne	.+70     	; 0x3c26 <fetch_display_frame+0x226>
    3be0:	42 17       	cp	r20, r18
    3be2:	09 f5       	brne	.+66     	; 0x3c26 <fetch_display_frame+0x226>
    3be4:	49 17       	cp	r20, r25
    3be6:	f9 f4       	brne	.+62     	; 0x3c26 <fetch_display_frame+0x226>
										if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    3be8:	9f 89       	ldd	r25, Y+23	; 0x17
    3bea:	88 8d       	ldd	r24, Y+24	; 0x18
    3bec:	98 17       	cp	r25, r24
    3bee:	d9 f4       	brne	.+54     	; 0x3c26 <fetch_display_frame+0x226>
    3bf0:	59 8d       	ldd	r21, Y+25	; 0x19
    3bf2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3bf4:	58 17       	cp	r21, r24
    3bf6:	b9 f4       	brne	.+46     	; 0x3c26 <fetch_display_frame+0x226>
    3bf8:	3b 8d       	ldd	r19, Y+27	; 0x1b
    3bfa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3bfc:	38 17       	cp	r19, r24
    3bfe:	99 f4       	brne	.+38     	; 0x3c26 <fetch_display_frame+0x226>
    3c00:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3c02:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c04:	28 17       	cp	r18, r24
    3c06:	79 f4       	brne	.+30     	; 0x3c26 <fetch_display_frame+0x226>
											if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    3c08:	95 17       	cp	r25, r21
    3c0a:	69 f4       	brne	.+26     	; 0x3c26 <fetch_display_frame+0x226>
    3c0c:	93 17       	cp	r25, r19
    3c0e:	59 f4       	brne	.+22     	; 0x3c26 <fetch_display_frame+0x226>
    3c10:	92 17       	cp	r25, r18
    3c12:	49 f4       	brne	.+18     	; 0x3c26 <fetch_display_frame+0x226>
												gscale[0] = FLASH[0];
    3c14:	6b 83       	std	Y+3, r22	; 0x03
												gscale[1] = FLASH[8];
    3c16:	4c 83       	std	Y+4, r20	; 0x04
												gscale[2] = FLASH[16];
    3c18:	9d 83       	std	Y+5, r25	; 0x05
												i2cMasterSend(panel_index, 3, &gscale[0]); //send a 3 byte packet with the correct row_compressed value.
    3c1a:	81 2f       	mov	r24, r17
    3c1c:	63 e0       	ldi	r22, 0x03	; 3
    3c1e:	a5 01       	movw	r20, r10
    3c20:	0e 94 8a 14 	call	0x2914	; 0x2914 <i2cMasterSend>
    3c24:	e1 e0       	ldi	r30, 0x01	; 1
								} //end of third round of comparisons
							} //end of second round of comparisons
						} //end of first round of byte comparisons
					} // end of check if bytes_per_panel_frame is 24
					
					if (bytes_per_panel_frame == 32){
    3c26:	80 91 cd 26 	lds	r24, 0x26CD
    3c2a:	80 32       	cpi	r24, 0x20	; 32
    3c2c:	09 f0       	breq	.+2      	; 0x3c30 <fetch_display_frame+0x230>
    3c2e:	69 c0       	rjmp	.+210    	; 0x3d02 <fetch_display_frame+0x302>
						if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    3c30:	7f 81       	ldd	r23, Y+7	; 0x07
    3c32:	88 85       	ldd	r24, Y+8	; 0x08
    3c34:	78 17       	cp	r23, r24
    3c36:	09 f0       	breq	.+2      	; 0x3c3a <fetch_display_frame+0x23a>
    3c38:	64 c0       	rjmp	.+200    	; 0x3d02 <fetch_display_frame+0x302>
    3c3a:	39 85       	ldd	r19, Y+9	; 0x09
    3c3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c3e:	38 17       	cp	r19, r24
    3c40:	09 f0       	breq	.+2      	; 0x3c44 <fetch_display_frame+0x244>
    3c42:	5f c0       	rjmp	.+190    	; 0x3d02 <fetch_display_frame+0x302>
    3c44:	2b 85       	ldd	r18, Y+11	; 0x0b
    3c46:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c48:	28 17       	cp	r18, r24
    3c4a:	09 f0       	breq	.+2      	; 0x3c4e <fetch_display_frame+0x24e>
    3c4c:	5a c0       	rjmp	.+180    	; 0x3d02 <fetch_display_frame+0x302>
    3c4e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c50:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c52:	98 17       	cp	r25, r24
    3c54:	09 f0       	breq	.+2      	; 0x3c58 <fetch_display_frame+0x258>
    3c56:	55 c0       	rjmp	.+170    	; 0x3d02 <fetch_display_frame+0x302>
							if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    3c58:	73 17       	cp	r23, r19
    3c5a:	09 f0       	breq	.+2      	; 0x3c5e <fetch_display_frame+0x25e>
    3c5c:	52 c0       	rjmp	.+164    	; 0x3d02 <fetch_display_frame+0x302>
    3c5e:	72 17       	cp	r23, r18
    3c60:	09 f0       	breq	.+2      	; 0x3c64 <fetch_display_frame+0x264>
    3c62:	4f c0       	rjmp	.+158    	; 0x3d02 <fetch_display_frame+0x302>
    3c64:	79 17       	cp	r23, r25
    3c66:	09 f0       	breq	.+2      	; 0x3c6a <fetch_display_frame+0x26a>
    3c68:	4c c0       	rjmp	.+152    	; 0x3d02 <fetch_display_frame+0x302>
								if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    3c6a:	6f 85       	ldd	r22, Y+15	; 0x0f
    3c6c:	88 89       	ldd	r24, Y+16	; 0x10
    3c6e:	68 17       	cp	r22, r24
    3c70:	09 f0       	breq	.+2      	; 0x3c74 <fetch_display_frame+0x274>
    3c72:	47 c0       	rjmp	.+142    	; 0x3d02 <fetch_display_frame+0x302>
    3c74:	39 89       	ldd	r19, Y+17	; 0x11
    3c76:	8a 89       	ldd	r24, Y+18	; 0x12
    3c78:	38 17       	cp	r19, r24
    3c7a:	09 f0       	breq	.+2      	; 0x3c7e <fetch_display_frame+0x27e>
    3c7c:	42 c0       	rjmp	.+132    	; 0x3d02 <fetch_display_frame+0x302>
    3c7e:	2b 89       	ldd	r18, Y+19	; 0x13
    3c80:	8c 89       	ldd	r24, Y+20	; 0x14
    3c82:	28 17       	cp	r18, r24
    3c84:	f1 f5       	brne	.+124    	; 0x3d02 <fetch_display_frame+0x302>
    3c86:	9d 89       	ldd	r25, Y+21	; 0x15
    3c88:	8e 89       	ldd	r24, Y+22	; 0x16
    3c8a:	98 17       	cp	r25, r24
    3c8c:	d1 f5       	brne	.+116    	; 0x3d02 <fetch_display_frame+0x302>
									if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    3c8e:	63 17       	cp	r22, r19
    3c90:	c1 f5       	brne	.+112    	; 0x3d02 <fetch_display_frame+0x302>
    3c92:	62 17       	cp	r22, r18
    3c94:	b1 f5       	brne	.+108    	; 0x3d02 <fetch_display_frame+0x302>
    3c96:	69 17       	cp	r22, r25
    3c98:	a1 f5       	brne	.+104    	; 0x3d02 <fetch_display_frame+0x302>
										if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    3c9a:	4f 89       	ldd	r20, Y+23	; 0x17
    3c9c:	88 8d       	ldd	r24, Y+24	; 0x18
    3c9e:	48 17       	cp	r20, r24
    3ca0:	81 f5       	brne	.+96     	; 0x3d02 <fetch_display_frame+0x302>
    3ca2:	39 8d       	ldd	r19, Y+25	; 0x19
    3ca4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3ca6:	38 17       	cp	r19, r24
    3ca8:	61 f5       	brne	.+88     	; 0x3d02 <fetch_display_frame+0x302>
    3caa:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3cac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3cae:	28 17       	cp	r18, r24
    3cb0:	41 f5       	brne	.+80     	; 0x3d02 <fetch_display_frame+0x302>
    3cb2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3cb4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3cb6:	98 17       	cp	r25, r24
    3cb8:	21 f5       	brne	.+72     	; 0x3d02 <fetch_display_frame+0x302>
											if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    3cba:	43 17       	cp	r20, r19
    3cbc:	11 f5       	brne	.+68     	; 0x3d02 <fetch_display_frame+0x302>
    3cbe:	42 17       	cp	r20, r18
    3cc0:	01 f5       	brne	.+64     	; 0x3d02 <fetch_display_frame+0x302>
    3cc2:	49 17       	cp	r20, r25
    3cc4:	f1 f4       	brne	.+60     	; 0x3d02 <fetch_display_frame+0x302>
												if( (FLASH[24+0] == FLASH[24+1])&&(FLASH[24+2] == FLASH[24+3])&&(FLASH[24+4] == FLASH[24+5])&&(FLASH[24+6] == FLASH[24+7]) ){
    3cc6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3cc8:	88 a1       	ldd	r24, Y+32	; 0x20
    3cca:	98 17       	cp	r25, r24
    3ccc:	d1 f4       	brne	.+52     	; 0x3d02 <fetch_display_frame+0x302>
    3cce:	59 a1       	ldd	r21, Y+33	; 0x21
    3cd0:	8a a1       	ldd	r24, Y+34	; 0x22
    3cd2:	58 17       	cp	r21, r24
    3cd4:	b1 f4       	brne	.+44     	; 0x3d02 <fetch_display_frame+0x302>
    3cd6:	3b a1       	ldd	r19, Y+35	; 0x23
    3cd8:	8c a1       	ldd	r24, Y+36	; 0x24
    3cda:	38 17       	cp	r19, r24
    3cdc:	91 f4       	brne	.+36     	; 0x3d02 <fetch_display_frame+0x302>
    3cde:	2d a1       	ldd	r18, Y+37	; 0x25
    3ce0:	8e a1       	ldd	r24, Y+38	; 0x26
    3ce2:	28 17       	cp	r18, r24
    3ce4:	71 f4       	brne	.+28     	; 0x3d02 <fetch_display_frame+0x302>
													if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
    3ce6:	95 17       	cp	r25, r21
    3ce8:	61 f4       	brne	.+24     	; 0x3d02 <fetch_display_frame+0x302>
    3cea:	93 17       	cp	r25, r19
    3cec:	51 f4       	brne	.+20     	; 0x3d02 <fetch_display_frame+0x302>
    3cee:	92 17       	cp	r25, r18
    3cf0:	41 f4       	brne	.+16     	; 0x3d02 <fetch_display_frame+0x302>
														gscale[0] = FLASH[0];
    3cf2:	7b 83       	std	Y+3, r23	; 0x03
														gscale[1] = FLASH[8];
    3cf4:	6c 83       	std	Y+4, r22	; 0x04
														gscale[2] = FLASH[16];
    3cf6:	4d 83       	std	Y+5, r20	; 0x05
														gscale[3] = FLASH[24];
    3cf8:	9e 83       	std	Y+6, r25	; 0x06
														i2cMasterSend(panel_index, 4, &gscale[0]); //send a 4 byte packet with the correct row_compressed value.
    3cfa:	81 2f       	mov	r24, r17
    3cfc:	64 e0       	ldi	r22, 0x04	; 4
    3cfe:	a5 01       	movw	r20, r10
    3d00:	06 c0       	rjmp	.+12     	; 0x3d0e <fetch_display_frame+0x30e>
							} //end of second round of comparisons
						} //end of first round of byte comparisons
					} // end of check if bytes_per_panel_frame is 32
				} //end of if ident_compress == 1
				
				if (packet_sent == 0){ //above conditionals rejected sending a simple pattern patch
    3d02:	ee 23       	and	r30, r30
    3d04:	31 f4       	brne	.+12     	; 0x3d12 <fetch_display_frame+0x312>
					i2cMasterSend(panel_index, bytes_per_panel_frame, &FLASH[0]);
    3d06:	81 2f       	mov	r24, r17
    3d08:	60 91 cd 26 	lds	r22, 0x26CD
    3d0c:	a6 01       	movw	r20, r12
    3d0e:	0e 94 8a 14 	call	0x2914	; 0x2914 <i2cMasterSend>
		if ((res == FR_OK) && (cnt == len)) {	
		

			buff_index = 0;
			
			for (panel_index = 1; panel_index <= num_panels; panel_index++){
    3d12:	1f 5f       	subi	r17, 0xFF	; 255
    3d14:	80 91 03 24 	lds	r24, 0x2403
    3d18:	81 17       	cp	r24, r17
    3d1a:	08 f4       	brcc	.+2      	; 0x3d1e <fetch_display_frame+0x31e>
    3d1c:	53 c0       	rjmp	.+166    	; 0x3dc4 <fetch_display_frame+0x3c4>
                for(j = 0;j < bytes_per_panel_frame;j++){
    3d1e:	90 91 cd 26 	lds	r25, 0x26CD
    3d22:	d3 01       	movw	r26, r6
    3d24:	ae 0d       	add	r26, r14
    3d26:	bf 1d       	adc	r27, r15
    3d28:	f6 01       	movw	r30, r12
    3d2a:	ff ce       	rjmp	.-514    	; 0x3b2a <fetch_display_frame+0x12a>
					i2cMasterSend(panel_index, bytes_per_panel_frame, &FLASH[0]);
				}
			} //end of for all panels loop
		}
		else {
			if (quiet_mode_on == 0){
    3d2c:	80 91 b3 20 	lds	r24, 0x20B3
    3d30:	88 23       	and	r24, r24
    3d32:	09 f0       	breq	.+2      	; 0x3d36 <fetch_display_frame+0x336>
    3d34:	47 c0       	rjmp	.+142    	; 0x3dc4 <fetch_display_frame+0x3c4>
				xputs(PSTR("Error in f_read in fetch_display_frame!\n"));
    3d36:	87 e2       	ldi	r24, 0x27	; 39
    3d38:	9b e0       	ldi	r25, 0x0B	; 11
    3d3a:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
				xprintf(PSTR("RES = %u, f_num= %u, cnt= %u\n"), res, f_num, cnt);
    3d3e:	8d b7       	in	r24, 0x3d	; 61
    3d40:	9e b7       	in	r25, 0x3e	; 62
    3d42:	08 97       	sbiw	r24, 0x08	; 8
    3d44:	8d bf       	out	0x3d, r24	; 61
    3d46:	9e bf       	out	0x3e, r25	; 62
    3d48:	ed b7       	in	r30, 0x3d	; 61
    3d4a:	fe b7       	in	r31, 0x3e	; 62
    3d4c:	31 96       	adiw	r30, 0x01	; 1
    3d4e:	89 e0       	ldi	r24, 0x09	; 9
    3d50:	9b e0       	ldi	r25, 0x0B	; 11
    3d52:	ad b7       	in	r26, 0x3d	; 61
    3d54:	be b7       	in	r27, 0x3e	; 62
    3d56:	11 96       	adiw	r26, 0x01	; 1
    3d58:	8d 93       	st	X+, r24
    3d5a:	9c 93       	st	X, r25
    3d5c:	12 97       	sbiw	r26, 0x02	; 2
    3d5e:	12 83       	std	Z+2, r17	; 0x02
    3d60:	13 82       	std	Z+3, r1	; 0x03
    3d62:	a4 82       	std	Z+4, r10	; 0x04
    3d64:	b5 82       	std	Z+5, r11	; 0x05
    3d66:	89 81       	ldd	r24, Y+1	; 0x01
    3d68:	9a 81       	ldd	r25, Y+2	; 0x02
    3d6a:	86 83       	std	Z+6, r24	; 0x06
    3d6c:	97 83       	std	Z+7, r25	; 0x07
    3d6e:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    3d72:	8d b7       	in	r24, 0x3d	; 61
    3d74:	9e b7       	in	r25, 0x3e	; 62
    3d76:	08 96       	adiw	r24, 0x08	; 8
    3d78:	23 c0       	rjmp	.+70     	; 0x3dc0 <fetch_display_frame+0x3c0>
			}
		}
	} else { 
		if (quiet_mode_on == 0){
    3d7a:	80 91 b3 20 	lds	r24, 0x20B3
    3d7e:	88 23       	and	r24, r24
    3d80:	09 f5       	brne	.+66     	; 0x3dc4 <fetch_display_frame+0x3c4>
			xputs(PSTR("Error in f_lseek in fetch_display_frame!\n"));
    3d82:	8f ed       	ldi	r24, 0xDF	; 223
    3d84:	9a e0       	ldi	r25, 0x0A	; 10
    3d86:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
			xprintf(PSTR("RES = %u, f_num= %u, offset = %lu\n"), res, f_num, offset);
    3d8a:	ad b7       	in	r26, 0x3d	; 61
    3d8c:	be b7       	in	r27, 0x3e	; 62
    3d8e:	1a 97       	sbiw	r26, 0x0a	; 10
    3d90:	ad bf       	out	0x3d, r26	; 61
    3d92:	be bf       	out	0x3e, r27	; 62
    3d94:	ed b7       	in	r30, 0x3d	; 61
    3d96:	fe b7       	in	r31, 0x3e	; 62
    3d98:	31 96       	adiw	r30, 0x01	; 1
    3d9a:	8c eb       	ldi	r24, 0xBC	; 188
    3d9c:	9a e0       	ldi	r25, 0x0A	; 10
    3d9e:	11 96       	adiw	r26, 0x01	; 1
    3da0:	8d 93       	st	X+, r24
    3da2:	9c 93       	st	X, r25
    3da4:	12 97       	sbiw	r26, 0x02	; 2
    3da6:	92 82       	std	Z+2, r9	; 0x02
    3da8:	13 82       	std	Z+3, r1	; 0x03
    3daa:	a4 82       	std	Z+4, r10	; 0x04
    3dac:	b5 82       	std	Z+5, r11	; 0x05
    3dae:	e6 82       	std	Z+6, r14	; 0x06
    3db0:	f7 82       	std	Z+7, r15	; 0x07
    3db2:	00 87       	std	Z+8, r16	; 0x08
    3db4:	11 87       	std	Z+9, r17	; 0x09
    3db6:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    3dba:	8d b7       	in	r24, 0x3d	; 61
    3dbc:	9e b7       	in	r25, 0x3e	; 62
    3dbe:	0a 96       	adiw	r24, 0x0a	; 10
    3dc0:	8d bf       	out	0x3d, r24	; 61
    3dc2:	9e bf       	out	0x3e, r25	; 62
		}
	}
		
    //update analog out only when we update a frame
    if (x_mode != 5){
    3dc4:	80 91 cc 26 	lds	r24, 0x26CC
    3dc8:	85 30       	cpi	r24, 0x05	; 5
    3dca:	c9 f0       	breq	.+50     	; 0x3dfe <fetch_display_frame+0x3fe>
		X_dac_val = ((uint32_t)Xindex + 1)*32767/x_num;
		analogWrite(0, X_dac_val); // make it a value in the range 0 - 32767 (0 - 10V)
    3dcc:	b2 01       	movw	r22, r4
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	6f 5f       	subi	r22, 0xFF	; 255
    3dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dda:	2f ef       	ldi	r18, 0xFF	; 255
    3ddc:	3f e7       	ldi	r19, 0x7F	; 127
    3dde:	40 e0       	ldi	r20, 0x00	; 0
    3de0:	50 e0       	ldi	r21, 0x00	; 0
    3de2:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    3de6:	20 91 27 27 	lds	r18, 0x2727
    3dea:	30 91 28 27 	lds	r19, 0x2728
    3dee:	40 e0       	ldi	r20, 0x00	; 0
    3df0:	50 e0       	ldi	r21, 0x00	; 0
    3df2:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    3df6:	80 e0       	ldi	r24, 0x00	; 0
    3df8:	b9 01       	movw	r22, r18
    3dfa:	0e 94 2a 2b 	call	0x5654	; 0x5654 <analogWrite>
	}

    
    if (y_mode != 5){
    3dfe:	80 91 0a 27 	lds	r24, 0x270A
    3e02:	85 30       	cpi	r24, 0x05	; 5
    3e04:	c9 f0       	breq	.+50     	; 0x3e38 <fetch_display_frame+0x438>
        Y_dac_val = ((uint32_t)Yindex + 1)*32767/y_num; 
        analogWrite(1, Y_dac_val); // make it a value in the range 0 - 32767 (0 - 10V)
    3e06:	b1 01       	movw	r22, r2
    3e08:	80 e0       	ldi	r24, 0x00	; 0
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	6f 5f       	subi	r22, 0xFF	; 255
    3e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e10:	8f 4f       	sbci	r24, 0xFF	; 255
    3e12:	9f 4f       	sbci	r25, 0xFF	; 255
    3e14:	2f ef       	ldi	r18, 0xFF	; 255
    3e16:	3f e7       	ldi	r19, 0x7F	; 127
    3e18:	40 e0       	ldi	r20, 0x00	; 0
    3e1a:	50 e0       	ldi	r21, 0x00	; 0
    3e1c:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    3e20:	20 91 c6 24 	lds	r18, 0x24C6
    3e24:	30 91 c7 24 	lds	r19, 0x24C7
    3e28:	40 e0       	ldi	r20, 0x00	; 0
    3e2a:	50 e0       	ldi	r21, 0x00	; 0
    3e2c:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	b9 01       	movw	r22, r18
    3e34:	0e 94 2a 2b 	call	0x5654	; 0x5654 <analogWrite>
    }

	
	//also update the output lines for quadrant-type learning patterns
	if (Laser_active == 1)
    3e38:	80 91 00 24 	lds	r24, 0x2400
    3e3c:	81 30       	cpi	r24, 0x01	; 1
    3e3e:	59 f5       	brne	.+86     	; 0x3e96 <fetch_display_frame+0x496>
	{
		arrayIndex = index_x/8;  // find the index in laserPattern array for index_x
    3e40:	80 91 ce 26 	lds	r24, 0x26CE
    3e44:	90 91 cf 26 	lds	r25, 0x26CF
		bitIndex = index_x - arrayIndex*8;  // find the bit index in a laserPattern byte for index_x
    3e48:	40 91 ce 26 	lds	r20, 0x26CE
    3e4c:	50 91 cf 26 	lds	r21, 0x26CF
    3e50:	63 e0       	ldi	r22, 0x03	; 3
    3e52:	96 95       	lsr	r25
    3e54:	87 95       	ror	r24
    3e56:	6a 95       	dec	r22
    3e58:	e1 f7       	brne	.-8      	; 0x3e52 <fetch_display_frame+0x452>
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
	
		tempVal = laserPattern[arrayIndex];
	
		if ((tempVal & (1<<(7-bitIndex))) == 0)
    3e5c:	fc 01       	movw	r30, r24
    3e5e:	ee 55       	subi	r30, 0x5E	; 94
    3e60:	fa 4d       	sbci	r31, 0xDA	; 218
    3e62:	20 81       	ld	r18, Z
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	53 e0       	ldi	r21, 0x03	; 3
    3e68:	88 0f       	add	r24, r24
    3e6a:	99 1f       	adc	r25, r25
    3e6c:	5a 95       	dec	r21
    3e6e:	e1 f7       	brne	.-8      	; 0x3e68 <fetch_display_frame+0x468>
    3e70:	48 1b       	sub	r20, r24
    3e72:	87 e0       	ldi	r24, 0x07	; 7
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	84 1b       	sub	r24, r20
    3e78:	91 09       	sbc	r25, r1
    3e7a:	02 c0       	rjmp	.+4      	; 0x3e80 <fetch_display_frame+0x480>
    3e7c:	35 95       	asr	r19
    3e7e:	27 95       	ror	r18
    3e80:	8a 95       	dec	r24
    3e82:	e2 f7       	brpl	.-8      	; 0x3e7c <fetch_display_frame+0x47c>
    3e84:	20 fd       	sbrc	r18, 0
    3e86:	03 c0       	rjmp	.+6      	; 0x3e8e <fetch_display_frame+0x48e>
			digitalWrite(0, LOW);  // turn off laser
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	60 e0       	ldi	r22, 0x00	; 0
    3e8c:	02 c0       	rjmp	.+4      	; 0x3e92 <fetch_display_frame+0x492>
		else
			digitalWrite(0, HIGH);   // turn on laser
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
    3e90:	61 e0       	ldi	r22, 0x01	; 1
    3e92:	0e 94 88 2a 	call	0x5510	; 0x5510 <digitalWrite>
	}
	
	digitalWrite(1, LOW); // set line low at end of frame write
    3e96:	81 e0       	ldi	r24, 0x01	; 1
    3e98:	60 e0       	ldi	r22, 0x00	; 0
    3e9a:	0e 94 88 2a 	call	0x5510	; 0x5510 <digitalWrite>

}
    3e9e:	af a1       	ldd	r26, Y+39	; 0x27
    3ea0:	b8 a5       	ldd	r27, Y+40	; 0x28
    3ea2:	ad bf       	out	0x3d, r26	; 61
    3ea4:	be bf       	out	0x3e, r27	; 62
    3ea6:	a8 96       	adiw	r28, 0x28	; 40
    3ea8:	cd bf       	out	0x3d, r28	; 61
    3eaa:	de bf       	out	0x3e, r29	; 62
    3eac:	cf 91       	pop	r28
    3eae:	df 91       	pop	r29
    3eb0:	1f 91       	pop	r17
    3eb2:	0f 91       	pop	r16
    3eb4:	ff 90       	pop	r15
    3eb6:	ef 90       	pop	r14
    3eb8:	df 90       	pop	r13
    3eba:	cf 90       	pop	r12
    3ebc:	bf 90       	pop	r11
    3ebe:	af 90       	pop	r10
    3ec0:	9f 90       	pop	r9
    3ec2:	7f 90       	pop	r7
    3ec4:	6f 90       	pop	r6
    3ec6:	5f 90       	pop	r5
    3ec8:	4f 90       	pop	r4
    3eca:	3f 90       	pop	r3
    3ecc:	2f 90       	pop	r2
    3ece:	08 95       	ret

00003ed0 <benchmark_pattern>:
    else{
        xputs(PSTR("Cannot find the hardware config file on the SD card.\n"));
    }
}

void benchmark_pattern(void) { // this function assumes that a pattern has been set
    3ed0:	a0 e0       	ldi	r26, 0x00	; 0
    3ed2:	b0 e0       	ldi	r27, 0x00	; 0
    3ed4:	ee e6       	ldi	r30, 0x6E	; 110
    3ed6:	ff e1       	ldi	r31, 0x1F	; 31
    3ed8:	0c 94 96 4d 	jmp	0x9b2c	; 0x9b2c <__prologue_saves__+0x10>
    uint16_t num_frames;
    uint16_t frame_ind;
    uint32_t bench_time;
    uint16_t frame_rate;
	
    Stop = 1;
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	80 93 9c 20 	sts	0x209C, r24
    num_frames = x_num*y_num;
    3ee2:	a0 90 27 27 	lds	r10, 0x2727
    3ee6:	b0 90 28 27 	lds	r11, 0x2728
    3eea:	c0 91 c6 24 	lds	r28, 0x24C6
    3eee:	d0 91 c7 24 	lds	r29, 0x24C7
    
    timer_coarse_tic();
    3ef2:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <timer_coarse_tic>
	
	for(index_y = 0; index_y < y_num; index_y++)
    3ef6:	10 92 72 28 	sts	0x2872, r1
    3efa:	10 92 73 28 	sts	0x2873, r1
    3efe:	4f c0       	rjmp	.+158    	; 0x3f9e <benchmark_pattern+0xce>
		for(index_x = 0; index_x < x_num; index_x++)
    3f00:	10 92 ce 26 	sts	0x26CE, r1
    3f04:	10 92 cf 26 	sts	0x26CF, r1
    3f08:	35 c0       	rjmp	.+106    	; 0x3f74 <benchmark_pattern+0xa4>
		{
			frame_ind = index_y*x_num + index_x;
    3f0a:	80 91 72 28 	lds	r24, 0x2872
    3f0e:	90 91 73 28 	lds	r25, 0x2873
    3f12:	20 91 ce 26 	lds	r18, 0x26CE
    3f16:	30 91 cf 26 	lds	r19, 0x26CF
    3f1a:	84 9f       	mul	r24, r20
    3f1c:	f0 01       	movw	r30, r0
    3f1e:	85 9f       	mul	r24, r21
    3f20:	f0 0d       	add	r31, r0
    3f22:	94 9f       	mul	r25, r20
    3f24:	f0 0d       	add	r31, r0
    3f26:	11 24       	eor	r1, r1
    3f28:	e2 0f       	add	r30, r18
    3f2a:	f3 1f       	adc	r31, r19

			if(usePreloadedPattern == 1)
    3f2c:	80 91 02 24 	lds	r24, 0x2402
    3f30:	81 30       	cpi	r24, 0x01	; 1
    3f32:	61 f4       	brne	.+24     	; 0x3f4c <benchmark_pattern+0x7c>
				display_preload_frame(frame_ind, index_x, index_y);
    3f34:	60 91 ce 26 	lds	r22, 0x26CE
    3f38:	70 91 cf 26 	lds	r23, 0x26CF
    3f3c:	40 91 72 28 	lds	r20, 0x2872
    3f40:	50 91 73 28 	lds	r21, 0x2873
    3f44:	cf 01       	movw	r24, r30
    3f46:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <display_preload_frame>
    3f4a:	0b c0       	rjmp	.+22     	; 0x3f62 <benchmark_pattern+0x92>
			else
				fetch_display_frame(frame_ind, index_x, index_y);
    3f4c:	60 91 ce 26 	lds	r22, 0x26CE
    3f50:	70 91 cf 26 	lds	r23, 0x26CF
    3f54:	40 91 72 28 	lds	r20, 0x2872
    3f58:	50 91 73 28 	lds	r21, 0x2873
    3f5c:	cf 01       	movw	r24, r30
    3f5e:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <fetch_display_frame>
    num_frames = x_num*y_num;
    
    timer_coarse_tic();
	
	for(index_y = 0; index_y < y_num; index_y++)
		for(index_x = 0; index_x < x_num; index_x++)
    3f62:	80 91 ce 26 	lds	r24, 0x26CE
    3f66:	90 91 cf 26 	lds	r25, 0x26CF
    3f6a:	01 96       	adiw	r24, 0x01	; 1
    3f6c:	80 93 ce 26 	sts	0x26CE, r24
    3f70:	90 93 cf 26 	sts	0x26CF, r25
    3f74:	80 91 ce 26 	lds	r24, 0x26CE
    3f78:	90 91 cf 26 	lds	r25, 0x26CF
    3f7c:	40 91 27 27 	lds	r20, 0x2727
    3f80:	50 91 28 27 	lds	r21, 0x2728
    3f84:	84 17       	cp	r24, r20
    3f86:	95 07       	cpc	r25, r21
    3f88:	08 f4       	brcc	.+2      	; 0x3f8c <benchmark_pattern+0xbc>
    3f8a:	bf cf       	rjmp	.-130    	; 0x3f0a <benchmark_pattern+0x3a>
    Stop = 1;
    num_frames = x_num*y_num;
    
    timer_coarse_tic();
	
	for(index_y = 0; index_y < y_num; index_y++)
    3f8c:	80 91 72 28 	lds	r24, 0x2872
    3f90:	90 91 73 28 	lds	r25, 0x2873
    3f94:	01 96       	adiw	r24, 0x01	; 1
    3f96:	80 93 72 28 	sts	0x2872, r24
    3f9a:	90 93 73 28 	sts	0x2873, r25
    3f9e:	20 91 72 28 	lds	r18, 0x2872
    3fa2:	30 91 73 28 	lds	r19, 0x2873
    3fa6:	80 91 c6 24 	lds	r24, 0x24C6
    3faa:	90 91 c7 24 	lds	r25, 0x24C7
    3fae:	28 17       	cp	r18, r24
    3fb0:	39 07       	cpc	r19, r25
    3fb2:	08 f4       	brcc	.+2      	; 0x3fb6 <benchmark_pattern+0xe6>
    3fb4:	a5 cf       	rjmp	.-182    	; 0x3f00 <benchmark_pattern+0x30>
				display_preload_frame(frame_ind, index_x, index_y);
			else
				fetch_display_frame(frame_ind, index_x, index_y);
		}
	
    bench_time = timer_coarse_toc();
    3fb6:	0e 94 f5 4a 	call	0x95ea	; 0x95ea <timer_coarse_toc>
    3fba:	7b 01       	movw	r14, r22
    3fbc:	8c 01       	movw	r16, r24
    frame_rate = ((uint32_t)num_frames*1000)/bench_time;
    xprintf(PSTR(" bench_time = %lu ms, frame_rate = %u\n"), bench_time, frame_rate);
    3fbe:	8d b7       	in	r24, 0x3d	; 61
    3fc0:	9e b7       	in	r25, 0x3e	; 62
    3fc2:	08 97       	sbiw	r24, 0x08	; 8
    3fc4:	8d bf       	out	0x3d, r24	; 61
    3fc6:	9e bf       	out	0x3e, r25	; 62
    3fc8:	cd b6       	in	r12, 0x3d	; 61
    3fca:	de b6       	in	r13, 0x3e	; 62
    3fcc:	08 94       	sec
    3fce:	c1 1c       	adc	r12, r1
    3fd0:	d1 1c       	adc	r13, r1
    3fd2:	8d e7       	ldi	r24, 0x7D	; 125
    3fd4:	97 e0       	ldi	r25, 0x07	; 7
    3fd6:	ed b7       	in	r30, 0x3d	; 61
    3fd8:	fe b7       	in	r31, 0x3e	; 62
    3fda:	81 83       	std	Z+1, r24	; 0x01
    3fdc:	92 83       	std	Z+2, r25	; 0x02
    3fde:	f6 01       	movw	r30, r12
    3fe0:	e2 82       	std	Z+2, r14	; 0x02
    3fe2:	f3 82       	std	Z+3, r15	; 0x03
    3fe4:	04 83       	std	Z+4, r16	; 0x04
    3fe6:	15 83       	std	Z+5, r17	; 0x05
    3fe8:	ca 9d       	mul	r28, r10
    3fea:	b0 01       	movw	r22, r0
    3fec:	cb 9d       	mul	r28, r11
    3fee:	70 0d       	add	r23, r0
    3ff0:	da 9d       	mul	r29, r10
    3ff2:	70 0d       	add	r23, r0
    3ff4:	11 24       	eor	r1, r1
    3ff6:	80 e0       	ldi	r24, 0x00	; 0
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	28 ee       	ldi	r18, 0xE8	; 232
    3ffc:	33 e0       	ldi	r19, 0x03	; 3
    3ffe:	40 e0       	ldi	r20, 0x00	; 0
    4000:	50 e0       	ldi	r21, 0x00	; 0
    4002:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    4006:	a8 01       	movw	r20, r16
    4008:	97 01       	movw	r18, r14
    400a:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    400e:	f6 01       	movw	r30, r12
    4010:	26 83       	std	Z+6, r18	; 0x06
    4012:	37 83       	std	Z+7, r19	; 0x07
    4014:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
	
	//reset index_x and index_y
	index_x=0;
    4018:	10 92 ce 26 	sts	0x26CE, r1
    401c:	10 92 cf 26 	sts	0x26CF, r1
	index_y=0;
    4020:	10 92 72 28 	sts	0x2872, r1
    4024:	10 92 73 28 	sts	0x2873, r1
    4028:	8d b7       	in	r24, 0x3d	; 61
    402a:	9e b7       	in	r25, 0x3e	; 62
    402c:	08 96       	adiw	r24, 0x08	; 8
    402e:	8d bf       	out	0x3d, r24	; 61
    4030:	9e bf       	out	0x3e, r25	; 62
}
    4032:	cd b7       	in	r28, 0x3d	; 61
    4034:	de b7       	in	r29, 0x3e	; 62
    4036:	ea e0       	ldi	r30, 0x0A	; 10
    4038:	0c 94 b2 4d 	jmp	0x9b64	; 0x9b64 <__epilogue_restores__+0x10>

0000403c <set_pattern>:
	usePreloadedPattern = 1;
	xprintf(PSTR("Successfully load pattern %u to the panels\n"), pat_num);
	
}

void set_pattern(uint8_t pat_num) {
    403c:	a2 e0       	ldi	r26, 0x02	; 2
    403e:	b2 e0       	ldi	r27, 0x02	; 2
    4040:	e4 e2       	ldi	r30, 0x24	; 36
    4042:	f0 e2       	ldi	r31, 0x20	; 32
    4044:	0c 94 9d 4d 	jmp	0x9b3a	; 0x9b3a <__prologue_saves__+0x1e>
    4048:	18 2f       	mov	r17, r24
    uint16_t cnt;
    static uint8_t str[12];
    uint8_t  pattDataBuff[512];
    uint8_t res;
    
    if (pat_num < 10)
    404a:	8a 30       	cpi	r24, 0x0A	; 10
    404c:	80 f4       	brcc	.+32     	; 0x406e <set_pattern+0x32>
        sprintf(str, "pat000%d.pat\0", pat_num);
    404e:	00 d0       	rcall	.+0      	; 0x4050 <set_pattern+0x14>
    4050:	00 d0       	rcall	.+0      	; 0x4052 <set_pattern+0x16>
    4052:	ed b7       	in	r30, 0x3d	; 61
    4054:	fe b7       	in	r31, 0x3e	; 62
    4056:	31 96       	adiw	r30, 0x01	; 1
    4058:	81 e2       	ldi	r24, 0x21	; 33
    405a:	94 e2       	ldi	r25, 0x24	; 36
    405c:	ad b7       	in	r26, 0x3d	; 61
    405e:	be b7       	in	r27, 0x3e	; 62
    4060:	11 96       	adiw	r26, 0x01	; 1
    4062:	8d 93       	st	X+, r24
    4064:	9c 93       	st	X, r25
    4066:	12 97       	sbiw	r26, 0x02	; 2
    4068:	85 e7       	ldi	r24, 0x75	; 117
    406a:	90 e2       	ldi	r25, 0x20	; 32
    406c:	1f c0       	rjmp	.+62     	; 0x40ac <set_pattern+0x70>
    406e:	81 e2       	ldi	r24, 0x21	; 33
    4070:	94 e2       	ldi	r25, 0x24	; 36
    else if (pat_num < 100)
    4072:	14 36       	cpi	r17, 0x64	; 100
    4074:	70 f4       	brcc	.+28     	; 0x4092 <set_pattern+0x56>
        sprintf(str, "pat00%d.pat\0", pat_num);
    4076:	00 d0       	rcall	.+0      	; 0x4078 <set_pattern+0x3c>
    4078:	00 d0       	rcall	.+0      	; 0x407a <set_pattern+0x3e>
    407a:	ed b7       	in	r30, 0x3d	; 61
    407c:	fe b7       	in	r31, 0x3e	; 62
    407e:	31 96       	adiw	r30, 0x01	; 1
    4080:	ad b7       	in	r26, 0x3d	; 61
    4082:	be b7       	in	r27, 0x3e	; 62
    4084:	11 96       	adiw	r26, 0x01	; 1
    4086:	8d 93       	st	X+, r24
    4088:	9c 93       	st	X, r25
    408a:	12 97       	sbiw	r26, 0x02	; 2
    408c:	83 e8       	ldi	r24, 0x83	; 131
    408e:	90 e2       	ldi	r25, 0x20	; 32
    4090:	0d c0       	rjmp	.+26     	; 0x40ac <set_pattern+0x70>
    else if (pat_num < 1000)
        sprintf(str, "pat0%d.pat\0", pat_num);
    4092:	00 d0       	rcall	.+0      	; 0x4094 <set_pattern+0x58>
    4094:	00 d0       	rcall	.+0      	; 0x4096 <set_pattern+0x5a>
    4096:	ed b7       	in	r30, 0x3d	; 61
    4098:	fe b7       	in	r31, 0x3e	; 62
    409a:	31 96       	adiw	r30, 0x01	; 1
    409c:	ad b7       	in	r26, 0x3d	; 61
    409e:	be b7       	in	r27, 0x3e	; 62
    40a0:	11 96       	adiw	r26, 0x01	; 1
    40a2:	8d 93       	st	X+, r24
    40a4:	9c 93       	st	X, r25
    40a6:	12 97       	sbiw	r26, 0x02	; 2
    40a8:	80 e9       	ldi	r24, 0x90	; 144
    40aa:	90 e2       	ldi	r25, 0x20	; 32
    40ac:	82 83       	std	Z+2, r24	; 0x02
    40ae:	93 83       	std	Z+3, r25	; 0x03
    40b0:	14 83       	std	Z+4, r17	; 0x04
    40b2:	15 82       	std	Z+5, r1	; 0x05
    40b4:	0e 94 ee 4f 	call	0x9fdc	; 0x9fdc <sprintf>
    40b8:	8d b7       	in	r24, 0x3d	; 61
    40ba:	9e b7       	in	r25, 0x3e	; 62
    40bc:	06 96       	adiw	r24, 0x06	; 6
    40be:	8d bf       	out	0x3d, r24	; 61
    40c0:	9e bf       	out	0x3e, r25	; 62
    else
            xputs(PSTR("pat_num is too big.\n"));
   
	
    res = f_close(&file1);
    40c2:	84 e7       	ldi	r24, 0x74	; 116
    40c4:	98 e2       	ldi	r25, 0x28	; 40
    40c6:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <f_close>
    
    res = f_open(&file1, str, FA_OPEN_EXISTING | FA_READ);
    40ca:	84 e7       	ldi	r24, 0x74	; 116
    40cc:	98 e2       	ldi	r25, 0x28	; 40
    40ce:	61 e2       	ldi	r22, 0x21	; 33
    40d0:	74 e2       	ldi	r23, 0x24	; 36
    40d2:	41 e0       	ldi	r20, 0x01	; 1
    40d4:	0e 94 91 40 	call	0x8122	; 0x8122 <f_open>
    if (res == FR_OK) {
    40d8:	88 23       	and	r24, r24
    40da:	09 f0       	breq	.+2      	; 0x40de <set_pattern+0xa2>
    40dc:	ab c0       	rjmp	.+342    	; 0x4234 <set_pattern+0x1f8>
        res = f_read(&file1, pattDataBuff, 512, &cnt); // read the 10 byte test header info block
    40de:	84 e7       	ldi	r24, 0x74	; 116
    40e0:	98 e2       	ldi	r25, 0x28	; 40
    40e2:	be 01       	movw	r22, r28
    40e4:	6d 5f       	subi	r22, 0xFD	; 253
    40e6:	7f 4f       	sbci	r23, 0xFF	; 255
    40e8:	40 e0       	ldi	r20, 0x00	; 0
    40ea:	52 e0       	ldi	r21, 0x02	; 2
    40ec:	9e 01       	movw	r18, r28
    40ee:	2f 5f       	subi	r18, 0xFF	; 255
    40f0:	3f 4f       	sbci	r19, 0xFF	; 255
    40f2:	0e 94 a3 3e 	call	0x7d46	; 0x7d46 <f_read>
        if ((res == FR_OK) && (cnt == 512)) {
    40f6:	88 23       	and	r24, r24
    40f8:	09 f0       	breq	.+2      	; 0x40fc <set_pattern+0xc0>
    40fa:	99 c0       	rjmp	.+306    	; 0x422e <set_pattern+0x1f2>
    40fc:	89 81       	ldd	r24, Y+1	; 0x01
    40fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4100:	80 50       	subi	r24, 0x00	; 0
    4102:	92 40       	sbci	r25, 0x02	; 2
    4104:	09 f0       	breq	.+2      	; 0x4108 <set_pattern+0xcc>
    4106:	93 c0       	rjmp	.+294    	; 0x422e <set_pattern+0x1f2>

            // get the test header info
            ((uint8_t*)&x_num)[0] = pattDataBuff[0];
    4108:	8b 81       	ldd	r24, Y+3	; 0x03
    410a:	80 93 27 27 	sts	0x2727, r24
            ((uint8_t*)&x_num)[1] = pattDataBuff[1];
    410e:	8c 81       	ldd	r24, Y+4	; 0x04
    4110:	80 93 28 27 	sts	0x2728, r24
            ((uint8_t*)&y_num)[0] = pattDataBuff[2];
    4114:	8d 81       	ldd	r24, Y+5	; 0x05
    4116:	80 93 c6 24 	sts	0x24C6, r24
            ((uint8_t*)&y_num)[1] = pattDataBuff[3];
    411a:	8e 81       	ldd	r24, Y+6	; 0x06
    411c:	80 93 c7 24 	sts	0x24C7, r24
            num_panels = pattDataBuff[4];
    4120:	8f 81       	ldd	r24, Y+7	; 0x07
    4122:	80 93 03 24 	sts	0x2403, r24
            gs_value = pattDataBuff[5];   //11, 12, 13, or 14 means use row compression
    4126:	98 85       	ldd	r25, Y+8	; 0x08
    4128:	90 93 4a 26 	sts	0x264A, r25
            
            
            num_frames = x_num * y_num;
            if ((gs_value >= 11) & (gs_value <= 14)) {
    412c:	89 2f       	mov	r24, r25
    412e:	8b 50       	subi	r24, 0x0B	; 11
    4130:	84 30       	cpi	r24, 0x04	; 4
    4132:	48 f4       	brcc	.+18     	; 0x4146 <set_pattern+0x10a>
                gs_value = gs_value - 10;
    4134:	9a 50       	subi	r25, 0x0A	; 10
    4136:	90 93 4a 26 	sts	0x264A, r25
                row_compress = 1;
    413a:	81 e0       	ldi	r24, 0x01	; 1
    413c:	80 93 c8 24 	sts	0x24C8, r24
                bytes_per_panel_frame = gs_value;
    4140:	90 93 cd 26 	sts	0x26CD, r25
    4144:	0b c0       	rjmp	.+22     	; 0x415c <set_pattern+0x120>
            }
            else {
                row_compress = 0;
    4146:	10 92 c8 24 	sts	0x24C8, r1
                bytes_per_panel_frame = gs_value * 8;
    414a:	89 2f       	mov	r24, r25
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	a3 e0       	ldi	r26, 0x03	; 3
    4150:	88 0f       	add	r24, r24
    4152:	99 1f       	adc	r25, r25
    4154:	aa 95       	dec	r26
    4156:	e1 f7       	brne	.-8      	; 0x4150 <set_pattern+0x114>
    4158:	80 93 cd 26 	sts	0x26CD, r24
            }
            index_x = index_y = 0;
    415c:	10 92 72 28 	sts	0x2872, r1
    4160:	10 92 73 28 	sts	0x2873, r1
    4164:	80 91 72 28 	lds	r24, 0x2872
    4168:	90 91 73 28 	lds	r25, 0x2873
    416c:	80 93 ce 26 	sts	0x26CE, r24
    4170:	90 93 cf 26 	sts	0x26CF, r25
            frame_num = 0;
    4174:	10 92 04 24 	sts	0x2404, r1
    4178:	10 92 05 24 	sts	0x2405, r1
            Stop = 1;
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	80 93 9c 20 	sts	0x209C, r24
            display_flag = 0;  //clear the display flag
    4182:	10 92 fe 23 	sts	0x23FE, r1
            if (quiet_mode_on == 0){
    4186:	80 91 b3 20 	lds	r24, 0x20B3
    418a:	88 23       	and	r24, r24
    418c:	09 f0       	breq	.+2      	; 0x4190 <set_pattern+0x154>
    418e:	40 c0       	rjmp	.+128    	; 0x4210 <set_pattern+0x1d4>
                xprintf(PSTR("Setting pattern %u:\n"), pat_num);
    4190:	00 d0       	rcall	.+0      	; 0x4192 <set_pattern+0x156>
    4192:	0f 92       	push	r0
    4194:	ed b7       	in	r30, 0x3d	; 61
    4196:	fe b7       	in	r31, 0x3e	; 62
    4198:	31 96       	adiw	r30, 0x01	; 1
    419a:	8e e9       	ldi	r24, 0x9E	; 158
    419c:	98 e0       	ldi	r25, 0x08	; 8
    419e:	ad b7       	in	r26, 0x3d	; 61
    41a0:	be b7       	in	r27, 0x3e	; 62
    41a2:	11 96       	adiw	r26, 0x01	; 1
    41a4:	8d 93       	st	X+, r24
    41a6:	9c 93       	st	X, r25
    41a8:	12 97       	sbiw	r26, 0x02	; 2
    41aa:	12 83       	std	Z+2, r17	; 0x02
    41ac:	13 82       	std	Z+3, r1	; 0x03
    41ae:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
                xprintf(PSTR("  x_num = %u\n  y_num = %u\n  num_panels = %u\n  gs_value = %u\n row_compression = %u\n"),
    41b2:	8d b7       	in	r24, 0x3d	; 61
    41b4:	9e b7       	in	r25, 0x3e	; 62
    41b6:	08 97       	sbiw	r24, 0x08	; 8
    41b8:	8d bf       	out	0x3d, r24	; 61
    41ba:	9e bf       	out	0x3e, r25	; 62
    41bc:	ed b7       	in	r30, 0x3d	; 61
    41be:	fe b7       	in	r31, 0x3e	; 62
    41c0:	31 96       	adiw	r30, 0x01	; 1
    41c2:	8b e4       	ldi	r24, 0x4B	; 75
    41c4:	98 e0       	ldi	r25, 0x08	; 8
    41c6:	ad b7       	in	r26, 0x3d	; 61
    41c8:	be b7       	in	r27, 0x3e	; 62
    41ca:	11 96       	adiw	r26, 0x01	; 1
    41cc:	8d 93       	st	X+, r24
    41ce:	9c 93       	st	X, r25
    41d0:	12 97       	sbiw	r26, 0x02	; 2
    41d2:	80 91 27 27 	lds	r24, 0x2727
    41d6:	90 91 28 27 	lds	r25, 0x2728
    41da:	82 83       	std	Z+2, r24	; 0x02
    41dc:	93 83       	std	Z+3, r25	; 0x03
    41de:	80 91 c6 24 	lds	r24, 0x24C6
    41e2:	90 91 c7 24 	lds	r25, 0x24C7
    41e6:	84 83       	std	Z+4, r24	; 0x04
    41e8:	95 83       	std	Z+5, r25	; 0x05
    41ea:	80 91 03 24 	lds	r24, 0x2403
    41ee:	86 83       	std	Z+6, r24	; 0x06
    41f0:	17 82       	std	Z+7, r1	; 0x07
    41f2:	80 91 4a 26 	lds	r24, 0x264A
    41f6:	80 87       	std	Z+8, r24	; 0x08
    41f8:	11 86       	std	Z+9, r1	; 0x09
    41fa:	80 91 c8 24 	lds	r24, 0x24C8
    41fe:	82 87       	std	Z+10, r24	; 0x0a
    4200:	13 86       	std	Z+11, r1	; 0x0b
    4202:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    4206:	8d b7       	in	r24, 0x3d	; 61
    4208:	9e b7       	in	r25, 0x3e	; 62
    420a:	0c 96       	adiw	r24, 0x0c	; 12
    420c:	8d bf       	out	0x3d, r24	; 61
    420e:	9e bf       	out	0x3e, r25	; 62
                        x_num, y_num, num_panels, gs_value, row_compress);
            }
            fetch_display_frame(frame_num, index_x, index_y);
    4210:	80 91 04 24 	lds	r24, 0x2404
    4214:	90 91 05 24 	lds	r25, 0x2405
    4218:	60 91 ce 26 	lds	r22, 0x26CE
    421c:	70 91 cf 26 	lds	r23, 0x26CF
    4220:	40 91 72 28 	lds	r20, 0x2872
    4224:	50 91 73 28 	lds	r21, 0x2873
    4228:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <fetch_display_frame>
    422c:	07 c0       	rjmp	.+14     	; 0x423c <set_pattern+0x200>
        } else
		
        xputs(PSTR("Error reading in pattern file\n"));
    422e:	8c e2       	ldi	r24, 0x2C	; 44
    4230:	98 e0       	ldi	r25, 0x08	; 8
    4232:	02 c0       	rjmp	.+4      	; 0x4238 <set_pattern+0x1fc>
		
    } else
    xputs(PSTR("Error opening pattern file\n"));
    4234:	80 e1       	ldi	r24, 0x10	; 16
    4236:	98 e0       	ldi	r25, 0x08	; 8
    4238:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>

	usePreloadedPattern = 0;
    423c:	10 92 02 24 	sts	0x2402, r1
}
    4240:	ce 5f       	subi	r28, 0xFE	; 254
    4242:	dd 4f       	sbci	r29, 0xFD	; 253
    4244:	e3 e0       	ldi	r30, 0x03	; 3
    4246:	0c 94 b9 4d 	jmp	0x9b72	; 0x9b72 <__epilogue_restores__+0x1e>

0000424a <handle_message_length_5>:
        default:   
			i2cMasterSend(0x00, 8, ERROR_CODES[4]);
    }
}

void handle_message_length_5(uint8_t *msg_buffer) {
    424a:	fc 01       	movw	r30, r24
    switch(msg_buffer[0]) {
    424c:	80 81       	ld	r24, Z
    424e:	80 37       	cpi	r24, 0x70	; 112
    4250:	09 f0       	breq	.+2      	; 0x4254 <handle_message_length_5+0xa>
    4252:	8e c0       	rjmp	.+284    	; 0x4370 <handle_message_length_5+0x126>
        case 0x70:   //put in a bunch of type casts, because of mysterious error dealling with frame index above 128.
            //'set_position'
            index_x = (uint8_t)msg_buffer[1] + (256*(uint8_t)msg_buffer[2]);
    4254:	92 81       	ldd	r25, Z+2	; 0x02
    4256:	80 e0       	ldi	r24, 0x00	; 0
    4258:	21 81       	ldd	r18, Z+1	; 0x01
    425a:	82 0f       	add	r24, r18
    425c:	91 1d       	adc	r25, r1
    425e:	80 93 ce 26 	sts	0x26CE, r24
    4262:	90 93 cf 26 	sts	0x26CF, r25
            index_y = (uint8_t)msg_buffer[3] + (256*(uint8_t)msg_buffer[4]);
    4266:	94 81       	ldd	r25, Z+4	; 0x04
    4268:	80 e0       	ldi	r24, 0x00	; 0
    426a:	23 81       	ldd	r18, Z+3	; 0x03
    426c:	82 0f       	add	r24, r18
    426e:	91 1d       	adc	r25, r1
    4270:	80 93 72 28 	sts	0x2872, r24
    4274:	90 93 73 28 	sts	0x2873, r25
            
            X_pos_index = index_x; // these only used during position func. control mode, but
    4278:	80 91 ce 26 	lds	r24, 0x26CE
    427c:	90 91 cf 26 	lds	r25, 0x26CF
    4280:	80 93 1f 26 	sts	0x261F, r24
    4284:	90 93 20 26 	sts	0x2620, r25
            Y_pos_index = index_y; //update here should not slow things down much and no need for sep. function.
    4288:	80 91 72 28 	lds	r24, 0x2872
    428c:	90 91 73 28 	lds	r25, 0x2873
    4290:	80 93 91 25 	sts	0x2591, r24
    4294:	90 93 92 25 	sts	0x2592, r25
            frame_num = index_y* x_num + index_x;
    4298:	20 91 72 28 	lds	r18, 0x2872
    429c:	30 91 73 28 	lds	r19, 0x2873
    42a0:	40 91 ce 26 	lds	r20, 0x26CE
    42a4:	50 91 cf 26 	lds	r21, 0x26CF
    42a8:	80 91 27 27 	lds	r24, 0x2727
    42ac:	90 91 28 27 	lds	r25, 0x2728
    42b0:	bc 01       	movw	r22, r24
    42b2:	26 9f       	mul	r18, r22
    42b4:	c0 01       	movw	r24, r0
    42b6:	27 9f       	mul	r18, r23
    42b8:	90 0d       	add	r25, r0
    42ba:	36 9f       	mul	r19, r22
    42bc:	90 0d       	add	r25, r0
    42be:	11 24       	eor	r1, r1
    42c0:	84 0f       	add	r24, r20
    42c2:	95 1f       	adc	r25, r21
    42c4:	80 93 04 24 	sts	0x2404, r24
    42c8:	90 93 05 24 	sts	0x2405, r25
            display_flag = 0;  //clear the display flag
    42cc:	10 92 fe 23 	sts	0x23FE, r1
            if (quiet_mode_on == 0)
    42d0:	80 91 b3 20 	lds	r24, 0x20B3
    42d4:	88 23       	and	r24, r24
    42d6:	51 f5       	brne	.+84     	; 0x432c <handle_message_length_5+0xe2>
                xprintf(PSTR("set_position: index_x= %u,  index_y= %u, and frame_num= %u\n"), index_x, index_y, frame_num);
    42d8:	20 91 ce 26 	lds	r18, 0x26CE
    42dc:	30 91 cf 26 	lds	r19, 0x26CF
    42e0:	40 91 72 28 	lds	r20, 0x2872
    42e4:	50 91 73 28 	lds	r21, 0x2873
    42e8:	60 91 04 24 	lds	r22, 0x2404
    42ec:	70 91 05 24 	lds	r23, 0x2405
    42f0:	8d b7       	in	r24, 0x3d	; 61
    42f2:	9e b7       	in	r25, 0x3e	; 62
    42f4:	08 97       	sbiw	r24, 0x08	; 8
    42f6:	8d bf       	out	0x3d, r24	; 61
    42f8:	9e bf       	out	0x3e, r25	; 62
    42fa:	ed b7       	in	r30, 0x3d	; 61
    42fc:	fe b7       	in	r31, 0x3e	; 62
    42fe:	31 96       	adiw	r30, 0x01	; 1
    4300:	83 eb       	ldi	r24, 0xB3	; 179
    4302:	9b e0       	ldi	r25, 0x0B	; 11
    4304:	ad b7       	in	r26, 0x3d	; 61
    4306:	be b7       	in	r27, 0x3e	; 62
    4308:	11 96       	adiw	r26, 0x01	; 1
    430a:	8d 93       	st	X+, r24
    430c:	9c 93       	st	X, r25
    430e:	12 97       	sbiw	r26, 0x02	; 2
    4310:	22 83       	std	Z+2, r18	; 0x02
    4312:	33 83       	std	Z+3, r19	; 0x03
    4314:	44 83       	std	Z+4, r20	; 0x04
    4316:	55 83       	std	Z+5, r21	; 0x05
    4318:	66 83       	std	Z+6, r22	; 0x06
    431a:	77 83       	std	Z+7, r23	; 0x07
    431c:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    4320:	6d b7       	in	r22, 0x3d	; 61
    4322:	7e b7       	in	r23, 0x3e	; 62
    4324:	68 5f       	subi	r22, 0xF8	; 248
    4326:	7f 4f       	sbci	r23, 0xFF	; 255
    4328:	6d bf       	out	0x3d, r22	; 61
    432a:	7e bf       	out	0x3e, r23	; 62
				
			if (usePreloadedPattern == 1)
    432c:	80 91 02 24 	lds	r24, 0x2402
    4330:	81 30       	cpi	r24, 0x01	; 1
    4332:	79 f4       	brne	.+30     	; 0x4352 <handle_message_length_5+0x108>
				display_preload_frame(frame_num, index_x, index_y);
    4334:	80 91 04 24 	lds	r24, 0x2404
    4338:	90 91 05 24 	lds	r25, 0x2405
    433c:	60 91 ce 26 	lds	r22, 0x26CE
    4340:	70 91 cf 26 	lds	r23, 0x26CF
    4344:	40 91 72 28 	lds	r20, 0x2872
    4348:	50 91 73 28 	lds	r21, 0x2873
    434c:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <display_preload_frame>
    4350:	08 95       	ret
			else
				fetch_display_frame(frame_num, index_x, index_y);
    4352:	80 91 04 24 	lds	r24, 0x2404
    4356:	90 91 05 24 	lds	r25, 0x2405
    435a:	60 91 ce 26 	lds	r22, 0x26CE
    435e:	70 91 cf 26 	lds	r23, 0x26CF
    4362:	40 91 72 28 	lds	r20, 0x2872
    4366:	50 91 73 28 	lds	r21, 0x2873
    436a:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <fetch_display_frame>
    436e:	08 95       	ret
            
			break;
            
            
        default:
            i2cMasterSend(0x00, 8, ERROR_CODES[5]);
    4370:	80 e0       	ldi	r24, 0x00	; 0
    4372:	68 e0       	ldi	r22, 0x08	; 8
    4374:	48 ee       	ldi	r20, 0xE8	; 232
    4376:	50 e2       	ldi	r21, 0x20	; 32
    4378:	0e 94 8a 14 	call	0x2914	; 0x2914 <i2cMasterSend>
    437c:	08 95       	ret

0000437e <handle_message_length_2>:
	
        default: i2cMasterSend(0x00, 8, ERROR_CODES[1]);
    }
}

void handle_message_length_2(uint8_t *msg_buffer) {
    437e:	fc 01       	movw	r30, r24
    uint8_t argument_byte;
    
    argument_byte = msg_buffer[1];
    4380:	21 81       	ldd	r18, Z+1	; 0x01
    switch(msg_buffer[0]) {
    4382:	80 81       	ld	r24, Z
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	fc 01       	movw	r30, r24
    4388:	31 97       	sbiw	r30, 0x01	; 1
    438a:	e1 31       	cpi	r30, 0x11	; 17
    438c:	f1 05       	cpc	r31, r1
    438e:	08 f0       	brcs	.+2      	; 0x4392 <handle_message_length_2+0x14>
    4390:	48 c0       	rjmp	.+144    	; 0x4422 <handle_message_length_2+0xa4>
    4392:	e6 50       	subi	r30, 0x06	; 6
    4394:	ff 4f       	sbci	r31, 0xFF	; 255
    4396:	0c 94 c5 4d 	jmp	0x9b8a	; 0x9b8a <__tablejump2__>
        case 0x01: //sends a reset command out to panel at taget address
            i2cMasterSend(argument_byte, 2, RESET);
    439a:	82 2f       	mov	r24, r18
    439c:	62 e0       	ldi	r22, 0x02	; 2
    439e:	40 e0       	ldi	r20, 0x00	; 0
    43a0:	51 e2       	ldi	r21, 0x21	; 33
    43a2:	43 c0       	rjmp	.+134    	; 0x442a <handle_message_length_2+0xac>
            break;
            
        case 0x02: //sends a display command out to panel at taget address
            i2cMasterSend(argument_byte, 2, DISPLAY);
    43a4:	82 2f       	mov	r24, r18
    43a6:	62 e0       	ldi	r22, 0x02	; 2
    43a8:	42 e0       	ldi	r20, 0x02	; 2
    43aa:	51 e2       	ldi	r21, 0x21	; 33
    43ac:	3e c0       	rjmp	.+124    	; 0x442a <handle_message_length_2+0xac>
            break;
            
        case 0x03:   //set pattern
            set_pattern(argument_byte);      //pattern x - specified in argument_byte
    43ae:	82 2f       	mov	r24, r18
    43b0:	0e 94 1e 20 	call	0x403c	; 0x403c <set_pattern>
    43b4:	08 95       	ret
            break;
            
        case 0x04: // this is an ADC test command
            test_ADC(argument_byte);  //here argument_byte is actually a channel, 0-7 to test ADC/DAC system
    43b6:	82 2f       	mov	r24, r18
    43b8:	0e 94 ac 2b 	call	0x5758	; 0x5758 <test_ADC>
    43bc:	08 95       	ret
            break;
            
        case 0x05: // this is a DIO test command
            test_DIO(argument_byte);  //here argument_byte is actually a channel, 0-7 to test ADC/DAC system
    43be:	82 2f       	mov	r24, r18
    43c0:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <test_DIO>
    43c4:	08 95       	ret
            break;
            
        case 0x06: // this is a trigger rate set command
            trigger_rate = argument_byte*2;  //here argument_byte is a trigger rate
    43c6:	82 2f       	mov	r24, r18
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	88 0f       	add	r24, r24
    43cc:	99 1f       	adc	r25, r25
    43ce:	80 93 a9 20 	sts	0x20A9, r24
    43d2:	90 93 aa 20 	sts	0x20AA, r25
    43d6:	08 95       	ret
            break;
            
        case 0x07:   //flash panel#
            flash_panel(argument_byte); //here argument_byte is actually a panel number
    43d8:	82 2f       	mov	r24, r18
    43da:	0e 94 28 32 	call	0x6450	; 0x6450 <flash_panel>
    43de:	08 95       	ret
            break;
            
        case 0x08:   //eeprom panel#
            eeprom_panel(argument_byte); //here argument_byte is actually a panel number
    43e0:	82 2f       	mov	r24, r18
    43e2:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <eeprom_panel>
    43e6:	08 95       	ret
            break;
			
        case 0x09:   //set arena configuration
            set_hwConfig(argument_byte);      //configuration x - specified in argument_byte
    43e8:	82 2f       	mov	r24, r18
    43ea:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <set_hwConfig>
    43ee:	08 95       	ret
            break;	
			
		case 0x10:  // get ADC value from a ADC channel (1-4)
            xprintf(PSTR("ADC_value =  %d:\n"), analogRead(argument_byte - 1));
    43f0:	82 2f       	mov	r24, r18
    43f2:	81 50       	subi	r24, 0x01	; 1
    43f4:	0e 94 ba 2a 	call	0x5574	; 0x5574 <analogRead>
    43f8:	00 d0       	rcall	.+0      	; 0x43fa <handle_message_length_2+0x7c>
    43fa:	0f 92       	push	r0
    43fc:	25 e3       	ldi	r18, 0x35	; 53
    43fe:	3c e0       	ldi	r19, 0x0C	; 12
    4400:	ed b7       	in	r30, 0x3d	; 61
    4402:	fe b7       	in	r31, 0x3e	; 62
    4404:	21 83       	std	Z+1, r18	; 0x01
    4406:	32 83       	std	Z+2, r19	; 0x02
    4408:	83 83       	std	Z+3, r24	; 0x03
    440a:	94 83       	std	Z+4, r25	; 0x04
    440c:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	0f 90       	pop	r0
    4416:	0f 90       	pop	r0
    4418:	08 95       	ret
            break;	
		case 0x11 : 
			loadPattern2Panels(argument_byte);
    441a:	82 2f       	mov	r24, r18
    441c:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <loadPattern2Panels>
    4420:	08 95       	ret
			break;
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[2]);
    4422:	80 e0       	ldi	r24, 0x00	; 0
    4424:	68 e0       	ldi	r22, 0x08	; 8
    4426:	40 ed       	ldi	r20, 0xD0	; 208
    4428:	50 e2       	ldi	r21, 0x20	; 32
    442a:	0e 94 8a 14 	call	0x2914	; 0x2914 <i2cMasterSend>
    442e:	08 95       	ret

00004430 <handle_message_length_1>:
	TWI_MasterReleaseBuff(&twi3);
	TWI_MasterReleaseBuff(&twi4);
	releaseRxBuff();
}

void handle_message_length_1(uint8_t *msg_buffer) {
    4430:	6f 92       	push	r6
    4432:	7f 92       	push	r7
    4434:	9f 92       	push	r9
    4436:	af 92       	push	r10
    4438:	bf 92       	push	r11
    443a:	cf 92       	push	r12
    443c:	df 92       	push	r13
    443e:	ef 92       	push	r14
    4440:	ff 92       	push	r15
    4442:	0f 93       	push	r16
    4444:	1f 93       	push	r17
    4446:	df 93       	push	r29
    4448:	cf 93       	push	r28
    444a:	0f 92       	push	r0
    444c:	0f 92       	push	r0
    444e:	cd b7       	in	r28, 0x3d	; 61
    4450:	de b7       	in	r29, 0x3e	; 62
    4452:	fc 01       	movw	r30, r24
    uint8_t i;
	uint32_t tmp_x=0;
	uint32_t tmp_y=0;
	uint8_t n_sample=100;
    
    switch(msg_buffer[0]) {
    4454:	e0 81       	ld	r30, Z
    4456:	e3 34       	cpi	r30, 0x43	; 67
    4458:	09 f4       	brne	.+2      	; 0x445c <handle_message_length_1+0x2c>
    445a:	9b c2       	rjmp	.+1334   	; 0x4992 <handle_message_length_1+0x562>
    445c:	e4 34       	cpi	r30, 0x44	; 68
    445e:	08 f0       	brcs	.+2      	; 0x4462 <handle_message_length_1+0x32>
    4460:	5b c0       	rjmp	.+182    	; 0x4518 <handle_message_length_1+0xe8>
    4462:	e0 32       	cpi	r30, 0x20	; 32
    4464:	09 f4       	brne	.+2      	; 0x4468 <handle_message_length_1+0x38>
    4466:	b6 c0       	rjmp	.+364    	; 0x45d4 <handle_message_length_1+0x1a4>
    4468:	e1 32       	cpi	r30, 0x21	; 33
    446a:	58 f5       	brcc	.+86     	; 0x44c2 <handle_message_length_1+0x92>
    446c:	e4 31       	cpi	r30, 0x14	; 20
    446e:	09 f4       	brne	.+2      	; 0x4472 <handle_message_length_1+0x42>
    4470:	19 c3       	rjmp	.+1586   	; 0x4aa4 <handle_message_length_1+0x674>
    4472:	e5 31       	cpi	r30, 0x15	; 21
    4474:	98 f4       	brcc	.+38     	; 0x449c <handle_message_length_1+0x6c>
    4476:	e1 31       	cpi	r30, 0x11	; 17
    4478:	09 f4       	brne	.+2      	; 0x447c <handle_message_length_1+0x4c>
    447a:	06 c3       	rjmp	.+1548   	; 0x4a88 <handle_message_length_1+0x658>
    447c:	e2 31       	cpi	r30, 0x12	; 18
    447e:	38 f4       	brcc	.+14     	; 0x448e <handle_message_length_1+0x5e>
    4480:	ee 23       	and	r30, r30
    4482:	09 f4       	brne	.+2      	; 0x4486 <handle_message_length_1+0x56>
    4484:	72 c2       	rjmp	.+1252   	; 0x496a <handle_message_length_1+0x53a>
    4486:	e0 31       	cpi	r30, 0x10	; 16
    4488:	09 f0       	breq	.+2      	; 0x448c <handle_message_length_1+0x5c>
    448a:	15 c4       	rjmp	.+2090   	; 0x4cb6 <handle_message_length_1+0x886>
    448c:	f9 c2       	rjmp	.+1522   	; 0x4a80 <handle_message_length_1+0x650>
    448e:	e2 31       	cpi	r30, 0x12	; 18
    4490:	09 f4       	brne	.+2      	; 0x4494 <handle_message_length_1+0x64>
    4492:	01 c3       	rjmp	.+1538   	; 0x4a96 <handle_message_length_1+0x666>
    4494:	e3 31       	cpi	r30, 0x13	; 19
    4496:	09 f0       	breq	.+2      	; 0x449a <handle_message_length_1+0x6a>
    4498:	0e c4       	rjmp	.+2076   	; 0x4cb6 <handle_message_length_1+0x886>
    449a:	01 c3       	rjmp	.+1538   	; 0x4a9e <handle_message_length_1+0x66e>
    449c:	e7 31       	cpi	r30, 0x17	; 23
    449e:	09 f4       	brne	.+2      	; 0x44a2 <handle_message_length_1+0x72>
    44a0:	27 c3       	rjmp	.+1614   	; 0x4af0 <handle_message_length_1+0x6c0>
    44a2:	e8 31       	cpi	r30, 0x18	; 24
    44a4:	38 f4       	brcc	.+14     	; 0x44b4 <handle_message_length_1+0x84>
    44a6:	e5 31       	cpi	r30, 0x15	; 21
    44a8:	09 f4       	brne	.+2      	; 0x44ac <handle_message_length_1+0x7c>
    44aa:	ff c2       	rjmp	.+1534   	; 0x4aaa <handle_message_length_1+0x67a>
    44ac:	e6 31       	cpi	r30, 0x16	; 22
    44ae:	09 f0       	breq	.+2      	; 0x44b2 <handle_message_length_1+0x82>
    44b0:	02 c4       	rjmp	.+2052   	; 0x4cb6 <handle_message_length_1+0x886>
    44b2:	06 c3       	rjmp	.+1548   	; 0x4ac0 <handle_message_length_1+0x690>
    44b4:	e8 31       	cpi	r30, 0x18	; 24
    44b6:	09 f4       	brne	.+2      	; 0x44ba <handle_message_length_1+0x8a>
    44b8:	1f c3       	rjmp	.+1598   	; 0x4af8 <handle_message_length_1+0x6c8>
    44ba:	e9 31       	cpi	r30, 0x19	; 25
    44bc:	09 f0       	breq	.+2      	; 0x44c0 <handle_message_length_1+0x90>
    44be:	fb c3       	rjmp	.+2038   	; 0x4cb6 <handle_message_length_1+0x886>
    44c0:	1e c3       	rjmp	.+1596   	; 0x4afe <handle_message_length_1+0x6ce>
    44c2:	e6 32       	cpi	r30, 0x26	; 38
    44c4:	09 f4       	brne	.+2      	; 0x44c8 <handle_message_length_1+0x98>
    44c6:	90 c3       	rjmp	.+1824   	; 0x4be8 <handle_message_length_1+0x7b8>
    44c8:	e7 32       	cpi	r30, 0x27	; 39
    44ca:	98 f4       	brcc	.+38     	; 0x44f2 <handle_message_length_1+0xc2>
    44cc:	e3 32       	cpi	r30, 0x23	; 35
    44ce:	09 f4       	brne	.+2      	; 0x44d2 <handle_message_length_1+0xa2>
    44d0:	6c c3       	rjmp	.+1752   	; 0x4baa <handle_message_length_1+0x77a>
    44d2:	e4 32       	cpi	r30, 0x24	; 36
    44d4:	38 f4       	brcc	.+14     	; 0x44e4 <handle_message_length_1+0xb4>
    44d6:	e1 32       	cpi	r30, 0x21	; 33
    44d8:	09 f4       	brne	.+2      	; 0x44dc <handle_message_length_1+0xac>
    44da:	53 c3       	rjmp	.+1702   	; 0x4b82 <handle_message_length_1+0x752>
    44dc:	e2 32       	cpi	r30, 0x22	; 34
    44de:	09 f0       	breq	.+2      	; 0x44e2 <handle_message_length_1+0xb2>
    44e0:	ea c3       	rjmp	.+2004   	; 0x4cb6 <handle_message_length_1+0x886>
    44e2:	59 c3       	rjmp	.+1714   	; 0x4b96 <handle_message_length_1+0x766>
    44e4:	e4 32       	cpi	r30, 0x24	; 36
    44e6:	09 f4       	brne	.+2      	; 0x44ea <handle_message_length_1+0xba>
    44e8:	6f c3       	rjmp	.+1758   	; 0x4bc8 <handle_message_length_1+0x798>
    44ea:	e5 32       	cpi	r30, 0x25	; 37
    44ec:	09 f0       	breq	.+2      	; 0x44f0 <handle_message_length_1+0xc0>
    44ee:	e3 c3       	rjmp	.+1990   	; 0x4cb6 <handle_message_length_1+0x886>
    44f0:	59 c1       	rjmp	.+690    	; 0x47a4 <handle_message_length_1+0x374>
    44f2:	e0 34       	cpi	r30, 0x40	; 64
    44f4:	09 f4       	brne	.+2      	; 0x44f8 <handle_message_length_1+0xc8>
    44f6:	3e c2       	rjmp	.+1148   	; 0x4974 <handle_message_length_1+0x544>
    44f8:	e1 34       	cpi	r30, 0x41	; 65
    44fa:	38 f4       	brcc	.+14     	; 0x450a <handle_message_length_1+0xda>
    44fc:	e0 33       	cpi	r30, 0x30	; 48
    44fe:	09 f4       	brne	.+2      	; 0x4502 <handle_message_length_1+0xd2>
    4500:	ff c0       	rjmp	.+510    	; 0x4700 <handle_message_length_1+0x2d0>
    4502:	e5 33       	cpi	r30, 0x35	; 53
    4504:	09 f0       	breq	.+2      	; 0x4508 <handle_message_length_1+0xd8>
    4506:	d7 c3       	rjmp	.+1966   	; 0x4cb6 <handle_message_length_1+0x886>
    4508:	da c1       	rjmp	.+948    	; 0x48be <handle_message_length_1+0x48e>
    450a:	e1 34       	cpi	r30, 0x41	; 65
    450c:	09 f4       	brne	.+2      	; 0x4510 <handle_message_length_1+0xe0>
    450e:	37 c2       	rjmp	.+1134   	; 0x497e <handle_message_length_1+0x54e>
    4510:	e2 34       	cpi	r30, 0x42	; 66
    4512:	09 f0       	breq	.+2      	; 0x4516 <handle_message_length_1+0xe6>
    4514:	d0 c3       	rjmp	.+1952   	; 0x4cb6 <handle_message_length_1+0x886>
    4516:	38 c2       	rjmp	.+1136   	; 0x4988 <handle_message_length_1+0x558>
    4518:	e4 39       	cpi	r30, 0x94	; 148
    451a:	09 f4       	brne	.+2      	; 0x451e <handle_message_length_1+0xee>
    451c:	75 c2       	rjmp	.+1258   	; 0x4a08 <handle_message_length_1+0x5d8>
    451e:	e5 39       	cpi	r30, 0x95	; 149
    4520:	58 f5       	brcc	.+86     	; 0x4578 <handle_message_length_1+0x148>
    4522:	e0 36       	cpi	r30, 0x60	; 96
    4524:	09 f4       	brne	.+2      	; 0x4528 <handle_message_length_1+0xf8>
    4526:	56 c2       	rjmp	.+1196   	; 0x49d4 <handle_message_length_1+0x5a4>
    4528:	e1 36       	cpi	r30, 0x61	; 97
    452a:	98 f4       	brcc	.+38     	; 0x4552 <handle_message_length_1+0x122>
    452c:	e6 34       	cpi	r30, 0x46	; 70
    452e:	09 f4       	brne	.+2      	; 0x4532 <handle_message_length_1+0x102>
    4530:	3f c2       	rjmp	.+1150   	; 0x49b0 <handle_message_length_1+0x580>
    4532:	e7 34       	cpi	r30, 0x47	; 71
    4534:	38 f4       	brcc	.+14     	; 0x4544 <handle_message_length_1+0x114>
    4536:	e4 34       	cpi	r30, 0x44	; 68
    4538:	09 f4       	brne	.+2      	; 0x453c <handle_message_length_1+0x10c>
    453a:	30 c2       	rjmp	.+1120   	; 0x499c <handle_message_length_1+0x56c>
    453c:	e5 34       	cpi	r30, 0x45	; 69
    453e:	09 f0       	breq	.+2      	; 0x4542 <handle_message_length_1+0x112>
    4540:	ba c3       	rjmp	.+1908   	; 0x4cb6 <handle_message_length_1+0x886>
    4542:	31 c2       	rjmp	.+1122   	; 0x49a6 <handle_message_length_1+0x576>
    4544:	e7 34       	cpi	r30, 0x47	; 71
    4546:	09 f4       	brne	.+2      	; 0x454a <handle_message_length_1+0x11a>
    4548:	38 c2       	rjmp	.+1136   	; 0x49ba <handle_message_length_1+0x58a>
    454a:	e0 35       	cpi	r30, 0x50	; 80
    454c:	09 f0       	breq	.+2      	; 0x4550 <handle_message_length_1+0x120>
    454e:	b3 c3       	rjmp	.+1894   	; 0x4cb6 <handle_message_length_1+0x886>
    4550:	3e c2       	rjmp	.+1148   	; 0x49ce <handle_message_length_1+0x59e>
    4552:	e1 39       	cpi	r30, 0x91	; 145
    4554:	09 f4       	brne	.+2      	; 0x4558 <handle_message_length_1+0x128>
    4556:	49 c2       	rjmp	.+1170   	; 0x49ea <handle_message_length_1+0x5ba>
    4558:	e2 39       	cpi	r30, 0x92	; 146
    455a:	38 f4       	brcc	.+14     	; 0x456a <handle_message_length_1+0x13a>
    455c:	e0 37       	cpi	r30, 0x70	; 112
    455e:	09 f4       	brne	.+2      	; 0x4562 <handle_message_length_1+0x132>
    4560:	3c c2       	rjmp	.+1144   	; 0x49da <handle_message_length_1+0x5aa>
    4562:	e0 39       	cpi	r30, 0x90	; 144
    4564:	09 f0       	breq	.+2      	; 0x4568 <handle_message_length_1+0x138>
    4566:	a7 c3       	rjmp	.+1870   	; 0x4cb6 <handle_message_length_1+0x886>
    4568:	3b c2       	rjmp	.+1142   	; 0x49e0 <handle_message_length_1+0x5b0>
    456a:	e2 39       	cpi	r30, 0x92	; 146
    456c:	09 f4       	brne	.+2      	; 0x4570 <handle_message_length_1+0x140>
    456e:	42 c2       	rjmp	.+1156   	; 0x49f4 <handle_message_length_1+0x5c4>
    4570:	e3 39       	cpi	r30, 0x93	; 147
    4572:	09 f0       	breq	.+2      	; 0x4576 <handle_message_length_1+0x146>
    4574:	a0 c3       	rjmp	.+1856   	; 0x4cb6 <handle_message_length_1+0x886>
    4576:	43 c2       	rjmp	.+1158   	; 0x49fe <handle_message_length_1+0x5ce>
    4578:	ea 39       	cpi	r30, 0x9A	; 154
    457a:	09 f4       	brne	.+2      	; 0x457e <handle_message_length_1+0x14e>
    457c:	63 c2       	rjmp	.+1222   	; 0x4a44 <handle_message_length_1+0x614>
    457e:	eb 39       	cpi	r30, 0x9B	; 155
    4580:	98 f4       	brcc	.+38     	; 0x45a8 <handle_message_length_1+0x178>
    4582:	e7 39       	cpi	r30, 0x97	; 151
    4584:	09 f4       	brne	.+2      	; 0x4588 <handle_message_length_1+0x158>
    4586:	4f c2       	rjmp	.+1182   	; 0x4a26 <handle_message_length_1+0x5f6>
    4588:	e8 39       	cpi	r30, 0x98	; 152
    458a:	38 f4       	brcc	.+14     	; 0x459a <handle_message_length_1+0x16a>
    458c:	e5 39       	cpi	r30, 0x95	; 149
    458e:	09 f4       	brne	.+2      	; 0x4592 <handle_message_length_1+0x162>
    4590:	40 c2       	rjmp	.+1152   	; 0x4a12 <handle_message_length_1+0x5e2>
    4592:	e6 39       	cpi	r30, 0x96	; 150
    4594:	09 f0       	breq	.+2      	; 0x4598 <handle_message_length_1+0x168>
    4596:	8f c3       	rjmp	.+1822   	; 0x4cb6 <handle_message_length_1+0x886>
    4598:	41 c2       	rjmp	.+1154   	; 0x4a1c <handle_message_length_1+0x5ec>
    459a:	e8 39       	cpi	r30, 0x98	; 152
    459c:	09 f4       	brne	.+2      	; 0x45a0 <handle_message_length_1+0x170>
    459e:	48 c2       	rjmp	.+1168   	; 0x4a30 <handle_message_length_1+0x600>
    45a0:	e9 39       	cpi	r30, 0x99	; 153
    45a2:	09 f0       	breq	.+2      	; 0x45a6 <handle_message_length_1+0x176>
    45a4:	88 c3       	rjmp	.+1808   	; 0x4cb6 <handle_message_length_1+0x886>
    45a6:	49 c2       	rjmp	.+1170   	; 0x4a3a <handle_message_length_1+0x60a>
    45a8:	ed 39       	cpi	r30, 0x9D	; 157
    45aa:	09 f4       	brne	.+2      	; 0x45ae <handle_message_length_1+0x17e>
    45ac:	5a c2       	rjmp	.+1204   	; 0x4a62 <handle_message_length_1+0x632>
    45ae:	ee 39       	cpi	r30, 0x9E	; 158
    45b0:	38 f4       	brcc	.+14     	; 0x45c0 <handle_message_length_1+0x190>
    45b2:	eb 39       	cpi	r30, 0x9B	; 155
    45b4:	09 f4       	brne	.+2      	; 0x45b8 <handle_message_length_1+0x188>
    45b6:	4b c2       	rjmp	.+1174   	; 0x4a4e <handle_message_length_1+0x61e>
    45b8:	ec 39       	cpi	r30, 0x9C	; 156
    45ba:	09 f0       	breq	.+2      	; 0x45be <handle_message_length_1+0x18e>
    45bc:	7c c3       	rjmp	.+1784   	; 0x4cb6 <handle_message_length_1+0x886>
    45be:	4c c2       	rjmp	.+1176   	; 0x4a58 <handle_message_length_1+0x628>
    45c0:	ef 39       	cpi	r30, 0x9F	; 159
    45c2:	09 f4       	brne	.+2      	; 0x45c6 <handle_message_length_1+0x196>
    45c4:	58 c2       	rjmp	.+1200   	; 0x4a76 <handle_message_length_1+0x646>
    45c6:	ef 39       	cpi	r30, 0x9F	; 159
    45c8:	08 f4       	brcc	.+2      	; 0x45cc <handle_message_length_1+0x19c>
    45ca:	50 c2       	rjmp	.+1184   	; 0x4a6c <handle_message_length_1+0x63c>
    45cc:	ef 3f       	cpi	r30, 0xFF	; 255
    45ce:	09 f0       	breq	.+2      	; 0x45d2 <handle_message_length_1+0x1a2>
    45d0:	72 c3       	rjmp	.+1764   	; 0x4cb6 <handle_message_length_1+0x886>
    45d2:	f8 c1       	rjmp	.+1008   	; 0x49c4 <handle_message_length_1+0x594>
        case 0x20:  //Start display: 0x20
            //set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
			func_read_index_x = 0;
    45d4:	10 92 06 24 	sts	0x2406, r1
			func_read_index_y = 0;
    45d8:	10 92 07 24 	sts	0x2407, r1
            Stop = 0;
    45dc:	10 92 9c 20 	sts	0x209C, r1
			next_block_x = 1;
    45e0:	11 e0       	ldi	r17, 0x01	; 1
    45e2:	10 93 a1 20 	sts	0x20A1, r17
			next_block_y = 1;
    45e6:	10 93 a2 20 	sts	0x20A2, r17
            display_flag = 0;  //clear the display flag
    45ea:	10 92 fe 23 	sts	0x23FE, r1
            Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    45ee:	83 ee       	ldi	r24, 0xE3	; 227
    45f0:	99 e1       	ldi	r25, 0x19	; 25
    45f2:	4e e4       	ldi	r20, 0x4E	; 78
    45f4:	50 e0       	ldi	r21, 0x00	; 0
    45f6:	60 e0       	ldi	r22, 0x00	; 0
    45f8:	70 e0       	ldi	r23, 0x00	; 0
    45fa:	21 e0       	ldi	r18, 0x01	; 1
    45fc:	01 e0       	ldi	r16, 0x01	; 1
    45fe:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0); //initilize the 2 and 3 priority interupts to a fast rate so that
    4602:	8e e8       	ldi	r24, 0x8E	; 142
    4604:	9a e0       	ldi	r25, 0x0A	; 10
    4606:	4e e4       	ldi	r20, 0x4E	; 78
    4608:	50 e0       	ldi	r21, 0x00	; 0
    460a:	60 e0       	ldi	r22, 0x00	; 0
    460c:	70 e0       	ldi	r23, 0x00	; 0
    460e:	22 e0       	ldi	r18, 0x02	; 2
    4610:	00 e0       	ldi	r16, 0x00	; 0
    4612:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0); // the countdown is fast until the setting of the next rate
    4616:	86 ec       	ldi	r24, 0xC6	; 198
    4618:	9a e0       	ldi	r25, 0x0A	; 10
    461a:	4e e4       	ldi	r20, 0x4E	; 78
    461c:	50 e0       	ldi	r21, 0x00	; 0
    461e:	60 e0       	ldi	r22, 0x00	; 0
    4620:	70 e0       	ldi	r23, 0x00	; 0
    4622:	23 e0       	ldi	r18, 0x03	; 3
    4624:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
                                                                //by the Update_display interupt.
																
			if(!default_func_x && !default_func_y && functionX_rate == functionY_rate){ 
    4628:	80 91 a3 20 	lds	r24, 0x20A3
    462c:	88 23       	and	r24, r24
    462e:	59 f5       	brne	.+86     	; 0x4686 <handle_message_length_1+0x256>
    4630:	80 91 a4 20 	lds	r24, 0x20A4
    4634:	88 23       	and	r24, r24
    4636:	39 f5       	brne	.+78     	; 0x4686 <handle_message_length_1+0x256>
    4638:	20 91 a5 20 	lds	r18, 0x20A5
    463c:	30 91 a6 20 	lds	r19, 0x20A6
    4640:	80 91 a7 20 	lds	r24, 0x20A7
    4644:	90 91 a8 20 	lds	r25, 0x20A8
    4648:	28 17       	cp	r18, r24
    464a:	39 07       	cpc	r19, r25
    464c:	e1 f4       	brne	.+56     	; 0x4686 <handle_message_length_1+0x256>
				//We want to synchronize function X and function Y updates in this case
				xprintf(PSTR("Function X and Y are synchronized.\n"));
    464e:	0f 92       	push	r0
    4650:	0f 92       	push	r0
    4652:	87 e6       	ldi	r24, 0x67	; 103
    4654:	9d e0       	ldi	r25, 0x0D	; 13
    4656:	ad b7       	in	r26, 0x3d	; 61
    4658:	be b7       	in	r27, 0x3e	; 62
    465a:	11 96       	adiw	r26, 0x01	; 1
    465c:	8d 93       	st	X+, r24
    465e:	9c 93       	st	X, r25
    4660:	12 97       	sbiw	r26, 0x02	; 2
    4662:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
				sync_XY_func = 1;
    4666:	10 93 0c 24 	sts	0x240C, r17
				update_funcCnt_xy();
    466a:	0f 90       	pop	r0
    466c:	0f 90       	pop	r0
    466e:	0e 94 bf 0c 	call	0x197e	; 0x197e <update_funcCnt_xy>
				Reg_Handler(update_funcCnt_xy, functionX_rate, 4, 1);	
    4672:	40 91 a5 20 	lds	r20, 0x20A5
    4676:	50 91 a6 20 	lds	r21, 0x20A6
    467a:	60 e0       	ldi	r22, 0x00	; 0
    467c:	70 e0       	ldi	r23, 0x00	; 0
    467e:	8f eb       	ldi	r24, 0xBF	; 191
    4680:	9c e0       	ldi	r25, 0x0C	; 12
    4682:	24 e0       	ldi	r18, 0x04	; 4
    4684:	3b c0       	rjmp	.+118    	; 0x46fc <handle_message_length_1+0x2cc>
			}
			else{
				sync_XY_func = 0;
    4686:	10 92 0c 24 	sts	0x240C, r1
				if (default_func_x)
    468a:	80 91 a3 20 	lds	r24, 0x20A3
    468e:	88 23       	and	r24, r24
    4690:	59 f0       	breq	.+22     	; 0x46a8 <handle_message_length_1+0x278>
					Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    4692:	40 91 a5 20 	lds	r20, 0x20A5
    4696:	50 91 a6 20 	lds	r21, 0x20A6
    469a:	60 e0       	ldi	r22, 0x00	; 0
    469c:	70 e0       	ldi	r23, 0x00	; 0
    469e:	89 e1       	ldi	r24, 0x19	; 25
    46a0:	9e e0       	ldi	r25, 0x0E	; 14
    46a2:	24 e0       	ldi	r18, 0x04	; 4
    46a4:	00 e0       	ldi	r16, 0x00	; 0
    46a6:	0c c0       	rjmp	.+24     	; 0x46c0 <handle_message_length_1+0x290>
				else{
					update_funcCnt_x();//add this because the function cnt is updated without delay
    46a8:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <update_funcCnt_x>
					Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    46ac:	40 91 a5 20 	lds	r20, 0x20A5
    46b0:	50 91 a6 20 	lds	r21, 0x20A6
    46b4:	60 e0       	ldi	r22, 0x00	; 0
    46b6:	70 e0       	ldi	r23, 0x00	; 0
    46b8:	89 e1       	ldi	r24, 0x19	; 25
    46ba:	9e e0       	ldi	r25, 0x0E	; 14
    46bc:	24 e0       	ldi	r18, 0x04	; 4
    46be:	01 e0       	ldi	r16, 0x01	; 1
    46c0:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
				}
				
				if (default_func_y)
    46c4:	80 91 a4 20 	lds	r24, 0x20A4
    46c8:	88 23       	and	r24, r24
    46ca:	69 f0       	breq	.+26     	; 0x46e6 <handle_message_length_1+0x2b6>
					Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    46cc:	40 91 a7 20 	lds	r20, 0x20A7
    46d0:	50 91 a8 20 	lds	r21, 0x20A8
    46d4:	60 e0       	ldi	r22, 0x00	; 0
    46d6:	70 e0       	ldi	r23, 0x00	; 0
    46d8:	89 e9       	ldi	r24, 0x99	; 153
    46da:	9d e0       	ldi	r25, 0x0D	; 13
    46dc:	25 e0       	ldi	r18, 0x05	; 5
    46de:	00 e0       	ldi	r16, 0x00	; 0
    46e0:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
    46e4:	ee c2       	rjmp	.+1500   	; 0x4cc2 <handle_message_length_1+0x892>
				else{
					update_funcCnt_y();//add this because the function cnt is updated without delay
    46e6:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <update_funcCnt_y>
					Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); 			
    46ea:	40 91 a7 20 	lds	r20, 0x20A7
    46ee:	50 91 a8 20 	lds	r21, 0x20A8
    46f2:	60 e0       	ldi	r22, 0x00	; 0
    46f4:	70 e0       	ldi	r23, 0x00	; 0
    46f6:	89 e9       	ldi	r24, 0x99	; 153
    46f8:	9d e0       	ldi	r25, 0x0D	; 13
    46fa:	25 e0       	ldi	r18, 0x05	; 5
    46fc:	01 e0       	ldi	r16, 0x01	; 1
    46fe:	f0 cf       	rjmp	.-32     	; 0x46e0 <handle_message_length_1+0x2b0>
			}
			
			break;
            
        case 0x30: //stop display
            Stop = 1;
    4700:	81 e0       	ldi	r24, 0x01	; 1
    4702:	80 93 9c 20 	sts	0x209C, r24
            //turn off the interupts
            Reg_Handler(Update_display, UPDATE_RATE, 1, 0);
    4706:	83 ee       	ldi	r24, 0xE3	; 227
    4708:	99 e1       	ldi	r25, 0x19	; 25
    470a:	4e e4       	ldi	r20, 0x4E	; 78
    470c:	50 e0       	ldi	r21, 0x00	; 0
    470e:	60 e0       	ldi	r22, 0x00	; 0
    4710:	70 e0       	ldi	r23, 0x00	; 0
    4712:	21 e0       	ldi	r18, 0x01	; 1
    4714:	00 e0       	ldi	r16, 0x00	; 0
    4716:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    471a:	8e e8       	ldi	r24, 0x8E	; 142
    471c:	9a e0       	ldi	r25, 0x0A	; 10
    471e:	4e e4       	ldi	r20, 0x4E	; 78
    4720:	50 e0       	ldi	r21, 0x00	; 0
    4722:	60 e0       	ldi	r22, 0x00	; 0
    4724:	70 e0       	ldi	r23, 0x00	; 0
    4726:	22 e0       	ldi	r18, 0x02	; 2
    4728:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    472c:	86 ec       	ldi	r24, 0xC6	; 198
    472e:	9a e0       	ldi	r25, 0x0A	; 10
    4730:	4e e4       	ldi	r20, 0x4E	; 78
    4732:	50 e0       	ldi	r21, 0x00	; 0
    4734:	60 e0       	ldi	r22, 0x00	; 0
    4736:	70 e0       	ldi	r23, 0x00	; 0
    4738:	23 e0       	ldi	r18, 0x03	; 3
    473a:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
			
			if(sync_XY_func) 
    473e:	80 91 0c 24 	lds	r24, 0x240C
    4742:	40 91 a5 20 	lds	r20, 0x20A5
    4746:	50 91 a6 20 	lds	r21, 0x20A6
    474a:	88 23       	and	r24, r24
    474c:	31 f0       	breq	.+12     	; 0x475a <handle_message_length_1+0x32a>
				Reg_Handler(update_funcCnt_xy, functionX_rate, 4, 0);
    474e:	60 e0       	ldi	r22, 0x00	; 0
    4750:	70 e0       	ldi	r23, 0x00	; 0
    4752:	8f eb       	ldi	r24, 0xBF	; 191
    4754:	9c e0       	ldi	r25, 0x0C	; 12
    4756:	24 e0       	ldi	r18, 0x04	; 4
    4758:	11 c0       	rjmp	.+34     	; 0x477c <handle_message_length_1+0x34c>
			else{
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    475a:	60 e0       	ldi	r22, 0x00	; 0
    475c:	70 e0       	ldi	r23, 0x00	; 0
    475e:	89 e1       	ldi	r24, 0x19	; 25
    4760:	9e e0       	ldi	r25, 0x0E	; 14
    4762:	24 e0       	ldi	r18, 0x04	; 4
    4764:	00 e0       	ldi	r16, 0x00	; 0
    4766:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    476a:	40 91 a7 20 	lds	r20, 0x20A7
    476e:	50 91 a8 20 	lds	r21, 0x20A8
    4772:	60 e0       	ldi	r22, 0x00	; 0
    4774:	70 e0       	ldi	r23, 0x00	; 0
    4776:	89 e9       	ldi	r24, 0x99	; 153
    4778:	9d e0       	ldi	r25, 0x0D	; 13
    477a:	25 e0       	ldi	r18, 0x05	; 5
    477c:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
			}
			
			if (default_func_x == 0)
    4780:	80 91 a3 20 	lds	r24, 0x20A3
    4784:	88 23       	and	r24, r24
    4786:	21 f4       	brne	.+8      	; 0x4790 <handle_message_length_1+0x360>
				fetch_update_funcX(1,0);
    4788:	81 e0       	ldi	r24, 0x01	; 1
    478a:	60 e0       	ldi	r22, 0x00	; 0
    478c:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <fetch_update_funcX>
			if (default_func_y == 0)	
    4790:	80 91 a4 20 	lds	r24, 0x20A4
    4794:	88 23       	and	r24, r24
    4796:	09 f0       	breq	.+2      	; 0x479a <handle_message_length_1+0x36a>
    4798:	94 c2       	rjmp	.+1320   	; 0x4cc2 <handle_message_length_1+0x892>
				fetch_update_funcY(1,0);
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	60 e0       	ldi	r22, 0x00	; 0
    479e:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <fetch_update_funcY>
    47a2:	8f c2       	rjmp	.+1310   	; 0x4cc2 <handle_message_length_1+0x892>
		
            break;
            
        case 0x25:  //Start display & trigger - same as regular, but this also does trigger
            //set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
			func_read_index_x = 0;
    47a4:	10 92 06 24 	sts	0x2406, r1
			func_read_index_y = 0;
    47a8:	10 92 07 24 	sts	0x2407, r1
            Stop = 0;
    47ac:	10 92 9c 20 	sts	0x209C, r1
            display_flag = 0;  //clear the display flag
    47b0:	10 92 fe 23 	sts	0x23FE, r1
            Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    47b4:	83 ee       	ldi	r24, 0xE3	; 227
    47b6:	99 e1       	ldi	r25, 0x19	; 25
    47b8:	4e e4       	ldi	r20, 0x4E	; 78
    47ba:	50 e0       	ldi	r21, 0x00	; 0
    47bc:	60 e0       	ldi	r22, 0x00	; 0
    47be:	70 e0       	ldi	r23, 0x00	; 0
    47c0:	21 e0       	ldi	r18, 0x01	; 1
    47c2:	01 e0       	ldi	r16, 0x01	; 1
    47c4:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    47c8:	8e e8       	ldi	r24, 0x8E	; 142
    47ca:	9a e0       	ldi	r25, 0x0A	; 10
    47cc:	4e e4       	ldi	r20, 0x4E	; 78
    47ce:	50 e0       	ldi	r21, 0x00	; 0
    47d0:	60 e0       	ldi	r22, 0x00	; 0
    47d2:	70 e0       	ldi	r23, 0x00	; 0
    47d4:	22 e0       	ldi	r18, 0x02	; 2
    47d6:	00 e0       	ldi	r16, 0x00	; 0
    47d8:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    47dc:	86 ec       	ldi	r24, 0xC6	; 198
    47de:	9a e0       	ldi	r25, 0x0A	; 10
    47e0:	4e e4       	ldi	r20, 0x4E	; 78
    47e2:	50 e0       	ldi	r21, 0x00	; 0
    47e4:	60 e0       	ldi	r22, 0x00	; 0
    47e6:	70 e0       	ldi	r23, 0x00	; 0
    47e8:	23 e0       	ldi	r18, 0x03	; 3
    47ea:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
			
			if(!default_func_x && !default_func_y && functionX_rate == functionY_rate){ 
    47ee:	80 91 a3 20 	lds	r24, 0x20A3
    47f2:	88 23       	and	r24, r24
    47f4:	d9 f4       	brne	.+54     	; 0x482c <handle_message_length_1+0x3fc>
    47f6:	80 91 a4 20 	lds	r24, 0x20A4
    47fa:	88 23       	and	r24, r24
    47fc:	b9 f4       	brne	.+46     	; 0x482c <handle_message_length_1+0x3fc>
    47fe:	20 91 a5 20 	lds	r18, 0x20A5
    4802:	30 91 a6 20 	lds	r19, 0x20A6
    4806:	80 91 a7 20 	lds	r24, 0x20A7
    480a:	90 91 a8 20 	lds	r25, 0x20A8
    480e:	28 17       	cp	r18, r24
    4810:	39 07       	cpc	r19, r25
    4812:	61 f4       	brne	.+24     	; 0x482c <handle_message_length_1+0x3fc>
				//We want to synchronize function X and function Y updates in this case
				update_funcCnt_xy();
    4814:	0e 94 bf 0c 	call	0x197e	; 0x197e <update_funcCnt_xy>
				Reg_Handler(update_funcCnt_xy, functionX_rate, 4, 1);
    4818:	40 91 a5 20 	lds	r20, 0x20A5
    481c:	50 91 a6 20 	lds	r21, 0x20A6
    4820:	60 e0       	ldi	r22, 0x00	; 0
    4822:	70 e0       	ldi	r23, 0x00	; 0
    4824:	8f eb       	ldi	r24, 0xBF	; 191
    4826:	9c e0       	ldi	r25, 0x0C	; 12
    4828:	24 e0       	ldi	r18, 0x04	; 4
    482a:	37 c0       	rjmp	.+110    	; 0x489a <handle_message_length_1+0x46a>
				
			}else{
																
				if (default_func_x)
    482c:	80 91 a3 20 	lds	r24, 0x20A3
    4830:	88 23       	and	r24, r24
    4832:	59 f0       	breq	.+22     	; 0x484a <handle_message_length_1+0x41a>
					Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    4834:	40 91 a5 20 	lds	r20, 0x20A5
    4838:	50 91 a6 20 	lds	r21, 0x20A6
    483c:	60 e0       	ldi	r22, 0x00	; 0
    483e:	70 e0       	ldi	r23, 0x00	; 0
    4840:	89 e1       	ldi	r24, 0x19	; 25
    4842:	9e e0       	ldi	r25, 0x0E	; 14
    4844:	24 e0       	ldi	r18, 0x04	; 4
    4846:	00 e0       	ldi	r16, 0x00	; 0
    4848:	0c c0       	rjmp	.+24     	; 0x4862 <handle_message_length_1+0x432>
				else{
					update_funcCnt_x();//add this because the function cnt is updated without delay
    484a:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <update_funcCnt_x>
					Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    484e:	40 91 a5 20 	lds	r20, 0x20A5
    4852:	50 91 a6 20 	lds	r21, 0x20A6
    4856:	60 e0       	ldi	r22, 0x00	; 0
    4858:	70 e0       	ldi	r23, 0x00	; 0
    485a:	89 e1       	ldi	r24, 0x19	; 25
    485c:	9e e0       	ldi	r25, 0x0E	; 14
    485e:	24 e0       	ldi	r18, 0x04	; 4
    4860:	01 e0       	ldi	r16, 0x01	; 1
    4862:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
				}
				
				if (default_func_y)
    4866:	80 91 a4 20 	lds	r24, 0x20A4
    486a:	88 23       	and	r24, r24
    486c:	59 f0       	breq	.+22     	; 0x4884 <handle_message_length_1+0x454>
					Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    486e:	40 91 a7 20 	lds	r20, 0x20A7
    4872:	50 91 a8 20 	lds	r21, 0x20A8
    4876:	60 e0       	ldi	r22, 0x00	; 0
    4878:	70 e0       	ldi	r23, 0x00	; 0
    487a:	89 e9       	ldi	r24, 0x99	; 153
    487c:	9d e0       	ldi	r25, 0x0D	; 13
    487e:	25 e0       	ldi	r18, 0x05	; 5
    4880:	00 e0       	ldi	r16, 0x00	; 0
    4882:	0c c0       	rjmp	.+24     	; 0x489c <handle_message_length_1+0x46c>
				else{
					update_funcCnt_y();//add this because the function cnt is updated without delay
    4884:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <update_funcCnt_y>
					Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); 			
    4888:	40 91 a7 20 	lds	r20, 0x20A7
    488c:	50 91 a8 20 	lds	r21, 0x20A8
    4890:	60 e0       	ldi	r22, 0x00	; 0
    4892:	70 e0       	ldi	r23, 0x00	; 0
    4894:	89 e9       	ldi	r24, 0x99	; 153
    4896:	9d e0       	ldi	r25, 0x0D	; 13
    4898:	25 e0       	ldi	r18, 0x05	; 5
    489a:	01 e0       	ldi	r16, 0x01	; 1
    489c:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
				}
    		}
            Reg_Handler(toggle_trigger, (uint32_t)OVERFLOW_RATE/trigger_rate, 0, 1); //turn on the trigger toggle
    48a0:	60 91 a9 20 	lds	r22, 0x20A9
    48a4:	70 91 aa 20 	lds	r23, 0x20AA
    48a8:	82 e1       	ldi	r24, 0x12	; 18
    48aa:	9a e7       	ldi	r25, 0x7A	; 122
    48ac:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <__udivmodhi4>
    48b0:	ab 01       	movw	r20, r22
    48b2:	60 e0       	ldi	r22, 0x00	; 0
    48b4:	70 e0       	ldi	r23, 0x00	; 0
    48b6:	8f ed       	ldi	r24, 0xDF	; 223
    48b8:	99 e1       	ldi	r25, 0x19	; 25
    48ba:	20 e0       	ldi	r18, 0x00	; 0
    48bc:	1f cf       	rjmp	.-450    	; 0x46fc <handle_message_length_1+0x2cc>
            break;
            
        case 0x35: //stop display & trigger - same as regular, but this also does trigger
            Stop = 1;
    48be:	81 e0       	ldi	r24, 0x01	; 1
    48c0:	80 93 9c 20 	sts	0x209C, r24
            //turn off the interupts
            Reg_Handler(Update_display, UPDATE_RATE, 1, 0);
    48c4:	83 ee       	ldi	r24, 0xE3	; 227
    48c6:	99 e1       	ldi	r25, 0x19	; 25
    48c8:	4e e4       	ldi	r20, 0x4E	; 78
    48ca:	50 e0       	ldi	r21, 0x00	; 0
    48cc:	60 e0       	ldi	r22, 0x00	; 0
    48ce:	70 e0       	ldi	r23, 0x00	; 0
    48d0:	21 e0       	ldi	r18, 0x01	; 1
    48d2:	00 e0       	ldi	r16, 0x00	; 0
    48d4:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    48d8:	8e e8       	ldi	r24, 0x8E	; 142
    48da:	9a e0       	ldi	r25, 0x0A	; 10
    48dc:	4e e4       	ldi	r20, 0x4E	; 78
    48de:	50 e0       	ldi	r21, 0x00	; 0
    48e0:	60 e0       	ldi	r22, 0x00	; 0
    48e2:	70 e0       	ldi	r23, 0x00	; 0
    48e4:	22 e0       	ldi	r18, 0x02	; 2
    48e6:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    48ea:	86 ec       	ldi	r24, 0xC6	; 198
    48ec:	9a e0       	ldi	r25, 0x0A	; 10
    48ee:	4e e4       	ldi	r20, 0x4E	; 78
    48f0:	50 e0       	ldi	r21, 0x00	; 0
    48f2:	60 e0       	ldi	r22, 0x00	; 0
    48f4:	70 e0       	ldi	r23, 0x00	; 0
    48f6:	23 e0       	ldi	r18, 0x03	; 3
    48f8:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
			
			if(sync_XY_func) 
    48fc:	80 91 0c 24 	lds	r24, 0x240C
    4900:	40 91 a5 20 	lds	r20, 0x20A5
    4904:	50 91 a6 20 	lds	r21, 0x20A6
    4908:	88 23       	and	r24, r24
    490a:	31 f0       	breq	.+12     	; 0x4918 <handle_message_length_1+0x4e8>
				Reg_Handler(update_funcCnt_xy, functionX_rate, 4, 0);
    490c:	60 e0       	ldi	r22, 0x00	; 0
    490e:	70 e0       	ldi	r23, 0x00	; 0
    4910:	8f eb       	ldi	r24, 0xBF	; 191
    4912:	9c e0       	ldi	r25, 0x0C	; 12
    4914:	24 e0       	ldi	r18, 0x04	; 4
    4916:	11 c0       	rjmp	.+34     	; 0x493a <handle_message_length_1+0x50a>
			else{
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    4918:	60 e0       	ldi	r22, 0x00	; 0
    491a:	70 e0       	ldi	r23, 0x00	; 0
    491c:	89 e1       	ldi	r24, 0x19	; 25
    491e:	9e e0       	ldi	r25, 0x0E	; 14
    4920:	24 e0       	ldi	r18, 0x04	; 4
    4922:	00 e0       	ldi	r16, 0x00	; 0
    4924:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    4928:	40 91 a7 20 	lds	r20, 0x20A7
    492c:	50 91 a8 20 	lds	r21, 0x20A8
    4930:	60 e0       	ldi	r22, 0x00	; 0
    4932:	70 e0       	ldi	r23, 0x00	; 0
    4934:	89 e9       	ldi	r24, 0x99	; 153
    4936:	9d e0       	ldi	r25, 0x0D	; 13
    4938:	25 e0       	ldi	r18, 0x05	; 5
    493a:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
			}			
			
            Reg_Handler(toggle_trigger, OVERFLOW_RATE/trigger_rate, 0, 0); //turn off the trigger toggle
    493e:	20 91 a9 20 	lds	r18, 0x20A9
    4942:	30 91 aa 20 	lds	r19, 0x20AA
    4946:	40 e0       	ldi	r20, 0x00	; 0
    4948:	50 e0       	ldi	r21, 0x00	; 0
    494a:	62 e1       	ldi	r22, 0x12	; 18
    494c:	7a e7       	ldi	r23, 0x7A	; 122
    494e:	80 e0       	ldi	r24, 0x00	; 0
    4950:	90 e0       	ldi	r25, 0x00	; 0
    4952:	0e 94 73 4d 	call	0x9ae6	; 0x9ae6 <__divmodsi4>
    4956:	8f ed       	ldi	r24, 0xDF	; 223
    4958:	99 e1       	ldi	r25, 0x19	; 25
    495a:	ba 01       	movw	r22, r20
    495c:	a9 01       	movw	r20, r18
    495e:	20 e0       	ldi	r18, 0x00	; 0
    4960:	00 e0       	ldi	r16, 0x00	; 0
    4962:	0e 94 aa 38 	call	0x7154	; 0x7154 <Reg_Handler>
			digitalWrite(2,LOW);    //set the output to low
    4966:	82 e0       	ldi	r24, 0x02	; 2
    4968:	92 c0       	rjmp	.+292    	; 0x4a8e <handle_message_length_1+0x65e>
            break;
            
        case 0x00:  i2cMasterSend(0x00, 8, ALL_OFF); break;
    496a:	80 e0       	ldi	r24, 0x00	; 0
    496c:	68 e0       	ldi	r22, 0x08	; 8
    496e:	49 e3       	ldi	r20, 0x39	; 57
    4970:	54 e2       	ldi	r21, 0x24	; 36
    4972:	a5 c1       	rjmp	.+842    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x40:  i2cMasterSend(0x00, 24, G_LEVELS[0]); break;
    4974:	80 e0       	ldi	r24, 0x00	; 0
    4976:	68 e1       	ldi	r22, 0x18	; 24
    4978:	44 e0       	ldi	r20, 0x04	; 4
    497a:	51 e2       	ldi	r21, 0x21	; 33
    497c:	a0 c1       	rjmp	.+832    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x41:  i2cMasterSend(0x00, 24, G_LEVELS[1]); break;
    497e:	80 e0       	ldi	r24, 0x00	; 0
    4980:	68 e1       	ldi	r22, 0x18	; 24
    4982:	4c e1       	ldi	r20, 0x1C	; 28
    4984:	51 e2       	ldi	r21, 0x21	; 33
    4986:	9b c1       	rjmp	.+822    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x42:  i2cMasterSend(0x00, 24, G_LEVELS[2]); break;
    4988:	80 e0       	ldi	r24, 0x00	; 0
    498a:	68 e1       	ldi	r22, 0x18	; 24
    498c:	44 e3       	ldi	r20, 0x34	; 52
    498e:	51 e2       	ldi	r21, 0x21	; 33
    4990:	96 c1       	rjmp	.+812    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x43:  i2cMasterSend(0x00, 24, G_LEVELS[3]);   break;
    4992:	80 e0       	ldi	r24, 0x00	; 0
    4994:	68 e1       	ldi	r22, 0x18	; 24
    4996:	4c e4       	ldi	r20, 0x4C	; 76
    4998:	51 e2       	ldi	r21, 0x21	; 33
    499a:	91 c1       	rjmp	.+802    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x44:  i2cMasterSend(0x00, 24, G_LEVELS[4]); break;
    499c:	80 e0       	ldi	r24, 0x00	; 0
    499e:	68 e1       	ldi	r22, 0x18	; 24
    49a0:	44 e6       	ldi	r20, 0x64	; 100
    49a2:	51 e2       	ldi	r21, 0x21	; 33
    49a4:	8c c1       	rjmp	.+792    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x45:  i2cMasterSend(0x00, 24, G_LEVELS[5]); break;
    49a6:	80 e0       	ldi	r24, 0x00	; 0
    49a8:	68 e1       	ldi	r22, 0x18	; 24
    49aa:	4c e7       	ldi	r20, 0x7C	; 124
    49ac:	51 e2       	ldi	r21, 0x21	; 33
    49ae:	87 c1       	rjmp	.+782    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x46:  i2cMasterSend(0x00, 24, G_LEVELS[6]); break;
    49b0:	80 e0       	ldi	r24, 0x00	; 0
    49b2:	68 e1       	ldi	r22, 0x18	; 24
    49b4:	44 e9       	ldi	r20, 0x94	; 148
    49b6:	51 e2       	ldi	r21, 0x21	; 33
    49b8:	82 c1       	rjmp	.+772    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x47:  i2cMasterSend(0x00, 24, G_LEVELS[7]); break;
    49ba:	80 e0       	ldi	r24, 0x00	; 0
    49bc:	68 e1       	ldi	r22, 0x18	; 24
    49be:	4c ea       	ldi	r20, 0xAC	; 172
    49c0:	51 e2       	ldi	r21, 0x21	; 33
    49c2:	7d c1       	rjmp	.+762    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0xFF:  i2cMasterSend(0x00, 8, ALL_ON); break;
    49c4:	80 e0       	ldi	r24, 0x00	; 0
    49c6:	68 e0       	ldi	r22, 0x08	; 8
    49c8:	44 ec       	ldi	r20, 0xC4	; 196
    49ca:	51 e2       	ldi	r21, 0x21	; 33
    49cc:	78 c1       	rjmp	.+752    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x50:  ledBlink(); break;
    49ce:	0e 94 29 2a 	call	0x5452	; 0x5452 <ledBlink>
    49d2:	77 c1       	rjmp	.+750    	; 0x4cc2 <handle_message_length_1+0x892>
        case 0x60:  SystemReset();  break;
    49d4:	0e 94 94 2b 	call	0x5728	; 0x5728 <SystemReset>
    49d8:	74 c1       	rjmp	.+744    	; 0x4cc2 <handle_message_length_1+0x892>
        case 0x70:  benchmark_pattern(); break;
    49da:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <benchmark_pattern>
    49de:	71 c1       	rjmp	.+738    	; 0x4cc2 <handle_message_length_1+0x892>
        case 0x90:  i2cMasterSend(0x00, 32, G_LEVELS_16[0]); break;
    49e0:	80 e0       	ldi	r24, 0x00	; 0
    49e2:	60 e2       	ldi	r22, 0x20	; 32
    49e4:	4c ec       	ldi	r20, 0xCC	; 204
    49e6:	51 e2       	ldi	r21, 0x21	; 33
    49e8:	6a c1       	rjmp	.+724    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x91:  i2cMasterSend(0x00, 32, G_LEVELS_16[1]); break;
    49ea:	80 e0       	ldi	r24, 0x00	; 0
    49ec:	60 e2       	ldi	r22, 0x20	; 32
    49ee:	4c ee       	ldi	r20, 0xEC	; 236
    49f0:	51 e2       	ldi	r21, 0x21	; 33
    49f2:	65 c1       	rjmp	.+714    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x92:  i2cMasterSend(0x00, 32, G_LEVELS_16[2]); break;
    49f4:	80 e0       	ldi	r24, 0x00	; 0
    49f6:	60 e2       	ldi	r22, 0x20	; 32
    49f8:	4c e0       	ldi	r20, 0x0C	; 12
    49fa:	52 e2       	ldi	r21, 0x22	; 34
    49fc:	60 c1       	rjmp	.+704    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x93:  i2cMasterSend(0x00, 32, G_LEVELS_16[3]); break;
    49fe:	80 e0       	ldi	r24, 0x00	; 0
    4a00:	60 e2       	ldi	r22, 0x20	; 32
    4a02:	4c e2       	ldi	r20, 0x2C	; 44
    4a04:	52 e2       	ldi	r21, 0x22	; 34
    4a06:	5b c1       	rjmp	.+694    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x94:  i2cMasterSend(0x00, 32, G_LEVELS_16[4]); break;
    4a08:	80 e0       	ldi	r24, 0x00	; 0
    4a0a:	60 e2       	ldi	r22, 0x20	; 32
    4a0c:	4c e4       	ldi	r20, 0x4C	; 76
    4a0e:	52 e2       	ldi	r21, 0x22	; 34
    4a10:	56 c1       	rjmp	.+684    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x95:  i2cMasterSend(0x00, 32, G_LEVELS_16[5]); break;
    4a12:	80 e0       	ldi	r24, 0x00	; 0
    4a14:	60 e2       	ldi	r22, 0x20	; 32
    4a16:	4c e6       	ldi	r20, 0x6C	; 108
    4a18:	52 e2       	ldi	r21, 0x22	; 34
    4a1a:	51 c1       	rjmp	.+674    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x96:  i2cMasterSend(0x00, 32, G_LEVELS_16[6]); break;
    4a1c:	80 e0       	ldi	r24, 0x00	; 0
    4a1e:	60 e2       	ldi	r22, 0x20	; 32
    4a20:	4c e8       	ldi	r20, 0x8C	; 140
    4a22:	52 e2       	ldi	r21, 0x22	; 34
    4a24:	4c c1       	rjmp	.+664    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x97:  i2cMasterSend(0x00, 32, G_LEVELS_16[7]); break;
    4a26:	80 e0       	ldi	r24, 0x00	; 0
    4a28:	60 e2       	ldi	r22, 0x20	; 32
    4a2a:	4c ea       	ldi	r20, 0xAC	; 172
    4a2c:	52 e2       	ldi	r21, 0x22	; 34
    4a2e:	47 c1       	rjmp	.+654    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x98:  i2cMasterSend(0x00, 32, G_LEVELS_16[8]); break;
    4a30:	80 e0       	ldi	r24, 0x00	; 0
    4a32:	60 e2       	ldi	r22, 0x20	; 32
    4a34:	4c ec       	ldi	r20, 0xCC	; 204
    4a36:	52 e2       	ldi	r21, 0x22	; 34
    4a38:	42 c1       	rjmp	.+644    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x99:  i2cMasterSend(0x00, 32, G_LEVELS_16[9]); break;
    4a3a:	80 e0       	ldi	r24, 0x00	; 0
    4a3c:	60 e2       	ldi	r22, 0x20	; 32
    4a3e:	4c ee       	ldi	r20, 0xEC	; 236
    4a40:	52 e2       	ldi	r21, 0x22	; 34
    4a42:	3d c1       	rjmp	.+634    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x9A:  i2cMasterSend(0x00, 32, G_LEVELS_16[10]); break;
    4a44:	80 e0       	ldi	r24, 0x00	; 0
    4a46:	60 e2       	ldi	r22, 0x20	; 32
    4a48:	4c e0       	ldi	r20, 0x0C	; 12
    4a4a:	53 e2       	ldi	r21, 0x23	; 35
    4a4c:	38 c1       	rjmp	.+624    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x9B:  i2cMasterSend(0x00, 32, G_LEVELS_16[11]); break;
    4a4e:	80 e0       	ldi	r24, 0x00	; 0
    4a50:	60 e2       	ldi	r22, 0x20	; 32
    4a52:	4c e2       	ldi	r20, 0x2C	; 44
    4a54:	53 e2       	ldi	r21, 0x23	; 35
    4a56:	33 c1       	rjmp	.+614    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x9C:  i2cMasterSend(0x00, 32, G_LEVELS_16[12]); break;
    4a58:	80 e0       	ldi	r24, 0x00	; 0
    4a5a:	60 e2       	ldi	r22, 0x20	; 32
    4a5c:	4c e4       	ldi	r20, 0x4C	; 76
    4a5e:	53 e2       	ldi	r21, 0x23	; 35
    4a60:	2e c1       	rjmp	.+604    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x9D:  i2cMasterSend(0x00, 32, G_LEVELS_16[13]); break;
    4a62:	80 e0       	ldi	r24, 0x00	; 0
    4a64:	60 e2       	ldi	r22, 0x20	; 32
    4a66:	4c e6       	ldi	r20, 0x6C	; 108
    4a68:	53 e2       	ldi	r21, 0x23	; 35
    4a6a:	29 c1       	rjmp	.+594    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x9E:  i2cMasterSend(0x00, 32, G_LEVELS_16[14]); break;
    4a6c:	80 e0       	ldi	r24, 0x00	; 0
    4a6e:	60 e2       	ldi	r22, 0x20	; 32
    4a70:	4c e8       	ldi	r20, 0x8C	; 140
    4a72:	53 e2       	ldi	r21, 0x23	; 35
    4a74:	24 c1       	rjmp	.+584    	; 0x4cbe <handle_message_length_1+0x88e>
        case 0x9F:  i2cMasterSend(0x00, 32, G_LEVELS_16[15]); break;
    4a76:	80 e0       	ldi	r24, 0x00	; 0
    4a78:	60 e2       	ldi	r22, 0x20	; 32
    4a7a:	4c ea       	ldi	r20, 0xAC	; 172
    4a7c:	53 e2       	ldi	r21, 0x23	; 35
    4a7e:	1f c1       	rjmp	.+574    	; 0x4cbe <handle_message_length_1+0x88e>
        
        case 0x10:  // turn laser on
            Laser_active = 1;
    4a80:	81 e0       	ldi	r24, 0x01	; 1
    4a82:	80 93 00 24 	sts	0x2400, r24
    4a86:	1d c1       	rjmp	.+570    	; 0x4cc2 <handle_message_length_1+0x892>
            break;
            
        case 0x11:  // turn laser off
            Laser_active = 0;
    4a88:	10 92 00 24 	sts	0x2400, r1
            // turn off the lines that may be connected
            digitalWrite(0, LOW);
    4a8c:	80 e0       	ldi	r24, 0x00	; 0
    4a8e:	60 e0       	ldi	r22, 0x00	; 0
    4a90:	0e 94 88 2a 	call	0x5510	; 0x5510 <digitalWrite>
    4a94:	16 c1       	rjmp	.+556    	; 0x4cc2 <handle_message_length_1+0x892>
            break;
            
        case 0x12:  // turn on compression for identical elements
            ident_compress = 1;
    4a96:	81 e0       	ldi	r24, 0x01	; 1
    4a98:	80 93 9d 28 	sts	0x289D, r24
    4a9c:	12 c1       	rjmp	.+548    	; 0x4cc2 <handle_message_length_1+0x892>
            break;
            
        case 0x13:  // turn off compression for identical elements
            ident_compress = 0;
    4a9e:	10 92 9d 28 	sts	0x289D, r1
    4aa2:	0f c1       	rjmp	.+542    	; 0x4cc2 <handle_message_length_1+0x892>
            break;
            
        case 0x14:  //synchronize the SDInfo.mat with the one in the PC
            dump_mat();
    4aa4:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <dump_mat>
    4aa8:	0c c1       	rjmp	.+536    	; 0x4cc2 <handle_message_length_1+0x892>
            break;
            
        case 0x15:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
    4aaa:	00 d0       	rcall	.+0      	; 0x4aac <handle_message_length_1+0x67c>
    4aac:	0f 92       	push	r0
    4aae:	88 e4       	ldi	r24, 0x48	; 72
    4ab0:	9d e0       	ldi	r25, 0x0D	; 13
    4ab2:	ed b7       	in	r30, 0x3d	; 61
    4ab4:	fe b7       	in	r31, 0x3e	; 62
    4ab6:	81 83       	std	Z+1, r24	; 0x01
    4ab8:	92 83       	std	Z+2, r25	; 0x02
    4aba:	8c ec       	ldi	r24, 0xCC	; 204
    4abc:	93 e2       	ldi	r25, 0x23	; 35
    4abe:	f2 c0       	rjmp	.+484    	; 0x4ca4 <handle_message_length_1+0x874>
            break;
    4ac0:	9c e4       	ldi	r25, 0x4C	; 76
    4ac2:	e9 2e       	mov	r14, r25
    4ac4:	96 e2       	ldi	r25, 0x26	; 38
    4ac6:	f9 2e       	mov	r15, r25
    4ac8:	11 e0       	ldi	r17, 0x01	; 1
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
                CMD[0] = 0xFE; CMD[1] = chMap[i];
    4aca:	0e ef       	ldi	r16, 0xFE	; 254
                i2cMasterSend(i, 2, CMD);
    4acc:	6e 01       	movw	r12, r28
    4ace:	08 94       	sec
    4ad0:	c1 1c       	adc	r12, r1
    4ad2:	d1 1c       	adc	r13, r1
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
            break;
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
                CMD[0] = 0xFE; CMD[1] = chMap[i];
    4ad4:	09 83       	std	Y+1, r16	; 0x01
    4ad6:	d7 01       	movw	r26, r14
    4ad8:	8d 91       	ld	r24, X+
    4ada:	7d 01       	movw	r14, r26
    4adc:	8a 83       	std	Y+2, r24	; 0x02
                i2cMasterSend(i, 2, CMD);
    4ade:	81 2f       	mov	r24, r17
    4ae0:	62 e0       	ldi	r22, 0x02	; 2
    4ae2:	a6 01       	movw	r20, r12
    4ae4:	0e 94 8a 14 	call	0x2914	; 0x2914 <i2cMasterSend>
        case 0x15:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
            break;
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
    4ae8:	1f 5f       	subi	r17, 0xFF	; 255
    4aea:	11 38       	cpi	r17, 0x81	; 129
    4aec:	99 f7       	brne	.-26     	; 0x4ad4 <handle_message_length_1+0x6a4>
    4aee:	e9 c0       	rjmp	.+466    	; 0x4cc2 <handle_message_length_1+0x892>
                i2cMasterSend(i, 2, CMD);
            }
            break;
            
        case 0x17:  // turn on quiet_mode, no message sent out
            quiet_mode_on = 1;
    4af0:	81 e0       	ldi	r24, 0x01	; 1
    4af2:	80 93 b3 20 	sts	0x20B3, r24
    4af6:	e5 c0       	rjmp	.+458    	; 0x4cc2 <handle_message_length_1+0x892>
            break;
            
        case 0x18:  // turn off quiet_mode, essage sent out
            quiet_mode_on = 0;
    4af8:	10 92 b3 20 	sts	0x20B3, r1
    4afc:	e2 c0       	rjmp	.+452    	; 0x4cc2 <handle_message_length_1+0x892>
            break;
			  
        case 0x19:  // update GUI information
            xprintf(PSTR("update: %d %d %d %d %d %d %d %d:\n"), gain_x, bias_x, X_pos_index, x_mode, gain_y, bias_y, Y_pos_index, y_mode);
    4afe:	ed b7       	in	r30, 0x3d	; 61
    4b00:	fe b7       	in	r31, 0x3e	; 62
    4b02:	72 97       	sbiw	r30, 0x12	; 18
    4b04:	ed bf       	out	0x3d, r30	; 61
    4b06:	fe bf       	out	0x3e, r31	; 62
    4b08:	31 96       	adiw	r30, 0x01	; 1
    4b0a:	86 e2       	ldi	r24, 0x26	; 38
    4b0c:	9d e0       	ldi	r25, 0x0D	; 13
    4b0e:	ad b7       	in	r26, 0x3d	; 61
    4b10:	be b7       	in	r27, 0x3e	; 62
    4b12:	11 96       	adiw	r26, 0x01	; 1
    4b14:	8d 93       	st	X+, r24
    4b16:	9c 93       	st	X, r25
    4b18:	12 97       	sbiw	r26, 0x02	; 2
    4b1a:	80 91 0b 27 	lds	r24, 0x270B
    4b1e:	90 91 0c 27 	lds	r25, 0x270C
    4b22:	82 83       	std	Z+2, r24	; 0x02
    4b24:	93 83       	std	Z+3, r25	; 0x03
    4b26:	80 91 b5 24 	lds	r24, 0x24B5
    4b2a:	90 91 b6 24 	lds	r25, 0x24B6
    4b2e:	84 83       	std	Z+4, r24	; 0x04
    4b30:	95 83       	std	Z+5, r25	; 0x05
    4b32:	80 91 1f 26 	lds	r24, 0x261F
    4b36:	90 91 20 26 	lds	r25, 0x2620
    4b3a:	86 83       	std	Z+6, r24	; 0x06
    4b3c:	97 83       	std	Z+7, r25	; 0x07
    4b3e:	80 91 cc 26 	lds	r24, 0x26CC
    4b42:	80 87       	std	Z+8, r24	; 0x08
    4b44:	11 86       	std	Z+9, r1	; 0x09
    4b46:	80 91 d0 26 	lds	r24, 0x26D0
    4b4a:	90 91 d1 26 	lds	r25, 0x26D1
    4b4e:	82 87       	std	Z+10, r24	; 0x0a
    4b50:	93 87       	std	Z+11, r25	; 0x0b
    4b52:	80 91 c0 2a 	lds	r24, 0x2AC0
    4b56:	90 91 c1 2a 	lds	r25, 0x2AC1
    4b5a:	84 87       	std	Z+12, r24	; 0x0c
    4b5c:	95 87       	std	Z+13, r25	; 0x0d
    4b5e:	80 91 91 25 	lds	r24, 0x2591
    4b62:	90 91 92 25 	lds	r25, 0x2592
    4b66:	86 87       	std	Z+14, r24	; 0x0e
    4b68:	97 87       	std	Z+15, r25	; 0x0f
    4b6a:	80 91 0a 27 	lds	r24, 0x270A
    4b6e:	80 8b       	std	Z+16, r24	; 0x10
    4b70:	11 8a       	std	Z+17, r1	; 0x11
    4b72:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    4b76:	ed b7       	in	r30, 0x3d	; 61
    4b78:	fe b7       	in	r31, 0x3e	; 62
    4b7a:	72 96       	adiw	r30, 0x12	; 18
    4b7c:	ed bf       	out	0x3d, r30	; 61
    4b7e:	fe bf       	out	0x3e, r31	; 62
    4b80:	a0 c0       	rjmp	.+320    	; 0x4cc2 <handle_message_length_1+0x892>
          break;
			
		case 0x21:	// working mode 1 = default mode = controller mode
			eeprom_write_byte(work_mode,0xff);
    4b82:	80 e0       	ldi	r24, 0x00	; 0
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	6f ef       	ldi	r22, 0xFF	; 255
    4b88:	0e 94 29 52 	call	0xa452	; 0xa452 <__eewr_byte_x128a1>
			xprintf(PSTR("Reset controller to work in the controller mode!\n"));
    4b8c:	0f 92       	push	r0
    4b8e:	0f 92       	push	r0
    4b90:	84 ef       	ldi	r24, 0xF4	; 244
    4b92:	9c e0       	ldi	r25, 0x0C	; 12
    4b94:	12 c0       	rjmp	.+36     	; 0x4bba <handle_message_length_1+0x78a>
			break;

		case 0x22:
		    eeprom_write_byte(work_mode,0x00);
    4b96:	80 e0       	ldi	r24, 0x00	; 0
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	60 e0       	ldi	r22, 0x00	; 0
    4b9c:	0e 94 29 52 	call	0xa452	; 0xa452 <__eewr_byte_x128a1>
			xprintf(PSTR("Reset controller to work in the PC dumping mode!\n"));
    4ba0:	0f 92       	push	r0
    4ba2:	0f 92       	push	r0
    4ba4:	82 ec       	ldi	r24, 0xC2	; 194
    4ba6:	9c e0       	ldi	r25, 0x0C	; 12
    4ba8:	16 c0       	rjmp	.+44     	; 0x4bd6 <handle_message_length_1+0x7a6>
			break;
            
			
		case 0x23: //using Int3 external trigger mode
			PORTK.INT0MASK = 0x08;      //Int3 is used as source for port interrupt 0
    4baa:	88 e0       	ldi	r24, 0x08	; 8
    4bac:	e0 e2       	ldi	r30, 0x20	; 32
    4bae:	f7 e0       	ldi	r31, 0x07	; 7
    4bb0:	82 87       	std	Z+10, r24	; 0x0a
			xprintf(PSTR("Enabled Int3 external trigger mode is on!\n"));
    4bb2:	0f 92       	push	r0
    4bb4:	0f 92       	push	r0
    4bb6:	87 e9       	ldi	r24, 0x97	; 151
    4bb8:	9c e0       	ldi	r25, 0x0C	; 12
    4bba:	ad b7       	in	r26, 0x3d	; 61
    4bbc:	be b7       	in	r27, 0x3e	; 62
    4bbe:	11 96       	adiw	r26, 0x01	; 1
    4bc0:	8d 93       	st	X+, r24
    4bc2:	9c 93       	st	X, r25
    4bc4:	12 97       	sbiw	r26, 0x02	; 2
    4bc6:	0b c0       	rjmp	.+22     	; 0x4bde <handle_message_length_1+0x7ae>
			break;
			
		case 0x24: //disable Int3 external trigger mode
			PORTK.INT0MASK = 0x00;      //Int3 is used as source for port interrupt 0
    4bc8:	e0 e2       	ldi	r30, 0x20	; 32
    4bca:	f7 e0       	ldi	r31, 0x07	; 7
    4bcc:	12 86       	std	Z+10, r1	; 0x0a
			xprintf(PSTR("Disabled Int3 external trigger mode!\n"));
    4bce:	0f 92       	push	r0
    4bd0:	0f 92       	push	r0
    4bd2:	81 e7       	ldi	r24, 0x71	; 113
    4bd4:	9c e0       	ldi	r25, 0x0C	; 12
    4bd6:	ed b7       	in	r30, 0x3d	; 61
    4bd8:	fe b7       	in	r31, 0x3e	; 62
    4bda:	81 83       	std	Z+1, r24	; 0x01
    4bdc:	92 83       	std	Z+2, r25	; 0x02
    4bde:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    4be2:	0f 90       	pop	r0
    4be4:	0f 90       	pop	r0
    4be6:	6d c0       	rjmp	.+218    	; 0x4cc2 <handle_message_length_1+0x892>
			break;		
    4be8:	99 24       	eor	r9, r9
    4bea:	ee 24       	eor	r14, r14
    4bec:	ff 24       	eor	r15, r15
    4bee:	87 01       	movw	r16, r14
    4bf0:	aa 24       	eor	r10, r10
    4bf2:	bb 24       	eor	r11, r11
    4bf4:	65 01       	movw	r12, r10
    4bf6:	80 e4       	ldi	r24, 0x40	; 64
    4bf8:	68 2e       	mov	r6, r24
    4bfa:	8c e9       	ldi	r24, 0x9C	; 156
    4bfc:	78 2e       	mov	r7, r24

		case 0x26: //read and set resolution for x and y

			for (i=0; i<n_sample; i++){
			   tmp_x += analogRead(2);
    4bfe:	82 e0       	ldi	r24, 0x02	; 2
    4c00:	0e 94 ba 2a 	call	0x5574	; 0x5574 <analogRead>
    4c04:	aa 27       	eor	r26, r26
    4c06:	97 fd       	sbrc	r25, 7
    4c08:	a0 95       	com	r26
    4c0a:	ba 2f       	mov	r27, r26
    4c0c:	e8 0e       	add	r14, r24
    4c0e:	f9 1e       	adc	r15, r25
    4c10:	0a 1f       	adc	r16, r26
    4c12:	1b 1f       	adc	r17, r27
			   tmp_y += analogRead(3);
    4c14:	83 e0       	ldi	r24, 0x03	; 3
    4c16:	0e 94 ba 2a 	call	0x5574	; 0x5574 <analogRead>
    4c1a:	aa 27       	eor	r26, r26
    4c1c:	97 fd       	sbrc	r25, 7
    4c1e:	a0 95       	com	r26
    4c20:	ba 2f       	mov	r27, r26
    4c22:	a8 0e       	add	r10, r24
    4c24:	b9 1e       	adc	r11, r25
    4c26:	ca 1e       	adc	r12, r26
    4c28:	db 1e       	adc	r13, r27
    4c2a:	c3 01       	movw	r24, r6
    4c2c:	01 97       	sbiw	r24, 0x01	; 1
    4c2e:	f1 f7       	brne	.-4      	; 0x4c2c <handle_message_length_1+0x7fc>
			xprintf(PSTR("Disabled Int3 external trigger mode!\n"));
			break;		

		case 0x26: //read and set resolution for x and y

			for (i=0; i<n_sample; i++){
    4c30:	93 94       	inc	r9
    4c32:	f4 e6       	ldi	r31, 0x64	; 100
    4c34:	9f 16       	cp	r9, r31
    4c36:	19 f7       	brne	.-58     	; 0x4bfe <handle_message_length_1+0x7ce>
			   tmp_x += analogRead(2);
			   tmp_y += analogRead(3);
			   _delay_ms(5);
			};
			resolution_x  =  tmp_x / n_sample;
    4c38:	c8 01       	movw	r24, r16
    4c3a:	b7 01       	movw	r22, r14
    4c3c:	24 e6       	ldi	r18, 0x64	; 100
    4c3e:	30 e0       	ldi	r19, 0x00	; 0
    4c40:	40 e0       	ldi	r20, 0x00	; 0
    4c42:	50 e0       	ldi	r21, 0x00	; 0
    4c44:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    4c48:	20 93 9d 20 	sts	0x209D, r18
    4c4c:	30 93 9e 20 	sts	0x209E, r19
			resolution_y  =  tmp_y / n_sample;
    4c50:	c6 01       	movw	r24, r12
    4c52:	b5 01       	movw	r22, r10
    4c54:	24 e6       	ldi	r18, 0x64	; 100
    4c56:	30 e0       	ldi	r19, 0x00	; 0
    4c58:	40 e0       	ldi	r20, 0x00	; 0
    4c5a:	50 e0       	ldi	r21, 0x00	; 0
    4c5c:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    4c60:	20 93 9f 20 	sts	0x209F, r18
    4c64:	30 93 a0 20 	sts	0x20A0, r19
			xprintf(PSTR("resolution_x =  %d:\n"), resolution_x);
    4c68:	00 d0       	rcall	.+0      	; 0x4c6a <handle_message_length_1+0x83a>
    4c6a:	0f 92       	push	r0
    4c6c:	8c e5       	ldi	r24, 0x5C	; 92
    4c6e:	9c e0       	ldi	r25, 0x0C	; 12
    4c70:	ad b7       	in	r26, 0x3d	; 61
    4c72:	be b7       	in	r27, 0x3e	; 62
    4c74:	11 96       	adiw	r26, 0x01	; 1
    4c76:	8d 93       	st	X+, r24
    4c78:	9c 93       	st	X, r25
    4c7a:	12 97       	sbiw	r26, 0x02	; 2
    4c7c:	80 91 9d 20 	lds	r24, 0x209D
    4c80:	90 91 9e 20 	lds	r25, 0x209E
    4c84:	13 96       	adiw	r26, 0x03	; 3
    4c86:	8d 93       	st	X+, r24
    4c88:	9c 93       	st	X, r25
    4c8a:	14 97       	sbiw	r26, 0x04	; 4
    4c8c:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
			xprintf(PSTR("resolution_y =  %d:\n"), resolution_y);
    4c90:	87 e4       	ldi	r24, 0x47	; 71
    4c92:	9c e0       	ldi	r25, 0x0C	; 12
    4c94:	ed b7       	in	r30, 0x3d	; 61
    4c96:	fe b7       	in	r31, 0x3e	; 62
    4c98:	81 83       	std	Z+1, r24	; 0x01
    4c9a:	92 83       	std	Z+2, r25	; 0x02
    4c9c:	80 91 9f 20 	lds	r24, 0x209F
    4ca0:	90 91 a0 20 	lds	r25, 0x20A0
    4ca4:	83 83       	std	Z+3, r24	; 0x03
    4ca6:	94 83       	std	Z+4, r25	; 0x04
    4ca8:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    4cac:	0f 90       	pop	r0
    4cae:	0f 90       	pop	r0
    4cb0:	0f 90       	pop	r0
    4cb2:	0f 90       	pop	r0
    4cb4:	06 c0       	rjmp	.+12     	; 0x4cc2 <handle_message_length_1+0x892>
			break;
	
        default: i2cMasterSend(0x00, 8, ERROR_CODES[1]);
    4cb6:	80 e0       	ldi	r24, 0x00	; 0
    4cb8:	68 e0       	ldi	r22, 0x08	; 8
    4cba:	48 ec       	ldi	r20, 0xC8	; 200
    4cbc:	50 e2       	ldi	r21, 0x20	; 32
    4cbe:	0e 94 8a 14 	call	0x2914	; 0x2914 <i2cMasterSend>
    }
}
    4cc2:	0f 90       	pop	r0
    4cc4:	0f 90       	pop	r0
    4cc6:	cf 91       	pop	r28
    4cc8:	df 91       	pop	r29
    4cca:	1f 91       	pop	r17
    4ccc:	0f 91       	pop	r16
    4cce:	ff 90       	pop	r15
    4cd0:	ef 90       	pop	r14
    4cd2:	df 90       	pop	r13
    4cd4:	cf 90       	pop	r12
    4cd6:	bf 90       	pop	r11
    4cd8:	af 90       	pop	r10
    4cda:	9f 90       	pop	r9
    4cdc:	7f 90       	pop	r7
    4cde:	6f 90       	pop	r6
    4ce0:	08 95       	ret

00004ce2 <main>:
}




int main(void) {
    4ce2:	a0 e5       	ldi	r26, 0x50	; 80
    4ce4:	b6 e0       	ldi	r27, 0x06	; 6
    4ce6:	e7 e7       	ldi	r30, 0x77	; 119
    4ce8:	f6 e2       	ldi	r31, 0x26	; 38
    4cea:	0c 94 94 4d 	jmp	0x9b28	; 0x9b28 <__prologue_saves__+0xc>
	uint8_t rightBufferXLoaded = 0, rightBufferYLoaded = 0;
    uint16_t frame_num_old = 999;  //just chosen at random
	uint8_t func_idx_x_old = 199;
	uint8_t func_idx_y_old = 199;
	
	workingModes = eeprom_read_byte(work_mode);
    4cee:	80 e0       	ldi	r24, 0x00	; 0
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	0e 94 19 52 	call	0xa432	; 0xa432 <__eerd_byte_x128a1>
    4cf6:	e8 2e       	mov	r14, r24
	
    TWI_MasterCreateBuff(&twi1,workingModes);
    4cf8:	83 e9       	ldi	r24, 0x93	; 147
    4cfa:	95 e2       	ldi	r25, 0x25	; 37
    4cfc:	6e 2d       	mov	r22, r14
    4cfe:	0e 94 4e 3a 	call	0x749c	; 0x749c <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi2,workingModes);
    4d02:	8e e8       	ldi	r24, 0x8E	; 142
    4d04:	98 e2       	ldi	r25, 0x28	; 40
    4d06:	6e 2d       	mov	r22, r14
    4d08:	0e 94 4e 3a 	call	0x749c	; 0x749c <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi3,workingModes);
    4d0c:	8b e3       	ldi	r24, 0x3B	; 59
    4d0e:	96 e2       	ldi	r25, 0x26	; 38
    4d10:	6e 2d       	mov	r22, r14
    4d12:	0e 94 4e 3a 	call	0x749c	; 0x749c <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi4,workingModes);
    4d16:	87 eb       	ldi	r24, 0xB7	; 183
    4d18:	94 e2       	ldi	r25, 0x24	; 36
    4d1a:	6e 2d       	mov	r22, r14
    4d1c:	0e 94 4e 3a 	call	0x749c	; 0x749c <TWI_MasterCreateBuff>
    
// Initialize TWI master #1
    TWI_MasterInit(&twi1,
    4d20:	83 e9       	ldi	r24, 0x93	; 147
    4d22:	95 e2       	ldi	r25, 0x25	; 37
    4d24:	60 e8       	ldi	r22, 0x80	; 128
    4d26:	74 e0       	ldi	r23, 0x04	; 4
    4d28:	40 e4       	ldi	r20, 0x40	; 64
    4d2a:	50 e0       	ldi	r21, 0x00	; 0
    4d2c:	23 e2       	ldi	r18, 0x23	; 35
    4d2e:	0e 94 ff 38 	call	0x71fe	; 0x71fe <TWI_MasterInit>
            &TWIC,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #2
    TWI_MasterInit(&twi2,
    4d32:	8e e8       	ldi	r24, 0x8E	; 142
    4d34:	98 e2       	ldi	r25, 0x28	; 40
    4d36:	60 e9       	ldi	r22, 0x90	; 144
    4d38:	74 e0       	ldi	r23, 0x04	; 4
    4d3a:	40 e4       	ldi	r20, 0x40	; 64
    4d3c:	50 e0       	ldi	r21, 0x00	; 0
    4d3e:	23 e2       	ldi	r18, 0x23	; 35
    4d40:	0e 94 ff 38 	call	0x71fe	; 0x71fe <TWI_MasterInit>
            &TWID,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #3
    TWI_MasterInit(&twi3,
    4d44:	8b e3       	ldi	r24, 0x3B	; 59
    4d46:	96 e2       	ldi	r25, 0x26	; 38
    4d48:	60 ea       	ldi	r22, 0xA0	; 160
    4d4a:	74 e0       	ldi	r23, 0x04	; 4
    4d4c:	40 e4       	ldi	r20, 0x40	; 64
    4d4e:	50 e0       	ldi	r21, 0x00	; 0
    4d50:	23 e2       	ldi	r18, 0x23	; 35
    4d52:	0e 94 ff 38 	call	0x71fe	; 0x71fe <TWI_MasterInit>
            &TWIE,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #4
    TWI_MasterInit(&twi4,
    4d56:	87 eb       	ldi	r24, 0xB7	; 183
    4d58:	94 e2       	ldi	r25, 0x24	; 36
    4d5a:	60 eb       	ldi	r22, 0xB0	; 176
    4d5c:	74 e0       	ldi	r23, 0x04	; 4
    4d5e:	40 e4       	ldi	r20, 0x40	; 64
    4d60:	50 e0       	ldi	r21, 0x00	; 0
    4d62:	23 e2       	ldi	r18, 0x23	; 35
    4d64:	0e 94 ff 38 	call	0x71fe	; 0x71fe <TWI_MasterInit>
            &TWIF,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize the rest of the system
	createRxBuff(workingModes);
    4d68:	8e 2d       	mov	r24, r14
    4d6a:	0e 94 f6 37 	call	0x6fec	; 0x6fec <createRxBuff>
    init_all();
    4d6e:	0e 94 4c 35 	call	0x6a98	; 0x6a98 <init_all>

    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    4d72:	8f eb       	ldi	r24, 0xBF	; 191
    4d74:	96 e3       	ldi	r25, 0x36	; 54
    4d76:	80 93 99 24 	sts	0x2499, r24
    4d7a:	90 93 9a 24 	sts	0x249A, r25
    4d7e:	80 e0       	ldi	r24, 0x00	; 0
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    { function_X[lcv] = function_Y[lcv] = 10;  }// here we use 10 as the equivalent for 1 V.
    4d82:	2a e0       	ldi	r18, 0x0A	; 10
    4d84:	30 e0       	ldi	r19, 0x00	; 0
    4d86:	fc 01       	movw	r30, r24
    4d88:	e7 53       	subi	r30, 0x37	; 55
    4d8a:	fb 4d       	sbci	r31, 0xDB	; 219
    4d8c:	20 83       	st	Z, r18
    4d8e:	31 83       	std	Z+1, r19	; 0x01
    4d90:	fc 01       	movw	r30, r24
    4d92:	e7 5d       	subi	r30, 0xD7	; 215
    4d94:	f8 4d       	sbci	r31, 0xD8	; 216
    4d96:	20 83       	st	Z, r18
    4d98:	31 83       	std	Z+1, r19	; 0x01
    4d9a:	02 96       	adiw	r24, 0x02	; 2

    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    4d9c:	88 3c       	cpi	r24, 0xC8	; 200
    4d9e:	91 05       	cpc	r25, r1
    4da0:	91 f7       	brne	.-28     	; 0x4d86 <main+0xa4>
    4da2:	e2 ea       	ldi	r30, 0xA2	; 162
    4da4:	f5 e2       	ldi	r31, 0x25	; 37
    4da6:	20 e0       	ldi	r18, 0x00	; 0
    4da8:	30 e0       	ldi	r19, 0x00	; 0
	
	//initialize laser pattern
	for (lcv = 0; lcv < 125; lcv++)
	{ 
		if (((lcv >=0) && (lcv <= 2)) || ((lcv >= 6)&&(lcv <= 8)))
	        laserPattern[lcv] = 255;
    4daa:	4f ef       	ldi	r20, 0xFF	; 255
	
	
	//initialize laser pattern
	for (lcv = 0; lcv < 125; lcv++)
	{ 
		if (((lcv >=0) && (lcv <= 2)) || ((lcv >= 6)&&(lcv <= 8)))
    4dac:	23 30       	cpi	r18, 0x03	; 3
    4dae:	31 05       	cpc	r19, r1
    4db0:	20 f0       	brcs	.+8      	; 0x4dba <main+0xd8>
    4db2:	c9 01       	movw	r24, r18
    4db4:	06 97       	sbiw	r24, 0x06	; 6
    4db6:	03 97       	sbiw	r24, 0x03	; 3
    4db8:	10 f4       	brcc	.+4      	; 0x4dbe <main+0xdc>
	        laserPattern[lcv] = 255;
    4dba:	40 83       	st	Z, r20
    4dbc:	01 c0       	rjmp	.+2      	; 0x4dc0 <main+0xde>
		else
			laserPattern[lcv] = 0;
    4dbe:	10 82       	st	Z, r1
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    { function_X[lcv] = function_Y[lcv] = 10;  }// here we use 10 as the equivalent for 1 V.
	
	
	//initialize laser pattern
	for (lcv = 0; lcv < 125; lcv++)
    4dc0:	2f 5f       	subi	r18, 0xFF	; 255
    4dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    4dc4:	31 96       	adiw	r30, 0x01	; 1
    4dc6:	2d 37       	cpi	r18, 0x7D	; 125
    4dc8:	31 05       	cpc	r19, r1
    4dca:	81 f7       	brne	.-32     	; 0x4dac <main+0xca>
			laserPattern[lcv] = 0;
	}
	
    
    //initilializations
    X_pos_index = Y_pos_index = index_x = index_y = 0;
    4dcc:	10 92 72 28 	sts	0x2872, r1
    4dd0:	10 92 73 28 	sts	0x2873, r1
    4dd4:	80 91 72 28 	lds	r24, 0x2872
    4dd8:	90 91 73 28 	lds	r25, 0x2873
    4ddc:	80 93 ce 26 	sts	0x26CE, r24
    4de0:	90 93 cf 26 	sts	0x26CF, r25
    4de4:	80 91 ce 26 	lds	r24, 0x26CE
    4de8:	90 91 cf 26 	lds	r25, 0x26CF
    4dec:	80 93 91 25 	sts	0x2591, r24
    4df0:	90 93 92 25 	sts	0x2592, r25
    4df4:	80 93 1f 26 	sts	0x261F, r24
    4df8:	90 93 20 26 	sts	0x2620, r25
    bias_x = bias_y = 0;
    4dfc:	10 92 c0 2a 	sts	0x2AC0, r1
    4e00:	10 92 c1 2a 	sts	0x2AC1, r1
    4e04:	10 92 b5 24 	sts	0x24B5, r1
    4e08:	10 92 b6 24 	sts	0x24B6, r1
    gain_x = gain_y = 0;
    4e0c:	10 92 d0 26 	sts	0x26D0, r1
    4e10:	10 92 d1 26 	sts	0x26D1, r1
    4e14:	10 92 0b 27 	sts	0x270B, r1
    4e18:	10 92 0c 27 	sts	0x270C, r1
    x_mode = y_mode = 0;
    4e1c:	10 92 0a 27 	sts	0x270A, r1
    4e20:	10 92 cc 26 	sts	0x26CC, r1
    gs_value = 1;
    4e24:	81 e0       	ldi	r24, 0x01	; 1
    4e26:	80 93 4a 26 	sts	0x264A, r24
    row_compress = 0;
    4e2a:	10 92 c8 24 	sts	0x24C8, r1
    ident_compress = 0; // enable this to substitute simpler panael pattern for uniform pattern patches
    4e2e:	10 92 9d 28 	sts	0x289D, r1
    
    temp = eeprom_read_byte(arena_config);
    4e32:	81 e0       	ldi	r24, 0x01	; 1
    4e34:	90 e0       	ldi	r25, 0x00	; 0
    4e36:	0e 94 19 52 	call	0xa432	; 0xa432 <__eerd_byte_x128a1>
    if (temp == 0xff)     //there is no configuration file and use default value 
    4e3a:	8f 3f       	cpi	r24, 0xFF	; 255
    4e3c:	d9 f4       	brne	.+54     	; 0x4e74 <main+0x192>
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
    4e3e:	19 82       	std	Y+1, r1	; 0x01
			chMap[b1] = b1 % 4;
			if (b1 && (chMap[b1] == 0))
				chMap[b1] = 4;
    4e40:	24 e0       	ldi	r18, 0x04	; 4
    4e42:	14 c0       	rjmp	.+40     	; 0x4e6c <main+0x18a>
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
			chMap[b1] = b1 % 4;
    4e44:	e8 2f       	mov	r30, r24
    4e46:	f0 e0       	ldi	r31, 0x00	; 0
    4e48:	e5 5b       	subi	r30, 0xB5	; 181
    4e4a:	f9 4d       	sbci	r31, 0xD9	; 217
    4e4c:	98 2f       	mov	r25, r24
    4e4e:	93 70       	andi	r25, 0x03	; 3
    4e50:	90 83       	st	Z, r25
			if (b1 && (chMap[b1] == 0))
    4e52:	88 23       	and	r24, r24
    4e54:	19 f0       	breq	.+6      	; 0x4e5c <main+0x17a>
    4e56:	99 23       	and	r25, r25
    4e58:	09 f4       	brne	.+2      	; 0x4e5c <main+0x17a>
				chMap[b1] = 4;
    4e5a:	20 83       	st	Z, r18
			adrMap[b1] = b1; // panel address identity mapping
    4e5c:	89 81       	ldd	r24, Y+1	; 0x01
    4e5e:	e8 2f       	mov	r30, r24
    4e60:	f0 e0       	ldi	r31, 0x00	; 0
    4e62:	ef 50       	subi	r30, 0x0F	; 15
    4e64:	f8 4d       	sbci	r31, 0xD8	; 216
    4e66:	80 83       	st	Z, r24
    ident_compress = 0; // enable this to substitute simpler panael pattern for uniform pattern patches
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
    4e68:	8f 5f       	subi	r24, 0xFF	; 255
    4e6a:	89 83       	std	Y+1, r24	; 0x01
    4e6c:	89 81       	ldd	r24, Y+1	; 0x01
    4e6e:	81 38       	cpi	r24, 0x81	; 129
    4e70:	48 f3       	brcs	.-46     	; 0x4e44 <main+0x162>
    4e72:	17 c0       	rjmp	.+46     	; 0x4ea2 <main+0x1c0>
				chMap[b1] = 4;
			adrMap[b1] = b1; // panel address identity mapping
		}
	} else
	{//load panel mapping from EEPROM	
		for (b1 = 0; b1 <= 128; b1++) {
    4e74:	19 82       	std	Y+1, r1	; 0x01
    4e76:	11 c0       	rjmp	.+34     	; 0x4e9a <main+0x1b8>
			chMap[b1] = eeprom_read_byte(arena_config + b1);
    4e78:	0f 2d       	mov	r16, r15
    4e7a:	10 e0       	ldi	r17, 0x00	; 0
    4e7c:	c8 01       	movw	r24, r16
    4e7e:	8f 5f       	subi	r24, 0xFF	; 255
    4e80:	9f 4f       	sbci	r25, 0xFF	; 255
    4e82:	0e 94 19 52 	call	0xa432	; 0xa432 <__eerd_byte_x128a1>
    4e86:	f8 01       	movw	r30, r16
    4e88:	e5 5b       	subi	r30, 0xB5	; 181
    4e8a:	f9 4d       	sbci	r31, 0xD9	; 217
    4e8c:	80 83       	st	Z, r24
			adrMap[b1] = b1; // panel address identity mapping
    4e8e:	0f 50       	subi	r16, 0x0F	; 15
    4e90:	18 4d       	sbci	r17, 0xD8	; 216
    4e92:	f8 01       	movw	r30, r16
    4e94:	f0 82       	st	Z, r15
				chMap[b1] = 4;
			adrMap[b1] = b1; // panel address identity mapping
		}
	} else
	{//load panel mapping from EEPROM	
		for (b1 = 0; b1 <= 128; b1++) {
    4e96:	f3 94       	inc	r15
    4e98:	f9 82       	std	Y+1, r15	; 0x01
    4e9a:	f9 80       	ldd	r15, Y+1	; 0x01
    4e9c:	f0 e8       	ldi	r31, 0x80	; 128
    4e9e:	ff 15       	cp	r31, r15
    4ea0:	58 f7       	brcc	.-42     	; 0x4e78 <main+0x196>
			chMap[b1] = eeprom_read_byte(arena_config + b1);
			adrMap[b1] = b1; // panel address identity mapping
		}
    }
    
    xputs(PSTR("\nMain Controller Works\n"));
    4ea2:	85 ec       	ldi	r24, 0xC5	; 197
    4ea4:	9e e0       	ldi	r25, 0x0E	; 14
    4ea6:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    4eaa:	81 e0       	ldi	r24, 0x01	; 1
    4eac:	61 e0       	ldi	r22, 0x01	; 1
    4eae:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <ledWrite>
    4eb2:	01 e0       	ldi	r16, 0x01	; 1
    4eb4:	60 e2       	ldi	r22, 0x20	; 32
    4eb6:	c6 2e       	mov	r12, r22
    4eb8:	63 e0       	ldi	r22, 0x03	; 3
    4eba:	d6 2e       	mov	r13, r22
    4ebc:	3a c0       	rjmp	.+116    	; 0x4f32 <main+0x250>
    sta = STA_NOINIT;
    while (sta & STA_NOINIT) {
        sta = disk_status(0);
    4ebe:	80 e0       	ldi	r24, 0x00	; 0
    4ec0:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <disk_status>
    4ec4:	08 2f       	mov	r16, r24
        if(sta & STA_NODISK) {
    4ec6:	81 ff       	sbrs	r24, 1
    4ec8:	0d c0       	rjmp	.+26     	; 0x4ee4 <main+0x202>
            xputs(PSTR("Insert SD card"));
    4eca:	86 eb       	ldi	r24, 0xB6	; 182
    4ecc:	9e e0       	ldi	r25, 0x0E	; 14
    4ece:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
            uart_crlf();
    4ed2:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <uart_crlf>
    4ed6:	04 c0       	rjmp	.+8      	; 0x4ee0 <main+0x1fe>
            while (sta & STA_NODISK) {
                sta = disk_status(0);
    4ed8:	80 e0       	ldi	r24, 0x00	; 0
    4eda:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <disk_status>
    4ede:	08 2f       	mov	r16, r24
    while (sta & STA_NOINIT) {
        sta = disk_status(0);
        if(sta & STA_NODISK) {
            xputs(PSTR("Insert SD card"));
            uart_crlf();
            while (sta & STA_NODISK) {
    4ee0:	01 fd       	sbrc	r16, 1
    4ee2:	fa cf       	rjmp	.-12     	; 0x4ed8 <main+0x1f6>
                sta = disk_status(0);
            }
        }
        if(sta & STA_PROTECT) {
    4ee4:	02 ff       	sbrs	r16, 2
    4ee6:	04 c0       	rjmp	.+8      	; 0x4ef0 <main+0x20e>
            xputs(PSTR("SD card is Write Protected!\n"));
    4ee8:	89 e9       	ldi	r24, 0x99	; 153
    4eea:	9e e0       	ldi	r25, 0x0E	; 14
    4eec:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; ) {
    4ef0:	19 82       	std	Y+1, r1	; 0x01
    4ef2:	10 c0       	rjmp	.+32     	; 0x4f14 <main+0x232>
            sta = disk_initialize(0);
    4ef4:	80 e0       	ldi	r24, 0x00	; 0
    4ef6:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <disk_initialize>
    4efa:	08 2f       	mov	r16, r24
            if(sta & STA_NOINIT) b1++;
    4efc:	80 ff       	sbrs	r24, 0
    4efe:	0d c0       	rjmp	.+26     	; 0x4f1a <main+0x238>
    4f00:	89 81       	ldd	r24, Y+1	; 0x01
    4f02:	8f 5f       	subi	r24, 0xFF	; 255
    4f04:	89 83       	std	Y+1, r24	; 0x01
    4f06:	84 ef       	ldi	r24, 0xF4	; 244
    4f08:	91 e0       	ldi	r25, 0x01	; 1
    4f0a:	f6 01       	movw	r30, r12
    4f0c:	31 97       	sbiw	r30, 0x01	; 1
    4f0e:	f1 f7       	brne	.-4      	; 0x4f0c <main+0x22a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f10:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f12:	d9 f7       	brne	.-10     	; 0x4f0a <main+0x228>
        }
        if(sta & STA_PROTECT) {
            xputs(PSTR("SD card is Write Protected!\n"));
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; ) {
    4f14:	89 81       	ldd	r24, Y+1	; 0x01
    4f16:	84 30       	cpi	r24, 0x04	; 4
    4f18:	68 f3       	brcs	.-38     	; 0x4ef4 <main+0x212>
            sta = disk_initialize(0);
            if(sta & STA_NOINIT) b1++;
            else break;
            _delay_ms(50);
        }
        if(sta & STA_NOINIT) {
    4f1a:	00 ff       	sbrs	r16, 0
    4f1c:	0a c0       	rjmp	.+20     	; 0x4f32 <main+0x250>
            xputs(PSTR("Initialization failed!!!\n"));
    4f1e:	8f e7       	ldi	r24, 0x7F	; 127
    4f20:	9e e0       	ldi	r25, 0x0E	; 14
    4f22:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
            sta = disk_status(0);
            while (!(sta & STA_NODISK)) {
                sta = disk_status(0);
    4f26:	80 e0       	ldi	r24, 0x00	; 0
    4f28:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <disk_status>
    4f2c:	08 2f       	mov	r16, r24
            _delay_ms(50);
        }
        if(sta & STA_NOINIT) {
            xputs(PSTR("Initialization failed!!!\n"));
            sta = disk_status(0);
            while (!(sta & STA_NODISK)) {
    4f2e:	81 ff       	sbrs	r24, 1
    4f30:	fa cf       	rjmp	.-12     	; 0x4f26 <main+0x244>
    xputs(PSTR("\nMain Controller Works\n"));
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    sta = STA_NOINIT;
    while (sta & STA_NOINIT) {
    4f32:	00 fd       	sbrc	r16, 0
    4f34:	c4 cf       	rjmp	.-120    	; 0x4ebe <main+0x1dc>
            while (!(sta & STA_NODISK)) {
                sta = disk_status(0);
            }
        }
    }
    xputs(PSTR("SD card is initialized\n"));
    4f36:	87 e6       	ldi	r24, 0x67	; 103
    4f38:	9e e0       	ldi	r25, 0x0E	; 14
    4f3a:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    
    if (disk_ioctl(0, MMC_GET_TYPE, &b1) == RES_OK) {
    4f3e:	80 e0       	ldi	r24, 0x00	; 0
    4f40:	6a e0       	ldi	r22, 0x0A	; 10
    4f42:	ae 01       	movw	r20, r28
    4f44:	4f 5f       	subi	r20, 0xFF	; 255
    4f46:	5f 4f       	sbci	r21, 0xFF	; 255
    4f48:	0e 94 3b 48 	call	0x9076	; 0x9076 <disk_ioctl>
    4f4c:	89 2b       	or	r24, r25
    4f4e:	59 f5       	brne	.+86     	; 0x4fa6 <main+0x2c4>
        xputs(PSTR("Card type: "));
    4f50:	8b e5       	ldi	r24, 0x5B	; 91
    4f52:	9e e0       	ldi	r25, 0x0E	; 14
    4f54:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
        switch(b1) {
    4f58:	89 81       	ldd	r24, Y+1	; 0x01
    4f5a:	84 30       	cpi	r24, 0x04	; 4
    4f5c:	a1 f0       	breq	.+40     	; 0x4f86 <main+0x2a4>
    4f5e:	85 30       	cpi	r24, 0x05	; 5
    4f60:	28 f4       	brcc	.+10     	; 0x4f6c <main+0x28a>
    4f62:	81 30       	cpi	r24, 0x01	; 1
    4f64:	51 f0       	breq	.+20     	; 0x4f7a <main+0x298>
    4f66:	82 30       	cpi	r24, 0x02	; 2
    4f68:	d1 f4       	brne	.+52     	; 0x4f9e <main+0x2bc>
    4f6a:	0a c0       	rjmp	.+20     	; 0x4f80 <main+0x29e>
    4f6c:	88 30       	cpi	r24, 0x08	; 8
    4f6e:	89 f0       	breq	.+34     	; 0x4f92 <main+0x2b0>
    4f70:	8c 30       	cpi	r24, 0x0C	; 12
    4f72:	91 f0       	breq	.+36     	; 0x4f98 <main+0x2b6>
    4f74:	86 30       	cpi	r24, 0x06	; 6
    4f76:	99 f4       	brne	.+38     	; 0x4f9e <main+0x2bc>
    4f78:	09 c0       	rjmp	.+18     	; 0x4f8c <main+0x2aa>
            case CT_MMC: xputs(PSTR("MMC\n")); break;
    4f7a:	86 e5       	ldi	r24, 0x56	; 86
    4f7c:	9e e0       	ldi	r25, 0x0E	; 14
    4f7e:	11 c0       	rjmp	.+34     	; 0x4fa2 <main+0x2c0>
            case CT_SD1: xputs(PSTR("SD\n")); break;
    4f80:	82 e5       	ldi	r24, 0x52	; 82
    4f82:	9e e0       	ldi	r25, 0x0E	; 14
    4f84:	0e c0       	rjmp	.+28     	; 0x4fa2 <main+0x2c0>
            case CT_SD2: xputs(PSTR("SD2\n")); break;
    4f86:	8d e4       	ldi	r24, 0x4D	; 77
    4f88:	9e e0       	ldi	r25, 0x0E	; 14
    4f8a:	0b c0       	rjmp	.+22     	; 0x4fa2 <main+0x2c0>
            case CT_SDC: xputs(PSTR("SDC\n")); break;
    4f8c:	88 e4       	ldi	r24, 0x48	; 72
    4f8e:	9e e0       	ldi	r25, 0x0E	; 14
    4f90:	08 c0       	rjmp	.+16     	; 0x4fa2 <main+0x2c0>
            case CT_BLOCK: xputs(PSTR("BLK\n")); break;
    4f92:	83 e4       	ldi	r24, 0x43	; 67
    4f94:	9e e0       	ldi	r25, 0x0E	; 14
    4f96:	05 c0       	rjmp	.+10     	; 0x4fa2 <main+0x2c0>
            case CT_SD2_BLK: xputs(PSTR("SDHC\n")); break;
    4f98:	8d e3       	ldi	r24, 0x3D	; 61
    4f9a:	9e e0       	ldi	r25, 0x0E	; 14
    4f9c:	02 c0       	rjmp	.+4      	; 0x4fa2 <main+0x2c0>
            default: xputs(PSTR("???\n"));
    4f9e:	88 e3       	ldi	r24, 0x38	; 56
    4fa0:	9e e0       	ldi	r25, 0x0E	; 14
    4fa2:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
        }
    }
    
    xputs(PSTR("Initializing FAT Disk..."));
    4fa6:	8f e1       	ldi	r24, 0x1F	; 31
    4fa8:	9e e0       	ldi	r25, 0x0E	; 14
    4faa:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    res = f_mount(0, &fatfs);
    4fae:	80 e0       	ldi	r24, 0x00	; 0
    4fb0:	6e e9       	ldi	r22, 0x9E	; 158
    4fb2:	78 e2       	ldi	r23, 0x28	; 40
    4fb4:	0e 94 b0 3a 	call	0x7560	; 0x7560 <f_mount>
    switch(res) {
    4fb8:	81 30       	cpi	r24, 0x01	; 1
    4fba:	51 f0       	breq	.+20     	; 0x4fd0 <main+0x2ee>
    4fbc:	81 30       	cpi	r24, 0x01	; 1
    4fbe:	28 f0       	brcs	.+10     	; 0x4fca <main+0x2e8>
    4fc0:	82 30       	cpi	r24, 0x02	; 2
    4fc2:	49 f0       	breq	.+18     	; 0x4fd6 <main+0x2f4>
    4fc4:	83 30       	cpi	r24, 0x03	; 3
    4fc6:	69 f4       	brne	.+26     	; 0x4fe2 <main+0x300>
    4fc8:	09 c0       	rjmp	.+18     	; 0x4fdc <main+0x2fa>
        case RES_OK: xputs(PSTR(" FAT OK!\n")); break;
    4fca:	85 e1       	ldi	r24, 0x15	; 21
    4fcc:	9e e0       	ldi	r25, 0x0E	; 14
    4fce:	0b c0       	rjmp	.+22     	; 0x4fe6 <main+0x304>
        case RES_ERROR: xputs(PSTR(" ERROR!\n")); break;
    4fd0:	8c e0       	ldi	r24, 0x0C	; 12
    4fd2:	9e e0       	ldi	r25, 0x0E	; 14
    4fd4:	08 c0       	rjmp	.+16     	; 0x4fe6 <main+0x304>
        case RES_WRPRT: xputs(PSTR(" WRITE PROTECTED!\n")); break;
    4fd6:	89 ef       	ldi	r24, 0xF9	; 249
    4fd8:	9d e0       	ldi	r25, 0x0D	; 13
    4fda:	05 c0       	rjmp	.+10     	; 0x4fe6 <main+0x304>
        case RES_NOTRDY: xputs(PSTR(" NOT READY!\n")); break;
    4fdc:	8c ee       	ldi	r24, 0xEC	; 236
    4fde:	9d e0       	ldi	r25, 0x0D	; 13
    4fe0:	02 c0       	rjmp	.+4      	; 0x4fe6 <main+0x304>
        default: xputs(PSTR("???\n"));
    4fe2:	87 ee       	ldi	r24, 0xE7	; 231
    4fe4:	9d e0       	ldi	r25, 0x0D	; 13
    4fe6:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    }
    
    
    i2cMasterSend(0x00, 8, ALL_OFF);
    4fea:	80 e0       	ldi	r24, 0x00	; 0
    4fec:	68 e0       	ldi	r22, 0x08	; 8
    4fee:	49 e3       	ldi	r20, 0x39	; 57
    4ff0:	54 e2       	ldi	r21, 0x24	; 36
    4ff2:	0e 94 8a 14 	call	0x2914	; 0x2914 <i2cMasterSend>
    ledWrite(LED1, OFF);
    4ff6:	81 e0       	ldi	r24, 0x01	; 1
    4ff8:	60 e0       	ldi	r22, 0x00	; 0
    4ffa:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <ledWrite>
    ledBlink();
    4ffe:	0e 94 29 2a 	call	0x5452	; 0x5452 <ledBlink>
    // Here the EEPROM location 0 is used as a switch between Controller and PCDump mode
    // An alternative is to base the switch on the SD config file
    if (workingModes == 0xff) {
    5002:	8f ef       	ldi	r24, 0xFF	; 255
    5004:	e8 16       	cp	r14, r24
    5006:	09 f0       	breq	.+2      	; 0x500a <main+0x328>
    5008:	e2 c0       	rjmp	.+452    	; 0x51ce <main+0x4ec>
        uint8_t msg_buffer[65];
		xputs(PSTR("Current working mode is the Controller mode!\n"));
    500a:	89 eb       	ldi	r24, 0xB9	; 185
    500c:	9d e0       	ldi	r25, 0x0D	; 13
    500e:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    5012:	57 ee       	ldi	r21, 0xE7	; 231
    5014:	a5 2e       	mov	r10, r21
    5016:	53 e0       	ldi	r21, 0x03	; 3
    5018:	b5 2e       	mov	r11, r21
    501a:	47 ec       	ldi	r20, 0xC7	; 199
    501c:	94 2e       	mov	r9, r20
    501e:	37 ec       	ldi	r19, 0xC7	; 199
    5020:	83 2e       	mov	r8, r19
		
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    5022:	22 e0       	ldi	r18, 0x02	; 2
    5024:	c2 2e       	mov	r12, r18
    5026:	d1 2c       	mov	r13, r1
    5028:	cc 0e       	add	r12, r28
    502a:	dd 1e       	adc	r13, r29
    502c:	03 c0       	rjmp	.+6      	; 0x5034 <main+0x352>
    ledBlink();
    // Here the EEPROM location 0 is used as a switch between Controller and PCDump mode
    // An alternative is to base the switch on the SD config file
    if (workingModes == 0xff) {
        uint8_t msg_buffer[65];
		xputs(PSTR("Current working mode is the Controller mode!\n"));
    502e:	08 2d       	mov	r16, r8
    5030:	57 01       	movw	r10, r14
    5032:	48 01       	movw	r8, r16
		
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
    5034:	0e 94 8c 36 	call	0x6d18	; 0x6d18 <uart_test>
    5038:	89 2b       	or	r24, r25
    503a:	09 f4       	brne	.+2      	; 0x503e <main+0x35c>
    503c:	53 c0       	rjmp	.+166    	; 0x50e4 <main+0x402>
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    503e:	c6 01       	movw	r24, r12
    5040:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <fill_Rx_buffer>
                switch(message_length) {
    5044:	84 30       	cpi	r24, 0x04	; 4
    5046:	91 05       	cpc	r25, r1
    5048:	39 f1       	breq	.+78     	; 0x5098 <main+0x3b6>
    504a:	85 30       	cpi	r24, 0x05	; 5
    504c:	91 05       	cpc	r25, r1
    504e:	48 f4       	brcc	.+18     	; 0x5062 <main+0x380>
    5050:	82 30       	cpi	r24, 0x02	; 2
    5052:	91 05       	cpc	r25, r1
    5054:	c9 f0       	breq	.+50     	; 0x5088 <main+0x3a6>
    5056:	83 30       	cpi	r24, 0x03	; 3
    5058:	91 05       	cpc	r25, r1
    505a:	d0 f4       	brcc	.+52     	; 0x5090 <main+0x3ae>
    505c:	01 97       	sbiw	r24, 0x01	; 1
    505e:	e1 f5       	brne	.+120    	; 0x50d8 <main+0x3f6>
    5060:	0f c0       	rjmp	.+30     	; 0x5080 <main+0x39e>
    5062:	89 30       	cpi	r24, 0x09	; 9
    5064:	91 05       	cpc	r25, r1
    5066:	01 f1       	breq	.+64     	; 0x50a8 <main+0x3c6>
    5068:	8a 30       	cpi	r24, 0x0A	; 10
    506a:	91 05       	cpc	r25, r1
    506c:	18 f4       	brcc	.+6      	; 0x5074 <main+0x392>
    506e:	05 97       	sbiw	r24, 0x05	; 5
    5070:	99 f5       	brne	.+102    	; 0x50d8 <main+0x3f6>
    5072:	16 c0       	rjmp	.+44     	; 0x50a0 <main+0x3be>
    5074:	8e 33       	cpi	r24, 0x3E	; 62
    5076:	91 05       	cpc	r25, r1
    5078:	d9 f0       	breq	.+54     	; 0x50b0 <main+0x3ce>
    507a:	cf 97       	sbiw	r24, 0x3f	; 63
    507c:	69 f5       	brne	.+90     	; 0x50d8 <main+0x3f6>
    507e:	28 c0       	rjmp	.+80     	; 0x50d0 <main+0x3ee>
                    case 1:  // if length 1, then decode...
                        handle_message_length_1(&msg_buffer[0]);
    5080:	c6 01       	movw	r24, r12
    5082:	0e 94 18 22 	call	0x4430	; 0x4430 <handle_message_length_1>
    5086:	2e c0       	rjmp	.+92     	; 0x50e4 <main+0x402>
                        break;
                    case 2: // if length 2, then decode, could be reset, display num, or change pat
                        handle_message_length_2(&msg_buffer[0]);
    5088:	c6 01       	movw	r24, r12
    508a:	0e 94 bf 21 	call	0x437e	; 0x437e <handle_message_length_2>
    508e:	2a c0       	rjmp	.+84     	; 0x50e4 <main+0x402>
                        break;
                    case 3: // if length 3, then decode...address change or ...
                        handle_message_length_3(&msg_buffer[0]);
    5090:	c6 01       	movw	r24, r12
    5092:	0e 94 5f 15 	call	0x2abe	; 0x2abe <handle_message_length_3>
    5096:	26 c0       	rjmp	.+76     	; 0x50e4 <main+0x402>
                        break;
					case 4:
						handle_message_length_4(&msg_buffer[0]);
    5098:	c6 01       	movw	r24, r12
    509a:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <handle_message_length_4>
    509e:	22 c0       	rjmp	.+68     	; 0x50e4 <main+0x402>
						break;
                    case 5: // if length 5, then decode
                        handle_message_length_5(&msg_buffer[0]);
    50a0:	c6 01       	movw	r24, r12
    50a2:	0e 94 25 21 	call	0x424a	; 0x424a <handle_message_length_5>
    50a6:	1e c0       	rjmp	.+60     	; 0x50e4 <main+0x402>
                        break;
					case 9: // if length 9, then decode, set x,y index, or set gain, bias
                        handle_message_length_9(&msg_buffer[0]);
    50a8:	c6 01       	movw	r24, r12
    50aa:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <handle_message_length_9>
    50ae:	1a c0       	rjmp	.+52     	; 0x50e4 <main+0x402>
                        break;
    50b0:	20 e0       	ldi	r18, 0x00	; 0
    50b2:	30 e0       	ldi	r19, 0x00	; 0
{   
	uint8_t i;

	for (i = 0; i<62; i++)
	{
		laserPattern[i] = msg_buffer[i];
    50b4:	f9 01       	movw	r30, r18
    50b6:	ee 55       	subi	r30, 0x5E	; 94
    50b8:	fa 4d       	sbci	r31, 0xDA	; 218
    50ba:	d6 01       	movw	r26, r12
    50bc:	a2 0f       	add	r26, r18
    50be:	b3 1f       	adc	r27, r19
    50c0:	8c 91       	ld	r24, X
    50c2:	80 83       	st	Z, r24
    50c4:	2f 5f       	subi	r18, 0xFF	; 255
    50c6:	3f 4f       	sbci	r19, 0xFF	; 255
			
void handle_message_length_62(uint8_t *msg_buffer)
{   
	uint8_t i;

	for (i = 0; i<62; i++)
    50c8:	2e 33       	cpi	r18, 0x3E	; 62
    50ca:	31 05       	cpc	r19, r1
    50cc:	99 f7       	brne	.-26     	; 0x50b4 <main+0x3d2>
    50ce:	0a c0       	rjmp	.+20     	; 0x50e4 <main+0x402>
                        break;
                    case 62: //if length 62, then set laser trigger pattern first 62 byte
                        handle_message_length_62(&msg_buffer[0]);
                        break;
					case 63: //if length 63, then set laser trigger pattern second 63 byte
                        handle_message_length_63(&msg_buffer[0]);
    50d0:	c6 01       	movw	r24, r12
    50d2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <handle_message_length_63>
    50d6:	06 c0       	rjmp	.+12     	; 0x50e4 <main+0x402>
                        break;	
                    default:
                        i2cMasterSend(0x00, 8, ERROR_CODES[7]);
    50d8:	80 e0       	ldi	r24, 0x00	; 0
    50da:	68 e0       	ldi	r22, 0x08	; 8
    50dc:	48 ef       	ldi	r20, 0xF8	; 248
    50de:	50 e2       	ldi	r21, 0x20	; 32
    50e0:	0e 94 8a 14 	call	0x2914	; 0x2914 <i2cMasterSend>
                } //end of switch
            }// end of if, goes to top if nothing received on UART
            
            // at bottom of while(1) loop, check to see if stop is 0, then unpdate display if the frame has changed.
			// Also update the function buffer
            if (Stop == 0){  //only send out new pattern if the pattern index has change
    50e4:	80 91 9c 20 	lds	r24, 0x209C
    50e8:	88 23       	and	r24, r24
    50ea:	09 f0       	breq	.+2      	; 0x50ee <main+0x40c>
    50ec:	a3 cf       	rjmp	.-186    	; 0x5034 <main+0x352>
                if (frame_num != frame_num_old) {
    50ee:	e0 90 04 24 	lds	r14, 0x2404
    50f2:	f0 90 05 24 	lds	r15, 0x2405
    50f6:	ea 14       	cp	r14, r10
    50f8:	fb 04       	cpc	r15, r11
    50fa:	29 f1       	breq	.+74     	; 0x5146 <main+0x464>
                    frame_num_old = frame_num; //update the 'old' frame number	
    50fc:	e0 90 04 24 	lds	r14, 0x2404
    5100:	f0 90 05 24 	lds	r15, 0x2405
					if (usePreloadedPattern == 1)
    5104:	80 91 02 24 	lds	r24, 0x2402
    5108:	81 30       	cpi	r24, 0x01	; 1
    510a:	79 f4       	brne	.+30     	; 0x512a <main+0x448>
						display_preload_frame(frame_num, index_x, index_y);
    510c:	80 91 04 24 	lds	r24, 0x2404
    5110:	90 91 05 24 	lds	r25, 0x2405
    5114:	60 91 ce 26 	lds	r22, 0x26CE
    5118:	70 91 cf 26 	lds	r23, 0x26CF
    511c:	40 91 72 28 	lds	r20, 0x2872
    5120:	50 91 73 28 	lds	r21, 0x2873
    5124:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <display_preload_frame>
    5128:	0e c0       	rjmp	.+28     	; 0x5146 <main+0x464>
					else
						fetch_display_frame(frame_num, index_x, index_y);
    512a:	80 91 04 24 	lds	r24, 0x2404
    512e:	90 91 05 24 	lds	r25, 0x2405
    5132:	60 91 ce 26 	lds	r22, 0x26CE
    5136:	70 91 cf 26 	lds	r23, 0x26CF
    513a:	40 91 72 28 	lds	r20, 0x2872
    513e:	50 91 73 28 	lds	r21, 0x2873
    5142:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <fetch_display_frame>
                }
				
				//func_buffer_size_x in word, 2 bytes.
				if ((default_func_x == 0) && (func_buffer_size_x <= FUNCTION_LENGTH/4) && (func_read_index_x != func_idx_x_old))
    5146:	80 91 a3 20 	lds	r24, 0x20A3
    514a:	88 23       	and	r24, r24
    514c:	e1 f4       	brne	.+56     	; 0x5186 <main+0x4a4>
    514e:	80 91 0a 24 	lds	r24, 0x240A
    5152:	8a 31       	cpi	r24, 0x1A	; 26
    5154:	c0 f4       	brcc	.+48     	; 0x5186 <main+0x4a4>
    5156:	10 91 06 24 	lds	r17, 0x2406
    515a:	19 15       	cp	r17, r9
    515c:	a9 f0       	breq	.+42     	; 0x5188 <main+0x4a6>
				{					
					func_idx_x_old = func_read_index_x;
    515e:	10 91 06 24 	lds	r17, 0x2406
					fetch_update_funcX(0, next_block_x);  
    5162:	60 91 a1 20 	lds	r22, 0x20A1
    5166:	80 e0       	ldi	r24, 0x00	; 0
    5168:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <fetch_update_funcX>
					next_block_x = (next_block_x + 1)%num_buffer_load_x; 
    516c:	80 91 a1 20 	lds	r24, 0x20A1
    5170:	90 e0       	ldi	r25, 0x00	; 0
    5172:	60 91 b4 20 	lds	r22, 0x20B4
    5176:	70 91 b5 20 	lds	r23, 0x20B5
    517a:	01 96       	adiw	r24, 0x01	; 1
    517c:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <__udivmodhi4>
    5180:	80 93 a1 20 	sts	0x20A1, r24
    5184:	01 c0       	rjmp	.+2      	; 0x5188 <main+0x4a6>
    5186:	19 2d       	mov	r17, r9
//xprintf(PSTR("func_buffer_size_x=%u, func_read_index_x=%u\n"), func_buffer_size_x, func_read_index_x);
				}

				if ((default_func_y == 0) && (func_buffer_size_y <= FUNCTION_LENGTH/4) && (func_read_index_y != func_idx_y_old))
    5188:	80 91 a4 20 	lds	r24, 0x20A4
    518c:	88 23       	and	r24, r24
    518e:	09 f0       	breq	.+2      	; 0x5192 <main+0x4b0>
    5190:	4e cf       	rjmp	.-356    	; 0x502e <main+0x34c>
    5192:	80 91 0b 24 	lds	r24, 0x240B
    5196:	8a 31       	cpi	r24, 0x1A	; 26
    5198:	08 f0       	brcs	.+2      	; 0x519c <main+0x4ba>
    519a:	49 cf       	rjmp	.-366    	; 0x502e <main+0x34c>
    519c:	00 91 07 24 	lds	r16, 0x2407
    51a0:	08 15       	cp	r16, r8
    51a2:	09 f4       	brne	.+2      	; 0x51a6 <main+0x4c4>
    51a4:	45 cf       	rjmp	.-374    	; 0x5030 <main+0x34e>
				{					
					func_idx_y_old = func_read_index_y;
    51a6:	00 91 07 24 	lds	r16, 0x2407
					fetch_update_funcY(0, next_block_y);	
    51aa:	60 91 a2 20 	lds	r22, 0x20A2
    51ae:	80 e0       	ldi	r24, 0x00	; 0
    51b0:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <fetch_update_funcY>
					next_block_y = (next_block_y + 1)%num_buffer_load_y; 
    51b4:	80 91 a2 20 	lds	r24, 0x20A2
    51b8:	90 e0       	ldi	r25, 0x00	; 0
    51ba:	60 91 b6 20 	lds	r22, 0x20B6
    51be:	70 91 b7 20 	lds	r23, 0x20B7
    51c2:	01 96       	adiw	r24, 0x01	; 1
    51c4:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <__udivmodhi4>
    51c8:	80 93 a2 20 	sts	0x20A2, r24
    51cc:	31 cf       	rjmp	.-414    	; 0x5030 <main+0x34e>

			}
		}
    } else {
        uint8_t msg_buffer[1550];
		xputs(PSTR("Current working mode is the PC dumping mode!\n"));
    51ce:	8b e8       	ldi	r24, 0x8B	; 139
    51d0:	9d e0       	ldi	r25, 0x0D	; 13
    51d2:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    51d6:	8e 01       	movw	r16, r28
    51d8:	0d 5b       	subi	r16, 0xBD	; 189
    51da:	1f 4f       	sbci	r17, 0xFF	; 255
		}
    } else {
        uint8_t msg_buffer[1550];
		xputs(PSTR("Current working mode is the PC dumping mode!\n"));
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
    51dc:	0e 94 8c 36 	call	0x6d18	; 0x6d18 <uart_test>
    51e0:	89 2b       	or	r24, r25
    51e2:	e1 f3       	breq	.-8      	; 0x51dc <main+0x4fa>
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    51e4:	c8 01       	movw	r24, r16
    51e6:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <fill_Rx_buffer>
                switch(message_length) {
    51ea:	81 30       	cpi	r24, 0x01	; 1
    51ec:	91 05       	cpc	r25, r1
    51ee:	19 f0       	breq	.+6      	; 0x51f6 <main+0x514>
    51f0:	c2 97       	sbiw	r24, 0x32	; 50
    51f2:	49 f4       	brne	.+18     	; 0x5206 <main+0x524>
    51f4:	04 c0       	rjmp	.+8      	; 0x51fe <main+0x51c>
                    case 1:  // if length 1, then decode...
                        handle_message_length_1(&msg_buffer[0]);
    51f6:	c8 01       	movw	r24, r16
    51f8:	0e 94 18 22 	call	0x4430	; 0x4430 <handle_message_length_1>
    51fc:	ef cf       	rjmp	.-34     	; 0x51dc <main+0x4fa>
                        break;
                    //case 2: // if length 2, then decode, could be reset, display num, or change pat
                    //    handle_message_length_2(&msg_buffer[0]);
                    //    break;
                    case 50: //
                        display_dumped_frame(&msg_buffer[0]);
    51fe:	c8 01       	movw	r24, r16
    5200:	0e 94 aa 1c 	call	0x3954	; 0x3954 <display_dumped_frame>
    5204:	eb cf       	rjmp	.-42     	; 0x51dc <main+0x4fa>
                        break;
                    default:			
                        i2cMasterSend(0x00, 8, ERROR_CODES[8]);
    5206:	80 e0       	ldi	r24, 0x00	; 0
    5208:	68 e0       	ldi	r22, 0x08	; 8
    520a:	40 e0       	ldi	r20, 0x00	; 0
    520c:	51 e2       	ldi	r21, 0x21	; 33
    520e:	0e 94 8a 14 	call	0x2914	; 0x2914 <i2cMasterSend>
    5212:	e4 cf       	rjmp	.-56     	; 0x51dc <main+0x4fa>

00005214 <__vector_107>:

/*---------------------------------------------------------*/
/* TWIF Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIF_TWIM_vect) {
    5214:	1f 92       	push	r1
    5216:	0f 92       	push	r0
    5218:	0f b6       	in	r0, 0x3f	; 63
    521a:	0f 92       	push	r0
    521c:	08 b6       	in	r0, 0x38	; 56
    521e:	0f 92       	push	r0
    5220:	09 b6       	in	r0, 0x39	; 57
    5222:	0f 92       	push	r0
    5224:	0b b6       	in	r0, 0x3b	; 59
    5226:	0f 92       	push	r0
    5228:	11 24       	eor	r1, r1
    522a:	18 be       	out	0x38, r1	; 56
    522c:	19 be       	out	0x39, r1	; 57
    522e:	1b be       	out	0x3b, r1	; 59
    5230:	2f 93       	push	r18
    5232:	3f 93       	push	r19
    5234:	4f 93       	push	r20
    5236:	5f 93       	push	r21
    5238:	6f 93       	push	r22
    523a:	7f 93       	push	r23
    523c:	8f 93       	push	r24
    523e:	9f 93       	push	r25
    5240:	af 93       	push	r26
    5242:	bf 93       	push	r27
    5244:	ef 93       	push	r30
    5246:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi4);
    5248:	87 eb       	ldi	r24, 0xB7	; 183
    524a:	94 e2       	ldi	r25, 0x24	; 36
    524c:	0e 94 1b 3a 	call	0x7436	; 0x7436 <TWI_MasterInterruptHandler>
}
    5250:	ff 91       	pop	r31
    5252:	ef 91       	pop	r30
    5254:	bf 91       	pop	r27
    5256:	af 91       	pop	r26
    5258:	9f 91       	pop	r25
    525a:	8f 91       	pop	r24
    525c:	7f 91       	pop	r23
    525e:	6f 91       	pop	r22
    5260:	5f 91       	pop	r21
    5262:	4f 91       	pop	r20
    5264:	3f 91       	pop	r19
    5266:	2f 91       	pop	r18
    5268:	0f 90       	pop	r0
    526a:	0b be       	out	0x3b, r0	; 59
    526c:	0f 90       	pop	r0
    526e:	09 be       	out	0x39, r0	; 57
    5270:	0f 90       	pop	r0
    5272:	08 be       	out	0x38, r0	; 56
    5274:	0f 90       	pop	r0
    5276:	0f be       	out	0x3f, r0	; 63
    5278:	0f 90       	pop	r0
    527a:	1f 90       	pop	r1
    527c:	18 95       	reti

0000527e <__vector_46>:

/*---------------------------------------------------------*/
/* TWIE Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIE_TWIM_vect) {
    527e:	1f 92       	push	r1
    5280:	0f 92       	push	r0
    5282:	0f b6       	in	r0, 0x3f	; 63
    5284:	0f 92       	push	r0
    5286:	08 b6       	in	r0, 0x38	; 56
    5288:	0f 92       	push	r0
    528a:	09 b6       	in	r0, 0x39	; 57
    528c:	0f 92       	push	r0
    528e:	0b b6       	in	r0, 0x3b	; 59
    5290:	0f 92       	push	r0
    5292:	11 24       	eor	r1, r1
    5294:	18 be       	out	0x38, r1	; 56
    5296:	19 be       	out	0x39, r1	; 57
    5298:	1b be       	out	0x3b, r1	; 59
    529a:	2f 93       	push	r18
    529c:	3f 93       	push	r19
    529e:	4f 93       	push	r20
    52a0:	5f 93       	push	r21
    52a2:	6f 93       	push	r22
    52a4:	7f 93       	push	r23
    52a6:	8f 93       	push	r24
    52a8:	9f 93       	push	r25
    52aa:	af 93       	push	r26
    52ac:	bf 93       	push	r27
    52ae:	ef 93       	push	r30
    52b0:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi3);
    52b2:	8b e3       	ldi	r24, 0x3B	; 59
    52b4:	96 e2       	ldi	r25, 0x26	; 38
    52b6:	0e 94 1b 3a 	call	0x7436	; 0x7436 <TWI_MasterInterruptHandler>
}
    52ba:	ff 91       	pop	r31
    52bc:	ef 91       	pop	r30
    52be:	bf 91       	pop	r27
    52c0:	af 91       	pop	r26
    52c2:	9f 91       	pop	r25
    52c4:	8f 91       	pop	r24
    52c6:	7f 91       	pop	r23
    52c8:	6f 91       	pop	r22
    52ca:	5f 91       	pop	r21
    52cc:	4f 91       	pop	r20
    52ce:	3f 91       	pop	r19
    52d0:	2f 91       	pop	r18
    52d2:	0f 90       	pop	r0
    52d4:	0b be       	out	0x3b, r0	; 59
    52d6:	0f 90       	pop	r0
    52d8:	09 be       	out	0x39, r0	; 57
    52da:	0f 90       	pop	r0
    52dc:	08 be       	out	0x38, r0	; 56
    52de:	0f 90       	pop	r0
    52e0:	0f be       	out	0x3f, r0	; 63
    52e2:	0f 90       	pop	r0
    52e4:	1f 90       	pop	r1
    52e6:	18 95       	reti

000052e8 <__vector_76>:

/*---------------------------------------------------------*/
/* TWID Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWID_TWIM_vect) {
    52e8:	1f 92       	push	r1
    52ea:	0f 92       	push	r0
    52ec:	0f b6       	in	r0, 0x3f	; 63
    52ee:	0f 92       	push	r0
    52f0:	08 b6       	in	r0, 0x38	; 56
    52f2:	0f 92       	push	r0
    52f4:	09 b6       	in	r0, 0x39	; 57
    52f6:	0f 92       	push	r0
    52f8:	0b b6       	in	r0, 0x3b	; 59
    52fa:	0f 92       	push	r0
    52fc:	11 24       	eor	r1, r1
    52fe:	18 be       	out	0x38, r1	; 56
    5300:	19 be       	out	0x39, r1	; 57
    5302:	1b be       	out	0x3b, r1	; 59
    5304:	2f 93       	push	r18
    5306:	3f 93       	push	r19
    5308:	4f 93       	push	r20
    530a:	5f 93       	push	r21
    530c:	6f 93       	push	r22
    530e:	7f 93       	push	r23
    5310:	8f 93       	push	r24
    5312:	9f 93       	push	r25
    5314:	af 93       	push	r26
    5316:	bf 93       	push	r27
    5318:	ef 93       	push	r30
    531a:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi2);
    531c:	8e e8       	ldi	r24, 0x8E	; 142
    531e:	98 e2       	ldi	r25, 0x28	; 40
    5320:	0e 94 1b 3a 	call	0x7436	; 0x7436 <TWI_MasterInterruptHandler>
}
    5324:	ff 91       	pop	r31
    5326:	ef 91       	pop	r30
    5328:	bf 91       	pop	r27
    532a:	af 91       	pop	r26
    532c:	9f 91       	pop	r25
    532e:	8f 91       	pop	r24
    5330:	7f 91       	pop	r23
    5332:	6f 91       	pop	r22
    5334:	5f 91       	pop	r21
    5336:	4f 91       	pop	r20
    5338:	3f 91       	pop	r19
    533a:	2f 91       	pop	r18
    533c:	0f 90       	pop	r0
    533e:	0b be       	out	0x3b, r0	; 59
    5340:	0f 90       	pop	r0
    5342:	09 be       	out	0x39, r0	; 57
    5344:	0f 90       	pop	r0
    5346:	08 be       	out	0x38, r0	; 56
    5348:	0f 90       	pop	r0
    534a:	0f be       	out	0x3f, r0	; 63
    534c:	0f 90       	pop	r0
    534e:	1f 90       	pop	r1
    5350:	18 95       	reti

00005352 <__vector_13>:

/*---------------------------------------------------------*/
/* TWIC Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIC_TWIM_vect) {
    5352:	1f 92       	push	r1
    5354:	0f 92       	push	r0
    5356:	0f b6       	in	r0, 0x3f	; 63
    5358:	0f 92       	push	r0
    535a:	08 b6       	in	r0, 0x38	; 56
    535c:	0f 92       	push	r0
    535e:	09 b6       	in	r0, 0x39	; 57
    5360:	0f 92       	push	r0
    5362:	0b b6       	in	r0, 0x3b	; 59
    5364:	0f 92       	push	r0
    5366:	11 24       	eor	r1, r1
    5368:	18 be       	out	0x38, r1	; 56
    536a:	19 be       	out	0x39, r1	; 57
    536c:	1b be       	out	0x3b, r1	; 59
    536e:	2f 93       	push	r18
    5370:	3f 93       	push	r19
    5372:	4f 93       	push	r20
    5374:	5f 93       	push	r21
    5376:	6f 93       	push	r22
    5378:	7f 93       	push	r23
    537a:	8f 93       	push	r24
    537c:	9f 93       	push	r25
    537e:	af 93       	push	r26
    5380:	bf 93       	push	r27
    5382:	ef 93       	push	r30
    5384:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi1);
    5386:	83 e9       	ldi	r24, 0x93	; 147
    5388:	95 e2       	ldi	r25, 0x25	; 37
    538a:	0e 94 1b 3a 	call	0x7436	; 0x7436 <TWI_MasterInterruptHandler>
}
    538e:	ff 91       	pop	r31
    5390:	ef 91       	pop	r30
    5392:	bf 91       	pop	r27
    5394:	af 91       	pop	r26
    5396:	9f 91       	pop	r25
    5398:	8f 91       	pop	r24
    539a:	7f 91       	pop	r23
    539c:	6f 91       	pop	r22
    539e:	5f 91       	pop	r21
    53a0:	4f 91       	pop	r20
    53a2:	3f 91       	pop	r19
    53a4:	2f 91       	pop	r18
    53a6:	0f 90       	pop	r0
    53a8:	0b be       	out	0x3b, r0	; 59
    53aa:	0f 90       	pop	r0
    53ac:	09 be       	out	0x39, r0	; 57
    53ae:	0f 90       	pop	r0
    53b0:	08 be       	out	0x38, r0	; 56
    53b2:	0f 90       	pop	r0
    53b4:	0f be       	out	0x3f, r0	; 63
    53b6:	0f 90       	pop	r0
    53b8:	1f 90       	pop	r1
    53ba:	18 95       	reti

000053bc <CCPWrite>:
  sei();
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    53bc:	0f 93       	push	r16
    53be:	df 93       	push	r29
    53c0:	cf 93       	push	r28
    53c2:	0f 92       	push	r0
    53c4:	cd b7       	in	r28, 0x3d	; 61
    53c6:	de b7       	in	r29, 0x3e	; 62
  uint8_t volatile saved_sreg = SREG;
    53c8:	2f b7       	in	r18, 0x3f	; 63
    53ca:	29 83       	std	Y+1, r18	; 0x01
  cli();
    53cc:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    53ce:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    53d0:	fc 01       	movw	r30, r24
    53d2:	08 ed       	ldi	r16, 0xD8	; 216
    53d4:	04 bf       	out	0x34, r16	; 52
    53d6:	60 83       	st	Z, r22
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    53d8:	89 81       	ldd	r24, Y+1	; 0x01
    53da:	8f bf       	out	0x3f, r24	; 63
}
    53dc:	0f 90       	pop	r0
    53de:	cf 91       	pop	r28
    53e0:	df 91       	pop	r29
    53e2:	0f 91       	pop	r16
    53e4:	08 95       	ret

000053e6 <ledWrite>:

void ledWrite( uint8_t led, uint8_t value ) {
  // ignore write if out-ouf-bounds argument
  if (!((led & ~3) || (value & ~1))) {
    53e6:	28 2f       	mov	r18, r24
    53e8:	30 e0       	ldi	r19, 0x00	; 0
    53ea:	c9 01       	movw	r24, r18
    53ec:	8c 7f       	andi	r24, 0xFC	; 252
    53ee:	89 2b       	or	r24, r25
    53f0:	e1 f4       	brne	.+56     	; 0x542a <ledWrite+0x44>
    53f2:	86 2f       	mov	r24, r22
    53f4:	8e 7f       	andi	r24, 0xFE	; 254
    53f6:	c9 f4       	brne	.+50     	; 0x542a <ledWrite+0x44>
    53f8:	2c 5f       	subi	r18, 0xFC	; 252
    53fa:	3f 4f       	sbci	r19, 0xFF	; 255
    if (value == 1) {
    53fc:	61 30       	cpi	r22, 0x01	; 1
    53fe:	59 f4       	brne	.+22     	; 0x5416 <ledWrite+0x30>
      // turn the led ON
      PORTJ.OUTCLR = 1 << 4 + led;
    5400:	81 e0       	ldi	r24, 0x01	; 1
    5402:	90 e0       	ldi	r25, 0x00	; 0
    5404:	02 c0       	rjmp	.+4      	; 0x540a <ledWrite+0x24>
    5406:	88 0f       	add	r24, r24
    5408:	99 1f       	adc	r25, r25
    540a:	2a 95       	dec	r18
    540c:	e2 f7       	brpl	.-8      	; 0x5406 <ledWrite+0x20>
    540e:	e0 e0       	ldi	r30, 0x00	; 0
    5410:	f7 e0       	ldi	r31, 0x07	; 7
    5412:	86 83       	std	Z+6, r24	; 0x06
    5414:	08 95       	ret
    } else {
      // turn the led OFF
      PORTJ.OUTSET = 1 << 4 + led;
    5416:	81 e0       	ldi	r24, 0x01	; 1
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	02 c0       	rjmp	.+4      	; 0x5420 <ledWrite+0x3a>
    541c:	88 0f       	add	r24, r24
    541e:	99 1f       	adc	r25, r25
    5420:	2a 95       	dec	r18
    5422:	e2 f7       	brpl	.-8      	; 0x541c <ledWrite+0x36>
    5424:	e0 e0       	ldi	r30, 0x00	; 0
    5426:	f7 e0       	ldi	r31, 0x07	; 7
    5428:	85 83       	std	Z+5, r24	; 0x05
    542a:	08 95       	ret

0000542c <ledToggle>:
  }
}

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    542c:	28 2f       	mov	r18, r24
    542e:	30 e0       	ldi	r19, 0x00	; 0
    5430:	c9 01       	movw	r24, r18
    5432:	8c 7f       	andi	r24, 0xFC	; 252
    5434:	89 2b       	or	r24, r25
    5436:	61 f4       	brne	.+24     	; 0x5450 <ledToggle+0x24>
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    5438:	2c 5f       	subi	r18, 0xFC	; 252
    543a:	3f 4f       	sbci	r19, 0xFF	; 255
    543c:	81 e0       	ldi	r24, 0x01	; 1
    543e:	90 e0       	ldi	r25, 0x00	; 0
    5440:	02 c0       	rjmp	.+4      	; 0x5446 <ledToggle+0x1a>
    5442:	88 0f       	add	r24, r24
    5444:	99 1f       	adc	r25, r25
    5446:	2a 95       	dec	r18
    5448:	e2 f7       	brpl	.-8      	; 0x5442 <ledToggle+0x16>
    544a:	e0 e0       	ldi	r30, 0x00	; 0
    544c:	f7 e0       	ldi	r31, 0x07	; 7
    544e:	87 83       	std	Z+7, r24	; 0x07
    5450:	08 95       	ret

00005452 <ledBlink>:
  }
}

void ledBlink(void)
{ 
    5452:	20 e0       	ldi	r18, 0x00	; 0
    5454:	30 e0       	ldi	r19, 0x00	; 0

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    5456:	a0 e0       	ldi	r26, 0x00	; 0
    5458:	b7 e0       	ldi	r27, 0x07	; 7
    545a:	60 e2       	ldi	r22, 0x20	; 32
    545c:	40 e2       	ldi	r20, 0x20	; 32
    545e:	53 e0       	ldi	r21, 0x03	; 3
    5460:	17 96       	adiw	r26, 0x07	; 7
    5462:	6c 93       	st	X, r22
    5464:	17 97       	sbiw	r26, 0x07	; 7
    5466:	8c ea       	ldi	r24, 0xAC	; 172
    5468:	9d e0       	ldi	r25, 0x0D	; 13
    546a:	fa 01       	movw	r30, r20
    546c:	31 97       	sbiw	r30, 0x01	; 1
    546e:	f1 f7       	brne	.-4      	; 0x546c <ledBlink+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5470:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5472:	d9 f7       	brne	.-10     	; 0x546a <ledBlink+0x18>
void ledBlink(void)
{ 
  /* blink LED 1, this is a simple debug tool to see if the controller is responsive */
  int j;
  	
  for(j = 0;j < 10;j++)
    5474:	2f 5f       	subi	r18, 0xFF	; 255
    5476:	3f 4f       	sbci	r19, 0xFF	; 255
    5478:	2a 30       	cpi	r18, 0x0A	; 10
    547a:	31 05       	cpc	r19, r1
    547c:	89 f7       	brne	.-30     	; 0x5460 <ledBlink+0xe>
  {
    ledToggle(1);
    _delay_ms(350);
//Wait(350);		
  }
}
    547e:	08 95       	ret

00005480 <digitalMode>:

void digitalMode( uint8_t bit, uint8_t mode) {
  if (!(bit & ~3)) {
    5480:	48 2f       	mov	r20, r24
    5482:	50 e0       	ldi	r21, 0x00	; 0
    5484:	ca 01       	movw	r24, r20
    5486:	8c 7f       	andi	r24, 0xFC	; 252
    5488:	89 2b       	or	r24, r25
    548a:	79 f5       	brne	.+94     	; 0x54ea <digitalMode+0x6a>
    if (mode == OUTPUT) {
    548c:	66 23       	and	r22, r22
    548e:	b9 f4       	brne	.+46     	; 0x54be <digitalMode+0x3e>
      /* set the port as output */
      PORTK.OUTCLR = 1 << 4 + bit; // set the external driver mode to output first
    5490:	4c 5f       	subi	r20, 0xFC	; 252
    5492:	5f 4f       	sbci	r21, 0xFF	; 255
    5494:	81 e0       	ldi	r24, 0x01	; 1
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	9c 01       	movw	r18, r24
    549a:	04 2e       	mov	r0, r20
    549c:	02 c0       	rjmp	.+4      	; 0x54a2 <digitalMode+0x22>
    549e:	22 0f       	add	r18, r18
    54a0:	33 1f       	adc	r19, r19
    54a2:	0a 94       	dec	r0
    54a4:	e2 f7       	brpl	.-8      	; 0x549e <digitalMode+0x1e>
    54a6:	44 50       	subi	r20, 0x04	; 4
    54a8:	50 40       	sbci	r21, 0x00	; 0
    54aa:	e0 e2       	ldi	r30, 0x20	; 32
    54ac:	f7 e0       	ldi	r31, 0x07	; 7
    54ae:	26 83       	std	Z+6, r18	; 0x06
      PORTK.DIRSET = 1 << bit;   // set the uC pin direction to output second
    54b0:	02 c0       	rjmp	.+4      	; 0x54b6 <digitalMode+0x36>
    54b2:	88 0f       	add	r24, r24
    54b4:	99 1f       	adc	r25, r25
    54b6:	4a 95       	dec	r20
    54b8:	e2 f7       	brpl	.-8      	; 0x54b2 <digitalMode+0x32>
    54ba:	81 83       	std	Z+1, r24	; 0x01
    54bc:	08 95       	ret
    } else if (mode == INPUT) {
    54be:	61 30       	cpi	r22, 0x01	; 1
    54c0:	a1 f4       	brne	.+40     	; 0x54ea <digitalMode+0x6a>
      /* set the port as input */
      PORTK.DIRCLR = 1 << bit;   // set the uC pin direction to input first
    54c2:	81 e0       	ldi	r24, 0x01	; 1
    54c4:	90 e0       	ldi	r25, 0x00	; 0
    54c6:	9c 01       	movw	r18, r24
    54c8:	04 2e       	mov	r0, r20
    54ca:	02 c0       	rjmp	.+4      	; 0x54d0 <digitalMode+0x50>
    54cc:	22 0f       	add	r18, r18
    54ce:	33 1f       	adc	r19, r19
    54d0:	0a 94       	dec	r0
    54d2:	e2 f7       	brpl	.-8      	; 0x54cc <digitalMode+0x4c>
    54d4:	e0 e2       	ldi	r30, 0x20	; 32
    54d6:	f7 e0       	ldi	r31, 0x07	; 7
    54d8:	22 83       	std	Z+2, r18	; 0x02
      PORTK.OUTSET = 1 << 4 + bit; // set the external driver direction to input
    54da:	4c 5f       	subi	r20, 0xFC	; 252
    54dc:	5f 4f       	sbci	r21, 0xFF	; 255
    54de:	02 c0       	rjmp	.+4      	; 0x54e4 <digitalMode+0x64>
    54e0:	88 0f       	add	r24, r24
    54e2:	99 1f       	adc	r25, r25
    54e4:	4a 95       	dec	r20
    54e6:	e2 f7       	brpl	.-8      	; 0x54e0 <digitalMode+0x60>
    54e8:	85 83       	std	Z+5, r24	; 0x05
    54ea:	08 95       	ret

000054ec <digitalRead>:
}

uint8_t digitalRead( uint8_t bit ) {
  uint8_t res;
  // ignore read if out-ouf-bounds argument
  if (!(bit & ~3)) {
    54ec:	28 2f       	mov	r18, r24
    54ee:	30 e0       	ldi	r19, 0x00	; 0
    54f0:	c9 01       	movw	r24, r18
    54f2:	8c 7f       	andi	r24, 0xFC	; 252
    54f4:	89 2b       	or	r24, r25
    54f6:	11 f0       	breq	.+4      	; 0x54fc <digitalRead+0x10>
    54f8:	80 e0       	ldi	r24, 0x00	; 0
    54fa:	08 95       	ret
    res = (PORTK.IN >> bit) & 0x01;
    54fc:	80 91 28 07 	lds	r24, 0x0728
    5500:	90 e0       	ldi	r25, 0x00	; 0
    5502:	02 c0       	rjmp	.+4      	; 0x5508 <digitalRead+0x1c>
    5504:	95 95       	asr	r25
    5506:	87 95       	ror	r24
    5508:	2a 95       	dec	r18
    550a:	e2 f7       	brpl	.-8      	; 0x5504 <digitalRead+0x18>
    550c:	81 70       	andi	r24, 0x01	; 1
  } else {
    res = 0;
  }
  return(res);
}
    550e:	08 95       	ret

00005510 <digitalWrite>:

void digitalWrite( uint8_t bit, uint8_t value ) {
  // ignore write if out-ouf-bounds argument
  if (!((bit & ~3) || (value & ~1))) {
    5510:	28 2f       	mov	r18, r24
    5512:	30 e0       	ldi	r19, 0x00	; 0
    5514:	c9 01       	movw	r24, r18
    5516:	8c 7f       	andi	r24, 0xFC	; 252
    5518:	89 2b       	or	r24, r25
    551a:	d1 f4       	brne	.+52     	; 0x5550 <digitalWrite+0x40>
    551c:	86 2f       	mov	r24, r22
    551e:	8e 7f       	andi	r24, 0xFE	; 254
    5520:	b9 f4       	brne	.+46     	; 0x5550 <digitalWrite+0x40>
    if (value == 1) {
    5522:	61 30       	cpi	r22, 0x01	; 1
    5524:	59 f4       	brne	.+22     	; 0x553c <digitalWrite+0x2c>
      // set the bit HIGH
      PORTK.OUTSET = 1 << bit;
    5526:	81 e0       	ldi	r24, 0x01	; 1
    5528:	90 e0       	ldi	r25, 0x00	; 0
    552a:	02 c0       	rjmp	.+4      	; 0x5530 <digitalWrite+0x20>
    552c:	88 0f       	add	r24, r24
    552e:	99 1f       	adc	r25, r25
    5530:	2a 95       	dec	r18
    5532:	e2 f7       	brpl	.-8      	; 0x552c <digitalWrite+0x1c>
    5534:	e0 e2       	ldi	r30, 0x20	; 32
    5536:	f7 e0       	ldi	r31, 0x07	; 7
    5538:	85 83       	std	Z+5, r24	; 0x05
    553a:	08 95       	ret
    } else {
      // set the bit LOW
      PORTK.OUTCLR = 1 << bit;
    553c:	81 e0       	ldi	r24, 0x01	; 1
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	02 c0       	rjmp	.+4      	; 0x5546 <digitalWrite+0x36>
    5542:	88 0f       	add	r24, r24
    5544:	99 1f       	adc	r25, r25
    5546:	2a 95       	dec	r18
    5548:	e2 f7       	brpl	.-8      	; 0x5542 <digitalWrite+0x32>
    554a:	e0 e2       	ldi	r30, 0x20	; 32
    554c:	f7 e0       	ldi	r31, 0x07	; 7
    554e:	86 83       	std	Z+6, r24	; 0x06
    5550:	08 95       	ret

00005552 <digitalToggle>:
  }
}

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    5552:	28 2f       	mov	r18, r24
    5554:	30 e0       	ldi	r19, 0x00	; 0
    5556:	c9 01       	movw	r24, r18
    5558:	8c 7f       	andi	r24, 0xFC	; 252
    555a:	89 2b       	or	r24, r25
    555c:	51 f4       	brne	.+20     	; 0x5572 <digitalToggle+0x20>
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    555e:	81 e0       	ldi	r24, 0x01	; 1
    5560:	90 e0       	ldi	r25, 0x00	; 0
    5562:	02 c0       	rjmp	.+4      	; 0x5568 <digitalToggle+0x16>
    5564:	88 0f       	add	r24, r24
    5566:	99 1f       	adc	r25, r25
    5568:	2a 95       	dec	r18
    556a:	e2 f7       	brpl	.-8      	; 0x5564 <digitalToggle+0x12>
    556c:	e0 e2       	ldi	r30, 0x20	; 32
    556e:	f7 e0       	ldi	r31, 0x07	; 7
    5570:	87 83       	std	Z+7, r24	; 0x07
    5572:	08 95       	ret

00005574 <analogRead>:
  }
}

int16_t analogRead( uint8_t ch ) {
    5574:	a2 e0       	ldi	r26, 0x02	; 2
    5576:	b0 e0       	ldi	r27, 0x00	; 0
    5578:	e0 ec       	ldi	r30, 0xC0	; 192
    557a:	fa e2       	ldi	r31, 0x2A	; 42
    557c:	0c 94 9e 4d 	jmp	0x9b3c	; 0x9b3c <__prologue_saves__+0x20>
  int16_t w1;
  if (!(ch & ~7)) {
    5580:	28 2f       	mov	r18, r24
    5582:	30 e0       	ldi	r19, 0x00	; 0
    5584:	c9 01       	movw	r24, r18
    5586:	88 7f       	andi	r24, 0xF8	; 248
    5588:	89 2b       	or	r24, r25
    558a:	19 f0       	breq	.+6      	; 0x5592 <analogRead+0x1e>
    558c:	20 e0       	ldi	r18, 0x00	; 0
    558e:	30 e0       	ldi	r19, 0x00	; 0
    5590:	5c c0       	rjmp	.+184    	; 0x564a <analogRead+0xd6>
    // control register: ch = <ch>, mode = 00, pm = 00, code = 0, ref = 1, seq = 00
	//coding = 0,the output coding is twos complement
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    5592:	80 e1       	ldi	r24, 0x10	; 16
    5594:	e0 e4       	ldi	r30, 0x40	; 64
    5596:	f6 e0       	ldi	r31, 0x06	; 6
    5598:	86 83       	std	Z+6, r24	; 0x06
    SPIC.DATA = 0x80 | ((ch & 0x7) << 2);
    559a:	c9 01       	movw	r24, r18
    559c:	87 70       	andi	r24, 0x07	; 7
    559e:	90 70       	andi	r25, 0x00	; 0
    55a0:	88 0f       	add	r24, r24
    55a2:	99 1f       	adc	r25, r25
    55a4:	88 0f       	add	r24, r24
    55a6:	99 1f       	adc	r25, r25
    55a8:	80 68       	ori	r24, 0x80	; 128
    55aa:	e0 ec       	ldi	r30, 0xC0	; 192
    55ac:	f8 e0       	ldi	r31, 0x08	; 8
    55ae:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    55b0:	80 91 c2 08 	lds	r24, 0x08C2
    55b4:	87 ff       	sbrs	r24, 7
    55b6:	fc cf       	rjmp	.-8      	; 0x55b0 <analogRead+0x3c>
    SPIC.DATA = 0x10;
    55b8:	80 e1       	ldi	r24, 0x10	; 16
    55ba:	e0 ec       	ldi	r30, 0xC0	; 192
    55bc:	f8 e0       	ldi	r31, 0x08	; 8
    55be:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    55c0:	80 91 c2 08 	lds	r24, 0x08C2
    55c4:	87 ff       	sbrs	r24, 7
    55c6:	fc cf       	rjmp	.-8      	; 0x55c0 <analogRead+0x4c>
    PORTC.OUTSET = PIN4_bm;        // SPI SS = H
    55c8:	e0 e4       	ldi	r30, 0x40	; 64
    55ca:	f6 e0       	ldi	r31, 0x06	; 6
    55cc:	80 e1       	ldi	r24, 0x10	; 16
    55ce:	85 83       	std	Z+5, r24	; 0x05

    // do a conversion on the selected channel (no register write)
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    55d0:	86 83       	std	Z+6, r24	; 0x06
    SPIC.DATA = 0x00;
    55d2:	e0 ec       	ldi	r30, 0xC0	; 192
    55d4:	f8 e0       	ldi	r31, 0x08	; 8
    55d6:	13 82       	std	Z+3, r1	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    55d8:	80 91 c2 08 	lds	r24, 0x08C2
    55dc:	87 ff       	sbrs	r24, 7
    55de:	fc cf       	rjmp	.-8      	; 0x55d8 <analogRead+0x64>
    ((uint8_t*)&w1)[1] = SPIC.DATA;
    55e0:	de 01       	movw	r26, r28
    55e2:	11 96       	adiw	r26, 0x01	; 1
    55e4:	90 91 c3 08 	lds	r25, 0x08C3
    SPIC.DATA = 0x00;
    55e8:	e0 ec       	ldi	r30, 0xC0	; 192
    55ea:	f8 e0       	ldi	r31, 0x08	; 8
    55ec:	13 82       	std	Z+3, r1	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    55ee:	80 91 c2 08 	lds	r24, 0x08C2
    55f2:	87 ff       	sbrs	r24, 7
    55f4:	fc cf       	rjmp	.-8      	; 0x55ee <analogRead+0x7a>
    ((uint8_t*)&w1)[0] = SPIC.DATA;
    55f6:	80 91 c3 08 	lds	r24, 0x08C3

    // do a conversion on the selected channel (no register write)
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    SPIC.DATA = 0x00;
    loop_until_bit_is_set(SPIC.STATUS, 7);
    ((uint8_t*)&w1)[1] = SPIC.DATA;
    55fa:	11 96       	adiw	r26, 0x01	; 1
    55fc:	9c 93       	st	X, r25
    55fe:	11 97       	sbiw	r26, 0x01	; 1
    SPIC.DATA = 0x00;
    loop_until_bit_is_set(SPIC.STATUS, 7);
    ((uint8_t*)&w1)[0] = SPIC.DATA;
    5600:	8c 93       	st	X, r24
    PORTC.OUTSET = PIN4_bm;        // SPI SS = H
    5602:	80 e1       	ldi	r24, 0x10	; 16
    5604:	e0 e4       	ldi	r30, 0x40	; 64
    5606:	f6 e0       	ldi	r31, 0x06	; 6
    5608:	85 83       	std	Z+5, r24	; 0x05

	//ADC0-1 -5V-5V  //ADC2-7 0-10V
	if (!(ch& ~1))	
    560a:	2e 7f       	andi	r18, 0xFE	; 254
    560c:	89 81       	ldd	r24, Y+1	; 0x01
    560e:	9a 81       	ldd	r25, Y+2	; 0x02
    5610:	23 2b       	or	r18, r19
    5612:	69 f4       	brne	.+26     	; 0x562e <analogRead+0xba>
    5614:	9c 01       	movw	r18, r24
    5616:	3f 70       	andi	r19, 0x0F	; 15
		//in this way, 0v ->0, -5V -> -2047, 5V->2047

		//-5V-0V
		if (w1 & 1 << 12) { 
    5618:	94 ff       	sbrs	r25, 4
    561a:	04 c0       	rjmp	.+8      	; 0x5624 <analogRead+0xb0>
		//input value is -5V-0v, ADC code from 0x1000 to 0x1fff
		  w1 = (w1 & 0x0fff)>>1;
    561c:	35 95       	asr	r19
    561e:	27 95       	ror	r18
		  w1 = w1 | 0xf800;
    5620:	38 6f       	ori	r19, 0xF8	; 248
    5622:	02 c0       	rjmp	.+4      	; 0x5628 <analogRead+0xb4>
		} 
		else{   //0-5V
		//since output data : 3 channel id bits + sign bit + 12 conversion result
		//input value is 0-5V, 12 ADC code from 0x0000 to 0x0fff
		 //remove the 3 channel id bits
		  w1 = (w1 & 0x0fff)>>1; 
    5624:	35 95       	asr	r19
    5626:	27 95       	ror	r18
    5628:	29 83       	std	Y+1, r18	; 0x01
    562a:	3a 83       	std	Y+2, r19	; 0x02
    562c:	0c c0       	rjmp	.+24     	; 0x5646 <analogRead+0xd2>
		  //output value is now 0x0000 to 0x07ff
		}
	else
		//in this way, 0v ->0, 5V -> 2047, 10V->4095
		if (w1 & 1 << 12) { 
    562e:	94 ff       	sbrs	r25, 4
    5630:	04 c0       	rjmp	.+8      	; 0x563a <analogRead+0xc6>
		//input value is less than 5V, ADC code from 0x1000 to 0x1fff
		  w1 = (w1 & 0x0fff) >> 1;
    5632:	9f 70       	andi	r25, 0x0F	; 15
    5634:	95 95       	asr	r25
    5636:	87 95       	ror	r24
    5638:	04 c0       	rjmp	.+8      	; 0x5642 <analogRead+0xce>
		  //output value now is from 0x0000 to 0x07ff
		} 
		else{   
		//since output data : 3 channel id bits + sign bit + 12 conversion result
		//input value is bigger than 5v, 12 ADC code from 0x0000 to 0x0fff
		  w1 = (w1 | 0x1000) >> 1;
    563a:	90 61       	ori	r25, 0x10	; 16
    563c:	95 95       	asr	r25
    563e:	87 95       	ror	r24
		 //remove the 3 channel id bits
		  w1 = w1 & 0x0fff; 
    5640:	9f 70       	andi	r25, 0x0F	; 15
    5642:	89 83       	std	Y+1, r24	; 0x01
    5644:	9a 83       	std	Y+2, r25	; 0x02
		  //output value is now 0x0800 to 0x0fff
		}
    return w1;
    5646:	29 81       	ldd	r18, Y+1	; 0x01
    5648:	3a 81       	ldd	r19, Y+2	; 0x02
  }
  else
    return 0;
}
    564a:	c9 01       	movw	r24, r18
    564c:	22 96       	adiw	r28, 0x02	; 2
    564e:	e2 e0       	ldi	r30, 0x02	; 2
    5650:	0c 94 ba 4d 	jmp	0x9b74	; 0x9b74 <__epilogue_restores__+0x20>

00005654 <analogWrite>:

void analogWrite(uint8_t ch, int16_t value) {
    5654:	98 2f       	mov	r25, r24
//AD5754 16 bit DAC, it also works for AD5724 12 bit DAC
//chanel number should from 0 to 3 and value ranges from -32767 to 32767
  if (!((ch & ~3) || ((value > 32767) || (value < -32767)))) {
    5656:	8c 7f       	andi	r24, 0xFC	; 252
    5658:	11 f5       	brne	.+68     	; 0x569e <analogWrite+0x4a>
    565a:	80 e8       	ldi	r24, 0x80	; 128
    565c:	60 30       	cpi	r22, 0x00	; 0
    565e:	78 07       	cpc	r23, r24
    5660:	f1 f0       	breq	.+60     	; 0x569e <analogWrite+0x4a>
    /* DAC register*/
    PORTD.OUTCLR = PIN4_bm;        // SPI SS = L
    5662:	80 e1       	ldi	r24, 0x10	; 16
    5664:	e0 e6       	ldi	r30, 0x60	; 96
    5666:	f6 e0       	ldi	r31, 0x06	; 6
    5668:	86 83       	std	Z+6, r24	; 0x06
    SPID.DATA = 0x00 | (ch & 0x7);
    566a:	97 70       	andi	r25, 0x07	; 7
    566c:	e0 ec       	ldi	r30, 0xC0	; 192
    566e:	f9 e0       	ldi	r31, 0x09	; 9
    5670:	93 83       	std	Z+3, r25	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    5672:	80 91 c2 09 	lds	r24, 0x09C2
    5676:	87 ff       	sbrs	r24, 7
    5678:	fc cf       	rjmp	.-8      	; 0x5672 <analogWrite+0x1e>
	SPID.DATA = (uint8_t)((value & 0xff00) >> 8);
    567a:	e0 ec       	ldi	r30, 0xC0	; 192
    567c:	f9 e0       	ldi	r31, 0x09	; 9
    567e:	73 83       	std	Z+3, r23	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    5680:	80 91 c2 09 	lds	r24, 0x09C2
    5684:	87 ff       	sbrs	r24, 7
    5686:	fc cf       	rjmp	.-8      	; 0x5680 <analogWrite+0x2c>
	SPID.DATA = (uint8_t)(value & 0xff) ;
    5688:	e0 ec       	ldi	r30, 0xC0	; 192
    568a:	f9 e0       	ldi	r31, 0x09	; 9
    568c:	63 83       	std	Z+3, r22	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    568e:	80 91 c2 09 	lds	r24, 0x09C2
    5692:	87 ff       	sbrs	r24, 7
    5694:	fc cf       	rjmp	.-8      	; 0x568e <analogWrite+0x3a>
    PORTD.OUTSET = PIN4_bm;        // SPI SS = H
    5696:	80 e1       	ldi	r24, 0x10	; 16
    5698:	e0 e6       	ldi	r30, 0x60	; 96
    569a:	f6 e0       	ldi	r31, 0x06	; 6
    569c:	85 83       	std	Z+5, r24	; 0x05
    569e:	08 95       	ret

000056a0 <test_DIO>:
  }
}
 
void test_DIO(uint8_t ch)
{ 
    56a0:	a0 e0       	ldi	r26, 0x00	; 0
    56a2:	b0 e0       	ldi	r27, 0x00	; 0
    56a4:	e6 e5       	ldi	r30, 0x56	; 86
    56a6:	fb e2       	ldi	r31, 0x2B	; 43
    56a8:	0c 94 92 4d 	jmp	0x9b24	; 0x9b24 <__prologue_saves__+0x8>
    56ac:	b8 2e       	mov	r11, r24
    56ae:	c0 e0       	ldi	r28, 0x00	; 0
    56b0:	d0 e0       	ldi	r29, 0x00	; 0

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    56b2:	00 e2       	ldi	r16, 0x20	; 32
    56b4:	17 e0       	ldi	r17, 0x07	; 7
    56b6:	66 24       	eor	r6, r6
    56b8:	63 94       	inc	r6
    56ba:	82 e0       	ldi	r24, 0x02	; 2
    56bc:	78 2e       	mov	r7, r24
    56be:	b4 e0       	ldi	r27, 0x04	; 4
    56c0:	8b 2e       	mov	r8, r27
    56c2:	a8 e0       	ldi	r26, 0x08	; 8
    56c4:	9a 2e       	mov	r9, r26
    56c6:	f0 e2       	ldi	r31, 0x20	; 32
    56c8:	ef 2e       	mov	r14, r31
    56ca:	f3 e0       	ldi	r31, 0x03	; 3
    56cc:	ff 2e       	mov	r15, r31

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    56ce:	c1 2c       	mov	r12, r1
    56d0:	e7 e0       	ldi	r30, 0x07	; 7
    56d2:	de 2e       	mov	r13, r30
    56d4:	70 e2       	ldi	r23, 0x20	; 32
    56d6:	a7 2e       	mov	r10, r23

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    56d8:	f8 01       	movw	r30, r16
    56da:	67 82       	std	Z+7, r6	; 0x07
    56dc:	77 82       	std	Z+7, r7	; 0x07
    56de:	87 82       	std	Z+7, r8	; 0x07
    56e0:	97 82       	std	Z+7, r9	; 0x07
    56e2:	88 ee       	ldi	r24, 0xE8	; 232
    56e4:	93 e0       	ldi	r25, 0x03	; 3
    56e6:	f7 01       	movw	r30, r14
    56e8:	31 97       	sbiw	r30, 0x01	; 1
    56ea:	f1 f7       	brne	.-4      	; 0x56e8 <test_DIO+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56ee:	d9 f7       	brne	.-10     	; 0x56e6 <test_DIO+0x46>
    digitalToggle(1);
    digitalToggle(2);
    digitalToggle(3);

		_delay_ms(100);			
    ADC_val = analogRead(ch); // +/-5v range, 1v = 408
    56f0:	8b 2d       	mov	r24, r11
    56f2:	0e 94 ba 2a 	call	0x5574	; 0x5574 <analogRead>
    56f6:	bc 01       	movw	r22, r24
    56f8:	28 ee       	ldi	r18, 0xE8	; 232
    56fa:	33 e0       	ldi	r19, 0x03	; 3
    56fc:	f7 01       	movw	r30, r14
    56fe:	31 97       	sbiw	r30, 0x01	; 1
    5700:	f1 f7       	brne	.-4      	; 0x56fe <test_DIO+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5702:	21 50       	subi	r18, 0x01	; 1
    5704:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5706:	d1 f7       	brne	.-12     	; 0x56fc <test_DIO+0x5c>
		_delay_ms(100);			
    analogWrite(1, ADC_val); // +/- 5v range, 1v = 408
    5708:	81 e0       	ldi	r24, 0x01	; 1
    570a:	0e 94 2a 2b 	call	0x5654	; 0x5654 <analogWrite>
    if (k % 2)
    570e:	c0 ff       	sbrs	r28, 0
    5710:	02 c0       	rjmp	.+4      	; 0x5716 <test_DIO+0x76>

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    5712:	f6 01       	movw	r30, r12
    5714:	a7 82       	std	Z+7, r10	; 0x07
    5716:	21 96       	adiw	r28, 0x01	; 1
void test_DIO(uint8_t ch)
{ 
  int16_t ADC_val;
  uint8_t k;

  for (k = 0; k < 60; k++)
    5718:	cc 33       	cpi	r28, 0x3C	; 60
    571a:	d1 05       	cpc	r29, r1
    571c:	e9 f6       	brne	.-70     	; 0x56d8 <test_DIO+0x38>
		_delay_ms(100);			
    analogWrite(1, ADC_val); // +/- 5v range, 1v = 408
    if (k % 2)
    ledToggle(1);  //toggle LED, once per square wave pulse
  }
}
    571e:	cd b7       	in	r28, 0x3d	; 61
    5720:	de b7       	in	r29, 0x3e	; 62
    5722:	ee e0       	ldi	r30, 0x0E	; 14
    5724:	0c 94 ae 4d 	jmp	0x9b5c	; 0x9b5c <__epilogue_restores__+0x8>

00005728 <SystemReset>:

void SystemReset(void) {
    5728:	0f 93       	push	r16
    572a:	df 93       	push	r29
    572c:	cf 93       	push	r28
    572e:	0f 92       	push	r0
    5730:	cd b7       	in	r28, 0x3d	; 61
    5732:	de b7       	in	r29, 0x3e	; 62
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
  uint8_t volatile saved_sreg = SREG;
    5734:	8f b7       	in	r24, 0x3f	; 63
    5736:	89 83       	std	Y+1, r24	; 0x01
  cli();
    5738:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    573a:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    573c:	21 e0       	ldi	r18, 0x01	; 1
    573e:	89 e7       	ldi	r24, 0x79	; 121
    5740:	90 e0       	ldi	r25, 0x00	; 0
    5742:	fc 01       	movw	r30, r24
    5744:	08 ed       	ldi	r16, 0xD8	; 216
    5746:	04 bf       	out	0x34, r16	; 52
    5748:	20 83       	st	Z, r18
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    574a:	89 81       	ldd	r24, Y+1	; 0x01
    574c:	8f bf       	out	0x3f, r24	; 63
}

void SystemReset(void) {
  //issue software reset
  CCPWrite(&RST.CTRL, RST_SWRST_bm);
}
    574e:	0f 90       	pop	r0
    5750:	cf 91       	pop	r28
    5752:	df 91       	pop	r29
    5754:	0f 91       	pop	r16
    5756:	08 95       	ret

00005758 <test_ADC>:

void test_ADC(uint8_t ch)
 { 
    5758:	a0 e0       	ldi	r26, 0x00	; 0
    575a:	b0 e0       	ldi	r27, 0x00	; 0
    575c:	e2 eb       	ldi	r30, 0xB2	; 178
    575e:	fb e2       	ldi	r31, 0x2B	; 43
    5760:	0c 94 94 4d 	jmp	0x9b28	; 0x9b28 <__prologue_saves__+0xc>
    5764:	98 2e       	mov	r9, r24
    5766:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
		{	if (j < 100)
    5768:	40 ea       	ldi	r20, 0xA0	; 160
    576a:	a4 2e       	mov	r10, r20
    576c:	4f e0       	ldi	r20, 0x0F	; 15
    576e:	b4 2e       	mov	r11, r20
    5770:	30 e8       	ldi	r19, 0x80	; 128
    5772:	c3 2e       	mov	r12, r19
    5774:	3e e3       	ldi	r19, 0x3E	; 62
    5776:	d3 2e       	mov	r13, r19

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    5778:	e1 2c       	mov	r14, r1
    577a:	27 e0       	ldi	r18, 0x07	; 7
    577c:	f2 2e       	mov	r15, r18
    577e:	90 e2       	ldi	r25, 0x20	; 32
    5780:	89 2e       	mov	r8, r25
    5782:	1d c0       	rjmp	.+58     	; 0x57be <test_ADC+0x66>
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
		{	if (j < 100)
    5784:	14 36       	cpi	r17, 0x64	; 100
    5786:	10 f4       	brcc	.+4      	; 0x578c <test_ADC+0x34>
    5788:	be 01       	movw	r22, r28
    578a:	03 c0       	rjmp	.+6      	; 0x5792 <test_ADC+0x3a>
    578c:	b5 01       	movw	r22, r10
    578e:	6c 1b       	sub	r22, r28
    5790:	7d 0b       	sbc	r23, r29
			X_dac_val = 20*(uint16_t)j; 	// build the up part of the triangle wave
			else
			X_dac_val = 20*(uint16_t)(100 + (100 - j)); // build the down part of the triangle wave
 	
            analogWrite(0, X_dac_val);
    5792:	80 e0       	ldi	r24, 0x00	; 0
    5794:	0e 94 2a 2b 	call	0x5654	; 0x5654 <analogWrite>
			
			ADC_val = analogRead(ch);   //1v = 102 -> ~5 TIMES THE GAIN OF OL
    5798:	89 2d       	mov	r24, r9
    579a:	0e 94 ba 2a 	call	0x5574	; 0x5574 <analogRead>
    579e:	bc 01       	movw	r22, r24
			
            analogWrite(1, ADC_val);
    57a0:	81 e0       	ldi	r24, 0x01	; 1
    57a2:	0e 94 2a 2b 	call	0x5654	; 0x5654 <analogWrite>
    57a6:	c6 01       	movw	r24, r12
    57a8:	01 97       	sbiw	r24, 0x01	; 1
    57aa:	f1 f7       	brne	.-4      	; 0x57a8 <test_ADC+0x50>
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
    57ac:	1f 5f       	subi	r17, 0xFF	; 255
    57ae:	64 96       	adiw	r28, 0x14	; 20
    57b0:	18 3c       	cpi	r17, 0xC8	; 200
    57b2:	41 f7       	brne	.-48     	; 0x5784 <test_ADC+0x2c>

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    57b4:	f7 01       	movw	r30, r14
    57b6:	87 82       	std	Z+7, r8	; 0x07
 { 
	int16_t X_dac_val;
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
    57b8:	0f 5f       	subi	r16, 0xFF	; 255
    57ba:	0e 31       	cpi	r16, 0x1E	; 30
    57bc:	21 f0       	breq	.+8      	; 0x57c6 <test_ADC+0x6e>
    57be:	10 e0       	ldi	r17, 0x00	; 0
    57c0:	c0 e0       	ldi	r28, 0x00	; 0
    57c2:	d0 e0       	ldi	r29, 0x00	; 0
    57c4:	df cf       	rjmp	.-66     	; 0x5784 <test_ADC+0x2c>
            analogWrite(1, ADC_val);
			_delay_ms(2);			
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
	}	 	
}
    57c6:	cd b7       	in	r28, 0x3d	; 61
    57c8:	de b7       	in	r29, 0x3e	; 62
    57ca:	ec e0       	ldi	r30, 0x0C	; 12
    57cc:	0c 94 b0 4d 	jmp	0x9b60	; 0x9b60 <__epilogue_restores__+0xc>

000057d0 <put_rc>:
    }
    
};

static
        void put_rc(FRESULT rc) {
    57d0:	bc 01       	movw	r22, r24
    57d2:	28 e1       	ldi	r18, 0x18	; 24
    57d4:	31 e1       	ldi	r19, 0x11	; 17
    57d6:	40 e0       	ldi	r20, 0x00	; 0
    57d8:	50 e0       	ldi	r21, 0x00	; 0
    57da:	08 c0       	rjmp	.+16     	; 0x57ec <put_rc+0x1c>
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    57dc:	f9 01       	movw	r30, r18
        while(pgm_read_byte_near(p++));
    57de:	2f 5f       	subi	r18, 0xFF	; 255
    57e0:	3f 4f       	sbci	r19, 0xFF	; 255
    57e2:	e4 91       	lpm	r30, Z+
    57e4:	ee 23       	and	r30, r30
    57e6:	d1 f7       	brne	.-12     	; 0x57dc <put_rc+0xc>
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    57e8:	4f 5f       	subi	r20, 0xFF	; 255
    57ea:	5f 4f       	sbci	r21, 0xFF	; 255
    57ec:	46 17       	cp	r20, r22
    57ee:	57 07       	cpc	r21, r23
    57f0:	21 f0       	breq	.+8      	; 0x57fa <put_rc+0x2a>
    57f2:	f9 01       	movw	r30, r18
    57f4:	84 91       	lpm	r24, Z+
    57f6:	88 23       	and	r24, r24
    57f8:	89 f7       	brne	.-30     	; 0x57dc <put_rc+0xc>
        while(pgm_read_byte_near(p++));
    }
    xprintf(PSTR("%S\n"), p);
    57fa:	00 d0       	rcall	.+0      	; 0x57fc <put_rc+0x2c>
    57fc:	0f 92       	push	r0
    57fe:	84 e1       	ldi	r24, 0x14	; 20
    5800:	91 e1       	ldi	r25, 0x11	; 17
    5802:	ed b7       	in	r30, 0x3d	; 61
    5804:	fe b7       	in	r31, 0x3e	; 62
    5806:	81 83       	std	Z+1, r24	; 0x01
    5808:	92 83       	std	Z+2, r25	; 0x02
    580a:	23 83       	std	Z+3, r18	; 0x03
    580c:	34 83       	std	Z+4, r19	; 0x04
    580e:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    5812:	0f 90       	pop	r0
    5814:	0f 90       	pop	r0
    5816:	0f 90       	pop	r0
    5818:	0f 90       	pop	r0
}
    581a:	08 95       	ret

0000581c <verifyEEPage>:
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}

int verifyEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    581c:	a0 e0       	ldi	r26, 0x00	; 0
    581e:	b0 e0       	ldi	r27, 0x00	; 0
    5820:	e4 e1       	ldi	r30, 0x14	; 20
    5822:	fc e2       	ldi	r31, 0x2C	; 44
    5824:	0c 94 95 4d 	jmp	0x9b2a	; 0x9b2a <__prologue_saves__+0xe>
    5828:	5c 01       	movw	r10, r24
    582a:	6a 01       	movw	r12, r20
    582c:	7b 01       	movw	r14, r22
    582e:	92 2e       	mov	r9, r18
    5830:	e8 01       	movw	r28, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    5832:	8a e0       	ldi	r24, 0x0A	; 10
    5834:	94 e1       	ldi	r25, 0x14	; 20
    5836:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    buff[0] = 'g';
    583a:	87 e6       	ldi	r24, 0x67	; 103
    583c:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    583e:	bb 27       	eor	r27, r27
    5840:	af 2d       	mov	r26, r15
    5842:	9e 2d       	mov	r25, r14
    5844:	8d 2d       	mov	r24, r13
    5846:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    5848:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize;
    584a:	9b 82       	std	Y+3, r9	; 0x03
    buff[4] = 'E';
    584c:	85 e4       	ldi	r24, 0x45	; 69
    584e:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    5850:	c5 01       	movw	r24, r10
    5852:	60 e7       	ldi	r22, 0x70	; 112
    5854:	a8 01       	movw	r20, r16
    5856:	25 e0       	ldi	r18, 0x05	; 5
    5858:	09 2d       	mov	r16, r9
    585a:	0e 94 21 39 	call	0x7242	; 0x7242 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    585e:	d5 01       	movw	r26, r10
    5860:	1d 96       	adiw	r26, 0x0d	; 13
    5862:	8c 91       	ld	r24, X
    5864:	1d 97       	sbiw	r26, 0x0d	; 13
    5866:	88 23       	and	r24, r24
    5868:	d1 f7       	brne	.-12     	; 0x585e <verifyEEPage+0x42>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    586a:	1e 96       	adiw	r26, 0x0e	; 14
    586c:	8c 91       	ld	r24, X
    586e:	1e 97       	sbiw	r26, 0x0e	; 14
    5870:	81 30       	cpi	r24, 0x01	; 1
    5872:	b9 f0       	breq	.+46     	; 0x58a2 <verifyEEPage+0x86>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    5874:	1e 96       	adiw	r26, 0x0e	; 14
    5876:	2c 91       	ld	r18, X
    5878:	00 d0       	rcall	.+0      	; 0x587a <verifyEEPage+0x5e>
    587a:	0f 92       	push	r0
    587c:	ed b7       	in	r30, 0x3d	; 61
    587e:	fe b7       	in	r31, 0x3e	; 62
    5880:	31 96       	adiw	r30, 0x01	; 1
    5882:	8d ee       	ldi	r24, 0xED	; 237
    5884:	93 e1       	ldi	r25, 0x13	; 19
    5886:	ad b7       	in	r26, 0x3d	; 61
    5888:	be b7       	in	r27, 0x3e	; 62
    588a:	11 96       	adiw	r26, 0x01	; 1
    588c:	8d 93       	st	X+, r24
    588e:	9c 93       	st	X, r25
    5890:	12 97       	sbiw	r26, 0x02	; 2
    5892:	22 83       	std	Z+2, r18	; 0x02
    5894:	13 82       	std	Z+3, r1	; 0x03
    5896:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    589a:	0f 90       	pop	r0
    589c:	0f 90       	pop	r0
    589e:	0f 90       	pop	r0
    58a0:	0f 90       	pop	r0
    58a2:	de 01       	movw	r26, r28
    58a4:	31 e0       	ldi	r19, 0x01	; 1
    58a6:	20 e0       	ldi	r18, 0x00	; 0
    58a8:	0d c0       	rjmp	.+26     	; 0x58c4 <verifyEEPage+0xa8>
    }
    match = 1;
    for (i = 0; i < psize; i++) {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    58aa:	e5 01       	movw	r28, r10
    58ac:	ed 81       	ldd	r30, Y+5	; 0x05
    58ae:	fe 81       	ldd	r31, Y+6	; 0x06
    58b0:	e2 0f       	add	r30, r18
    58b2:	f1 1d       	adc	r31, r1
    58b4:	90 81       	ld	r25, Z
    58b6:	15 96       	adiw	r26, 0x05	; 5
    58b8:	8c 91       	ld	r24, X
    58ba:	15 97       	sbiw	r26, 0x05	; 5
    58bc:	98 13       	cpse	r25, r24
    58be:	30 e0       	ldi	r19, 0x00	; 0
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    match = 1;
    for (i = 0; i < psize; i++) {
    58c0:	2f 5f       	subi	r18, 0xFF	; 255
    58c2:	11 96       	adiw	r26, 0x01	; 1
    58c4:	29 15       	cp	r18, r9
    58c6:	88 f3       	brcs	.-30     	; 0x58aa <verifyEEPage+0x8e>
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    58c8:	83 2f       	mov	r24, r19
    58ca:	90 e0       	ldi	r25, 0x00	; 0
    58cc:	cd b7       	in	r28, 0x3d	; 61
    58ce:	de b7       	in	r29, 0x3e	; 62
    58d0:	eb e0       	ldi	r30, 0x0B	; 11
    58d2:	0c 94 b1 4d 	jmp	0x9b62	; 0x9b62 <__epilogue_restores__+0xe>

000058d6 <readEEPage>:
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);
    }
}

void readEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    58d6:	a0 e0       	ldi	r26, 0x00	; 0
    58d8:	b0 e0       	ldi	r27, 0x00	; 0
    58da:	e1 e7       	ldi	r30, 0x71	; 113
    58dc:	fc e2       	ldi	r31, 0x2C	; 44
    58de:	0c 94 95 4d 	jmp	0x9b2a	; 0x9b2a <__prologue_saves__+0xe>
    58e2:	5c 01       	movw	r10, r24
    58e4:	6a 01       	movw	r12, r20
    58e6:	7b 01       	movw	r14, r22
    58e8:	92 2e       	mov	r9, r18
    58ea:	e8 01       	movw	r28, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    58ec:	89 e2       	ldi	r24, 0x29	; 41
    58ee:	94 e1       	ldi	r25, 0x14	; 20
    58f0:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    buff[0] = 'g';
    58f4:	87 e6       	ldi	r24, 0x67	; 103
    58f6:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    58f8:	bb 27       	eor	r27, r27
    58fa:	af 2d       	mov	r26, r15
    58fc:	9e 2d       	mov	r25, r14
    58fe:	8d 2d       	mov	r24, r13
    5900:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    5902:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize;
    5904:	9b 82       	std	Y+3, r9	; 0x03
    buff[4] = 'E';
    5906:	85 e4       	ldi	r24, 0x45	; 69
    5908:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    590a:	c5 01       	movw	r24, r10
    590c:	60 e7       	ldi	r22, 0x70	; 112
    590e:	a8 01       	movw	r20, r16
    5910:	25 e0       	ldi	r18, 0x05	; 5
    5912:	09 2d       	mov	r16, r9
    5914:	0e 94 21 39 	call	0x7242	; 0x7242 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    5918:	d5 01       	movw	r26, r10
    591a:	1d 96       	adiw	r26, 0x0d	; 13
    591c:	8c 91       	ld	r24, X
    591e:	1d 97       	sbiw	r26, 0x0d	; 13
    5920:	88 23       	and	r24, r24
    5922:	d1 f7       	brne	.-12     	; 0x5918 <readEEPage+0x42>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    5924:	1e 96       	adiw	r26, 0x0e	; 14
    5926:	8c 91       	ld	r24, X
    5928:	1e 97       	sbiw	r26, 0x0e	; 14
    592a:	81 30       	cpi	r24, 0x01	; 1
    592c:	b9 f0       	breq	.+46     	; 0x595c <readEEPage+0x86>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    592e:	1e 96       	adiw	r26, 0x0e	; 14
    5930:	2c 91       	ld	r18, X
    5932:	00 d0       	rcall	.+0      	; 0x5934 <readEEPage+0x5e>
    5934:	0f 92       	push	r0
    5936:	ed b7       	in	r30, 0x3d	; 61
    5938:	fe b7       	in	r31, 0x3e	; 62
    593a:	31 96       	adiw	r30, 0x01	; 1
    593c:	8c e0       	ldi	r24, 0x0C	; 12
    593e:	94 e1       	ldi	r25, 0x14	; 20
    5940:	ad b7       	in	r26, 0x3d	; 61
    5942:	be b7       	in	r27, 0x3e	; 62
    5944:	11 96       	adiw	r26, 0x01	; 1
    5946:	8d 93       	st	X+, r24
    5948:	9c 93       	st	X, r25
    594a:	12 97       	sbiw	r26, 0x02	; 2
    594c:	22 83       	std	Z+2, r18	; 0x02
    594e:	13 82       	std	Z+3, r1	; 0x03
    5950:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    5954:	0f 90       	pop	r0
    5956:	0f 90       	pop	r0
    5958:	0f 90       	pop	r0
    595a:	0f 90       	pop	r0
    595c:	de 01       	movw	r26, r28
    595e:	90 e0       	ldi	r25, 0x00	; 0
    5960:	0a c0       	rjmp	.+20     	; 0x5976 <readEEPage+0xa0>
    }
    
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    5962:	e5 01       	movw	r28, r10
    5964:	ed 81       	ldd	r30, Y+5	; 0x05
    5966:	fe 81       	ldd	r31, Y+6	; 0x06
    5968:	e9 0f       	add	r30, r25
    596a:	f1 1d       	adc	r31, r1
    596c:	80 81       	ld	r24, Z
    596e:	14 96       	adiw	r26, 0x04	; 4
    5970:	8c 93       	st	X, r24
    5972:	14 97       	sbiw	r26, 0x04	; 4
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    
    for (i = 0; i < psize; i++) {
    5974:	9f 5f       	subi	r25, 0xFF	; 255
    5976:	11 96       	adiw	r26, 0x01	; 1
    5978:	99 15       	cp	r25, r9
    597a:	98 f3       	brcs	.-26     	; 0x5962 <readEEPage+0x8c>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}
    597c:	cd b7       	in	r28, 0x3d	; 61
    597e:	de b7       	in	r29, 0x3e	; 62
    5980:	eb e0       	ldi	r30, 0x0B	; 11
    5982:	0c 94 b1 4d 	jmp	0x9b62	; 0x9b62 <__epilogue_restores__+0xe>

00005986 <progEEPage>:
            match = 0;
    }
    return match;
}

void progEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    5986:	a0 e0       	ldi	r26, 0x00	; 0
    5988:	b0 e0       	ldi	r27, 0x00	; 0
    598a:	e9 ec       	ldi	r30, 0xC9	; 201
    598c:	fc e2       	ldi	r31, 0x2C	; 44
    598e:	0c 94 97 4d 	jmp	0x9b2e	; 0x9b2e <__prologue_saves__+0x12>
    5992:	ec 01       	movw	r28, r24
    5994:	6a 01       	movw	r12, r20
    5996:	7b 01       	movw	r14, r22
    5998:	b2 2e       	mov	r11, r18
    xputs(PSTR("#"));
    599a:	8a e4       	ldi	r24, 0x4A	; 74
    599c:	94 e1       	ldi	r25, 0x14	; 20
    599e:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    buff[0] = 'B';
    59a2:	82 e4       	ldi	r24, 0x42	; 66
    59a4:	d8 01       	movw	r26, r16
    59a6:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    59a8:	bb 27       	eor	r27, r27
    59aa:	af 2d       	mov	r26, r15
    59ac:	9e 2d       	mov	r25, r14
    59ae:	8d 2d       	mov	r24, r13
    59b0:	f8 01       	movw	r30, r16
    59b2:	81 83       	std	Z+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    59b4:	c2 82       	std	Z+2, r12	; 0x02
    buff[3] = psize;
    59b6:	b3 82       	std	Z+3, r11	; 0x03
    buff[4] = 'E';
    59b8:	85 e4       	ldi	r24, 0x45	; 69
    59ba:	84 83       	std	Z+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    59bc:	f5 e0       	ldi	r31, 0x05	; 5
    59be:	bf 0e       	add	r11, r31
    59c0:	ce 01       	movw	r24, r28
    59c2:	60 e7       	ldi	r22, 0x70	; 112
    59c4:	a8 01       	movw	r20, r16
    59c6:	2b 2d       	mov	r18, r11
    59c8:	00 e0       	ldi	r16, 0x00	; 0
    59ca:	0e 94 21 39 	call	0x7242	; 0x7242 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    59ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    59d0:	88 23       	and	r24, r24
    59d2:	e9 f7       	brne	.-6      	; 0x59ce <progEEPage+0x48>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    59d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    59d6:	81 30       	cpi	r24, 0x01	; 1
    59d8:	b1 f0       	breq	.+44     	; 0x5a06 <progEEPage+0x80>
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);
    59da:	2e 85       	ldd	r18, Y+14	; 0x0e
    59dc:	00 d0       	rcall	.+0      	; 0x59de <progEEPage+0x58>
    59de:	0f 92       	push	r0
    59e0:	ed b7       	in	r30, 0x3d	; 61
    59e2:	fe b7       	in	r31, 0x3e	; 62
    59e4:	31 96       	adiw	r30, 0x01	; 1
    59e6:	8b e2       	ldi	r24, 0x2B	; 43
    59e8:	94 e1       	ldi	r25, 0x14	; 20
    59ea:	ad b7       	in	r26, 0x3d	; 61
    59ec:	be b7       	in	r27, 0x3e	; 62
    59ee:	11 96       	adiw	r26, 0x01	; 1
    59f0:	8d 93       	st	X+, r24
    59f2:	9c 93       	st	X, r25
    59f4:	12 97       	sbiw	r26, 0x02	; 2
    59f6:	22 83       	std	Z+2, r18	; 0x02
    59f8:	13 82       	std	Z+3, r1	; 0x03
    59fa:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    59fe:	0f 90       	pop	r0
    5a00:	0f 90       	pop	r0
    5a02:	0f 90       	pop	r0
    5a04:	0f 90       	pop	r0
    }
}
    5a06:	cd b7       	in	r28, 0x3d	; 61
    5a08:	de b7       	in	r29, 0x3e	; 62
    5a0a:	e9 e0       	ldi	r30, 0x09	; 9
    5a0c:	0c 94 b3 4d 	jmp	0x9b66	; 0x9b66 <__epilogue_restores__+0x12>

00005a10 <verifyPage>:
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}


int verifyPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    5a10:	a0 e0       	ldi	r26, 0x00	; 0
    5a12:	b0 e0       	ldi	r27, 0x00	; 0
    5a14:	ee e0       	ldi	r30, 0x0E	; 14
    5a16:	fd e2       	ldi	r31, 0x2D	; 45
    5a18:	0c 94 95 4d 	jmp	0x9b2a	; 0x9b2a <__prologue_saves__+0xe>
    5a1c:	5c 01       	movw	r10, r24
    5a1e:	6a 01       	movw	r12, r20
    5a20:	7b 01       	movw	r14, r22
    5a22:	92 2e       	mov	r9, r18
    5a24:	e8 01       	movw	r28, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    5a26:	89 e6       	ldi	r24, 0x69	; 105
    5a28:	94 e1       	ldi	r25, 0x14	; 20
    5a2a:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    buff[0] = 'g';
    5a2e:	87 e6       	ldi	r24, 0x67	; 103
    5a30:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    5a32:	bb 27       	eor	r27, r27
    5a34:	af 2d       	mov	r26, r15
    5a36:	9e 2d       	mov	r25, r14
    5a38:	8d 2d       	mov	r24, r13
    5a3a:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    5a3c:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize>>1;
    5a3e:	89 2d       	mov	r24, r9
    5a40:	86 95       	lsr	r24
    5a42:	8b 83       	std	Y+3, r24	; 0x03
    buff[4] = 'F';
    5a44:	86 e4       	ldi	r24, 0x46	; 70
    5a46:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    5a48:	c5 01       	movw	r24, r10
    5a4a:	60 e7       	ldi	r22, 0x70	; 112
    5a4c:	a8 01       	movw	r20, r16
    5a4e:	25 e0       	ldi	r18, 0x05	; 5
    5a50:	09 2d       	mov	r16, r9
    5a52:	0e 94 21 39 	call	0x7242	; 0x7242 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    5a56:	d5 01       	movw	r26, r10
    5a58:	1d 96       	adiw	r26, 0x0d	; 13
    5a5a:	8c 91       	ld	r24, X
    5a5c:	1d 97       	sbiw	r26, 0x0d	; 13
    5a5e:	88 23       	and	r24, r24
    5a60:	d1 f7       	brne	.-12     	; 0x5a56 <verifyPage+0x46>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    5a62:	1e 96       	adiw	r26, 0x0e	; 14
    5a64:	8c 91       	ld	r24, X
    5a66:	1e 97       	sbiw	r26, 0x0e	; 14
    5a68:	81 30       	cpi	r24, 0x01	; 1
    5a6a:	b9 f0       	breq	.+46     	; 0x5a9a <verifyPage+0x8a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    5a6c:	1e 96       	adiw	r26, 0x0e	; 14
    5a6e:	2c 91       	ld	r18, X
    5a70:	00 d0       	rcall	.+0      	; 0x5a72 <verifyPage+0x62>
    5a72:	0f 92       	push	r0
    5a74:	ed b7       	in	r30, 0x3d	; 61
    5a76:	fe b7       	in	r31, 0x3e	; 62
    5a78:	31 96       	adiw	r30, 0x01	; 1
    5a7a:	8c e4       	ldi	r24, 0x4C	; 76
    5a7c:	94 e1       	ldi	r25, 0x14	; 20
    5a7e:	ad b7       	in	r26, 0x3d	; 61
    5a80:	be b7       	in	r27, 0x3e	; 62
    5a82:	11 96       	adiw	r26, 0x01	; 1
    5a84:	8d 93       	st	X+, r24
    5a86:	9c 93       	st	X, r25
    5a88:	12 97       	sbiw	r26, 0x02	; 2
    5a8a:	22 83       	std	Z+2, r18	; 0x02
    5a8c:	13 82       	std	Z+3, r1	; 0x03
    5a8e:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    5a92:	0f 90       	pop	r0
    5a94:	0f 90       	pop	r0
    5a96:	0f 90       	pop	r0
    5a98:	0f 90       	pop	r0
    5a9a:	de 01       	movw	r26, r28
    5a9c:	31 e0       	ldi	r19, 0x01	; 1
    5a9e:	20 e0       	ldi	r18, 0x00	; 0
    5aa0:	0d c0       	rjmp	.+26     	; 0x5abc <verifyPage+0xac>
    }
    match = 1;
    for (i = 0; i < psize; i++) {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    5aa2:	e5 01       	movw	r28, r10
    5aa4:	ed 81       	ldd	r30, Y+5	; 0x05
    5aa6:	fe 81       	ldd	r31, Y+6	; 0x06
    5aa8:	e2 0f       	add	r30, r18
    5aaa:	f1 1d       	adc	r31, r1
    5aac:	90 81       	ld	r25, Z
    5aae:	15 96       	adiw	r26, 0x05	; 5
    5ab0:	8c 91       	ld	r24, X
    5ab2:	15 97       	sbiw	r26, 0x05	; 5
    5ab4:	98 13       	cpse	r25, r24
    5ab6:	30 e0       	ldi	r19, 0x00	; 0
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    match = 1;
    for (i = 0; i < psize; i++) {
    5ab8:	2f 5f       	subi	r18, 0xFF	; 255
    5aba:	11 96       	adiw	r26, 0x01	; 1
    5abc:	29 15       	cp	r18, r9
    5abe:	88 f3       	brcs	.-30     	; 0x5aa2 <verifyPage+0x92>
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    5ac0:	83 2f       	mov	r24, r19
    5ac2:	90 e0       	ldi	r25, 0x00	; 0
    5ac4:	cd b7       	in	r28, 0x3d	; 61
    5ac6:	de b7       	in	r29, 0x3e	; 62
    5ac8:	eb e0       	ldi	r30, 0x0B	; 11
    5aca:	0c 94 b1 4d 	jmp	0x9b62	; 0x9b62 <__epilogue_restores__+0xe>

00005ace <readPage>:
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    }
}

void readPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    5ace:	a0 e0       	ldi	r26, 0x00	; 0
    5ad0:	b0 e0       	ldi	r27, 0x00	; 0
    5ad2:	ed e6       	ldi	r30, 0x6D	; 109
    5ad4:	fd e2       	ldi	r31, 0x2D	; 45
    5ad6:	0c 94 95 4d 	jmp	0x9b2a	; 0x9b2a <__prologue_saves__+0xe>
    5ada:	5c 01       	movw	r10, r24
    5adc:	6a 01       	movw	r12, r20
    5ade:	7b 01       	movw	r14, r22
    5ae0:	92 2e       	mov	r9, r18
    5ae2:	e8 01       	movw	r28, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    5ae4:	88 e8       	ldi	r24, 0x88	; 136
    5ae6:	94 e1       	ldi	r25, 0x14	; 20
    5ae8:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    buff[0] = 'g';
    5aec:	87 e6       	ldi	r24, 0x67	; 103
    5aee:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    5af0:	bb 27       	eor	r27, r27
    5af2:	af 2d       	mov	r26, r15
    5af4:	9e 2d       	mov	r25, r14
    5af6:	8d 2d       	mov	r24, r13
    5af8:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    5afa:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize>>1;
    5afc:	89 2d       	mov	r24, r9
    5afe:	86 95       	lsr	r24
    5b00:	8b 83       	std	Y+3, r24	; 0x03
    buff[4] = 'F';
    5b02:	86 e4       	ldi	r24, 0x46	; 70
    5b04:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    5b06:	c5 01       	movw	r24, r10
    5b08:	60 e7       	ldi	r22, 0x70	; 112
    5b0a:	a8 01       	movw	r20, r16
    5b0c:	25 e0       	ldi	r18, 0x05	; 5
    5b0e:	09 2d       	mov	r16, r9
    5b10:	0e 94 21 39 	call	0x7242	; 0x7242 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    5b14:	d5 01       	movw	r26, r10
    5b16:	1d 96       	adiw	r26, 0x0d	; 13
    5b18:	8c 91       	ld	r24, X
    5b1a:	1d 97       	sbiw	r26, 0x0d	; 13
    5b1c:	88 23       	and	r24, r24
    5b1e:	d1 f7       	brne	.-12     	; 0x5b14 <readPage+0x46>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    5b20:	1e 96       	adiw	r26, 0x0e	; 14
    5b22:	8c 91       	ld	r24, X
    5b24:	1e 97       	sbiw	r26, 0x0e	; 14
    5b26:	81 30       	cpi	r24, 0x01	; 1
    5b28:	b9 f0       	breq	.+46     	; 0x5b58 <readPage+0x8a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    5b2a:	1e 96       	adiw	r26, 0x0e	; 14
    5b2c:	2c 91       	ld	r18, X
    5b2e:	00 d0       	rcall	.+0      	; 0x5b30 <readPage+0x62>
    5b30:	0f 92       	push	r0
    5b32:	ed b7       	in	r30, 0x3d	; 61
    5b34:	fe b7       	in	r31, 0x3e	; 62
    5b36:	31 96       	adiw	r30, 0x01	; 1
    5b38:	8b e6       	ldi	r24, 0x6B	; 107
    5b3a:	94 e1       	ldi	r25, 0x14	; 20
    5b3c:	ad b7       	in	r26, 0x3d	; 61
    5b3e:	be b7       	in	r27, 0x3e	; 62
    5b40:	11 96       	adiw	r26, 0x01	; 1
    5b42:	8d 93       	st	X+, r24
    5b44:	9c 93       	st	X, r25
    5b46:	12 97       	sbiw	r26, 0x02	; 2
    5b48:	22 83       	std	Z+2, r18	; 0x02
    5b4a:	13 82       	std	Z+3, r1	; 0x03
    5b4c:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    5b50:	0f 90       	pop	r0
    5b52:	0f 90       	pop	r0
    5b54:	0f 90       	pop	r0
    5b56:	0f 90       	pop	r0
    5b58:	de 01       	movw	r26, r28
    5b5a:	90 e0       	ldi	r25, 0x00	; 0
    5b5c:	0a c0       	rjmp	.+20     	; 0x5b72 <readPage+0xa4>
    }
    
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    5b5e:	e5 01       	movw	r28, r10
    5b60:	ed 81       	ldd	r30, Y+5	; 0x05
    5b62:	fe 81       	ldd	r31, Y+6	; 0x06
    5b64:	e9 0f       	add	r30, r25
    5b66:	f1 1d       	adc	r31, r1
    5b68:	80 81       	ld	r24, Z
    5b6a:	14 96       	adiw	r26, 0x04	; 4
    5b6c:	8c 93       	st	X, r24
    5b6e:	14 97       	sbiw	r26, 0x04	; 4
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    
    for (i = 0; i < psize; i++) {
    5b70:	9f 5f       	subi	r25, 0xFF	; 255
    5b72:	11 96       	adiw	r26, 0x01	; 1
    5b74:	99 15       	cp	r25, r9
    5b76:	98 f3       	brcs	.-26     	; 0x5b5e <readPage+0x90>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}
    5b78:	cd b7       	in	r28, 0x3d	; 61
    5b7a:	de b7       	in	r29, 0x3e	; 62
    5b7c:	eb e0       	ldi	r30, 0x0B	; 11
    5b7e:	0c 94 b1 4d 	jmp	0x9b62	; 0x9b62 <__epilogue_restores__+0xe>

00005b82 <progPage>:
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
	}	 	
}

void progPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    5b82:	a0 e0       	ldi	r26, 0x00	; 0
    5b84:	b0 e0       	ldi	r27, 0x00	; 0
    5b86:	e7 ec       	ldi	r30, 0xC7	; 199
    5b88:	fd e2       	ldi	r31, 0x2D	; 45
    5b8a:	0c 94 97 4d 	jmp	0x9b2e	; 0x9b2e <__prologue_saves__+0x12>
    5b8e:	ec 01       	movw	r28, r24
    5b90:	6a 01       	movw	r12, r20
    5b92:	7b 01       	movw	r14, r22
    5b94:	b2 2e       	mov	r11, r18
    xputs(PSTR("#"));
    5b96:	88 ea       	ldi	r24, 0xA8	; 168
    5b98:	94 e1       	ldi	r25, 0x14	; 20
    5b9a:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
//  xprintf(PSTR("flash page write: 0x%lX 0x%X\n"), paddr, psize);
    buff[0] = 'B';
    5b9e:	82 e4       	ldi	r24, 0x42	; 66
    5ba0:	d8 01       	movw	r26, r16
    5ba2:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    5ba4:	bb 27       	eor	r27, r27
    5ba6:	af 2d       	mov	r26, r15
    5ba8:	9e 2d       	mov	r25, r14
    5baa:	8d 2d       	mov	r24, r13
    5bac:	f8 01       	movw	r30, r16
    5bae:	81 83       	std	Z+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    5bb0:	c2 82       	std	Z+2, r12	; 0x02
    buff[3] = psize>>1;
    5bb2:	8b 2d       	mov	r24, r11
    5bb4:	86 95       	lsr	r24
    5bb6:	83 83       	std	Z+3, r24	; 0x03
    buff[4] = 'F';
    5bb8:	86 e4       	ldi	r24, 0x46	; 70
    5bba:	84 83       	std	Z+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    5bbc:	f5 e0       	ldi	r31, 0x05	; 5
    5bbe:	bf 0e       	add	r11, r31
    5bc0:	ce 01       	movw	r24, r28
    5bc2:	60 e7       	ldi	r22, 0x70	; 112
    5bc4:	a8 01       	movw	r20, r16
    5bc6:	2b 2d       	mov	r18, r11
    5bc8:	00 e0       	ldi	r16, 0x00	; 0
    5bca:	0e 94 21 39 	call	0x7242	; 0x7242 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    5bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bd0:	88 23       	and	r24, r24
    5bd2:	e9 f7       	brne	.-6      	; 0x5bce <progPage+0x4c>
        /* Wait until transaction is complete. */
        //xputs(PSTR("I am waiting.\n"));
    }
    if (twi->result != TWIM_RESULT_OK) {
    5bd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    5bd6:	81 30       	cpi	r24, 0x01	; 1
    5bd8:	b1 f0       	breq	.+44     	; 0x5c06 <progPage+0x84>
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    5bda:	2e 85       	ldd	r18, Y+14	; 0x0e
    5bdc:	00 d0       	rcall	.+0      	; 0x5bde <progPage+0x5c>
    5bde:	0f 92       	push	r0
    5be0:	ed b7       	in	r30, 0x3d	; 61
    5be2:	fe b7       	in	r31, 0x3e	; 62
    5be4:	31 96       	adiw	r30, 0x01	; 1
    5be6:	8a e8       	ldi	r24, 0x8A	; 138
    5be8:	94 e1       	ldi	r25, 0x14	; 20
    5bea:	ad b7       	in	r26, 0x3d	; 61
    5bec:	be b7       	in	r27, 0x3e	; 62
    5bee:	11 96       	adiw	r26, 0x01	; 1
    5bf0:	8d 93       	st	X+, r24
    5bf2:	9c 93       	st	X, r25
    5bf4:	12 97       	sbiw	r26, 0x02	; 2
    5bf6:	22 83       	std	Z+2, r18	; 0x02
    5bf8:	13 82       	std	Z+3, r1	; 0x03
    5bfa:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    5bfe:	0f 90       	pop	r0
    5c00:	0f 90       	pop	r0
    5c02:	0f 90       	pop	r0
    5c04:	0f 90       	pop	r0
    }
}
    5c06:	cd b7       	in	r28, 0x3d	; 61
    5c08:	de b7       	in	r29, 0x3e	; 62
    5c0a:	e9 e0       	ldi	r30, 0x09	; 9
    5c0c:	0c 94 b3 4d 	jmp	0x9b66	; 0x9b66 <__epilogue_restores__+0x12>

00005c10 <ihex_readrec>:
    }
    xprintf(PSTR("%S\n"), p);
}

static
        int16_t ihex_readrec(ihexrec_t * ihex, char * rec) {
    5c10:	af e0       	ldi	r26, 0x0F	; 15
    5c12:	b0 e0       	ldi	r27, 0x00	; 0
    5c14:	ee e0       	ldi	r30, 0x0E	; 14
    5c16:	fe e2       	ldi	r31, 0x2E	; 46
    5c18:	0c 94 8e 4d 	jmp	0x9b1c	; 0x9b1c <__prologue_saves__>
    5c1c:	7c 01       	movw	r14, r24
    5c1e:	8b 01       	movw	r16, r22
    int offset, len;
    char * e;
    unsigned char cksum;
    int rc;
    
    len    = strlen(rec);
    5c20:	db 01       	movw	r26, r22
    5c22:	0d 90       	ld	r0, X+
    5c24:	00 20       	and	r0, r0
    5c26:	e9 f7       	brne	.-6      	; 0x5c22 <ihex_readrec+0x12>
    5c28:	6d 01       	movw	r12, r26
    5c2a:	08 94       	sec
    5c2c:	c1 08       	sbc	r12, r1
    5c2e:	d1 08       	sbc	r13, r1
    5c30:	c6 1a       	sub	r12, r22
    5c32:	d7 0a       	sbc	r13, r23
    offset = 1;
    cksum  = 0;
    
    /* reclen */
    if (offset + 2 > len)
    5c34:	b3 e0       	ldi	r27, 0x03	; 3
    5c36:	cb 16       	cp	r12, r27
    5c38:	d1 04       	cpc	r13, r1
    5c3a:	0c f4       	brge	.+2      	; 0x5c3e <ihex_readrec+0x2e>
    5c3c:	f2 c0       	rjmp	.+484    	; 0x5e22 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    5c3e:	fb 01       	movw	r30, r22
    5c40:	81 81       	ldd	r24, Z+1	; 0x01
    5c42:	8b 83       	std	Y+3, r24	; 0x03
    5c44:	82 81       	ldd	r24, Z+2	; 0x02
    5c46:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    5c48:	1d 82       	std	Y+5, r1	; 0x05
    ihex->reclen = strtoul(buf, &e, 16);
    5c4a:	ce 01       	movw	r24, r28
    5c4c:	03 96       	adiw	r24, 0x03	; 3
    5c4e:	8c 87       	std	Y+12, r24	; 0x0c
    5c50:	9d 87       	std	Y+13, r25	; 0x0d
    5c52:	ce 01       	movw	r24, r28
    5c54:	03 96       	adiw	r24, 0x03	; 3
    5c56:	be 01       	movw	r22, r28
    5c58:	6f 5f       	subi	r22, 0xFF	; 255
    5c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c5c:	40 e1       	ldi	r20, 0x10	; 16
    5c5e:	50 e0       	ldi	r21, 0x00	; 0
    5c60:	0e 94 d0 4e 	call	0x9da0	; 0x9da0 <strtoul>
    5c64:	d7 01       	movw	r26, r14
    5c66:	6c 93       	st	X, r22
    if (e == buf || *e != 0)
    5c68:	e9 81       	ldd	r30, Y+1	; 0x01
    5c6a:	fa 81       	ldd	r31, Y+2	; 0x02
    5c6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    5c6e:	9d 85       	ldd	r25, Y+13	; 0x0d
    5c70:	e8 17       	cp	r30, r24
    5c72:	f9 07       	cpc	r31, r25
    5c74:	09 f4       	brne	.+2      	; 0x5c78 <ihex_readrec+0x68>
    5c76:	d5 c0       	rjmp	.+426    	; 0x5e22 <ihex_readrec+0x212>
    5c78:	80 81       	ld	r24, Z
    5c7a:	88 23       	and	r24, r24
    5c7c:	09 f0       	breq	.+2      	; 0x5c80 <ihex_readrec+0x70>
    5c7e:	d1 c0       	rjmp	.+418    	; 0x5e22 <ihex_readrec+0x212>
        return -1;
    
    /* load offset */
    if (offset + 4 > len)
    5c80:	97 e0       	ldi	r25, 0x07	; 7
    5c82:	c9 16       	cp	r12, r25
    5c84:	d1 04       	cpc	r13, r1
    5c86:	0c f4       	brge	.+2      	; 0x5c8a <ihex_readrec+0x7a>
    5c88:	cc c0       	rjmp	.+408    	; 0x5e22 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<4; i++)
        buf[i] = rec[offset++];
    5c8a:	d8 01       	movw	r26, r16
    5c8c:	13 96       	adiw	r26, 0x03	; 3
    5c8e:	8c 91       	ld	r24, X
    5c90:	13 97       	sbiw	r26, 0x03	; 3
    5c92:	8b 83       	std	Y+3, r24	; 0x03
    5c94:	14 96       	adiw	r26, 0x04	; 4
    5c96:	8c 91       	ld	r24, X
    5c98:	14 97       	sbiw	r26, 0x04	; 4
    5c9a:	8c 83       	std	Y+4, r24	; 0x04
    5c9c:	15 96       	adiw	r26, 0x05	; 5
    5c9e:	8c 91       	ld	r24, X
    5ca0:	15 97       	sbiw	r26, 0x05	; 5
    5ca2:	8d 83       	std	Y+5, r24	; 0x05
    5ca4:	16 96       	adiw	r26, 0x06	; 6
    5ca6:	8c 91       	ld	r24, X
    5ca8:	8e 83       	std	Y+6, r24	; 0x06
    buf[i] = 0;
    5caa:	1f 82       	std	Y+7, r1	; 0x07
    ihex->loadofs = strtoul(buf, &e, 16);
    5cac:	ce 01       	movw	r24, r28
    5cae:	03 96       	adiw	r24, 0x03	; 3
    5cb0:	be 01       	movw	r22, r28
    5cb2:	6f 5f       	subi	r22, 0xFF	; 255
    5cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    5cb6:	40 e1       	ldi	r20, 0x10	; 16
    5cb8:	50 e0       	ldi	r21, 0x00	; 0
    5cba:	0e 94 d0 4e 	call	0x9da0	; 0x9da0 <strtoul>
    5cbe:	f7 01       	movw	r30, r14
    5cc0:	61 83       	std	Z+1, r22	; 0x01
    5cc2:	72 83       	std	Z+2, r23	; 0x02
    if (e == buf || *e != 0)
    5cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    5cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    5cc8:	8c 85       	ldd	r24, Y+12	; 0x0c
    5cca:	9d 85       	ldd	r25, Y+13	; 0x0d
    5ccc:	e8 17       	cp	r30, r24
    5cce:	f9 07       	cpc	r31, r25
    5cd0:	09 f4       	brne	.+2      	; 0x5cd4 <ihex_readrec+0xc4>
    5cd2:	a7 c0       	rjmp	.+334    	; 0x5e22 <ihex_readrec+0x212>
    5cd4:	80 81       	ld	r24, Z
    5cd6:	88 23       	and	r24, r24
    5cd8:	09 f0       	breq	.+2      	; 0x5cdc <ihex_readrec+0xcc>
    5cda:	a3 c0       	rjmp	.+326    	; 0x5e22 <ihex_readrec+0x212>
        return -1;
    
    /* record type */
    if (offset + 2 > len)
    5cdc:	99 e0       	ldi	r25, 0x09	; 9
    5cde:	c9 16       	cp	r12, r25
    5ce0:	d1 04       	cpc	r13, r1
    5ce2:	0c f4       	brge	.+2      	; 0x5ce6 <ihex_readrec+0xd6>
    5ce4:	9e c0       	rjmp	.+316    	; 0x5e22 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    5ce6:	d8 01       	movw	r26, r16
    5ce8:	17 96       	adiw	r26, 0x07	; 7
    5cea:	8c 91       	ld	r24, X
    5cec:	17 97       	sbiw	r26, 0x07	; 7
    5cee:	8b 83       	std	Y+3, r24	; 0x03
    5cf0:	18 96       	adiw	r26, 0x08	; 8
    5cf2:	8c 91       	ld	r24, X
    5cf4:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    5cf6:	1d 82       	std	Y+5, r1	; 0x05
    ihex->rectyp = strtoul(buf, &e, 16);
    5cf8:	ce 01       	movw	r24, r28
    5cfa:	03 96       	adiw	r24, 0x03	; 3
    5cfc:	be 01       	movw	r22, r28
    5cfe:	6f 5f       	subi	r22, 0xFF	; 255
    5d00:	7f 4f       	sbci	r23, 0xFF	; 255
    5d02:	40 e1       	ldi	r20, 0x10	; 16
    5d04:	50 e0       	ldi	r21, 0x00	; 0
    5d06:	0e 94 d0 4e 	call	0x9da0	; 0x9da0 <strtoul>
    5d0a:	f7 01       	movw	r30, r14
    5d0c:	63 83       	std	Z+3, r22	; 0x03
    if (e == buf || *e != 0)
    5d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    5d10:	fa 81       	ldd	r31, Y+2	; 0x02
    5d12:	8c 85       	ldd	r24, Y+12	; 0x0c
    5d14:	9d 85       	ldd	r25, Y+13	; 0x0d
    5d16:	e8 17       	cp	r30, r24
    5d18:	f9 07       	cpc	r31, r25
    5d1a:	09 f4       	brne	.+2      	; 0x5d1e <ihex_readrec+0x10e>
    5d1c:	82 c0       	rjmp	.+260    	; 0x5e22 <ihex_readrec+0x212>
    5d1e:	80 81       	ld	r24, Z
    5d20:	88 23       	and	r24, r24
    5d22:	09 f0       	breq	.+2      	; 0x5d26 <ihex_readrec+0x116>
    5d24:	7e c0       	rjmp	.+252    	; 0x5e22 <ihex_readrec+0x212>
        return -1;
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
    5d26:	d7 01       	movw	r26, r14
    5d28:	11 96       	adiw	r26, 0x01	; 1
    5d2a:	8c 91       	ld	r24, X
    5d2c:	11 97       	sbiw	r26, 0x01	; 1
    5d2e:	12 96       	adiw	r26, 0x02	; 2
    5d30:	9c 91       	ld	r25, X
    5d32:	12 97       	sbiw	r26, 0x02	; 2
    5d34:	7c 90       	ld	r7, X
    5d36:	78 0e       	add	r7, r24
    5d38:	79 0e       	add	r7, r25
    5d3a:	76 0e       	add	r7, r22
    5d3c:	48 01       	movw	r8, r16
    5d3e:	17 01       	movw	r2, r14
    5d40:	44 24       	eor	r4, r4
    5d42:	55 24       	eor	r5, r5
    5d44:	b9 e0       	ldi	r27, 0x09	; 9
    5d46:	ab 2e       	mov	r10, r27
    5d48:	b1 2c       	mov	r11, r1
        if (offset + 2 > len)
            return -1;
        for (i=0; i<2; i++)
            buf[i] = rec[offset++];
        buf[i] = 0;
        ihex->data[j] = strtoul(buf, &e, 16);
    5d4a:	fe 01       	movw	r30, r28
    5d4c:	33 96       	adiw	r30, 0x03	; 3
    5d4e:	ee 87       	std	Y+14, r30	; 0x0e
    5d50:	ff 87       	std	Y+15, r31	; 0x0f
    5d52:	ce 01       	movw	r24, r28
    5d54:	01 96       	adiw	r24, 0x01	; 1
    5d56:	8b 87       	std	Y+11, r24	; 0x0b
    5d58:	69 2e       	mov	r6, r25
    5d5a:	32 c0       	rjmp	.+100    	; 0x5dc0 <ihex_readrec+0x1b0>
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++) {
        if (offset + 2 > len)
    5d5c:	2c 15       	cp	r18, r12
    5d5e:	3d 05       	cpc	r19, r13
    5d60:	0c f0       	brlt	.+2      	; 0x5d64 <ihex_readrec+0x154>
    5d62:	5f c0       	rjmp	.+190    	; 0x5e22 <ihex_readrec+0x212>
            return -1;
        for (i=0; i<2; i++)
            buf[i] = rec[offset++];
    5d64:	d4 01       	movw	r26, r8
    5d66:	19 96       	adiw	r26, 0x09	; 9
    5d68:	8c 91       	ld	r24, X
    5d6a:	19 97       	sbiw	r26, 0x09	; 9
    5d6c:	8b 83       	std	Y+3, r24	; 0x03
    5d6e:	1a 96       	adiw	r26, 0x0a	; 10
    5d70:	8c 91       	ld	r24, X
    5d72:	8c 83       	std	Y+4, r24	; 0x04
    5d74:	e2 e0       	ldi	r30, 0x02	; 2
    5d76:	f0 e0       	ldi	r31, 0x00	; 0
    5d78:	ae 0e       	add	r10, r30
    5d7a:	bf 1e       	adc	r11, r31
        buf[i] = 0;
    5d7c:	1d 82       	std	Y+5, r1	; 0x05
        ihex->data[j] = strtoul(buf, &e, 16);
    5d7e:	ce 01       	movw	r24, r28
    5d80:	03 96       	adiw	r24, 0x03	; 3
    5d82:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d84:	76 2d       	mov	r23, r6
    5d86:	40 e1       	ldi	r20, 0x10	; 16
    5d88:	50 e0       	ldi	r21, 0x00	; 0
    5d8a:	0e 94 d0 4e 	call	0x9da0	; 0x9da0 <strtoul>
    5d8e:	d1 01       	movw	r26, r2
    5d90:	14 96       	adiw	r26, 0x04	; 4
    5d92:	6c 93       	st	X, r22
        if (e == buf || *e != 0)
    5d94:	e9 81       	ldd	r30, Y+1	; 0x01
    5d96:	fa 81       	ldd	r31, Y+2	; 0x02
    5d98:	8e 85       	ldd	r24, Y+14	; 0x0e
    5d9a:	9f 85       	ldd	r25, Y+15	; 0x0f
    5d9c:	e8 17       	cp	r30, r24
    5d9e:	f9 07       	cpc	r31, r25
    5da0:	09 f4       	brne	.+2      	; 0x5da4 <ihex_readrec+0x194>
    5da2:	3f c0       	rjmp	.+126    	; 0x5e22 <ihex_readrec+0x212>
    5da4:	a2 e0       	ldi	r26, 0x02	; 2
    5da6:	b0 e0       	ldi	r27, 0x00	; 0
    5da8:	8a 0e       	add	r8, r26
    5daa:	9b 1e       	adc	r9, r27
    5dac:	08 94       	sec
    5dae:	21 1c       	adc	r2, r1
    5db0:	31 1c       	adc	r3, r1
    5db2:	80 81       	ld	r24, Z
    5db4:	88 23       	and	r24, r24
    5db6:	a9 f5       	brne	.+106    	; 0x5e22 <ihex_readrec+0x212>
            return -1;
        cksum += ihex->data[j];
    5db8:	76 0e       	add	r7, r22
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++) {
    5dba:	08 94       	sec
    5dbc:	41 1c       	adc	r4, r1
    5dbe:	51 1c       	adc	r5, r1
    5dc0:	f7 01       	movw	r30, r14
    5dc2:	80 81       	ld	r24, Z
    5dc4:	90 e0       	ldi	r25, 0x00	; 0
    5dc6:	95 01       	movw	r18, r10
    5dc8:	2f 5f       	subi	r18, 0xFF	; 255
    5dca:	3f 4f       	sbci	r19, 0xFF	; 255
    5dcc:	48 16       	cp	r4, r24
    5dce:	59 06       	cpc	r5, r25
    5dd0:	2c f2       	brlt	.-118    	; 0x5d5c <ihex_readrec+0x14c>
            return -1;
        cksum += ihex->data[j];
    }
    
    /* cksum */
    if (offset + 2 > len)
    5dd2:	2c 15       	cp	r18, r12
    5dd4:	3d 05       	cpc	r19, r13
    5dd6:	2c f5       	brge	.+74     	; 0x5e22 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    5dd8:	f8 01       	movw	r30, r16
    5dda:	ea 0d       	add	r30, r10
    5ddc:	fb 1d       	adc	r31, r11
    5dde:	80 81       	ld	r24, Z
    5de0:	8b 83       	std	Y+3, r24	; 0x03
    5de2:	81 81       	ldd	r24, Z+1	; 0x01
    5de4:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    5de6:	1d 82       	std	Y+5, r1	; 0x05
    ihex->cksum = strtoul(buf, &e, 16);
    5de8:	8e 01       	movw	r16, r28
    5dea:	0d 5f       	subi	r16, 0xFD	; 253
    5dec:	1f 4f       	sbci	r17, 0xFF	; 255
    5dee:	c8 01       	movw	r24, r16
    5df0:	be 01       	movw	r22, r28
    5df2:	6f 5f       	subi	r22, 0xFF	; 255
    5df4:	7f 4f       	sbci	r23, 0xFF	; 255
    5df6:	40 e1       	ldi	r20, 0x10	; 16
    5df8:	50 e0       	ldi	r21, 0x00	; 0
    5dfa:	0e 94 d0 4e 	call	0x9da0	; 0x9da0 <strtoul>
    5dfe:	84 e0       	ldi	r24, 0x04	; 4
    5e00:	91 e0       	ldi	r25, 0x01	; 1
    5e02:	e8 0e       	add	r14, r24
    5e04:	f9 1e       	adc	r15, r25
    5e06:	d7 01       	movw	r26, r14
    5e08:	6c 93       	st	X, r22
    if (e == buf || *e != 0)
    5e0a:	e9 81       	ldd	r30, Y+1	; 0x01
    5e0c:	fa 81       	ldd	r31, Y+2	; 0x02
    5e0e:	e0 17       	cp	r30, r16
    5e10:	f1 07       	cpc	r31, r17
    5e12:	39 f0       	breq	.+14     	; 0x5e22 <ihex_readrec+0x212>
    5e14:	80 81       	ld	r24, Z
    5e16:	88 23       	and	r24, r24
    5e18:	21 f4       	brne	.+8      	; 0x5e22 <ihex_readrec+0x212>
        return -1;
    
    rc = -cksum & 0x000000ff;
    5e1a:	71 94       	neg	r7
    5e1c:	27 2d       	mov	r18, r7
    5e1e:	30 e0       	ldi	r19, 0x00	; 0
    5e20:	02 c0       	rjmp	.+4      	; 0x5e26 <ihex_readrec+0x216>
    
    return rc;
    5e22:	2f ef       	ldi	r18, 0xFF	; 255
    5e24:	3f ef       	ldi	r19, 0xFF	; 255
}
    5e26:	c9 01       	movw	r24, r18
    5e28:	2f 96       	adiw	r28, 0x0f	; 15
    5e2a:	e2 e1       	ldi	r30, 0x12	; 18
    5e2c:	0c 94 aa 4d 	jmp	0x9b54	; 0x9b54 <__epilogue_restores__>

00005e30 <eeprom_panel>:
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    }
};

void eeprom_panel(uint8_t panel_num) {
    5e30:	a2 e9       	ldi	r26, 0x92	; 146
    5e32:	b2 e0       	ldi	r27, 0x02	; 2
    5e34:	ee e1       	ldi	r30, 0x1E	; 30
    5e36:	ff e2       	ldi	r31, 0x2F	; 47
    5e38:	0c 94 8e 4d 	jmp	0x9b1c	; 0x9b1c <__prologue_saves__>
    5e3c:	08 2f       	mov	r16, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t eepromBuff[256];
    
    ch = chMap[panel_num];
    5e3e:	e8 2e       	mov	r14, r24
    5e40:	ff 24       	eor	r15, r15
    5e42:	f7 01       	movw	r30, r14
    5e44:	e5 5b       	subi	r30, 0xB5	; 181
    5e46:	f9 4d       	sbci	r31, 0xD9	; 217
    5e48:	e0 81       	ld	r30, Z
    if (ch != 0){
    5e4a:	ee 23       	and	r30, r30
    5e4c:	09 f4       	brne	.+2      	; 0x5e50 <eeprom_panel+0x20>
    5e4e:	eb c2       	rjmp	.+1494   	; 0x6426 <eeprom_panel+0x5f6>
        
        switch (ch) {
    5e50:	e3 30       	cpi	r30, 0x03	; 3
    5e52:	71 f0       	breq	.+28     	; 0x5e70 <eeprom_panel+0x40>
    5e54:	e4 30       	cpi	r30, 0x04	; 4
    5e56:	89 f0       	breq	.+34     	; 0x5e7a <eeprom_panel+0x4a>
    5e58:	e2 30       	cpi	r30, 0x02	; 2
    5e5a:	29 f4       	brne	.+10     	; 0x5e66 <eeprom_panel+0x36>
    5e5c:	8e e8       	ldi	r24, 0x8E	; 142
    5e5e:	88 2e       	mov	r8, r24
    5e60:	88 e2       	ldi	r24, 0x28	; 40
    5e62:	98 2e       	mov	r9, r24
    5e64:	0e c0       	rjmp	.+28     	; 0x5e82 <eeprom_panel+0x52>
    5e66:	13 e9       	ldi	r17, 0x93	; 147
    5e68:	81 2e       	mov	r8, r17
    5e6a:	15 e2       	ldi	r17, 0x25	; 37
    5e6c:	91 2e       	mov	r9, r17
    5e6e:	09 c0       	rjmp	.+18     	; 0x5e82 <eeprom_panel+0x52>
    5e70:	bb e3       	ldi	r27, 0x3B	; 59
    5e72:	8b 2e       	mov	r8, r27
    5e74:	b6 e2       	ldi	r27, 0x26	; 38
    5e76:	9b 2e       	mov	r9, r27
    5e78:	04 c0       	rjmp	.+8      	; 0x5e82 <eeprom_panel+0x52>
            case 2:
                twi = &twi2;
                break;
            case 3:
                twi = &twi3;
                break;
    5e7a:	a7 eb       	ldi	r26, 0xB7	; 183
    5e7c:	8a 2e       	mov	r8, r26
    5e7e:	a4 e2       	ldi	r26, 0x24	; 36
    5e80:	9a 2e       	mov	r9, r26
                twi = &twi1;
                break;
        }
        
        // open the hex file for reading
        res = f_open(&file6, panelEEprom, FA_OPEN_EXISTING | FA_READ);
    5e82:	80 ef       	ldi	r24, 0xF0	; 240
    5e84:	96 e2       	ldi	r25, 0x26	; 38
    5e86:	61 ed       	ldi	r22, 0xD1	; 209
    5e88:	73 e2       	ldi	r23, 0x23	; 35
    5e8a:	41 e0       	ldi	r20, 0x01	; 1
    5e8c:	0e 94 91 40 	call	0x8122	; 0x8122 <f_open>
    5e90:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    5e92:	88 23       	and	r24, r24
    5e94:	49 f0       	breq	.+18     	; 0x5ea8 <eeprom_panel+0x78>
            // could'n open the file
            xputs(PSTR("Error f_open in eeprom.hex.\n"));
    5e96:	87 ef       	ldi	r24, 0xF7	; 247
    5e98:	90 e1       	ldi	r25, 0x10	; 16
    5e9a:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
            put_rc(res);
    5e9e:	81 2f       	mov	r24, r17
    5ea0:	90 e0       	ldi	r25, 0x00	; 0
    5ea2:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <put_rc>
    5ea6:	3d c0       	rjmp	.+122    	; 0x5f22 <eeprom_panel+0xf2>
            } else {
                // use cmd reset (assumes panel firmware already loaded)
                //i2cMasterSend(panel_num, 2, RESET);
                
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("eeprom panel %u.\n"), panel_num);
    5ea8:	00 d0       	rcall	.+0      	; 0x5eaa <eeprom_panel+0x7a>
    5eaa:	0f 92       	push	r0
    5eac:	85 ee       	ldi	r24, 0xE5	; 229
    5eae:	90 e1       	ldi	r25, 0x10	; 16
    5eb0:	ad b7       	in	r26, 0x3d	; 61
    5eb2:	be b7       	in	r27, 0x3e	; 62
    5eb4:	11 96       	adiw	r26, 0x01	; 1
    5eb6:	8d 93       	st	X+, r24
    5eb8:	9c 93       	st	X, r25
    5eba:	12 97       	sbiw	r26, 0x02	; 2
    5ebc:	13 96       	adiw	r26, 0x03	; 3
    5ebe:	ed 92       	st	X+, r14
    5ec0:	fc 92       	st	X, r15
    5ec2:	14 97       	sbiw	r26, 0x04	; 4
    5ec4:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
                pagebuff[0] = 0x00;
    5ec8:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    5eca:	81 e0       	ldi	r24, 0x01	; 1
    5ecc:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    5ece:	0f 90       	pop	r0
    5ed0:	0f 90       	pop	r0
    5ed2:	0f 90       	pop	r0
    5ed4:	0f 90       	pop	r0
    5ed6:	c4 01       	movw	r24, r8
    5ed8:	60 2f       	mov	r22, r16
    5eda:	ae 01       	movw	r20, r28
    5edc:	4f 5f       	subi	r20, 0xFF	; 255
    5ede:	5f 4f       	sbci	r21, 0xFF	; 255
    5ee0:	22 e0       	ldi	r18, 0x02	; 2
    5ee2:	00 e0       	ldi	r16, 0x00	; 0
    5ee4:	0e 94 21 39 	call	0x7242	; 0x7242 <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY) {
    5ee8:	f4 01       	movw	r30, r8
    5eea:	85 85       	ldd	r24, Z+13	; 0x0d
    5eec:	88 23       	and	r24, r24
    5eee:	e1 f7       	brne	.-8      	; 0x5ee8 <eeprom_panel+0xb8>
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK) {
    5ef0:	86 85       	ldd	r24, Z+14	; 0x0e
    5ef2:	81 30       	cpi	r24, 0x01	; 1
    5ef4:	b1 f0       	breq	.+44     	; 0x5f22 <eeprom_panel+0xf2>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    5ef6:	26 85       	ldd	r18, Z+14	; 0x0e
    5ef8:	00 d0       	rcall	.+0      	; 0x5efa <eeprom_panel+0xca>
    5efa:	0f 92       	push	r0
    5efc:	ed b7       	in	r30, 0x3d	; 61
    5efe:	fe b7       	in	r31, 0x3e	; 62
    5f00:	31 96       	adiw	r30, 0x01	; 1
    5f02:	87 ec       	ldi	r24, 0xC7	; 199
    5f04:	90 e1       	ldi	r25, 0x10	; 16
    5f06:	ad b7       	in	r26, 0x3d	; 61
    5f08:	be b7       	in	r27, 0x3e	; 62
    5f0a:	11 96       	adiw	r26, 0x01	; 1
    5f0c:	8d 93       	st	X+, r24
    5f0e:	9c 93       	st	X, r25
    5f10:	12 97       	sbiw	r26, 0x02	; 2
    5f12:	22 83       	std	Z+2, r18	; 0x02
    5f14:	13 82       	std	Z+3, r1	; 0x03
    5f16:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    5f1a:	0f 90       	pop	r0
    5f1c:	0f 90       	pop	r0
    5f1e:	0f 90       	pop	r0
    5f20:	0f 90       	pop	r0
    5f22:	88 e8       	ldi	r24, 0x88	; 136
    5f24:	93 e1       	ldi	r25, 0x13	; 19
    5f26:	20 e2       	ldi	r18, 0x20	; 32
    5f28:	33 e0       	ldi	r19, 0x03	; 3
    5f2a:	f9 01       	movw	r30, r18
    5f2c:	31 97       	sbiw	r30, 0x01	; 1
    5f2e:	f1 f7       	brne	.-4      	; 0x5f2c <eeprom_panel+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f30:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f32:	d9 f7       	brne	.-10     	; 0x5f2a <eeprom_panel+0xfa>
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    5f34:	8a eb       	ldi	r24, 0xBA	; 186
    5f36:	90 e1       	ldi	r25, 0x10	; 16
    5f38:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    5f3c:	0f ef       	ldi	r16, 0xFF	; 255
    5f3e:	1f ef       	ldi	r17, 0xFF	; 255
    5f40:	cc 24       	eor	r12, r12
    5f42:	dd 24       	eor	r13, r13
    5f44:	66 24       	eor	r6, r6
    5f46:	77 24       	eor	r7, r7
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    5f48:	f6 e8       	ldi	r31, 0x86	; 134
    5f4a:	4f 2e       	mov	r4, r31
    5f4c:	51 2c       	mov	r5, r1
    5f4e:	4c 0e       	add	r4, r28
    5f50:	5d 1e       	adc	r5, r29
            len = strlen(eepromBuff);
            if (eepromBuff[len-1] == '\n')
                eepromBuff[--len] = 0;
            if (eepromBuff[0] != ':')
                continue;
            rc = ihex_readrec(&ihex, eepromBuff);
    5f52:	e6 e8       	ldi	r30, 0x86	; 134
    5f54:	2e 2e       	mov	r2, r30
    5f56:	e1 e0       	ldi	r30, 0x01	; 1
    5f58:	3e 2e       	mov	r3, r30
    5f5a:	2c 0e       	add	r2, r28
    5f5c:	3d 1e       	adc	r3, r29
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    5f5e:	f1 01       	movw	r30, r2
    5f60:	34 96       	adiw	r30, 0x04	; 4
    5f62:	c1 57       	subi	r28, 0x71	; 113
    5f64:	dd 4f       	sbci	r29, 0xFD	; 253
    5f66:	e8 83       	st	Y, r30
    5f68:	f9 83       	std	Y+1, r31	; 0x01
    5f6a:	cf 58       	subi	r28, 0x8F	; 143
    5f6c:	d2 40       	sbci	r29, 0x02	; 2
    5f6e:	d6 c0       	rjmp	.+428    	; 0x611c <eeprom_panel+0x2ec>
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
            lineno++;
    5f70:	08 94       	sec
    5f72:	61 1c       	adc	r6, r1
    5f74:	71 1c       	adc	r7, r1
            len = strlen(eepromBuff);
    5f76:	f2 01       	movw	r30, r4
    5f78:	01 90       	ld	r0, Z+
    5f7a:	00 20       	and	r0, r0
    5f7c:	e9 f7       	brne	.-6      	; 0x5f78 <eeprom_panel+0x148>
            if (eepromBuff[len-1] == '\n')
    5f7e:	32 97       	sbiw	r30, 0x02	; 2
    5f80:	80 81       	ld	r24, Z
    5f82:	8a 30       	cpi	r24, 0x0A	; 10
    5f84:	09 f4       	brne	.+2      	; 0x5f88 <eeprom_panel+0x158>
                eepromBuff[--len] = 0;
    5f86:	10 82       	st	Z, r1
            if (eepromBuff[0] != ':')
    5f88:	d2 01       	movw	r26, r4
    5f8a:	8c 91       	ld	r24, X
    5f8c:	8a 33       	cpi	r24, 0x3A	; 58
    5f8e:	09 f0       	breq	.+2      	; 0x5f92 <eeprom_panel+0x162>
    5f90:	c5 c0       	rjmp	.+394    	; 0x611c <eeprom_panel+0x2ec>
                continue;
            rc = ihex_readrec(&ihex, eepromBuff);
    5f92:	c1 01       	movw	r24, r2
    5f94:	b2 01       	movw	r22, r4
    5f96:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <ihex_readrec>
    5f9a:	f8 2e       	mov	r15, r24
            if (rc < 0) {
                xprintf(PSTR("invalid record at line %d of eeprom.hex.\n"), lineno);
                break;
            } else if (rc != ihex.cksum) {
    5f9c:	c6 57       	subi	r28, 0x76	; 118
    5f9e:	dd 4f       	sbci	r29, 0xFD	; 253
    5fa0:	88 81       	ld	r24, Y
    5fa2:	ca 58       	subi	r28, 0x8A	; 138
    5fa4:	d2 40       	sbci	r29, 0x02	; 2
    5fa6:	f8 16       	cp	r15, r24
    5fa8:	19 f1       	breq	.+70     	; 0x5ff0 <eeprom_panel+0x1c0>
                xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex.\n"), lineno);
    5faa:	00 d0       	rcall	.+0      	; 0x5fac <eeprom_panel+0x17c>
    5fac:	0f 92       	push	r0
    5fae:	86 e8       	ldi	r24, 0x86	; 134
    5fb0:	90 e1       	ldi	r25, 0x10	; 16
    5fb2:	ed b7       	in	r30, 0x3d	; 61
    5fb4:	fe b7       	in	r31, 0x3e	; 62
    5fb6:	81 83       	std	Z+1, r24	; 0x01
    5fb8:	92 83       	std	Z+2, r25	; 0x02
    5fba:	63 82       	std	Z+3, r6	; 0x03
    5fbc:	74 82       	std	Z+4, r7	; 0x04
    5fbe:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    5fc2:	0f 92       	push	r0
    5fc4:	0f 92       	push	r0
    5fc6:	ed b7       	in	r30, 0x3d	; 61
    5fc8:	fe b7       	in	r31, 0x3e	; 62
    5fca:	31 96       	adiw	r30, 0x01	; 1
    5fcc:	8b e5       	ldi	r24, 0x5B	; 91
    5fce:	90 e1       	ldi	r25, 0x10	; 16
    5fd0:	ad b7       	in	r26, 0x3d	; 61
    5fd2:	be b7       	in	r27, 0x3e	; 62
    5fd4:	11 96       	adiw	r26, 0x01	; 1
    5fd6:	8d 93       	st	X+, r24
    5fd8:	9c 93       	st	X, r25
    5fda:	12 97       	sbiw	r26, 0x02	; 2
    5fdc:	c6 57       	subi	r28, 0x76	; 118
    5fde:	dd 4f       	sbci	r29, 0xFD	; 253
    5fe0:	88 81       	ld	r24, Y
    5fe2:	ca 58       	subi	r28, 0x8A	; 138
    5fe4:	d2 40       	sbci	r29, 0x02	; 2
    5fe6:	82 83       	std	Z+2, r24	; 0x02
    5fe8:	13 82       	std	Z+3, r1	; 0x03
    5fea:	f4 82       	std	Z+4, r15	; 0x04
    5fec:	15 82       	std	Z+5, r1	; 0x05
    5fee:	83 c0       	rjmp	.+262    	; 0x60f6 <eeprom_panel+0x2c6>
                break;
            } else {
                if (ihex.rectyp == 0) {
    5ff0:	d1 01       	movw	r26, r2
    5ff2:	13 96       	adiw	r26, 0x03	; 3
    5ff4:	2c 91       	ld	r18, X
    5ff6:	13 97       	sbiw	r26, 0x03	; 3
    5ff8:	22 23       	and	r18, r18
    5ffa:	09 f0       	breq	.+2      	; 0x5ffe <eeprom_panel+0x1ce>
    5ffc:	53 c0       	rjmp	.+166    	; 0x60a4 <eeprom_panel+0x274>
                    // data record
                    nextaddr = ihex.loadofs;
    5ffe:	11 96       	adiw	r26, 0x01	; 1
    6000:	ed 90       	ld	r14, X+
    6002:	fc 90       	ld	r15, X
    6004:	12 97       	sbiw	r26, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    6006:	57 01       	movw	r10, r14
    6008:	aa 0c       	add	r10, r10
    600a:	ab 2c       	mov	r10, r11
    600c:	aa 1c       	adc	r10, r10
    600e:	bb 08       	sbc	r11, r11
    6010:	b1 94       	neg	r11
    6012:	a0 16       	cp	r10, r16
    6014:	b1 06       	cpc	r11, r17
    6016:	c1 f0       	breq	.+48     	; 0x6048 <eeprom_panel+0x218>
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr) {
    6018:	cd 14       	cp	r12, r13
    601a:	91 f0       	breq	.+36     	; 0x6040 <eeprom_panel+0x210>
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            progEEPage(twi, paddr, psize, &pagebuff[0]);
    601c:	16 95       	lsr	r17
    601e:	10 2f       	mov	r17, r16
    6020:	00 27       	eor	r16, r16
    6022:	17 95       	ror	r17
    6024:	07 95       	ror	r16
    6026:	0c 0d       	add	r16, r12
    6028:	11 1d       	adc	r17, r1
    602a:	a8 01       	movw	r20, r16
    602c:	60 e0       	ldi	r22, 0x00	; 0
    602e:	70 e0       	ldi	r23, 0x00	; 0
    6030:	dc 18       	sub	r13, r12
    6032:	c4 01       	movw	r24, r8
    6034:	2d 2d       	mov	r18, r13
    6036:	8e 01       	movw	r16, r28
    6038:	0f 5f       	subi	r16, 0xFF	; 255
    603a:	1f 4f       	sbci	r17, 0xFF	; 255
    603c:	0e 94 c3 2c 	call	0x5986	; 0x5986 <progEEPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    6040:	5f e7       	ldi	r21, 0x7F	; 127
    6042:	d5 2e       	mov	r13, r21
    6044:	de 20       	and	r13, r14
    6046:	cd 2c       	mov	r12, r13
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    6048:	4e 2d       	mov	r20, r14
    604a:	4f 77       	andi	r20, 0x7F	; 127
    604c:	4c 15       	cp	r20, r12
    604e:	08 f4       	brcc	.+2      	; 0x6052 <eeprom_panel+0x222>
    6050:	c4 2e       	mov	r12, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    6052:	f1 01       	movw	r30, r2
    6054:	50 81       	ld	r21, Z
    6056:	25 2f       	mov	r18, r21
    6058:	30 e0       	ldi	r19, 0x00	; 0
    605a:	c1 57       	subi	r28, 0x71	; 113
    605c:	dd 4f       	sbci	r29, 0xFD	; 253
    605e:	a8 81       	ld	r26, Y
    6060:	b9 81       	ldd	r27, Y+1	; 0x01
    6062:	cf 58       	subi	r28, 0x8F	; 143
    6064:	d2 40       	sbci	r29, 0x02	; 2
    6066:	e4 2f       	mov	r30, r20
    6068:	f0 e0       	ldi	r31, 0x00	; 0
    606a:	35 96       	adiw	r30, 0x05	; 5
    606c:	81 e0       	ldi	r24, 0x01	; 1
    606e:	90 e0       	ldi	r25, 0x00	; 0
    6070:	8c 0f       	add	r24, r28
    6072:	9d 1f       	adc	r25, r29
    6074:	e8 0f       	add	r30, r24
    6076:	f9 1f       	adc	r31, r25
    6078:	2c 5f       	subi	r18, 0xFC	; 252
    607a:	3f 4f       	sbci	r19, 0xFF	; 255
    607c:	22 0d       	add	r18, r2
    607e:	33 1d       	adc	r19, r3
    6080:	02 c0       	rjmp	.+4      	; 0x6086 <eeprom_panel+0x256>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    6082:	8d 91       	ld	r24, X+
    6084:	81 93       	st	Z+, r24
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    6086:	a2 17       	cp	r26, r18
    6088:	b3 07       	cpc	r27, r19
    608a:	d9 f7       	brne	.-10     	; 0x6082 <eeprom_panel+0x252>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                    }
                    if ((pageoffset + ihex.reclen) > pageendaddr)
    608c:	85 2f       	mov	r24, r21
    608e:	90 e0       	ldi	r25, 0x00	; 0
    6090:	84 0f       	add	r24, r20
    6092:	91 1d       	adc	r25, r1
    6094:	2d 2d       	mov	r18, r13
    6096:	30 e0       	ldi	r19, 0x00	; 0
    6098:	28 17       	cp	r18, r24
    609a:	39 07       	cpc	r19, r25
    609c:	f4 f5       	brge	.+124    	; 0x611a <eeprom_panel+0x2ea>
                        pageendaddr = pageoffset+ihex.reclen;
    609e:	d4 2e       	mov	r13, r20
    60a0:	d5 0e       	add	r13, r21
    60a2:	3b c0       	rjmp	.+118    	; 0x611a <eeprom_panel+0x2ea>
                } else if (ihex.rectyp == 1) {
    60a4:	21 30       	cpi	r18, 0x01	; 1
    60a6:	b1 f4       	brne	.+44     	; 0x60d4 <eeprom_panel+0x2a4>
                    // end of file record
                    if (pagestartaddr != pageendaddr) {
    60a8:	cd 14       	cp	r12, r13
    60aa:	09 f4       	brne	.+2      	; 0x60ae <eeprom_panel+0x27e>
    60ac:	41 c0       	rjmp	.+130    	; 0x6130 <eeprom_panel+0x300>
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                        psize = pageendaddr - pagestartaddr;
                        progEEPage(twi, paddr, psize, &pagebuff[0]);
    60ae:	16 95       	lsr	r17
    60b0:	10 2f       	mov	r17, r16
    60b2:	00 27       	eor	r16, r16
    60b4:	17 95       	ror	r17
    60b6:	07 95       	ror	r16
    60b8:	0c 0d       	add	r16, r12
    60ba:	11 1d       	adc	r17, r1
    60bc:	a8 01       	movw	r20, r16
    60be:	60 e0       	ldi	r22, 0x00	; 0
    60c0:	70 e0       	ldi	r23, 0x00	; 0
    60c2:	dc 18       	sub	r13, r12
    60c4:	c4 01       	movw	r24, r8
    60c6:	2d 2d       	mov	r18, r13
    60c8:	8e 01       	movw	r16, r28
    60ca:	0f 5f       	subi	r16, 0xFF	; 255
    60cc:	1f 4f       	sbci	r17, 0xFF	; 255
    60ce:	0e 94 c3 2c 	call	0x5986	; 0x5986 <progEEPage>
    60d2:	2e c0       	rjmp	.+92     	; 0x6130 <eeprom_panel+0x300>
                    }
                    break;
                } else {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex.\n"),
    60d4:	00 d0       	rcall	.+0      	; 0x60d6 <eeprom_panel+0x2a6>
    60d6:	00 d0       	rcall	.+0      	; 0x60d8 <eeprom_panel+0x2a8>
    60d8:	ed b7       	in	r30, 0x3d	; 61
    60da:	fe b7       	in	r31, 0x3e	; 62
    60dc:	31 96       	adiw	r30, 0x01	; 1
    60de:	89 e1       	ldi	r24, 0x19	; 25
    60e0:	90 e1       	ldi	r25, 0x10	; 16
    60e2:	ad b7       	in	r26, 0x3d	; 61
    60e4:	be b7       	in	r27, 0x3e	; 62
    60e6:	11 96       	adiw	r26, 0x01	; 1
    60e8:	8d 93       	st	X+, r24
    60ea:	9c 93       	st	X, r25
    60ec:	12 97       	sbiw	r26, 0x02	; 2
    60ee:	22 83       	std	Z+2, r18	; 0x02
    60f0:	13 82       	std	Z+3, r1	; 0x03
    60f2:	64 82       	std	Z+4, r6	; 0x04
    60f4:	75 82       	std	Z+5, r7	; 0x05
    60f6:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    60fa:	c5 57       	subi	r28, 0x75	; 117
    60fc:	dd 4f       	sbci	r29, 0xFD	; 253
    60fe:	48 82       	st	Y, r4
    6100:	cb 58       	subi	r28, 0x8B	; 139
    6102:	d2 40       	sbci	r29, 0x02	; 2
    6104:	c4 57       	subi	r28, 0x74	; 116
    6106:	dd 4f       	sbci	r29, 0xFD	; 253
    6108:	58 82       	st	Y, r5
    610a:	cc 58       	subi	r28, 0x8C	; 140
    610c:	d2 40       	sbci	r29, 0x02	; 2
    610e:	ed b7       	in	r30, 0x3d	; 61
    6110:	fe b7       	in	r31, 0x3e	; 62
    6112:	36 96       	adiw	r30, 0x06	; 6
    6114:	ed bf       	out	0x3d, r30	; 61
    6116:	fe bf       	out	0x3e, r31	; 62
    6118:	15 c0       	rjmp	.+42     	; 0x6144 <eeprom_panel+0x314>
                            ihex.rectyp, lineno);
                    break;
    611a:	85 01       	movw	r16, r10
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    611c:	c2 01       	movw	r24, r4
    611e:	60 e0       	ldi	r22, 0x00	; 0
    6120:	71 e0       	ldi	r23, 0x01	; 1
    6122:	40 ef       	ldi	r20, 0xF0	; 240
    6124:	56 e2       	ldi	r21, 0x26	; 38
    6126:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <f_gets>
    612a:	89 2b       	or	r24, r25
    612c:	09 f0       	breq	.+2      	; 0x6130 <eeprom_panel+0x300>
    612e:	20 cf       	rjmp	.-448    	; 0x5f70 <eeprom_panel+0x140>
    6130:	c5 57       	subi	r28, 0x75	; 117
    6132:	dd 4f       	sbci	r29, 0xFD	; 253
    6134:	48 82       	st	Y, r4
    6136:	cb 58       	subi	r28, 0x8B	; 139
    6138:	d2 40       	sbci	r29, 0x02	; 2
    613a:	c4 57       	subi	r28, 0x74	; 116
    613c:	dd 4f       	sbci	r29, 0xFD	; 253
    613e:	58 82       	st	Y, r5
    6140:	cc 58       	subi	r28, 0x8C	; 140
    6142:	d2 40       	sbci	r29, 0x02	; 2
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&file6, 0);
    6144:	80 ef       	ldi	r24, 0xF0	; 240
    6146:	96 e2       	ldi	r25, 0x26	; 38
    6148:	40 e0       	ldi	r20, 0x00	; 0
    614a:	50 e0       	ldi	r21, 0x00	; 0
    614c:	60 e0       	ldi	r22, 0x00	; 0
    614e:	70 e0       	ldi	r23, 0x00	; 0
    6150:	0e 94 31 3c 	call	0x7862	; 0x7862 <f_lseek>
    6154:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    6156:	88 23       	and	r24, r24
    6158:	49 f0       	breq	.+18     	; 0x616c <eeprom_panel+0x33c>
            xputs(PSTR("Error f_lseek in eeprom.hex.\n"));
    615a:	8b ef       	ldi	r24, 0xFB	; 251
    615c:	9f e0       	ldi	r25, 0x0F	; 15
    615e:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
            put_rc(res);
    6162:	81 2f       	mov	r24, r17
    6164:	90 e0       	ldi	r25, 0x00	; 0
    6166:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <put_rc>
    616a:	35 c1       	rjmp	.+618    	; 0x63d6 <eeprom_panel+0x5a6>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    616c:	8e ee       	ldi	r24, 0xEE	; 238
    616e:	9f e0       	ldi	r25, 0x0F	; 15
    6170:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    6174:	cc 24       	eor	r12, r12
    6176:	ca 94       	dec	r12
    6178:	dc 2c       	mov	r13, r12
    617a:	00 e0       	ldi	r16, 0x00	; 0
    617c:	10 e0       	ldi	r17, 0x00	; 0
    617e:	66 24       	eor	r6, r6
    6180:	77 24       	eor	r7, r7
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
                lineno++;
                len = strlen(eepromBuff);
    6182:	ce 01       	movw	r24, r28
    6184:	8a 57       	subi	r24, 0x7A	; 122
    6186:	9f 4f       	sbci	r25, 0xFF	; 255
    6188:	cf 56       	subi	r28, 0x6F	; 111
    618a:	dd 4f       	sbci	r29, 0xFD	; 253
    618c:	88 83       	st	Y, r24
    618e:	99 83       	std	Y+1, r25	; 0x01
    6190:	c1 59       	subi	r28, 0x91	; 145
    6192:	d2 40       	sbci	r29, 0x02	; 2
                if (eepromBuff[len-1] == '\n')
                    eepromBuff[--len] = 0;
                if (eepromBuff[0] != ':')
                    continue;
                rc = ihex_readrec(&ihex, eepromBuff);
    6194:	36 e8       	ldi	r19, 0x86	; 134
    6196:	23 2e       	mov	r2, r19
    6198:	31 e0       	ldi	r19, 0x01	; 1
    619a:	33 2e       	mov	r3, r19
    619c:	2c 0e       	add	r2, r28
    619e:	3d 1e       	adc	r3, r29
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    61a0:	d1 01       	movw	r26, r2
    61a2:	14 96       	adiw	r26, 0x04	; 4
    61a4:	c3 57       	subi	r28, 0x73	; 115
    61a6:	dd 4f       	sbci	r29, 0xFD	; 253
    61a8:	a8 83       	st	Y, r26
    61aa:	b9 83       	std	Y+1, r27	; 0x01
    61ac:	cd 58       	subi	r28, 0x8D	; 141
    61ae:	d2 40       	sbci	r29, 0x02	; 2
    61b0:	ff c0       	rjmp	.+510    	; 0x63b0 <eeprom_panel+0x580>
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
                lineno++;
    61b2:	08 94       	sec
    61b4:	61 1c       	adc	r6, r1
    61b6:	71 1c       	adc	r7, r1
                len = strlen(eepromBuff);
    61b8:	cf 56       	subi	r28, 0x6F	; 111
    61ba:	dd 4f       	sbci	r29, 0xFD	; 253
    61bc:	e8 81       	ld	r30, Y
    61be:	f9 81       	ldd	r31, Y+1	; 0x01
    61c0:	c1 59       	subi	r28, 0x91	; 145
    61c2:	d2 40       	sbci	r29, 0x02	; 2
    61c4:	01 90       	ld	r0, Z+
    61c6:	00 20       	and	r0, r0
    61c8:	e9 f7       	brne	.-6      	; 0x61c4 <eeprom_panel+0x394>
                if (eepromBuff[len-1] == '\n')
    61ca:	32 97       	sbiw	r30, 0x02	; 2
    61cc:	80 81       	ld	r24, Z
    61ce:	8a 30       	cpi	r24, 0x0A	; 10
    61d0:	09 f4       	brne	.+2      	; 0x61d4 <eeprom_panel+0x3a4>
                    eepromBuff[--len] = 0;
    61d2:	10 82       	st	Z, r1
                if (eepromBuff[0] != ':')
    61d4:	ca 57       	subi	r28, 0x7A	; 122
    61d6:	df 4f       	sbci	r29, 0xFF	; 255
    61d8:	88 81       	ld	r24, Y
    61da:	c6 58       	subi	r28, 0x86	; 134
    61dc:	d0 40       	sbci	r29, 0x00	; 0
    61de:	8a 33       	cpi	r24, 0x3A	; 58
    61e0:	09 f0       	breq	.+2      	; 0x61e4 <eeprom_panel+0x3b4>
    61e2:	e6 c0       	rjmp	.+460    	; 0x63b0 <eeprom_panel+0x580>
                    continue;
                rc = ihex_readrec(&ihex, eepromBuff);
    61e4:	c1 01       	movw	r24, r2
    61e6:	b2 01       	movw	r22, r4
    61e8:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <ihex_readrec>
    61ec:	f8 2e       	mov	r15, r24
                if (rc < 0) {
                    xprintf(PSTR("invalid record at line %d of eeprom.hex\n"), lineno);
                    break;
                } else if (rc != ihex.cksum) {
    61ee:	c6 57       	subi	r28, 0x76	; 118
    61f0:	dd 4f       	sbci	r29, 0xFD	; 253
    61f2:	88 81       	ld	r24, Y
    61f4:	ca 58       	subi	r28, 0x8A	; 138
    61f6:	d2 40       	sbci	r29, 0x02	; 2
    61f8:	f8 16       	cp	r15, r24
    61fa:	19 f1       	breq	.+70     	; 0x6242 <eeprom_panel+0x412>
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex\n"), lineno);
    61fc:	00 d0       	rcall	.+0      	; 0x61fe <eeprom_panel+0x3ce>
    61fe:	0f 92       	push	r0
    6200:	8b eb       	ldi	r24, 0xBB	; 187
    6202:	9f e0       	ldi	r25, 0x0F	; 15
    6204:	ed b7       	in	r30, 0x3d	; 61
    6206:	fe b7       	in	r31, 0x3e	; 62
    6208:	81 83       	std	Z+1, r24	; 0x01
    620a:	92 83       	std	Z+2, r25	; 0x02
    620c:	63 82       	std	Z+3, r6	; 0x03
    620e:	74 82       	std	Z+4, r7	; 0x04
    6210:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    6214:	0f 92       	push	r0
    6216:	0f 92       	push	r0
    6218:	ed b7       	in	r30, 0x3d	; 61
    621a:	fe b7       	in	r31, 0x3e	; 62
    621c:	31 96       	adiw	r30, 0x01	; 1
    621e:	80 e9       	ldi	r24, 0x90	; 144
    6220:	9f e0       	ldi	r25, 0x0F	; 15
    6222:	ad b7       	in	r26, 0x3d	; 61
    6224:	be b7       	in	r27, 0x3e	; 62
    6226:	11 96       	adiw	r26, 0x01	; 1
    6228:	8d 93       	st	X+, r24
    622a:	9c 93       	st	X, r25
    622c:	12 97       	sbiw	r26, 0x02	; 2
    622e:	c6 57       	subi	r28, 0x76	; 118
    6230:	dd 4f       	sbci	r29, 0xFD	; 253
    6232:	88 81       	ld	r24, Y
    6234:	ca 58       	subi	r28, 0x8A	; 138
    6236:	d2 40       	sbci	r29, 0x02	; 2
    6238:	82 83       	std	Z+2, r24	; 0x02
    623a:	13 82       	std	Z+3, r1	; 0x03
    623c:	f4 82       	std	Z+4, r15	; 0x04
    623e:	15 82       	std	Z+5, r1	; 0x05
    6240:	ae c0       	rjmp	.+348    	; 0x639e <eeprom_panel+0x56e>
                    break;
                } else {
                    if (ihex.rectyp == 0) {
    6242:	d1 01       	movw	r26, r2
    6244:	13 96       	adiw	r26, 0x03	; 3
    6246:	2c 91       	ld	r18, X
    6248:	13 97       	sbiw	r26, 0x03	; 3
    624a:	22 23       	and	r18, r18
    624c:	09 f0       	breq	.+2      	; 0x6250 <eeprom_panel+0x420>
    624e:	65 c0       	rjmp	.+202    	; 0x631a <eeprom_panel+0x4ea>
                        // data record
                        nextaddr = ihex.loadofs;
    6250:	11 96       	adiw	r26, 0x01	; 1
    6252:	ed 90       	ld	r14, X+
    6254:	fc 90       	ld	r15, X
    6256:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    6258:	57 01       	movw	r10, r14
    625a:	aa 0c       	add	r10, r10
    625c:	ab 2c       	mov	r10, r11
    625e:	aa 1c       	adc	r10, r10
    6260:	bb 08       	sbc	r11, r11
    6262:	b1 94       	neg	r11
    6264:	ac 14       	cp	r10, r12
    6266:	bd 04       	cpc	r11, r13
    6268:	49 f1       	breq	.+82     	; 0x62bc <eeprom_panel+0x48c>
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr) {
    626a:	01 17       	cp	r16, r17
    626c:	21 f1       	breq	.+72     	; 0x62b6 <eeprom_panel+0x486>
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                                psize = pageendaddr - pagestartaddr;
                                if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0) {
    626e:	a6 01       	movw	r20, r12
    6270:	56 95       	lsr	r21
    6272:	54 2f       	mov	r21, r20
    6274:	44 27       	eor	r20, r20
    6276:	57 95       	ror	r21
    6278:	47 95       	ror	r20
    627a:	40 0f       	add	r20, r16
    627c:	51 1d       	adc	r21, r1
    627e:	60 e0       	ldi	r22, 0x00	; 0
    6280:	70 e0       	ldi	r23, 0x00	; 0
    6282:	10 1b       	sub	r17, r16
    6284:	c4 01       	movw	r24, r8
    6286:	21 2f       	mov	r18, r17
    6288:	8e 01       	movw	r16, r28
    628a:	0f 5f       	subi	r16, 0xFF	; 255
    628c:	1f 4f       	sbci	r17, 0xFF	; 255
    628e:	0e 94 0e 2c 	call	0x581c	; 0x581c <verifyEEPage>
    6292:	89 2b       	or	r24, r25
    6294:	81 f4       	brne	.+32     	; 0x62b6 <eeprom_panel+0x486>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    6296:	00 d0       	rcall	.+0      	; 0x6298 <eeprom_panel+0x468>
    6298:	0f 92       	push	r0
    629a:	83 e7       	ldi	r24, 0x73	; 115
    629c:	9f e0       	ldi	r25, 0x0F	; 15
    629e:	ed b7       	in	r30, 0x3d	; 61
    62a0:	fe b7       	in	r31, 0x3e	; 62
    62a2:	81 83       	std	Z+1, r24	; 0x01
    62a4:	92 83       	std	Z+2, r25	; 0x02
    62a6:	c3 82       	std	Z+3, r12	; 0x03
    62a8:	d4 82       	std	Z+4, r13	; 0x04
    62aa:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    62ae:	0f 90       	pop	r0
    62b0:	0f 90       	pop	r0
    62b2:	0f 90       	pop	r0
    62b4:	0f 90       	pop	r0
                                }
                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    62b6:	1e 2d       	mov	r17, r14
    62b8:	1f 77       	andi	r17, 0x7F	; 127
    62ba:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    62bc:	4e 2d       	mov	r20, r14
    62be:	4f 77       	andi	r20, 0x7F	; 127
    62c0:	40 17       	cp	r20, r16
    62c2:	08 f4       	brcc	.+2      	; 0x62c6 <eeprom_panel+0x496>
    62c4:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    62c6:	d1 01       	movw	r26, r2
    62c8:	5c 91       	ld	r21, X
    62ca:	25 2f       	mov	r18, r21
    62cc:	30 e0       	ldi	r19, 0x00	; 0
    62ce:	c3 57       	subi	r28, 0x73	; 115
    62d0:	dd 4f       	sbci	r29, 0xFD	; 253
    62d2:	a8 81       	ld	r26, Y
    62d4:	b9 81       	ldd	r27, Y+1	; 0x01
    62d6:	cd 58       	subi	r28, 0x8D	; 141
    62d8:	d2 40       	sbci	r29, 0x02	; 2
    62da:	e4 2f       	mov	r30, r20
    62dc:	f0 e0       	ldi	r31, 0x00	; 0
    62de:	35 96       	adiw	r30, 0x05	; 5
    62e0:	81 e0       	ldi	r24, 0x01	; 1
    62e2:	90 e0       	ldi	r25, 0x00	; 0
    62e4:	8c 0f       	add	r24, r28
    62e6:	9d 1f       	adc	r25, r29
    62e8:	e8 0f       	add	r30, r24
    62ea:	f9 1f       	adc	r31, r25
    62ec:	2c 5f       	subi	r18, 0xFC	; 252
    62ee:	3f 4f       	sbci	r19, 0xFF	; 255
    62f0:	22 0d       	add	r18, r2
    62f2:	33 1d       	adc	r19, r3
    62f4:	02 c0       	rjmp	.+4      	; 0x62fa <eeprom_panel+0x4ca>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    62f6:	8d 91       	ld	r24, X+
    62f8:	81 93       	st	Z+, r24
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    62fa:	a2 17       	cp	r26, r18
    62fc:	b3 07       	cpc	r27, r19
    62fe:	d9 f7       	brne	.-10     	; 0x62f6 <eeprom_panel+0x4c6>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                        }
                        if ((pageoffset + ihex.reclen) > pageendaddr)
    6300:	85 2f       	mov	r24, r21
    6302:	90 e0       	ldi	r25, 0x00	; 0
    6304:	84 0f       	add	r24, r20
    6306:	91 1d       	adc	r25, r1
    6308:	21 2f       	mov	r18, r17
    630a:	30 e0       	ldi	r19, 0x00	; 0
    630c:	28 17       	cp	r18, r24
    630e:	39 07       	cpc	r19, r25
    6310:	0c f0       	brlt	.+2      	; 0x6314 <eeprom_panel+0x4e4>
    6312:	4d c0       	rjmp	.+154    	; 0x63ae <eeprom_panel+0x57e>
                            pageendaddr = pageoffset+ihex.reclen;
    6314:	14 2f       	mov	r17, r20
    6316:	15 0f       	add	r17, r21
    6318:	4a c0       	rjmp	.+148    	; 0x63ae <eeprom_panel+0x57e>
                    } else if (ihex.rectyp == 1) {
    631a:	21 30       	cpi	r18, 0x01	; 1
    631c:	79 f5       	brne	.+94     	; 0x637c <eeprom_panel+0x54c>
                        // end of file record
                        if (pagestartaddr != pageendaddr) {
    631e:	01 17       	cp	r16, r17
    6320:	41 f1       	breq	.+80     	; 0x6372 <eeprom_panel+0x542>
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0) {
    6322:	a6 01       	movw	r20, r12
    6324:	56 95       	lsr	r21
    6326:	54 2f       	mov	r21, r20
    6328:	44 27       	eor	r20, r20
    632a:	57 95       	ror	r21
    632c:	47 95       	ror	r20
    632e:	40 0f       	add	r20, r16
    6330:	51 1d       	adc	r21, r1
    6332:	60 e0       	ldi	r22, 0x00	; 0
    6334:	70 e0       	ldi	r23, 0x00	; 0
    6336:	10 1b       	sub	r17, r16
    6338:	c4 01       	movw	r24, r8
    633a:	21 2f       	mov	r18, r17
    633c:	8e 01       	movw	r16, r28
    633e:	0f 5f       	subi	r16, 0xFF	; 255
    6340:	1f 4f       	sbci	r17, 0xFF	; 255
    6342:	0e 94 0e 2c 	call	0x581c	; 0x581c <verifyEEPage>
    6346:	89 2b       	or	r24, r25
    6348:	a1 f4       	brne	.+40     	; 0x6372 <eeprom_panel+0x542>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    634a:	00 d0       	rcall	.+0      	; 0x634c <eeprom_panel+0x51c>
    634c:	0f 92       	push	r0
    634e:	86 e5       	ldi	r24, 0x56	; 86
    6350:	9f e0       	ldi	r25, 0x0F	; 15
    6352:	ad b7       	in	r26, 0x3d	; 61
    6354:	be b7       	in	r27, 0x3e	; 62
    6356:	11 96       	adiw	r26, 0x01	; 1
    6358:	8d 93       	st	X+, r24
    635a:	9c 93       	st	X, r25
    635c:	12 97       	sbiw	r26, 0x02	; 2
    635e:	13 96       	adiw	r26, 0x03	; 3
    6360:	cd 92       	st	X+, r12
    6362:	dc 92       	st	X, r13
    6364:	14 97       	sbiw	r26, 0x04	; 4
    6366:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    636a:	0f 90       	pop	r0
    636c:	0f 90       	pop	r0
    636e:	0f 90       	pop	r0
    6370:	0f 90       	pop	r0
                            }
                        }
                        xputs(PSTR("\n"));
    6372:	84 e5       	ldi	r24, 0x54	; 84
    6374:	9f e0       	ldi	r25, 0x0F	; 15
    6376:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    637a:	2d c0       	rjmp	.+90     	; 0x63d6 <eeprom_panel+0x5a6>
                        break;
                    } else {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex\n"),
    637c:	00 d0       	rcall	.+0      	; 0x637e <eeprom_panel+0x54e>
    637e:	00 d0       	rcall	.+0      	; 0x6380 <eeprom_panel+0x550>
    6380:	ed b7       	in	r30, 0x3d	; 61
    6382:	fe b7       	in	r31, 0x3e	; 62
    6384:	31 96       	adiw	r30, 0x01	; 1
    6386:	83 e1       	ldi	r24, 0x13	; 19
    6388:	9f e0       	ldi	r25, 0x0F	; 15
    638a:	ad b7       	in	r26, 0x3d	; 61
    638c:	be b7       	in	r27, 0x3e	; 62
    638e:	11 96       	adiw	r26, 0x01	; 1
    6390:	8d 93       	st	X+, r24
    6392:	9c 93       	st	X, r25
    6394:	12 97       	sbiw	r26, 0x02	; 2
    6396:	22 83       	std	Z+2, r18	; 0x02
    6398:	13 82       	std	Z+3, r1	; 0x03
    639a:	64 82       	std	Z+4, r6	; 0x04
    639c:	75 82       	std	Z+5, r7	; 0x05
    639e:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    63a2:	ed b7       	in	r30, 0x3d	; 61
    63a4:	fe b7       	in	r31, 0x3e	; 62
    63a6:	36 96       	adiw	r30, 0x06	; 6
    63a8:	ed bf       	out	0x3d, r30	; 61
    63aa:	fe bf       	out	0x3e, r31	; 62
    63ac:	14 c0       	rjmp	.+40     	; 0x63d6 <eeprom_panel+0x5a6>
                                ihex.rectyp, lineno);
                        break;
    63ae:	65 01       	movw	r12, r10
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    63b0:	c5 57       	subi	r28, 0x75	; 117
    63b2:	dd 4f       	sbci	r29, 0xFD	; 253
    63b4:	88 81       	ld	r24, Y
    63b6:	cb 58       	subi	r28, 0x8B	; 139
    63b8:	d2 40       	sbci	r29, 0x02	; 2
    63ba:	c4 57       	subi	r28, 0x74	; 116
    63bc:	dd 4f       	sbci	r29, 0xFD	; 253
    63be:	98 81       	ld	r25, Y
    63c0:	cc 58       	subi	r28, 0x8C	; 140
    63c2:	d2 40       	sbci	r29, 0x02	; 2
    63c4:	60 e0       	ldi	r22, 0x00	; 0
    63c6:	71 e0       	ldi	r23, 0x01	; 1
    63c8:	40 ef       	ldi	r20, 0xF0	; 240
    63ca:	56 e2       	ldi	r21, 0x26	; 38
    63cc:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <f_gets>
    63d0:	89 2b       	or	r24, r25
    63d2:	09 f0       	breq	.+2      	; 0x63d6 <eeprom_panel+0x5a6>
    63d4:	ee ce       	rjmp	.-548    	; 0x61b2 <eeprom_panel+0x382>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    63d6:	85 e4       	ldi	r24, 0x45	; 69
    63d8:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    63da:	c4 01       	movw	r24, r8
    63dc:	60 e7       	ldi	r22, 0x70	; 112
    63de:	ae 01       	movw	r20, r28
    63e0:	4f 5f       	subi	r20, 0xFF	; 255
    63e2:	5f 4f       	sbci	r21, 0xFF	; 255
    63e4:	21 e0       	ldi	r18, 0x01	; 1
    63e6:	00 e0       	ldi	r16, 0x00	; 0
    63e8:	0e 94 21 39 	call	0x7242	; 0x7242 <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY) {
    63ec:	d4 01       	movw	r26, r8
    63ee:	1d 96       	adiw	r26, 0x0d	; 13
    63f0:	8c 91       	ld	r24, X
    63f2:	1d 97       	sbiw	r26, 0x0d	; 13
    63f4:	88 23       	and	r24, r24
    63f6:	d1 f7       	brne	.-12     	; 0x63ec <eeprom_panel+0x5bc>
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK) {
    63f8:	1e 96       	adiw	r26, 0x0e	; 14
    63fa:	8c 91       	ld	r24, X
    63fc:	1e 97       	sbiw	r26, 0x0e	; 14
    63fe:	81 30       	cpi	r24, 0x01	; 1
    6400:	11 f1       	breq	.+68     	; 0x6446 <eeprom_panel+0x616>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    6402:	1e 96       	adiw	r26, 0x0e	; 14
    6404:	2c 91       	ld	r18, X
    6406:	00 d0       	rcall	.+0      	; 0x6408 <eeprom_panel+0x5d8>
    6408:	0f 92       	push	r0
    640a:	ed b7       	in	r30, 0x3d	; 61
    640c:	fe b7       	in	r31, 0x3e	; 62
    640e:	31 96       	adiw	r30, 0x01	; 1
    6410:	88 ef       	ldi	r24, 0xF8	; 248
    6412:	9e e0       	ldi	r25, 0x0E	; 14
    6414:	ad b7       	in	r26, 0x3d	; 61
    6416:	be b7       	in	r27, 0x3e	; 62
    6418:	11 96       	adiw	r26, 0x01	; 1
    641a:	8d 93       	st	X+, r24
    641c:	9c 93       	st	X, r25
    641e:	12 97       	sbiw	r26, 0x02	; 2
    6420:	22 83       	std	Z+2, r18	; 0x02
    6422:	13 82       	std	Z+3, r1	; 0x03
    6424:	0a c0       	rjmp	.+20     	; 0x643a <eeprom_panel+0x60a>
        }
        
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    6426:	00 d0       	rcall	.+0      	; 0x6428 <eeprom_panel+0x5f8>
    6428:	0f 92       	push	r0
    642a:	8d ed       	ldi	r24, 0xDD	; 221
    642c:	9e e0       	ldi	r25, 0x0E	; 14
    642e:	ed b7       	in	r30, 0x3d	; 61
    6430:	fe b7       	in	r31, 0x3e	; 62
    6432:	81 83       	std	Z+1, r24	; 0x01
    6434:	92 83       	std	Z+2, r25	; 0x02
    6436:	e3 82       	std	Z+3, r14	; 0x03
    6438:	f4 82       	std	Z+4, r15	; 0x04
    643a:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    643e:	0f 90       	pop	r0
    6440:	0f 90       	pop	r0
    6442:	0f 90       	pop	r0
    6444:	0f 90       	pop	r0
    }
    
};
    6446:	ce 56       	subi	r28, 0x6E	; 110
    6448:	dd 4f       	sbci	r29, 0xFD	; 253
    644a:	e2 e1       	ldi	r30, 0x12	; 18
    644c:	0c 94 aa 4d 	jmp	0x9b54	; 0x9b54 <__epilogue_restores__>

00006450 <flash_panel>:
            match = 0;
    }
    return match;
}

void flash_panel(uint8_t panel_num) {
    6450:	a2 e9       	ldi	r26, 0x92	; 146
    6452:	b2 e0       	ldi	r27, 0x02	; 2
    6454:	ee e2       	ldi	r30, 0x2E	; 46
    6456:	f2 e3       	ldi	r31, 0x32	; 50
    6458:	0c 94 8e 4d 	jmp	0x9b1c	; 0x9b1c <__prologue_saves__>
    645c:	08 2f       	mov	r16, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t flashBuff[256];
    
    ch = chMap[panel_num];
    645e:	e8 2e       	mov	r14, r24
    6460:	ff 24       	eor	r15, r15
    6462:	f7 01       	movw	r30, r14
    6464:	e5 5b       	subi	r30, 0xB5	; 181
    6466:	f9 4d       	sbci	r31, 0xD9	; 217
    6468:	e0 81       	ld	r30, Z
    if (ch != 0){
    646a:	ee 23       	and	r30, r30
    646c:	09 f4       	brne	.+2      	; 0x6470 <flash_panel+0x20>
    646e:	ff c2       	rjmp	.+1534   	; 0x6a6e <flash_panel+0x61e>
        
        switch (ch) {
    6470:	e3 30       	cpi	r30, 0x03	; 3
    6472:	71 f0       	breq	.+28     	; 0x6490 <flash_panel+0x40>
    6474:	e4 30       	cpi	r30, 0x04	; 4
    6476:	89 f0       	breq	.+34     	; 0x649a <flash_panel+0x4a>
    6478:	e2 30       	cpi	r30, 0x02	; 2
    647a:	29 f4       	brne	.+10     	; 0x6486 <flash_panel+0x36>
    647c:	9e e8       	ldi	r25, 0x8E	; 142
    647e:	89 2e       	mov	r8, r25
    6480:	98 e2       	ldi	r25, 0x28	; 40
    6482:	99 2e       	mov	r9, r25
    6484:	0e c0       	rjmp	.+28     	; 0x64a2 <flash_panel+0x52>
    6486:	83 e9       	ldi	r24, 0x93	; 147
    6488:	88 2e       	mov	r8, r24
    648a:	85 e2       	ldi	r24, 0x25	; 37
    648c:	98 2e       	mov	r9, r24
    648e:	09 c0       	rjmp	.+18     	; 0x64a2 <flash_panel+0x52>
    6490:	1b e3       	ldi	r17, 0x3B	; 59
    6492:	81 2e       	mov	r8, r17
    6494:	16 e2       	ldi	r17, 0x26	; 38
    6496:	91 2e       	mov	r9, r17
    6498:	04 c0       	rjmp	.+8      	; 0x64a2 <flash_panel+0x52>
                
                break;
            case 3:
                twi = &twi3;
                
                break;
    649a:	b7 eb       	ldi	r27, 0xB7	; 183
    649c:	8b 2e       	mov	r8, r27
    649e:	b4 e2       	ldi	r27, 0x24	; 36
    64a0:	9b 2e       	mov	r9, r27
                
                break;
        }
        
        // open the hex file for reading
        res = f_open(&file5, panelFlash, FA_OPEN_EXISTING | FA_READ);
    64a2:	86 ed       	ldi	r24, 0xD6	; 214
    64a4:	96 e2       	ldi	r25, 0x26	; 38
    64a6:	6c ed       	ldi	r22, 0xDC	; 220
    64a8:	73 e2       	ldi	r23, 0x23	; 35
    64aa:	41 e0       	ldi	r20, 0x01	; 1
    64ac:	0e 94 91 40 	call	0x8122	; 0x8122 <f_open>
    64b0:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    64b2:	88 23       	and	r24, r24
    64b4:	49 f0       	breq	.+18     	; 0x64c8 <flash_panel+0x78>
            // could'n open the file
            xputs(PSTR("Error f_open in panel.hex.\n"));
    64b6:	81 ed       	ldi	r24, 0xD1	; 209
    64b8:	93 e1       	ldi	r25, 0x13	; 19
    64ba:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
            put_rc(res);
    64be:	81 2f       	mov	r24, r17
    64c0:	90 e0       	ldi	r25, 0x00	; 0
    64c2:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <put_rc>
    64c6:	51 c0       	rjmp	.+162    	; 0x656a <flash_panel+0x11a>
        } else {
            // file open OK, get the panel address
            //paddr = panel_num;
            if (panel_num >= 128) {
    64c8:	07 ff       	sbrs	r16, 7
    64ca:	12 c0       	rjmp	.+36     	; 0x64f0 <flash_panel+0xa0>
                // use hardware reset
                PORTD.OUTCLR = 0x04;
    64cc:	84 e0       	ldi	r24, 0x04	; 4
    64ce:	e0 e6       	ldi	r30, 0x60	; 96
    64d0:	f6 e0       	ldi	r31, 0x06	; 6
    64d2:	86 83       	std	Z+6, r24	; 0x06
    64d4:	84 e6       	ldi	r24, 0x64	; 100
    64d6:	90 e0       	ldi	r25, 0x00	; 0
    64d8:	20 e2       	ldi	r18, 0x20	; 32
    64da:	33 e0       	ldi	r19, 0x03	; 3
    64dc:	f9 01       	movw	r30, r18
    64de:	31 97       	sbiw	r30, 0x01	; 1
    64e0:	f1 f7       	brne	.-4      	; 0x64de <flash_panel+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64e4:	d9 f7       	brne	.-10     	; 0x64dc <flash_panel+0x8c>
                _delay_ms(10);
                PORTD.OUTSET = 0x04;
    64e6:	84 e0       	ldi	r24, 0x04	; 4
    64e8:	e0 e6       	ldi	r30, 0x60	; 96
    64ea:	f6 e0       	ldi	r31, 0x06	; 6
    64ec:	85 83       	std	Z+5, r24	; 0x05
    64ee:	3d c0       	rjmp	.+122    	; 0x656a <flash_panel+0x11a>
            } else {
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("flash panel %u.\n"), panel_num);
    64f0:	00 d0       	rcall	.+0      	; 0x64f2 <flash_panel+0xa2>
    64f2:	0f 92       	push	r0
    64f4:	80 ec       	ldi	r24, 0xC0	; 192
    64f6:	93 e1       	ldi	r25, 0x13	; 19
    64f8:	ad b7       	in	r26, 0x3d	; 61
    64fa:	be b7       	in	r27, 0x3e	; 62
    64fc:	11 96       	adiw	r26, 0x01	; 1
    64fe:	8d 93       	st	X+, r24
    6500:	9c 93       	st	X, r25
    6502:	12 97       	sbiw	r26, 0x02	; 2
    6504:	13 96       	adiw	r26, 0x03	; 3
    6506:	ed 92       	st	X+, r14
    6508:	fc 92       	st	X, r15
    650a:	14 97       	sbiw	r26, 0x04	; 4
    650c:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
                pagebuff[0] = 0x00;
    6510:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    6512:	81 e0       	ldi	r24, 0x01	; 1
    6514:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    6516:	0f 90       	pop	r0
    6518:	0f 90       	pop	r0
    651a:	0f 90       	pop	r0
    651c:	0f 90       	pop	r0
    651e:	c4 01       	movw	r24, r8
    6520:	60 2f       	mov	r22, r16
    6522:	ae 01       	movw	r20, r28
    6524:	4f 5f       	subi	r20, 0xFF	; 255
    6526:	5f 4f       	sbci	r21, 0xFF	; 255
    6528:	22 e0       	ldi	r18, 0x02	; 2
    652a:	00 e0       	ldi	r16, 0x00	; 0
    652c:	0e 94 21 39 	call	0x7242	; 0x7242 <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY) {
    6530:	f4 01       	movw	r30, r8
    6532:	85 85       	ldd	r24, Z+13	; 0x0d
    6534:	88 23       	and	r24, r24
    6536:	e1 f7       	brne	.-8      	; 0x6530 <flash_panel+0xe0>
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK) {
    6538:	86 85       	ldd	r24, Z+14	; 0x0e
    653a:	81 30       	cpi	r24, 0x01	; 1
    653c:	b1 f0       	breq	.+44     	; 0x656a <flash_panel+0x11a>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    653e:	26 85       	ldd	r18, Z+14	; 0x0e
    6540:	00 d0       	rcall	.+0      	; 0x6542 <flash_panel+0xf2>
    6542:	0f 92       	push	r0
    6544:	ed b7       	in	r30, 0x3d	; 61
    6546:	fe b7       	in	r31, 0x3e	; 62
    6548:	31 96       	adiw	r30, 0x01	; 1
    654a:	82 ea       	ldi	r24, 0xA2	; 162
    654c:	93 e1       	ldi	r25, 0x13	; 19
    654e:	ad b7       	in	r26, 0x3d	; 61
    6550:	be b7       	in	r27, 0x3e	; 62
    6552:	11 96       	adiw	r26, 0x01	; 1
    6554:	8d 93       	st	X+, r24
    6556:	9c 93       	st	X, r25
    6558:	12 97       	sbiw	r26, 0x02	; 2
    655a:	22 83       	std	Z+2, r18	; 0x02
    655c:	13 82       	std	Z+3, r1	; 0x03
    655e:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    6562:	0f 90       	pop	r0
    6564:	0f 90       	pop	r0
    6566:	0f 90       	pop	r0
    6568:	0f 90       	pop	r0
    656a:	88 e8       	ldi	r24, 0x88	; 136
    656c:	93 e1       	ldi	r25, 0x13	; 19
    656e:	20 e2       	ldi	r18, 0x20	; 32
    6570:	33 e0       	ldi	r19, 0x03	; 3
    6572:	f9 01       	movw	r30, r18
    6574:	31 97       	sbiw	r30, 0x01	; 1
    6576:	f1 f7       	brne	.-4      	; 0x6574 <flash_panel+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6578:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    657a:	d9 f7       	brne	.-10     	; 0x6572 <flash_panel+0x122>
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    657c:	85 e9       	ldi	r24, 0x95	; 149
    657e:	93 e1       	ldi	r25, 0x13	; 19
    6580:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    6584:	0f ef       	ldi	r16, 0xFF	; 255
    6586:	1f ef       	ldi	r17, 0xFF	; 255
    6588:	cc 24       	eor	r12, r12
    658a:	dd 24       	eor	r13, r13
    658c:	66 24       	eor	r6, r6
    658e:	77 24       	eor	r7, r7
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    6590:	a6 e8       	ldi	r26, 0x86	; 134
    6592:	4a 2e       	mov	r4, r26
    6594:	51 2c       	mov	r5, r1
    6596:	4c 0e       	add	r4, r28
    6598:	5d 1e       	adc	r5, r29
            len = strlen(flashBuff);
            if (flashBuff[len-1] == '\n')
                flashBuff[--len] = 0;
            if (flashBuff[0] != ':')
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    659a:	f6 e8       	ldi	r31, 0x86	; 134
    659c:	2f 2e       	mov	r2, r31
    659e:	f1 e0       	ldi	r31, 0x01	; 1
    65a0:	3f 2e       	mov	r3, r31
    65a2:	2c 0e       	add	r2, r28
    65a4:	3d 1e       	adc	r3, r29
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    65a6:	f1 01       	movw	r30, r2
    65a8:	34 96       	adiw	r30, 0x04	; 4
    65aa:	c1 57       	subi	r28, 0x71	; 113
    65ac:	dd 4f       	sbci	r29, 0xFD	; 253
    65ae:	e8 83       	st	Y, r30
    65b0:	f9 83       	std	Y+1, r31	; 0x01
    65b2:	cf 58       	subi	r28, 0x8F	; 143
    65b4:	d2 40       	sbci	r29, 0x02	; 2
    65b6:	d6 c0       	rjmp	.+428    	; 0x6764 <flash_panel+0x314>
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
            lineno++;
    65b8:	08 94       	sec
    65ba:	61 1c       	adc	r6, r1
    65bc:	71 1c       	adc	r7, r1
            len = strlen(flashBuff);
    65be:	f2 01       	movw	r30, r4
    65c0:	01 90       	ld	r0, Z+
    65c2:	00 20       	and	r0, r0
    65c4:	e9 f7       	brne	.-6      	; 0x65c0 <flash_panel+0x170>
            if (flashBuff[len-1] == '\n')
    65c6:	32 97       	sbiw	r30, 0x02	; 2
    65c8:	80 81       	ld	r24, Z
    65ca:	8a 30       	cpi	r24, 0x0A	; 10
    65cc:	09 f4       	brne	.+2      	; 0x65d0 <flash_panel+0x180>
                flashBuff[--len] = 0;
    65ce:	10 82       	st	Z, r1
            if (flashBuff[0] != ':')
    65d0:	d2 01       	movw	r26, r4
    65d2:	8c 91       	ld	r24, X
    65d4:	8a 33       	cpi	r24, 0x3A	; 58
    65d6:	09 f0       	breq	.+2      	; 0x65da <flash_panel+0x18a>
    65d8:	c5 c0       	rjmp	.+394    	; 0x6764 <flash_panel+0x314>
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    65da:	c1 01       	movw	r24, r2
    65dc:	b2 01       	movw	r22, r4
    65de:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <ihex_readrec>
    65e2:	f8 2e       	mov	r15, r24
            if (rc < 0) {
                xprintf(PSTR("invalid record at line %d of panel.hex.\n"), lineno);
                break;
            } else if (rc != ihex.cksum) {
    65e4:	c6 57       	subi	r28, 0x76	; 118
    65e6:	dd 4f       	sbci	r29, 0xFD	; 253
    65e8:	88 81       	ld	r24, Y
    65ea:	ca 58       	subi	r28, 0x8A	; 138
    65ec:	d2 40       	sbci	r29, 0x02	; 2
    65ee:	f8 16       	cp	r15, r24
    65f0:	19 f1       	breq	.+70     	; 0x6638 <flash_panel+0x1e8>
                xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex.\n"), lineno);
    65f2:	00 d0       	rcall	.+0      	; 0x65f4 <flash_panel+0x1a4>
    65f4:	0f 92       	push	r0
    65f6:	82 e6       	ldi	r24, 0x62	; 98
    65f8:	93 e1       	ldi	r25, 0x13	; 19
    65fa:	ed b7       	in	r30, 0x3d	; 61
    65fc:	fe b7       	in	r31, 0x3e	; 62
    65fe:	81 83       	std	Z+1, r24	; 0x01
    6600:	92 83       	std	Z+2, r25	; 0x02
    6602:	63 82       	std	Z+3, r6	; 0x03
    6604:	74 82       	std	Z+4, r7	; 0x04
    6606:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    660a:	0f 92       	push	r0
    660c:	0f 92       	push	r0
    660e:	ed b7       	in	r30, 0x3d	; 61
    6610:	fe b7       	in	r31, 0x3e	; 62
    6612:	31 96       	adiw	r30, 0x01	; 1
    6614:	87 e3       	ldi	r24, 0x37	; 55
    6616:	93 e1       	ldi	r25, 0x13	; 19
    6618:	ad b7       	in	r26, 0x3d	; 61
    661a:	be b7       	in	r27, 0x3e	; 62
    661c:	11 96       	adiw	r26, 0x01	; 1
    661e:	8d 93       	st	X+, r24
    6620:	9c 93       	st	X, r25
    6622:	12 97       	sbiw	r26, 0x02	; 2
    6624:	c6 57       	subi	r28, 0x76	; 118
    6626:	dd 4f       	sbci	r29, 0xFD	; 253
    6628:	88 81       	ld	r24, Y
    662a:	ca 58       	subi	r28, 0x8A	; 138
    662c:	d2 40       	sbci	r29, 0x02	; 2
    662e:	82 83       	std	Z+2, r24	; 0x02
    6630:	13 82       	std	Z+3, r1	; 0x03
    6632:	f4 82       	std	Z+4, r15	; 0x04
    6634:	15 82       	std	Z+5, r1	; 0x05
    6636:	83 c0       	rjmp	.+262    	; 0x673e <flash_panel+0x2ee>
                break;
            } else {
                if (ihex.rectyp == 0) {
    6638:	d1 01       	movw	r26, r2
    663a:	13 96       	adiw	r26, 0x03	; 3
    663c:	2c 91       	ld	r18, X
    663e:	13 97       	sbiw	r26, 0x03	; 3
    6640:	22 23       	and	r18, r18
    6642:	09 f0       	breq	.+2      	; 0x6646 <flash_panel+0x1f6>
    6644:	53 c0       	rjmp	.+166    	; 0x66ec <flash_panel+0x29c>
                    // data record
                    nextaddr = ihex.loadofs;
    6646:	11 96       	adiw	r26, 0x01	; 1
    6648:	ed 90       	ld	r14, X+
    664a:	fc 90       	ld	r15, X
    664c:	12 97       	sbiw	r26, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    664e:	57 01       	movw	r10, r14
    6650:	aa 0c       	add	r10, r10
    6652:	ab 2c       	mov	r10, r11
    6654:	aa 1c       	adc	r10, r10
    6656:	bb 08       	sbc	r11, r11
    6658:	b1 94       	neg	r11
    665a:	a0 16       	cp	r10, r16
    665c:	b1 06       	cpc	r11, r17
    665e:	c1 f0       	breq	.+48     	; 0x6690 <flash_panel+0x240>
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr) {
    6660:	cd 14       	cp	r12, r13
    6662:	91 f0       	breq	.+36     	; 0x6688 <flash_panel+0x238>
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            progPage(twi, paddr, psize, &pagebuff[0]);
    6664:	16 95       	lsr	r17
    6666:	10 2f       	mov	r17, r16
    6668:	00 27       	eor	r16, r16
    666a:	17 95       	ror	r17
    666c:	07 95       	ror	r16
    666e:	0c 0d       	add	r16, r12
    6670:	11 1d       	adc	r17, r1
    6672:	a8 01       	movw	r20, r16
    6674:	60 e0       	ldi	r22, 0x00	; 0
    6676:	70 e0       	ldi	r23, 0x00	; 0
    6678:	dc 18       	sub	r13, r12
    667a:	c4 01       	movw	r24, r8
    667c:	2d 2d       	mov	r18, r13
    667e:	8e 01       	movw	r16, r28
    6680:	0f 5f       	subi	r16, 0xFF	; 255
    6682:	1f 4f       	sbci	r17, 0xFF	; 255
    6684:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <progPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    6688:	6f e7       	ldi	r22, 0x7F	; 127
    668a:	d6 2e       	mov	r13, r22
    668c:	de 20       	and	r13, r14
    668e:	cd 2c       	mov	r12, r13
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    6690:	4e 2d       	mov	r20, r14
    6692:	4f 77       	andi	r20, 0x7F	; 127
    6694:	4c 15       	cp	r20, r12
    6696:	08 f4       	brcc	.+2      	; 0x669a <flash_panel+0x24a>
    6698:	c4 2e       	mov	r12, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    669a:	f1 01       	movw	r30, r2
    669c:	50 81       	ld	r21, Z
    669e:	25 2f       	mov	r18, r21
    66a0:	30 e0       	ldi	r19, 0x00	; 0
    66a2:	c1 57       	subi	r28, 0x71	; 113
    66a4:	dd 4f       	sbci	r29, 0xFD	; 253
    66a6:	a8 81       	ld	r26, Y
    66a8:	b9 81       	ldd	r27, Y+1	; 0x01
    66aa:	cf 58       	subi	r28, 0x8F	; 143
    66ac:	d2 40       	sbci	r29, 0x02	; 2
    66ae:	e4 2f       	mov	r30, r20
    66b0:	f0 e0       	ldi	r31, 0x00	; 0
    66b2:	35 96       	adiw	r30, 0x05	; 5
    66b4:	81 e0       	ldi	r24, 0x01	; 1
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	8c 0f       	add	r24, r28
    66ba:	9d 1f       	adc	r25, r29
    66bc:	e8 0f       	add	r30, r24
    66be:	f9 1f       	adc	r31, r25
    66c0:	2c 5f       	subi	r18, 0xFC	; 252
    66c2:	3f 4f       	sbci	r19, 0xFF	; 255
    66c4:	22 0d       	add	r18, r2
    66c6:	33 1d       	adc	r19, r3
    66c8:	02 c0       	rjmp	.+4      	; 0x66ce <flash_panel+0x27e>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    66ca:	8d 91       	ld	r24, X+
    66cc:	81 93       	st	Z+, r24
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    66ce:	a2 17       	cp	r26, r18
    66d0:	b3 07       	cpc	r27, r19
    66d2:	d9 f7       	brne	.-10     	; 0x66ca <flash_panel+0x27a>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                    }
                    if ((pageoffset + ihex.reclen) > pageendaddr)
    66d4:	85 2f       	mov	r24, r21
    66d6:	90 e0       	ldi	r25, 0x00	; 0
    66d8:	84 0f       	add	r24, r20
    66da:	91 1d       	adc	r25, r1
    66dc:	2d 2d       	mov	r18, r13
    66de:	30 e0       	ldi	r19, 0x00	; 0
    66e0:	28 17       	cp	r18, r24
    66e2:	39 07       	cpc	r19, r25
    66e4:	f4 f5       	brge	.+124    	; 0x6762 <flash_panel+0x312>
                        pageendaddr = pageoffset+ihex.reclen;
    66e6:	d4 2e       	mov	r13, r20
    66e8:	d5 0e       	add	r13, r21
    66ea:	3b c0       	rjmp	.+118    	; 0x6762 <flash_panel+0x312>
                } else if (ihex.rectyp == 1) {
    66ec:	21 30       	cpi	r18, 0x01	; 1
    66ee:	b1 f4       	brne	.+44     	; 0x671c <flash_panel+0x2cc>
                    // end of file record
                    if (pagestartaddr != pageendaddr) {
    66f0:	cd 14       	cp	r12, r13
    66f2:	09 f4       	brne	.+2      	; 0x66f6 <flash_panel+0x2a6>
    66f4:	41 c0       	rjmp	.+130    	; 0x6778 <flash_panel+0x328>
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                        psize = pageendaddr - pagestartaddr;
                        progPage(twi, paddr, psize, &pagebuff[0]);
    66f6:	16 95       	lsr	r17
    66f8:	10 2f       	mov	r17, r16
    66fa:	00 27       	eor	r16, r16
    66fc:	17 95       	ror	r17
    66fe:	07 95       	ror	r16
    6700:	0c 0d       	add	r16, r12
    6702:	11 1d       	adc	r17, r1
    6704:	a8 01       	movw	r20, r16
    6706:	60 e0       	ldi	r22, 0x00	; 0
    6708:	70 e0       	ldi	r23, 0x00	; 0
    670a:	dc 18       	sub	r13, r12
    670c:	c4 01       	movw	r24, r8
    670e:	2d 2d       	mov	r18, r13
    6710:	8e 01       	movw	r16, r28
    6712:	0f 5f       	subi	r16, 0xFF	; 255
    6714:	1f 4f       	sbci	r17, 0xFF	; 255
    6716:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <progPage>
    671a:	2e c0       	rjmp	.+92     	; 0x6778 <flash_panel+0x328>
                    }
                    break;
                } else {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    671c:	00 d0       	rcall	.+0      	; 0x671e <flash_panel+0x2ce>
    671e:	00 d0       	rcall	.+0      	; 0x6720 <flash_panel+0x2d0>
    6720:	ed b7       	in	r30, 0x3d	; 61
    6722:	fe b7       	in	r31, 0x3e	; 62
    6724:	31 96       	adiw	r30, 0x01	; 1
    6726:	87 ef       	ldi	r24, 0xF7	; 247
    6728:	92 e1       	ldi	r25, 0x12	; 18
    672a:	ad b7       	in	r26, 0x3d	; 61
    672c:	be b7       	in	r27, 0x3e	; 62
    672e:	11 96       	adiw	r26, 0x01	; 1
    6730:	8d 93       	st	X+, r24
    6732:	9c 93       	st	X, r25
    6734:	12 97       	sbiw	r26, 0x02	; 2
    6736:	22 83       	std	Z+2, r18	; 0x02
    6738:	13 82       	std	Z+3, r1	; 0x03
    673a:	64 82       	std	Z+4, r6	; 0x04
    673c:	75 82       	std	Z+5, r7	; 0x05
    673e:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    6742:	c5 57       	subi	r28, 0x75	; 117
    6744:	dd 4f       	sbci	r29, 0xFD	; 253
    6746:	48 82       	st	Y, r4
    6748:	cb 58       	subi	r28, 0x8B	; 139
    674a:	d2 40       	sbci	r29, 0x02	; 2
    674c:	c4 57       	subi	r28, 0x74	; 116
    674e:	dd 4f       	sbci	r29, 0xFD	; 253
    6750:	58 82       	st	Y, r5
    6752:	cc 58       	subi	r28, 0x8C	; 140
    6754:	d2 40       	sbci	r29, 0x02	; 2
    6756:	ed b7       	in	r30, 0x3d	; 61
    6758:	fe b7       	in	r31, 0x3e	; 62
    675a:	36 96       	adiw	r30, 0x06	; 6
    675c:	ed bf       	out	0x3d, r30	; 61
    675e:	fe bf       	out	0x3e, r31	; 62
    6760:	15 c0       	rjmp	.+42     	; 0x678c <flash_panel+0x33c>
                            ihex.rectyp, lineno);
                    break;
    6762:	85 01       	movw	r16, r10
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    6764:	c2 01       	movw	r24, r4
    6766:	60 e0       	ldi	r22, 0x00	; 0
    6768:	71 e0       	ldi	r23, 0x01	; 1
    676a:	46 ed       	ldi	r20, 0xD6	; 214
    676c:	56 e2       	ldi	r21, 0x26	; 38
    676e:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <f_gets>
    6772:	89 2b       	or	r24, r25
    6774:	09 f0       	breq	.+2      	; 0x6778 <flash_panel+0x328>
    6776:	20 cf       	rjmp	.-448    	; 0x65b8 <flash_panel+0x168>
    6778:	c5 57       	subi	r28, 0x75	; 117
    677a:	dd 4f       	sbci	r29, 0xFD	; 253
    677c:	48 82       	st	Y, r4
    677e:	cb 58       	subi	r28, 0x8B	; 139
    6780:	d2 40       	sbci	r29, 0x02	; 2
    6782:	c4 57       	subi	r28, 0x74	; 116
    6784:	dd 4f       	sbci	r29, 0xFD	; 253
    6786:	58 82       	st	Y, r5
    6788:	cc 58       	subi	r28, 0x8C	; 140
    678a:	d2 40       	sbci	r29, 0x02	; 2
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&file5, 0);
    678c:	86 ed       	ldi	r24, 0xD6	; 214
    678e:	96 e2       	ldi	r25, 0x26	; 38
    6790:	40 e0       	ldi	r20, 0x00	; 0
    6792:	50 e0       	ldi	r21, 0x00	; 0
    6794:	60 e0       	ldi	r22, 0x00	; 0
    6796:	70 e0       	ldi	r23, 0x00	; 0
    6798:	0e 94 31 3c 	call	0x7862	; 0x7862 <f_lseek>
    679c:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    679e:	88 23       	and	r24, r24
    67a0:	49 f0       	breq	.+18     	; 0x67b4 <flash_panel+0x364>
            xputs(PSTR("Error f_lseek in panel.hex.\n"));
    67a2:	8a ed       	ldi	r24, 0xDA	; 218
    67a4:	92 e1       	ldi	r25, 0x12	; 18
    67a6:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
            put_rc(res);
    67aa:	81 2f       	mov	r24, r17
    67ac:	90 e0       	ldi	r25, 0x00	; 0
    67ae:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <put_rc>
    67b2:	35 c1       	rjmp	.+618    	; 0x6a1e <flash_panel+0x5ce>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    67b4:	8d ec       	ldi	r24, 0xCD	; 205
    67b6:	92 e1       	ldi	r25, 0x12	; 18
    67b8:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    67bc:	cc 24       	eor	r12, r12
    67be:	ca 94       	dec	r12
    67c0:	dc 2c       	mov	r13, r12
    67c2:	00 e0       	ldi	r16, 0x00	; 0
    67c4:	10 e0       	ldi	r17, 0x00	; 0
    67c6:	66 24       	eor	r6, r6
    67c8:	77 24       	eor	r7, r7
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
                lineno++;
                len = strlen(flashBuff);
    67ca:	ce 01       	movw	r24, r28
    67cc:	8a 57       	subi	r24, 0x7A	; 122
    67ce:	9f 4f       	sbci	r25, 0xFF	; 255
    67d0:	cf 56       	subi	r28, 0x6F	; 111
    67d2:	dd 4f       	sbci	r29, 0xFD	; 253
    67d4:	88 83       	st	Y, r24
    67d6:	99 83       	std	Y+1, r25	; 0x01
    67d8:	c1 59       	subi	r28, 0x91	; 145
    67da:	d2 40       	sbci	r29, 0x02	; 2
                if (flashBuff[len-1] == '\n')
                    flashBuff[--len] = 0;
                if (flashBuff[0] != ':')
                    continue;
                rc = ihex_readrec(&ihex, flashBuff);
    67dc:	46 e8       	ldi	r20, 0x86	; 134
    67de:	24 2e       	mov	r2, r20
    67e0:	41 e0       	ldi	r20, 0x01	; 1
    67e2:	34 2e       	mov	r3, r20
    67e4:	2c 0e       	add	r2, r28
    67e6:	3d 1e       	adc	r3, r29
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    67e8:	d1 01       	movw	r26, r2
    67ea:	14 96       	adiw	r26, 0x04	; 4
    67ec:	c3 57       	subi	r28, 0x73	; 115
    67ee:	dd 4f       	sbci	r29, 0xFD	; 253
    67f0:	a8 83       	st	Y, r26
    67f2:	b9 83       	std	Y+1, r27	; 0x01
    67f4:	cd 58       	subi	r28, 0x8D	; 141
    67f6:	d2 40       	sbci	r29, 0x02	; 2
    67f8:	ff c0       	rjmp	.+510    	; 0x69f8 <flash_panel+0x5a8>
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
                lineno++;
    67fa:	08 94       	sec
    67fc:	61 1c       	adc	r6, r1
    67fe:	71 1c       	adc	r7, r1
                len = strlen(flashBuff);
    6800:	cf 56       	subi	r28, 0x6F	; 111
    6802:	dd 4f       	sbci	r29, 0xFD	; 253
    6804:	e8 81       	ld	r30, Y
    6806:	f9 81       	ldd	r31, Y+1	; 0x01
    6808:	c1 59       	subi	r28, 0x91	; 145
    680a:	d2 40       	sbci	r29, 0x02	; 2
    680c:	01 90       	ld	r0, Z+
    680e:	00 20       	and	r0, r0
    6810:	e9 f7       	brne	.-6      	; 0x680c <flash_panel+0x3bc>
                if (flashBuff[len-1] == '\n')
    6812:	32 97       	sbiw	r30, 0x02	; 2
    6814:	80 81       	ld	r24, Z
    6816:	8a 30       	cpi	r24, 0x0A	; 10
    6818:	09 f4       	brne	.+2      	; 0x681c <flash_panel+0x3cc>
                    flashBuff[--len] = 0;
    681a:	10 82       	st	Z, r1
                if (flashBuff[0] != ':')
    681c:	ca 57       	subi	r28, 0x7A	; 122
    681e:	df 4f       	sbci	r29, 0xFF	; 255
    6820:	88 81       	ld	r24, Y
    6822:	c6 58       	subi	r28, 0x86	; 134
    6824:	d0 40       	sbci	r29, 0x00	; 0
    6826:	8a 33       	cpi	r24, 0x3A	; 58
    6828:	09 f0       	breq	.+2      	; 0x682c <flash_panel+0x3dc>
    682a:	e6 c0       	rjmp	.+460    	; 0x69f8 <flash_panel+0x5a8>
                    continue;
                rc = ihex_readrec(&ihex, flashBuff);
    682c:	c1 01       	movw	r24, r2
    682e:	b2 01       	movw	r22, r4
    6830:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <ihex_readrec>
    6834:	f8 2e       	mov	r15, r24
                if (rc < 0) {
                    xprintf(PSTR("invalid record at line %d of panel.hex\n"), lineno);
                    break;
                } else if (rc != ihex.cksum) {
    6836:	c6 57       	subi	r28, 0x76	; 118
    6838:	dd 4f       	sbci	r29, 0xFD	; 253
    683a:	88 81       	ld	r24, Y
    683c:	ca 58       	subi	r28, 0x8A	; 138
    683e:	d2 40       	sbci	r29, 0x02	; 2
    6840:	f8 16       	cp	r15, r24
    6842:	19 f1       	breq	.+70     	; 0x688a <flash_panel+0x43a>
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex\n"), lineno);
    6844:	00 d0       	rcall	.+0      	; 0x6846 <flash_panel+0x3f6>
    6846:	0f 92       	push	r0
    6848:	8b e9       	ldi	r24, 0x9B	; 155
    684a:	92 e1       	ldi	r25, 0x12	; 18
    684c:	ed b7       	in	r30, 0x3d	; 61
    684e:	fe b7       	in	r31, 0x3e	; 62
    6850:	81 83       	std	Z+1, r24	; 0x01
    6852:	92 83       	std	Z+2, r25	; 0x02
    6854:	63 82       	std	Z+3, r6	; 0x03
    6856:	74 82       	std	Z+4, r7	; 0x04
    6858:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    685c:	0f 92       	push	r0
    685e:	0f 92       	push	r0
    6860:	ed b7       	in	r30, 0x3d	; 61
    6862:	fe b7       	in	r31, 0x3e	; 62
    6864:	31 96       	adiw	r30, 0x01	; 1
    6866:	80 e7       	ldi	r24, 0x70	; 112
    6868:	92 e1       	ldi	r25, 0x12	; 18
    686a:	ad b7       	in	r26, 0x3d	; 61
    686c:	be b7       	in	r27, 0x3e	; 62
    686e:	11 96       	adiw	r26, 0x01	; 1
    6870:	8d 93       	st	X+, r24
    6872:	9c 93       	st	X, r25
    6874:	12 97       	sbiw	r26, 0x02	; 2
    6876:	c6 57       	subi	r28, 0x76	; 118
    6878:	dd 4f       	sbci	r29, 0xFD	; 253
    687a:	88 81       	ld	r24, Y
    687c:	ca 58       	subi	r28, 0x8A	; 138
    687e:	d2 40       	sbci	r29, 0x02	; 2
    6880:	82 83       	std	Z+2, r24	; 0x02
    6882:	13 82       	std	Z+3, r1	; 0x03
    6884:	f4 82       	std	Z+4, r15	; 0x04
    6886:	15 82       	std	Z+5, r1	; 0x05
    6888:	ae c0       	rjmp	.+348    	; 0x69e6 <flash_panel+0x596>
                    break;
                } else {
                    if (ihex.rectyp == 0) {
    688a:	d1 01       	movw	r26, r2
    688c:	13 96       	adiw	r26, 0x03	; 3
    688e:	2c 91       	ld	r18, X
    6890:	13 97       	sbiw	r26, 0x03	; 3
    6892:	22 23       	and	r18, r18
    6894:	09 f0       	breq	.+2      	; 0x6898 <flash_panel+0x448>
    6896:	65 c0       	rjmp	.+202    	; 0x6962 <flash_panel+0x512>
                        // data record
                        nextaddr = ihex.loadofs;
    6898:	11 96       	adiw	r26, 0x01	; 1
    689a:	ed 90       	ld	r14, X+
    689c:	fc 90       	ld	r15, X
    689e:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    68a0:	57 01       	movw	r10, r14
    68a2:	aa 0c       	add	r10, r10
    68a4:	ab 2c       	mov	r10, r11
    68a6:	aa 1c       	adc	r10, r10
    68a8:	bb 08       	sbc	r11, r11
    68aa:	b1 94       	neg	r11
    68ac:	ac 14       	cp	r10, r12
    68ae:	bd 04       	cpc	r11, r13
    68b0:	49 f1       	breq	.+82     	; 0x6904 <flash_panel+0x4b4>
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr) {
    68b2:	01 17       	cp	r16, r17
    68b4:	21 f1       	breq	.+72     	; 0x68fe <flash_panel+0x4ae>
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                                psize = pageendaddr - pagestartaddr;
                                if (verifyPage(twi, paddr, psize, &pagebuff[0])==0) {
    68b6:	a6 01       	movw	r20, r12
    68b8:	56 95       	lsr	r21
    68ba:	54 2f       	mov	r21, r20
    68bc:	44 27       	eor	r20, r20
    68be:	57 95       	ror	r21
    68c0:	47 95       	ror	r20
    68c2:	40 0f       	add	r20, r16
    68c4:	51 1d       	adc	r21, r1
    68c6:	60 e0       	ldi	r22, 0x00	; 0
    68c8:	70 e0       	ldi	r23, 0x00	; 0
    68ca:	10 1b       	sub	r17, r16
    68cc:	c4 01       	movw	r24, r8
    68ce:	21 2f       	mov	r18, r17
    68d0:	8e 01       	movw	r16, r28
    68d2:	0f 5f       	subi	r16, 0xFF	; 255
    68d4:	1f 4f       	sbci	r17, 0xFF	; 255
    68d6:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <verifyPage>
    68da:	89 2b       	or	r24, r25
    68dc:	81 f4       	brne	.+32     	; 0x68fe <flash_panel+0x4ae>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    68de:	00 d0       	rcall	.+0      	; 0x68e0 <flash_panel+0x490>
    68e0:	0f 92       	push	r0
    68e2:	83 e5       	ldi	r24, 0x53	; 83
    68e4:	92 e1       	ldi	r25, 0x12	; 18
    68e6:	ed b7       	in	r30, 0x3d	; 61
    68e8:	fe b7       	in	r31, 0x3e	; 62
    68ea:	81 83       	std	Z+1, r24	; 0x01
    68ec:	92 83       	std	Z+2, r25	; 0x02
    68ee:	c3 82       	std	Z+3, r12	; 0x03
    68f0:	d4 82       	std	Z+4, r13	; 0x04
    68f2:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    68f6:	0f 90       	pop	r0
    68f8:	0f 90       	pop	r0
    68fa:	0f 90       	pop	r0
    68fc:	0f 90       	pop	r0
                                }
                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    68fe:	1e 2d       	mov	r17, r14
    6900:	1f 77       	andi	r17, 0x7F	; 127
    6902:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    6904:	4e 2d       	mov	r20, r14
    6906:	4f 77       	andi	r20, 0x7F	; 127
    6908:	40 17       	cp	r20, r16
    690a:	08 f4       	brcc	.+2      	; 0x690e <flash_panel+0x4be>
    690c:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    690e:	d1 01       	movw	r26, r2
    6910:	5c 91       	ld	r21, X
    6912:	25 2f       	mov	r18, r21
    6914:	30 e0       	ldi	r19, 0x00	; 0
    6916:	c3 57       	subi	r28, 0x73	; 115
    6918:	dd 4f       	sbci	r29, 0xFD	; 253
    691a:	a8 81       	ld	r26, Y
    691c:	b9 81       	ldd	r27, Y+1	; 0x01
    691e:	cd 58       	subi	r28, 0x8D	; 141
    6920:	d2 40       	sbci	r29, 0x02	; 2
    6922:	e4 2f       	mov	r30, r20
    6924:	f0 e0       	ldi	r31, 0x00	; 0
    6926:	35 96       	adiw	r30, 0x05	; 5
    6928:	81 e0       	ldi	r24, 0x01	; 1
    692a:	90 e0       	ldi	r25, 0x00	; 0
    692c:	8c 0f       	add	r24, r28
    692e:	9d 1f       	adc	r25, r29
    6930:	e8 0f       	add	r30, r24
    6932:	f9 1f       	adc	r31, r25
    6934:	2c 5f       	subi	r18, 0xFC	; 252
    6936:	3f 4f       	sbci	r19, 0xFF	; 255
    6938:	22 0d       	add	r18, r2
    693a:	33 1d       	adc	r19, r3
    693c:	02 c0       	rjmp	.+4      	; 0x6942 <flash_panel+0x4f2>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    693e:	8d 91       	ld	r24, X+
    6940:	81 93       	st	Z+, r24
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    6942:	a2 17       	cp	r26, r18
    6944:	b3 07       	cpc	r27, r19
    6946:	d9 f7       	brne	.-10     	; 0x693e <flash_panel+0x4ee>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                        }
                        if ((pageoffset + ihex.reclen) > pageendaddr)
    6948:	85 2f       	mov	r24, r21
    694a:	90 e0       	ldi	r25, 0x00	; 0
    694c:	84 0f       	add	r24, r20
    694e:	91 1d       	adc	r25, r1
    6950:	21 2f       	mov	r18, r17
    6952:	30 e0       	ldi	r19, 0x00	; 0
    6954:	28 17       	cp	r18, r24
    6956:	39 07       	cpc	r19, r25
    6958:	0c f0       	brlt	.+2      	; 0x695c <flash_panel+0x50c>
    695a:	4d c0       	rjmp	.+154    	; 0x69f6 <flash_panel+0x5a6>
                            pageendaddr = pageoffset+ihex.reclen;
    695c:	14 2f       	mov	r17, r20
    695e:	15 0f       	add	r17, r21
    6960:	4a c0       	rjmp	.+148    	; 0x69f6 <flash_panel+0x5a6>
                    } else if (ihex.rectyp == 1) {
    6962:	21 30       	cpi	r18, 0x01	; 1
    6964:	79 f5       	brne	.+94     	; 0x69c4 <flash_panel+0x574>
                        // end of file record
                        if (pagestartaddr != pageendaddr) {
    6966:	01 17       	cp	r16, r17
    6968:	41 f1       	breq	.+80     	; 0x69ba <flash_panel+0x56a>
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            if (verifyPage(twi, paddr, psize, &pagebuff[0])==0) {
    696a:	a6 01       	movw	r20, r12
    696c:	56 95       	lsr	r21
    696e:	54 2f       	mov	r21, r20
    6970:	44 27       	eor	r20, r20
    6972:	57 95       	ror	r21
    6974:	47 95       	ror	r20
    6976:	40 0f       	add	r20, r16
    6978:	51 1d       	adc	r21, r1
    697a:	60 e0       	ldi	r22, 0x00	; 0
    697c:	70 e0       	ldi	r23, 0x00	; 0
    697e:	10 1b       	sub	r17, r16
    6980:	c4 01       	movw	r24, r8
    6982:	21 2f       	mov	r18, r17
    6984:	8e 01       	movw	r16, r28
    6986:	0f 5f       	subi	r16, 0xFF	; 255
    6988:	1f 4f       	sbci	r17, 0xFF	; 255
    698a:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <verifyPage>
    698e:	89 2b       	or	r24, r25
    6990:	a1 f4       	brne	.+40     	; 0x69ba <flash_panel+0x56a>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    6992:	00 d0       	rcall	.+0      	; 0x6994 <flash_panel+0x544>
    6994:	0f 92       	push	r0
    6996:	86 e3       	ldi	r24, 0x36	; 54
    6998:	92 e1       	ldi	r25, 0x12	; 18
    699a:	ad b7       	in	r26, 0x3d	; 61
    699c:	be b7       	in	r27, 0x3e	; 62
    699e:	11 96       	adiw	r26, 0x01	; 1
    69a0:	8d 93       	st	X+, r24
    69a2:	9c 93       	st	X, r25
    69a4:	12 97       	sbiw	r26, 0x02	; 2
    69a6:	13 96       	adiw	r26, 0x03	; 3
    69a8:	cd 92       	st	X+, r12
    69aa:	dc 92       	st	X, r13
    69ac:	14 97       	sbiw	r26, 0x04	; 4
    69ae:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    69b2:	0f 90       	pop	r0
    69b4:	0f 90       	pop	r0
    69b6:	0f 90       	pop	r0
    69b8:	0f 90       	pop	r0
                            }
                        }
                        xputs(PSTR("\n"));
    69ba:	84 e3       	ldi	r24, 0x34	; 52
    69bc:	92 e1       	ldi	r25, 0x12	; 18
    69be:	0e 94 10 4c 	call	0x9820	; 0x9820 <xputs>
    69c2:	2d c0       	rjmp	.+90     	; 0x6a1e <flash_panel+0x5ce>
                        break;
                    } else {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    69c4:	00 d0       	rcall	.+0      	; 0x69c6 <flash_panel+0x576>
    69c6:	00 d0       	rcall	.+0      	; 0x69c8 <flash_panel+0x578>
    69c8:	ed b7       	in	r30, 0x3d	; 61
    69ca:	fe b7       	in	r31, 0x3e	; 62
    69cc:	31 96       	adiw	r30, 0x01	; 1
    69ce:	84 ef       	ldi	r24, 0xF4	; 244
    69d0:	91 e1       	ldi	r25, 0x11	; 17
    69d2:	ad b7       	in	r26, 0x3d	; 61
    69d4:	be b7       	in	r27, 0x3e	; 62
    69d6:	11 96       	adiw	r26, 0x01	; 1
    69d8:	8d 93       	st	X+, r24
    69da:	9c 93       	st	X, r25
    69dc:	12 97       	sbiw	r26, 0x02	; 2
    69de:	22 83       	std	Z+2, r18	; 0x02
    69e0:	13 82       	std	Z+3, r1	; 0x03
    69e2:	64 82       	std	Z+4, r6	; 0x04
    69e4:	75 82       	std	Z+5, r7	; 0x05
    69e6:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    69ea:	ed b7       	in	r30, 0x3d	; 61
    69ec:	fe b7       	in	r31, 0x3e	; 62
    69ee:	36 96       	adiw	r30, 0x06	; 6
    69f0:	ed bf       	out	0x3d, r30	; 61
    69f2:	fe bf       	out	0x3e, r31	; 62
    69f4:	14 c0       	rjmp	.+40     	; 0x6a1e <flash_panel+0x5ce>
                                ihex.rectyp, lineno);
                        break;
    69f6:	65 01       	movw	r12, r10
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    69f8:	c5 57       	subi	r28, 0x75	; 117
    69fa:	dd 4f       	sbci	r29, 0xFD	; 253
    69fc:	88 81       	ld	r24, Y
    69fe:	cb 58       	subi	r28, 0x8B	; 139
    6a00:	d2 40       	sbci	r29, 0x02	; 2
    6a02:	c4 57       	subi	r28, 0x74	; 116
    6a04:	dd 4f       	sbci	r29, 0xFD	; 253
    6a06:	98 81       	ld	r25, Y
    6a08:	cc 58       	subi	r28, 0x8C	; 140
    6a0a:	d2 40       	sbci	r29, 0x02	; 2
    6a0c:	60 e0       	ldi	r22, 0x00	; 0
    6a0e:	71 e0       	ldi	r23, 0x01	; 1
    6a10:	46 ed       	ldi	r20, 0xD6	; 214
    6a12:	56 e2       	ldi	r21, 0x26	; 38
    6a14:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <f_gets>
    6a18:	89 2b       	or	r24, r25
    6a1a:	09 f0       	breq	.+2      	; 0x6a1e <flash_panel+0x5ce>
    6a1c:	ee ce       	rjmp	.-548    	; 0x67fa <flash_panel+0x3aa>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    6a1e:	85 e4       	ldi	r24, 0x45	; 69
    6a20:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    6a22:	c4 01       	movw	r24, r8
    6a24:	60 e7       	ldi	r22, 0x70	; 112
    6a26:	ae 01       	movw	r20, r28
    6a28:	4f 5f       	subi	r20, 0xFF	; 255
    6a2a:	5f 4f       	sbci	r21, 0xFF	; 255
    6a2c:	21 e0       	ldi	r18, 0x01	; 1
    6a2e:	00 e0       	ldi	r16, 0x00	; 0
    6a30:	0e 94 21 39 	call	0x7242	; 0x7242 <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY) {
    6a34:	d4 01       	movw	r26, r8
    6a36:	1d 96       	adiw	r26, 0x0d	; 13
    6a38:	8c 91       	ld	r24, X
    6a3a:	1d 97       	sbiw	r26, 0x0d	; 13
    6a3c:	88 23       	and	r24, r24
    6a3e:	d1 f7       	brne	.-12     	; 0x6a34 <flash_panel+0x5e4>
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK) {
    6a40:	1e 96       	adiw	r26, 0x0e	; 14
    6a42:	8c 91       	ld	r24, X
    6a44:	1e 97       	sbiw	r26, 0x0e	; 14
    6a46:	81 30       	cpi	r24, 0x01	; 1
    6a48:	11 f1       	breq	.+68     	; 0x6a8e <flash_panel+0x63e>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    6a4a:	1e 96       	adiw	r26, 0x0e	; 14
    6a4c:	2c 91       	ld	r18, X
    6a4e:	00 d0       	rcall	.+0      	; 0x6a50 <flash_panel+0x600>
    6a50:	0f 92       	push	r0
    6a52:	ed b7       	in	r30, 0x3d	; 61
    6a54:	fe b7       	in	r31, 0x3e	; 62
    6a56:	31 96       	adiw	r30, 0x01	; 1
    6a58:	89 ed       	ldi	r24, 0xD9	; 217
    6a5a:	91 e1       	ldi	r25, 0x11	; 17
    6a5c:	ad b7       	in	r26, 0x3d	; 61
    6a5e:	be b7       	in	r27, 0x3e	; 62
    6a60:	11 96       	adiw	r26, 0x01	; 1
    6a62:	8d 93       	st	X+, r24
    6a64:	9c 93       	st	X, r25
    6a66:	12 97       	sbiw	r26, 0x02	; 2
    6a68:	22 83       	std	Z+2, r18	; 0x02
    6a6a:	13 82       	std	Z+3, r1	; 0x03
    6a6c:	0a c0       	rjmp	.+20     	; 0x6a82 <flash_panel+0x632>
        }
        
        //i2cMasterSend(panel_num, 1, &pagebuff[0]);
        //TWI_MasterWriteRead(&twiMaster1, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    6a6e:	00 d0       	rcall	.+0      	; 0x6a70 <flash_panel+0x620>
    6a70:	0f 92       	push	r0
    6a72:	8e eb       	ldi	r24, 0xBE	; 190
    6a74:	91 e1       	ldi	r25, 0x11	; 17
    6a76:	ed b7       	in	r30, 0x3d	; 61
    6a78:	fe b7       	in	r31, 0x3e	; 62
    6a7a:	81 83       	std	Z+1, r24	; 0x01
    6a7c:	92 83       	std	Z+2, r25	; 0x02
    6a7e:	e3 82       	std	Z+3, r14	; 0x03
    6a80:	f4 82       	std	Z+4, r15	; 0x04
    6a82:	0e 94 52 4c 	call	0x98a4	; 0x98a4 <xprintf>
    6a86:	0f 90       	pop	r0
    6a88:	0f 90       	pop	r0
    6a8a:	0f 90       	pop	r0
    6a8c:	0f 90       	pop	r0
    }
};
    6a8e:	ce 56       	subi	r28, 0x6E	; 110
    6a90:	dd 4f       	sbci	r29, 0xFD	; 253
    6a92:	e2 e1       	ldi	r30, 0x12	; 18
    6a94:	0c 94 aa 4d 	jmp	0x9b54	; 0x9b54 <__epilogue_restores__>

00006a98 <init_all>:
#include "utils.h"

void init_all()
{ 
    6a98:	a1 e0       	ldi	r26, 0x01	; 1
    6a9a:	b0 e0       	ldi	r27, 0x00	; 0
    6a9c:	e2 e5       	ldi	r30, 0x52	; 82
    6a9e:	f5 e3       	ldi	r31, 0x35	; 53
    6aa0:	0c 94 9c 4d 	jmp	0x9b38	; 0x9b38 <__prologue_saves__+0x1c>
  ledWrite(LED0, ON);
    6aa4:	80 e0       	ldi	r24, 0x00	; 0
    6aa6:	61 e0       	ldi	r22, 0x01	; 1
    6aa8:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <ledWrite>
  
  PORTC.DIRSET = PIN3_bm; // UART pin
    6aac:	e0 e4       	ldi	r30, 0x40	; 64
    6aae:	f6 e0       	ldi	r31, 0x06	; 6
    6ab0:	88 e0       	ldi	r24, 0x08	; 8
    6ab2:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm; // UART pin
    6ab4:	84 e0       	ldi	r24, 0x04	; 4
    6ab6:	82 83       	std	Z+2, r24	; 0x02

  PORTC.DIRSET = PIN4_bm; // SS pin for SPI unit on port C
    6ab8:	80 e1       	ldi	r24, 0x10	; 16
    6aba:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port C
    6abc:	90 e2       	ldi	r25, 0x20	; 32
    6abe:	91 83       	std	Z+1, r25	; 0x01
  PORTC.DIRSET = PIN7_bm; // SCL pin for SPI unit on port C
    6ac0:	20 e8       	ldi	r18, 0x80	; 128
    6ac2:	21 83       	std	Z+1, r18	; 0x01
  PORTC.OUTSET = PIN4_bm; // Set SS high
    6ac4:	85 83       	std	Z+5, r24	; 0x05

  PORTD.DIRSET = PIN4_bm; // SS pin for SPI unit on port D
    6ac6:	e0 e6       	ldi	r30, 0x60	; 96
    6ac8:	f6 e0       	ldi	r31, 0x06	; 6
    6aca:	81 83       	std	Z+1, r24	; 0x01
  PORTD.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port D
    6acc:	91 83       	std	Z+1, r25	; 0x01
  PORTD.DIRSET = PIN7_bm; // SCL pin for SPI unit on port D
    6ace:	21 83       	std	Z+1, r18	; 0x01
  PORTD.OUTSET = PIN4_bm; // Set SS high
    6ad0:	85 83       	std	Z+5, r24	; 0x05

  PORTE.DIR = 0xB0;       // SPI (SD-card)
    6ad2:	80 eb       	ldi	r24, 0xB0	; 176
    6ad4:	80 93 80 06 	sts	0x0680, r24
  PORTE.OUT = 0x00;
    6ad8:	e0 e8       	ldi	r30, 0x80	; 128
    6ada:	f6 e0       	ldi	r31, 0x06	; 6
    6adc:	14 82       	std	Z+4, r1	; 0x04

  PORTH.DIRSET = PIN5_bm; // LDAC
    6ade:	e0 ee       	ldi	r30, 0xE0	; 224
    6ae0:	f6 e0       	ldi	r31, 0x06	; 6
    6ae2:	91 83       	std	Z+1, r25	; 0x01
  PORTH.DIRSET = PIN6_bm; // CLR
    6ae4:	80 e4       	ldi	r24, 0x40	; 64
    6ae6:	81 83       	std	Z+1, r24	; 0x01
  PORTH.DIRSET = PIN7_bm; // BIN
    6ae8:	21 83       	std	Z+1, r18	; 0x01
  PORTH.OUTCLR = PIN5_bm; // LDAC low
    6aea:	96 83       	std	Z+6, r25	; 0x06
  PORTH.OUTSET = PIN6_bm; // CLR high
    6aec:	85 83       	std	Z+5, r24	; 0x05
  PORTH.OUTCLR = PIN7_bm; // BIN low
    6aee:	26 83       	std	Z+6, r18	; 0x06

  PORTJ.DIR = 0xf0;       // LEDs are on bits 4 - 7
    6af0:	80 ef       	ldi	r24, 0xF0	; 240
    6af2:	80 93 00 07 	sts	0x0700, r24
  PORTJ.OUT = 0xf0;       // All LEDs off
    6af6:	e0 e0       	ldi	r30, 0x00	; 0
    6af8:	f7 e0       	ldi	r31, 0x07	; 7
    6afa:	84 83       	std	Z+4, r24	; 0x04


  PORTK.DIR = 0xf0;       // bit 4 - 7 are external signal direction control
    6afc:	00 e2       	ldi	r16, 0x20	; 32
    6afe:	17 e0       	ldi	r17, 0x07	; 7
    6b00:	80 93 20 07 	sts	0x0720, r24
  PORTK.OUT = 0xff;       // external signal direction set to input (0 = input)
    6b04:	8f ef       	ldi	r24, 0xFF	; 255
    6b06:	f8 01       	movw	r30, r16
    6b08:	84 83       	std	Z+4, r24	; 0x04



 // set digital I/O signals to outputs
  digitalMode(0, OUTPUT);     //used to trigger laser
    6b0a:	80 e0       	ldi	r24, 0x00	; 0
    6b0c:	60 e0       	ldi	r22, 0x00	; 0
    6b0e:	0e 94 40 2a 	call	0x5480	; 0x5480 <digitalMode>
  digitalMode(1, OUTPUT);     //used as a sign for the start and end of fetch_display_frame function
    6b12:	81 e0       	ldi	r24, 0x01	; 1
    6b14:	60 e0       	ldi	r22, 0x00	; 0
    6b16:	0e 94 40 2a 	call	0x5480	; 0x5480 <digitalMode>
  digitalMode(2, OUTPUT);     //used to trigger camera
    6b1a:	82 e0       	ldi	r24, 0x02	; 2
    6b1c:	60 e0       	ldi	r22, 0x00	; 0
    6b1e:	0e 94 40 2a 	call	0x5480	; 0x5480 <digitalMode>
  digitalMode(3, INPUT);      //Used to detect external trigger signal 
    6b22:	83 e0       	ldi	r24, 0x03	; 3
    6b24:	61 e0       	ldi	r22, 0x01	; 1
    6b26:	0e 94 40 2a 	call	0x5480	; 0x5480 <digitalMode>
  PORTK.PIN3CTRL = 0x01;      //INT3 senses rising edge
    6b2a:	81 e0       	ldi	r24, 0x01	; 1
    6b2c:	f8 01       	movw	r30, r16
    6b2e:	83 8b       	std	Z+19, r24	; 0x13
  PORTK.INT0MASK = 0x00;      //disable Int3 as source for port interrupt 0x00, enable it with 0x08.
    6b30:	12 86       	std	Z+10, r1	; 0x0a
  PORTK.INTCTRL = 0x02;       //Set Int3 INT0 Level medium   
    6b32:	82 e0       	ldi	r24, 0x02	; 2
    6b34:	81 87       	std	Z+9, r24	; 0x09

  
  OSC.XOSCCTRL = 0x47;    // 0.4-16 MHz XTAL - 1K CLK Start Up
    6b36:	e0 e5       	ldi	r30, 0x50	; 80
    6b38:	f0 e0       	ldi	r31, 0x00	; 0
    6b3a:	87 e4       	ldi	r24, 0x47	; 71
    6b3c:	82 83       	std	Z+2, r24	; 0x02
  OSC.PLLCTRL = 0xC4;     // XOSC is PLL Source - 4x Factor (32MHz)
    6b3e:	84 ec       	ldi	r24, 0xC4	; 196
    6b40:	85 83       	std	Z+5, r24	; 0x05
  OSC.CTRL = 0x18;        // Enable PLL & External Oscillator
    6b42:	88 e1       	ldi	r24, 0x18	; 24
    6b44:	80 93 50 00 	sts	0x0050, r24

  // switch to 32 MHz oscillator
  while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable
    6b48:	80 91 51 00 	lds	r24, 0x0051
    6b4c:	84 ff       	sbrs	r24, 4
    6b4e:	fc cf       	rjmp	.-8      	; 0x6b48 <init_all+0xb0>
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
  uint8_t volatile saved_sreg = SREG;
    6b50:	8f b7       	in	r24, 0x3f	; 63
    6b52:	89 83       	std	Y+1, r24	; 0x01
  cli();
    6b54:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    6b56:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    6b58:	24 e0       	ldi	r18, 0x04	; 4
    6b5a:	80 e4       	ldi	r24, 0x40	; 64
    6b5c:	90 e0       	ldi	r25, 0x00	; 0
    6b5e:	fc 01       	movw	r30, r24
    6b60:	08 ed       	ldi	r16, 0xD8	; 216
    6b62:	04 bf       	out	0x34, r16	; 52
    6b64:	20 83       	st	Z, r18
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    6b66:	89 81       	ldd	r24, Y+1	; 0x01
    6b68:	8f bf       	out	0x3f, r24	; 63
    6b6a:	88 ee       	ldi	r24, 0xE8	; 232
    6b6c:	93 e0       	ldi	r25, 0x03	; 3
    6b6e:	20 e2       	ldi	r18, 0x20	; 32
    6b70:	33 e0       	ldi	r19, 0x03	; 3
    6b72:	f9 01       	movw	r30, r18
    6b74:	31 97       	sbiw	r30, 0x01	; 1
    6b76:	f1 f7       	brne	.-4      	; 0x6b74 <init_all+0xdc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b78:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b7a:	d9 f7       	brne	.-10     	; 0x6b72 <init_all+0xda>
  _delay_ms(100);         // Debounce ON Switch

  // Timer TCE1: 100Hz timer for SD Card routines
  
 // TCE1.CTRLA = 0x05;      // Prescaler: clk/64
  TCE1.CTRLA = 0x04;      // Prescaler: clk/8
    6b7c:	e0 e4       	ldi	r30, 0x40	; 64
    6b7e:	fa e0       	ldi	r31, 0x0A	; 10
    6b80:	84 e0       	ldi	r24, 0x04	; 4
    6b82:	80 93 40 0a 	sts	0x0A40, r24
  TCE1.PER   = 39999;     // 100Hz
    6b86:	8f e3       	ldi	r24, 0x3F	; 63
    6b88:	9c e9       	ldi	r25, 0x9C	; 156
    6b8a:	86 a3       	std	Z+38, r24	; 0x26
    6b8c:	97 a3       	std	Z+39, r25	; 0x27
  TCE1.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    6b8e:	82 e0       	ldi	r24, 0x02	; 2
    6b90:	86 83       	std	Z+6, r24	; 0x06

  // Initialize ADC (SPI master on port C)
  SPIC.CTRL = 0x58;       // Enable Master Mode, Mode 2, clkper/4
    6b92:	88 e5       	ldi	r24, 0x58	; 88
    6b94:	80 93 c0 08 	sts	0x08C0, r24

  // range register 1: -5V-+5v range on ch 0,1 0-10V on ch 2, 3
  PORTC.OUTCLR = PIN4_bm;
    6b98:	80 e1       	ldi	r24, 0x10	; 16
    6b9a:	e0 e4       	ldi	r30, 0x40	; 64
    6b9c:	f6 e0       	ldi	r31, 0x06	; 6
    6b9e:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xab;
    6ba0:	8b ea       	ldi	r24, 0xAB	; 171
    6ba2:	e0 ec       	ldi	r30, 0xC0	; 192
    6ba4:	f8 e0       	ldi	r31, 0x08	; 8
    6ba6:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    6ba8:	80 91 c2 08 	lds	r24, 0x08C2
    6bac:	87 ff       	sbrs	r24, 7
    6bae:	fc cf       	rjmp	.-8      	; 0x6ba8 <init_all+0x110>
  SPIC.DATA = 0xe0;
    6bb0:	80 ee       	ldi	r24, 0xE0	; 224
    6bb2:	e0 ec       	ldi	r30, 0xC0	; 192
    6bb4:	f8 e0       	ldi	r31, 0x08	; 8
    6bb6:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    6bb8:	80 91 c2 08 	lds	r24, 0x08C2
    6bbc:	87 ff       	sbrs	r24, 7
    6bbe:	fc cf       	rjmp	.-8      	; 0x6bb8 <init_all+0x120>
  PORTC.OUTSET = PIN4_bm;
    6bc0:	e0 e4       	ldi	r30, 0x40	; 64
    6bc2:	f6 e0       	ldi	r31, 0x06	; 6
    6bc4:	80 e1       	ldi	r24, 0x10	; 16
    6bc6:	85 83       	std	Z+5, r24	; 0x05

  // range register 2: 0-10v range on ch 4,5,6,7
  PORTC.OUTCLR = PIN4_bm;
    6bc8:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xdf;
    6bca:	8f ed       	ldi	r24, 0xDF	; 223
    6bcc:	e0 ec       	ldi	r30, 0xC0	; 192
    6bce:	f8 e0       	ldi	r31, 0x08	; 8
    6bd0:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    6bd2:	80 91 c2 08 	lds	r24, 0x08C2
    6bd6:	87 ff       	sbrs	r24, 7
    6bd8:	fc cf       	rjmp	.-8      	; 0x6bd2 <init_all+0x13a>
  SPIC.DATA = 0xe0;
    6bda:	80 ee       	ldi	r24, 0xE0	; 224
    6bdc:	e0 ec       	ldi	r30, 0xC0	; 192
    6bde:	f8 e0       	ldi	r31, 0x08	; 8
    6be0:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    6be2:	80 91 c2 08 	lds	r24, 0x08C2
    6be6:	87 ff       	sbrs	r24, 7
    6be8:	fc cf       	rjmp	.-8      	; 0x6be2 <init_all+0x14a>
  PORTC.OUTSET = PIN4_bm;
    6bea:	e0 e4       	ldi	r30, 0x40	; 64
    6bec:	f6 e0       	ldi	r31, 0x06	; 6
    6bee:	80 e1       	ldi	r24, 0x10	; 16
    6bf0:	85 83       	std	Z+5, r24	; 0x05

  // sequence register: all sequence bits off
  PORTC.OUTCLR = PIN4_bm;
    6bf2:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xe0;
    6bf4:	80 ee       	ldi	r24, 0xE0	; 224
    6bf6:	e0 ec       	ldi	r30, 0xC0	; 192
    6bf8:	f8 e0       	ldi	r31, 0x08	; 8
    6bfa:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    6bfc:	80 91 c2 08 	lds	r24, 0x08C2
    6c00:	87 ff       	sbrs	r24, 7
    6c02:	fc cf       	rjmp	.-8      	; 0x6bfc <init_all+0x164>
  SPIC.DATA = 0x00;
    6c04:	e0 ec       	ldi	r30, 0xC0	; 192
    6c06:	f8 e0       	ldi	r31, 0x08	; 8
    6c08:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    6c0a:	80 91 c2 08 	lds	r24, 0x08C2
    6c0e:	87 ff       	sbrs	r24, 7
    6c10:	fc cf       	rjmp	.-8      	; 0x6c0a <init_all+0x172>
  PORTC.OUTSET = PIN4_bm;
    6c12:	e0 e4       	ldi	r30, 0x40	; 64
    6c14:	f6 e0       	ldi	r31, 0x06	; 6
    6c16:	80 e1       	ldi	r24, 0x10	; 16
    6c18:	85 83       	std	Z+5, r24	; 0x05

  // control register: ch 000, mode = 00, pm = 00, code = 0(twos complement), ref = 1, seq = 00
  PORTC.OUTCLR = PIN4_bm;
    6c1a:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0x80;
    6c1c:	80 e8       	ldi	r24, 0x80	; 128
    6c1e:	e0 ec       	ldi	r30, 0xC0	; 192
    6c20:	f8 e0       	ldi	r31, 0x08	; 8
    6c22:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    6c24:	80 91 c2 08 	lds	r24, 0x08C2
    6c28:	87 ff       	sbrs	r24, 7
    6c2a:	fc cf       	rjmp	.-8      	; 0x6c24 <init_all+0x18c>
  SPIC.DATA = 0x10;
    6c2c:	80 e1       	ldi	r24, 0x10	; 16
    6c2e:	e0 ec       	ldi	r30, 0xC0	; 192
    6c30:	f8 e0       	ldi	r31, 0x08	; 8
    6c32:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    6c34:	80 91 c2 08 	lds	r24, 0x08C2
    6c38:	87 ff       	sbrs	r24, 7
    6c3a:	fc cf       	rjmp	.-8      	; 0x6c34 <init_all+0x19c>
  PORTC.OUTSET = PIN4_bm;
    6c3c:	90 e1       	ldi	r25, 0x10	; 16
    6c3e:	e0 e4       	ldi	r30, 0x40	; 64
    6c40:	f6 e0       	ldi	r31, 0x06	; 6
    6c42:	95 83       	std	Z+5, r25	; 0x05


  // Initialize DAC (SPI master on port D)
  SPID.CTRL = 0x58;       // Enable Master Mode, Mode 2, clkper/4
    6c44:	88 e5       	ldi	r24, 0x58	; 88
    6c46:	80 93 c0 09 	sts	0x09C0, r24

  // DAC power control register (all ch + ref powered up)
  PORTD.OUTCLR = PIN4_bm;
    6c4a:	e0 e6       	ldi	r30, 0x60	; 96
    6c4c:	f6 e0       	ldi	r31, 0x06	; 6
    6c4e:	96 83       	std	Z+6, r25	; 0x06
  SPID.DATA = 0x10;
    6c50:	e0 ec       	ldi	r30, 0xC0	; 192
    6c52:	f9 e0       	ldi	r31, 0x09	; 9
    6c54:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    6c56:	80 91 c2 09 	lds	r24, 0x09C2
    6c5a:	87 ff       	sbrs	r24, 7
    6c5c:	fc cf       	rjmp	.-8      	; 0x6c56 <init_all+0x1be>
  SPID.DATA = 0x00;
    6c5e:	e0 ec       	ldi	r30, 0xC0	; 192
    6c60:	f9 e0       	ldi	r31, 0x09	; 9
    6c62:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    6c64:	80 91 c2 09 	lds	r24, 0x09C2
    6c68:	87 ff       	sbrs	r24, 7
    6c6a:	fc cf       	rjmp	.-8      	; 0x6c64 <init_all+0x1cc>
  SPID.DATA = 0x1f;
    6c6c:	8f e1       	ldi	r24, 0x1F	; 31
    6c6e:	e0 ec       	ldi	r30, 0xC0	; 192
    6c70:	f9 e0       	ldi	r31, 0x09	; 9
    6c72:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    6c74:	80 91 c2 09 	lds	r24, 0x09C2
    6c78:	87 ff       	sbrs	r24, 7
    6c7a:	fc cf       	rjmp	.-8      	; 0x6c74 <init_all+0x1dc>
  PORTD.OUTSET = PIN4_bm;
    6c7c:	e0 e6       	ldi	r30, 0x60	; 96
    6c7e:	f6 e0       	ldi	r31, 0x06	; 6
    6c80:	80 e1       	ldi	r24, 0x10	; 16
    6c82:	85 83       	std	Z+5, r24	; 0x05

//DAC output range register (all ch +/-10V range)  
  PORTD.OUTCLR = PIN4_bm;
    6c84:	86 83       	std	Z+6, r24	; 0x06
  SPID.DATA = 0x0c;
    6c86:	8c e0       	ldi	r24, 0x0C	; 12
    6c88:	e0 ec       	ldi	r30, 0xC0	; 192
    6c8a:	f9 e0       	ldi	r31, 0x09	; 9
    6c8c:	83 83       	std	Z+3, r24	; 0x03
//	SPID.DATA = 0x08; // only ch 0
  loop_until_bit_is_set(SPID.STATUS, 7);
    6c8e:	80 91 c2 09 	lds	r24, 0x09C2
    6c92:	87 ff       	sbrs	r24, 7
    6c94:	fc cf       	rjmp	.-8      	; 0x6c8e <init_all+0x1f6>
  SPID.DATA = 0x00;
    6c96:	e0 ec       	ldi	r30, 0xC0	; 192
    6c98:	f9 e0       	ldi	r31, 0x09	; 9
    6c9a:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    6c9c:	80 91 c2 09 	lds	r24, 0x09C2
    6ca0:	87 ff       	sbrs	r24, 7
    6ca2:	fc cf       	rjmp	.-8      	; 0x6c9c <init_all+0x204>
   SPID.DATA = 0x04;
    6ca4:	84 e0       	ldi	r24, 0x04	; 4
    6ca6:	e0 ec       	ldi	r30, 0xC0	; 192
    6ca8:	f9 e0       	ldi	r31, 0x09	; 9
    6caa:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    6cac:	80 91 c2 09 	lds	r24, 0x09C2
    6cb0:	87 ff       	sbrs	r24, 7
    6cb2:	fc cf       	rjmp	.-8      	; 0x6cac <init_all+0x214>
  PORTD.OUTSET = PIN4_bm;
    6cb4:	80 e1       	ldi	r24, 0x10	; 16
    6cb6:	e0 e6       	ldi	r30, 0x60	; 96
    6cb8:	f6 e0       	ldi	r31, 0x06	; 6
    6cba:	85 83       	std	Z+5, r24	; 0x05

  // initialize the UART
  uart_init();
    6cbc:	0e 94 6d 36 	call	0x6cda	; 0x6cda <uart_init>
  
  //initialize timer
  timer_init();
    6cc0:	0e 94 99 4a 	call	0x9532	; 0x9532 <timer_init>
  
  Handler_Init();
    6cc4:	0e 94 12 38 	call	0x7024	; 0x7024 <Handler_Init>

  // Enable interrupts
  PMIC.CTRL = 0x07;       // Enable High, Medium and Low level interrupts
    6cc8:	87 e0       	ldi	r24, 0x07	; 7
    6cca:	e0 ea       	ldi	r30, 0xA0	; 160
    6ccc:	f0 e0       	ldi	r31, 0x00	; 0
    6cce:	82 83       	std	Z+2, r24	; 0x02
  sei();
    6cd0:	78 94       	sei
}
    6cd2:	21 96       	adiw	r28, 0x01	; 1
    6cd4:	e4 e0       	ldi	r30, 0x04	; 4
    6cd6:	0c 94 b8 4d 	jmp	0x9b70	; 0x9b70 <__epilogue_restores__+0x1c>

00006cda <uart_init>:
/* Initialize UART */

void uart_init()
{

  rxfifo.idx_r = 0;
    6cda:	10 92 86 24 	sts	0x2486, r1
    6cde:	10 92 87 24 	sts	0x2487, r1
  rxfifo.idx_w = 0;
    6ce2:	10 92 84 24 	sts	0x2484, r1
    6ce6:	10 92 85 24 	sts	0x2485, r1
  rxfifo.count = 0;
    6cea:	10 92 88 24 	sts	0x2488, r1
    6cee:	10 92 89 24 	sts	0x2489, r1
  txfifo.idx_r = 0;
    6cf2:	10 92 42 24 	sts	0x2442, r1
  txfifo.idx_w = 0;
    6cf6:	10 92 41 24 	sts	0x2441, r1
  txfifo.count = 0;
    6cfa:	10 92 43 24 	sts	0x2443, r1
//  USARTC0.BAUDCTRLB = 0xA1;   // ==> 230400 bps 
  
//  USARTC0.BAUDCTRLA = 0xD6;   // BSCALE = -6, BSEL = 214
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 460800 bps
  
  USARTC0.BAUDCTRLA = 0x4B;   // BSCALE = -6, BSEL = 75
    6cfe:	e0 ea       	ldi	r30, 0xA0	; 160
    6d00:	f8 e0       	ldi	r31, 0x08	; 8
    6d02:	8b e4       	ldi	r24, 0x4B	; 75
    6d04:	86 83       	std	Z+6, r24	; 0x06
  USARTC0.BAUDCTRLB = 0xA0;   // ==> 921600 bps
    6d06:	80 ea       	ldi	r24, 0xA0	; 160
    6d08:	87 83       	std	Z+7, r24	; 0x07
  
//  USARTC0.BAUDCTRLA = 0x05;   // BSCALE = -6, BSEL = 5
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 1843200 bps
  
  USARTC0.CTRLA = 0x10;       // RX is low level interrupt
    6d0a:	80 e1       	ldi	r24, 0x10	; 16
    6d0c:	83 83       	std	Z+3, r24	; 0x03
  USARTC0.CTRLC = 0x03;       // Async, No Parity, 1 stop bit, 8 data bits
    6d0e:	83 e0       	ldi	r24, 0x03	; 3
    6d10:	85 83       	std	Z+5, r24	; 0x05
  USARTC0.CTRLB = 0x18;       // Enable RX and TX
    6d12:	88 e1       	ldi	r24, 0x18	; 24
    6d14:	84 83       	std	Z+4, r24	; 0x04
}
    6d16:	08 95       	ret

00006d18 <uart_test>:

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    6d18:	20 91 88 24 	lds	r18, 0x2488
    6d1c:	30 91 89 24 	lds	r19, 0x2489
}
    6d20:	c9 01       	movw	r24, r18
    6d22:	08 95       	ret

00006d24 <uart_get>:
uint8_t uart_get ()
{
  uint16_t i;
  uint8_t d;

  i = rxfifo.idx_r;
    6d24:	20 91 86 24 	lds	r18, 0x2486
    6d28:	30 91 87 24 	lds	r19, 0x2487
  while(rxfifo.count == 0);
    6d2c:	80 91 88 24 	lds	r24, 0x2488
    6d30:	90 91 89 24 	lds	r25, 0x2489
    6d34:	89 2b       	or	r24, r25
    6d36:	d1 f3       	breq	.-12     	; 0x6d2c <uart_get+0x8>
  d = *(rxfifo.PRxBuff+i++);
    6d38:	e0 91 8c 24 	lds	r30, 0x248C
    6d3c:	f0 91 8d 24 	lds	r31, 0x248D
    6d40:	e2 0f       	add	r30, r18
    6d42:	f3 1f       	adc	r31, r19
    6d44:	e0 81       	ld	r30, Z
    6d46:	2f 5f       	subi	r18, 0xFF	; 255
    6d48:	3f 4f       	sbci	r19, 0xFF	; 255
  cli();
    6d4a:	f8 94       	cli
  rxfifo.count--;
    6d4c:	80 91 88 24 	lds	r24, 0x2488
    6d50:	90 91 89 24 	lds	r25, 0x2489
    6d54:	01 97       	sbiw	r24, 0x01	; 1
    6d56:	80 93 88 24 	sts	0x2488, r24
    6d5a:	90 93 89 24 	sts	0x2489, r25
  sei();
    6d5e:	78 94       	sei
  if(i >= rxfifo.size)
    6d60:	80 91 8a 24 	lds	r24, 0x248A
    6d64:	90 91 8b 24 	lds	r25, 0x248B
    6d68:	28 17       	cp	r18, r24
    6d6a:	39 07       	cpc	r19, r25
    6d6c:	10 f0       	brcs	.+4      	; 0x6d72 <uart_get+0x4e>
    6d6e:	20 e0       	ldi	r18, 0x00	; 0
    6d70:	30 e0       	ldi	r19, 0x00	; 0
    i = 0;
  rxfifo.idx_r = i;
    6d72:	20 93 86 24 	sts	0x2486, r18
    6d76:	30 93 87 24 	sts	0x2487, r19

  return d;
}
    6d7a:	8e 2f       	mov	r24, r30
    6d7c:	08 95       	ret

00006d7e <uart_put>:


/* Put a character to transmit */

void uart_put (uint8_t d)
{
    6d7e:	28 2f       	mov	r18, r24
  uint8_t i;

  i = txfifo.idx_w;
    6d80:	90 91 41 24 	lds	r25, 0x2441
  while(txfifo.count >= sizeof(txfifo.buff));
    6d84:	80 91 43 24 	lds	r24, 0x2443
    6d88:	80 34       	cpi	r24, 0x40	; 64
    6d8a:	e0 f7       	brcc	.-8      	; 0x6d84 <uart_put+0x6>
  txfifo.buff[i++] = d;
    6d8c:	e9 2f       	mov	r30, r25
    6d8e:	f0 e0       	ldi	r31, 0x00	; 0
    6d90:	ef 5b       	subi	r30, 0xBF	; 191
    6d92:	fb 4d       	sbci	r31, 0xDB	; 219
    6d94:	23 83       	std	Z+3, r18	; 0x03
    6d96:	9f 5f       	subi	r25, 0xFF	; 255
  cli();
    6d98:	f8 94       	cli
  txfifo.count++;
    6d9a:	80 91 43 24 	lds	r24, 0x2443
    6d9e:	8f 5f       	subi	r24, 0xFF	; 255
    6da0:	80 93 43 24 	sts	0x2443, r24
  USARTC0.CTRLA = USART_RXCINTLVL0_bm | USART_DREINTLVL0_bm;
    6da4:	81 e1       	ldi	r24, 0x11	; 17
    6da6:	e0 ea       	ldi	r30, 0xA0	; 160
    6da8:	f8 e0       	ldi	r31, 0x08	; 8
    6daa:	83 83       	std	Z+3, r24	; 0x03

  sei();
    6dac:	78 94       	sei
  if(i >= sizeof(txfifo.buff))
    6dae:	90 34       	cpi	r25, 0x40	; 64
    6db0:	08 f0       	brcs	.+2      	; 0x6db4 <uart_put+0x36>
    6db2:	90 e0       	ldi	r25, 0x00	; 0
    i = 0;
  txfifo.idx_w = i;
    6db4:	90 93 41 24 	sts	0x2441, r25
}
    6db8:	08 95       	ret

00006dba <uart_putstr>:

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
    6dba:	cf 93       	push	r28
    6dbc:	df 93       	push	r29
    6dbe:	ec 01       	movw	r28, r24
    6dc0:	03 c0       	rjmp	.+6      	; 0x6dc8 <uart_putstr+0xe>
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    uart_put(d);
    6dc2:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <uart_put>
    s++;
    6dc6:	21 96       	adiw	r28, 0x01	; 1

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    6dc8:	fe 01       	movw	r30, r28
    6dca:	84 91       	lpm	r24, Z+
    6dcc:	88 23       	and	r24, r24
    6dce:	c9 f7       	brne	.-14     	; 0x6dc2 <uart_putstr+0x8>
    uart_put(d);
    s++;
  }
}
    6dd0:	df 91       	pop	r29
    6dd2:	cf 91       	pop	r28
    6dd4:	08 95       	ret

00006dd6 <uart_crlf>:

// Sends a Carriage Return and Line Feed to the serial port
void uart_crlf()
{
  uart_put(CR);
    6dd6:	8d e0       	ldi	r24, 0x0D	; 13
    6dd8:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <uart_put>
  uart_put(LF);
    6ddc:	8a e0       	ldi	r24, 0x0A	; 10
    6dde:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <uart_put>
}
    6de2:	08 95       	ret

00006de4 <fill_Rx_buffer>:

//Notes: this function expects the first byte in the buffer to be the length of the message
//only call this after a while(!(uart_test())); command

uint16_t fill_Rx_buffer(uint8_t *Rx_buffer)
{	
    6de4:	cf 92       	push	r12
    6de6:	df 92       	push	r13
    6de8:	ff 92       	push	r15
    6dea:	0f 93       	push	r16
    6dec:	1f 93       	push	r17
    6dee:	cf 93       	push	r28
    6df0:	df 93       	push	r29
    6df2:	6c 01       	movw	r12, r24

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    6df4:	80 91 88 24 	lds	r24, 0x2488
    6df8:	90 91 89 24 	lds	r25, 0x2489
	uint16_t data_length, i;
	
	message_length = 0;
	//err_flag = 1;
	
	if (uart_test())
    6dfc:	89 2b       	or	r24, r25
    6dfe:	11 f4       	brne	.+4      	; 0x6e04 <fill_Rx_buffer+0x20>
    6e00:	ff 24       	eor	r15, r15
    6e02:	3c c0       	rjmp	.+120    	; 0x6e7c <fill_Rx_buffer+0x98>
	{
		message_length = uart_get();
    6e04:	0e 94 92 36 	call	0x6d24	; 0x6d24 <uart_get>
    6e08:	f8 2e       	mov	r15, r24
		
		if (message_length == 50)
    6e0a:	82 e3       	ldi	r24, 0x32	; 50
    6e0c:	f8 16       	cp	r15, r24
    6e0e:	29 f0       	breq	.+10     	; 0x6e1a <fill_Rx_buffer+0x36>
    6e10:	c0 e0       	ldi	r28, 0x00	; 0
    6e12:	d0 e0       	ldi	r29, 0x00	; 0
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    6e14:	0f 2d       	mov	r16, r15
    6e16:	10 e0       	ldi	r17, 0x00	; 0
    6e18:	2e c0       	rjmp	.+92     	; 0x6e76 <fill_Rx_buffer+0x92>
		
		if (message_length == 50)
		{
		//dump frame: header and data. read the first two bytes data which are the frame data length

			temp1 = uart_get();
    6e1a:	0e 94 92 36 	call	0x6d24	; 0x6d24 <uart_get>
    6e1e:	18 2f       	mov	r17, r24
			temp2 = uart_get();
    6e20:	0e 94 92 36 	call	0x6d24	; 0x6d24 <uart_get>

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	
    6e24:	38 2f       	mov	r19, r24
    6e26:	20 e0       	ldi	r18, 0x00	; 0
    6e28:	c9 01       	movw	r24, r18
    6e2a:	81 0f       	add	r24, r17
    6e2c:	91 1d       	adc	r25, r1
    6e2e:	8c 01       	movw	r16, r24
    6e30:	c0 e0       	ldi	r28, 0x00	; 0
    6e32:	d0 e0       	ldi	r29, 0x00	; 0

			for (i = 0; i < data_length+7; i++)
    6e34:	09 5f       	subi	r16, 0xF9	; 249
    6e36:	1f 4f       	sbci	r17, 0xFF	; 255
    6e38:	0d c0       	rjmp	.+26     	; 0x6e54 <fill_Rx_buffer+0x70>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    6e3a:	80 91 88 24 	lds	r24, 0x2488
    6e3e:	90 91 89 24 	lds	r25, 0x2489

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
			{
				while(!(uart_test()));
    6e42:	89 2b       	or	r24, r25
    6e44:	d1 f3       	breq	.-12     	; 0x6e3a <fill_Rx_buffer+0x56>
				Rx_buffer[i] = uart_get();
    6e46:	0e 94 92 36 	call	0x6d24	; 0x6d24 <uart_get>
    6e4a:	f6 01       	movw	r30, r12
    6e4c:	ec 0f       	add	r30, r28
    6e4e:	fd 1f       	adc	r31, r29
    6e50:	80 83       	st	Z, r24
			temp1 = uart_get();
			temp2 = uart_get();

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
    6e52:	21 96       	adiw	r28, 0x01	; 1
    6e54:	c0 17       	cp	r28, r16
    6e56:	d1 07       	cpc	r29, r17
    6e58:	80 f3       	brcs	.-32     	; 0x6e3a <fill_Rx_buffer+0x56>
    6e5a:	10 c0       	rjmp	.+32     	; 0x6e7c <fill_Rx_buffer+0x98>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    6e5c:	80 91 88 24 	lds	r24, 0x2488
    6e60:	90 91 89 24 	lds	r25, 0x2489
								
		}	
        else	
			for (i = 0; i < message_length; i++)
			{
				while(!(uart_test()));
    6e64:	89 2b       	or	r24, r25
    6e66:	d1 f3       	breq	.-12     	; 0x6e5c <fill_Rx_buffer+0x78>
				Rx_buffer[i] = uart_get();
    6e68:	0e 94 92 36 	call	0x6d24	; 0x6d24 <uart_get>
    6e6c:	f6 01       	movw	r30, r12
    6e6e:	ec 0f       	add	r30, r28
    6e70:	fd 1f       	adc	r31, r29
    6e72:	80 83       	st	Z, r24
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    6e74:	21 96       	adiw	r28, 0x01	; 1
    6e76:	c0 17       	cp	r28, r16
    6e78:	d1 07       	cpc	r29, r17
    6e7a:	80 f3       	brcs	.-32     	; 0x6e5c <fill_Rx_buffer+0x78>
	}
	//else err_flag = 0;  - without other error check, message_length stays at zero.
	//message_length = err_flag*message_length;  - only useful for multiple error sources, but mult is overkill
	return message_length;			

}	
    6e7c:	8f 2d       	mov	r24, r15
    6e7e:	90 e0       	ldi	r25, 0x00	; 0
    6e80:	df 91       	pop	r29
    6e82:	cf 91       	pop	r28
    6e84:	1f 91       	pop	r17
    6e86:	0f 91       	pop	r16
    6e88:	ff 90       	pop	r15
    6e8a:	df 90       	pop	r13
    6e8c:	cf 90       	pop	r12
    6e8e:	08 95       	ret

00006e90 <send_Tx_buffer>:
//Return Values: none
//Limitations: messages can only be upto 255 bytes in length
//Notes: this function sends the message length as the first byte of the message

void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
    6e90:	ff 92       	push	r15
    6e92:	0f 93       	push	r16
    6e94:	1f 93       	push	r17
    6e96:	cf 93       	push	r28
    6e98:	df 93       	push	r29
    6e9a:	18 2f       	mov	r17, r24
    6e9c:	09 2f       	mov	r16, r25
    6e9e:	f6 2e       	mov	r15, r22
	uint8_t i;

	uart_put(message_length);
    6ea0:	86 2f       	mov	r24, r22
    6ea2:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <uart_put>
    6ea6:	21 2f       	mov	r18, r17
    6ea8:	30 2f       	mov	r19, r16
    6eaa:	c9 01       	movw	r24, r18
    6eac:	ec 01       	movw	r28, r24
    6eae:	10 e0       	ldi	r17, 0x00	; 0
    6eb0:	04 c0       	rjmp	.+8      	; 0x6eba <send_Tx_buffer+0x2a>
	for (i = 0; i < message_length;i++)
	{
		uart_put(Tx_buffer[i]);
    6eb2:	89 91       	ld	r24, Y+
    6eb4:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <uart_put>
void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
	uint8_t i;

	uart_put(message_length);
	for (i = 0; i < message_length;i++)
    6eb8:	1f 5f       	subi	r17, 0xFF	; 255
    6eba:	1f 15       	cp	r17, r15
    6ebc:	d0 f3       	brcs	.-12     	; 0x6eb2 <send_Tx_buffer+0x22>
	{
		uart_put(Tx_buffer[i]);
	}	
}
    6ebe:	cd b7       	in	r28, 0x3d	; 61
    6ec0:	de b7       	in	r29, 0x3e	; 62
    6ec2:	e5 e0       	ldi	r30, 0x05	; 5
    6ec4:	0c 94 b7 4d 	jmp	0x9b6e	; 0x9b6e <__epilogue_restores__+0x1a>

00006ec8 <__vector_25>:


/* UART RXC interrupt */

ISR(USARTC0_RXC_vect)
{
    6ec8:	1f 92       	push	r1
    6eca:	0f 92       	push	r0
    6ecc:	0f b6       	in	r0, 0x3f	; 63
    6ece:	0f 92       	push	r0
    6ed0:	08 b6       	in	r0, 0x38	; 56
    6ed2:	0f 92       	push	r0
    6ed4:	0b b6       	in	r0, 0x3b	; 59
    6ed6:	0f 92       	push	r0
    6ed8:	11 24       	eor	r1, r1
    6eda:	18 be       	out	0x38, r1	; 56
    6edc:	1b be       	out	0x3b, r1	; 59
    6ede:	2f 93       	push	r18
    6ee0:	3f 93       	push	r19
    6ee2:	4f 93       	push	r20
    6ee4:	8f 93       	push	r24
    6ee6:	9f 93       	push	r25
    6ee8:	ef 93       	push	r30
    6eea:	ff 93       	push	r31
  uint8_t d;
  uint16_t n, i;

  d = USARTC0.DATA;
    6eec:	40 91 a0 08 	lds	r20, 0x08A0
  n = rxfifo.count;
    6ef0:	20 91 88 24 	lds	r18, 0x2488
    6ef4:	30 91 89 24 	lds	r19, 0x2489
  if(n < rxfifo.size) {
    6ef8:	80 91 8a 24 	lds	r24, 0x248A
    6efc:	90 91 8b 24 	lds	r25, 0x248B
    6f00:	28 17       	cp	r18, r24
    6f02:	39 07       	cpc	r19, r25
    6f04:	08 f5       	brcc	.+66     	; 0x6f48 <__vector_25+0x80>
    rxfifo.count = ++n;
    6f06:	2f 5f       	subi	r18, 0xFF	; 255
    6f08:	3f 4f       	sbci	r19, 0xFF	; 255
    6f0a:	20 93 88 24 	sts	0x2488, r18
    6f0e:	30 93 89 24 	sts	0x2489, r19
    i = rxfifo.idx_w;
    6f12:	80 91 84 24 	lds	r24, 0x2484
    6f16:	90 91 85 24 	lds	r25, 0x2485
    *(rxfifo.PRxBuff + i++) = d;
    6f1a:	e0 91 8c 24 	lds	r30, 0x248C
    6f1e:	f0 91 8d 24 	lds	r31, 0x248D
    6f22:	e8 0f       	add	r30, r24
    6f24:	f9 1f       	adc	r31, r25
    6f26:	40 83       	st	Z, r20
    6f28:	9c 01       	movw	r18, r24
    6f2a:	2f 5f       	subi	r18, 0xFF	; 255
    6f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    if(i >= rxfifo.size)
    6f2e:	80 91 8a 24 	lds	r24, 0x248A
    6f32:	90 91 8b 24 	lds	r25, 0x248B
    6f36:	28 17       	cp	r18, r24
    6f38:	39 07       	cpc	r19, r25
    6f3a:	10 f0       	brcs	.+4      	; 0x6f40 <__vector_25+0x78>
    6f3c:	20 e0       	ldi	r18, 0x00	; 0
    6f3e:	30 e0       	ldi	r19, 0x00	; 0
      i = 0;
    rxfifo.idx_w = i;
    6f40:	20 93 84 24 	sts	0x2484, r18
    6f44:	30 93 85 24 	sts	0x2485, r19
  }
}
    6f48:	ff 91       	pop	r31
    6f4a:	ef 91       	pop	r30
    6f4c:	9f 91       	pop	r25
    6f4e:	8f 91       	pop	r24
    6f50:	4f 91       	pop	r20
    6f52:	3f 91       	pop	r19
    6f54:	2f 91       	pop	r18
    6f56:	0f 90       	pop	r0
    6f58:	0b be       	out	0x3b, r0	; 59
    6f5a:	0f 90       	pop	r0
    6f5c:	08 be       	out	0x38, r0	; 56
    6f5e:	0f 90       	pop	r0
    6f60:	0f be       	out	0x3f, r0	; 63
    6f62:	0f 90       	pop	r0
    6f64:	1f 90       	pop	r1
    6f66:	18 95       	reti

00006f68 <__vector_26>:


/* UART UDRE interrupt */

ISR(USARTC0_DRE_vect)
{
    6f68:	1f 92       	push	r1
    6f6a:	0f 92       	push	r0
    6f6c:	0f b6       	in	r0, 0x3f	; 63
    6f6e:	0f 92       	push	r0
    6f70:	08 b6       	in	r0, 0x38	; 56
    6f72:	0f 92       	push	r0
    6f74:	0b b6       	in	r0, 0x3b	; 59
    6f76:	0f 92       	push	r0
    6f78:	11 24       	eor	r1, r1
    6f7a:	18 be       	out	0x38, r1	; 56
    6f7c:	1b be       	out	0x3b, r1	; 59
    6f7e:	2f 93       	push	r18
    6f80:	8f 93       	push	r24
    6f82:	9f 93       	push	r25
    6f84:	ef 93       	push	r30
    6f86:	ff 93       	push	r31
  uint8_t n, i;

  n = txfifo.count;
    6f88:	80 91 43 24 	lds	r24, 0x2443
  if(n) {
    6f8c:	88 23       	and	r24, r24
    6f8e:	a9 f0       	breq	.+42     	; 0x6fba <__vector_26+0x52>
    txfifo.count = --n;
    6f90:	28 2f       	mov	r18, r24
    6f92:	21 50       	subi	r18, 0x01	; 1
    6f94:	20 93 43 24 	sts	0x2443, r18
    i = txfifo.idx_r;
    6f98:	80 91 42 24 	lds	r24, 0x2442
    USARTC0.DATA = txfifo.buff[i++];
    6f9c:	e8 2f       	mov	r30, r24
    6f9e:	f0 e0       	ldi	r31, 0x00	; 0
    6fa0:	ef 5b       	subi	r30, 0xBF	; 191
    6fa2:	fb 4d       	sbci	r31, 0xDB	; 219
    6fa4:	93 81       	ldd	r25, Z+3	; 0x03
    6fa6:	90 93 a0 08 	sts	0x08A0, r25
    6faa:	8f 5f       	subi	r24, 0xFF	; 255
    if(i >= sizeof(txfifo.buff))
    6fac:	80 34       	cpi	r24, 0x40	; 64
    6fae:	08 f0       	brcs	.+2      	; 0x6fb2 <__vector_26+0x4a>
    6fb0:	80 e0       	ldi	r24, 0x00	; 0
      i = 0;
    txfifo.idx_r = i;
    6fb2:	80 93 42 24 	sts	0x2442, r24
  }
  if(n == 0)
    6fb6:	22 23       	and	r18, r18
    6fb8:	21 f4       	brne	.+8      	; 0x6fc2 <__vector_26+0x5a>
    USARTC0.CTRLA = USART_RXCINTLVL0_bm;
    6fba:	80 e1       	ldi	r24, 0x10	; 16
    6fbc:	e0 ea       	ldi	r30, 0xA0	; 160
    6fbe:	f8 e0       	ldi	r31, 0x08	; 8
    6fc0:	83 83       	std	Z+3, r24	; 0x03
}
    6fc2:	ff 91       	pop	r31
    6fc4:	ef 91       	pop	r30
    6fc6:	9f 91       	pop	r25
    6fc8:	8f 91       	pop	r24
    6fca:	2f 91       	pop	r18
    6fcc:	0f 90       	pop	r0
    6fce:	0b be       	out	0x3b, r0	; 59
    6fd0:	0f 90       	pop	r0
    6fd2:	08 be       	out	0x38, r0	; 56
    6fd4:	0f 90       	pop	r0
    6fd6:	0f be       	out	0x3f, r0	; 63
    6fd8:	0f 90       	pop	r0
    6fda:	1f 90       	pop	r1
    6fdc:	18 95       	reti

00006fde <releaseRxBuff>:
}


void releaseRxBuff( ) {

free(rxfifo.PRxBuff);
    6fde:	80 91 8c 24 	lds	r24, 0x248C
    6fe2:	90 91 8d 24 	lds	r25, 0x248D
    6fe6:	0e 94 78 4e 	call	0x9cf0	; 0x9cf0 <free>

}
    6fea:	08 95       	ret

00006fec <createRxBuff>:
rxFIFO rxfifo;


void createRxBuff(uint8_t mode) {

if (mode == 0xff) {
    6fec:	8f 3f       	cpi	r24, 0xFF	; 255
    6fee:	59 f4       	brne	.+22     	; 0x7006 <createRxBuff+0x1a>
 rxfifo.PRxBuff = malloc(64);
    6ff0:	80 e4       	ldi	r24, 0x40	; 64
    6ff2:	90 e0       	ldi	r25, 0x00	; 0
    6ff4:	0e 94 cb 4d 	call	0x9b96	; 0x9b96 <malloc>
    6ff8:	80 93 8c 24 	sts	0x248C, r24
    6ffc:	90 93 8d 24 	sts	0x248D, r25
 rxfifo.size = 64;
    7000:	80 e4       	ldi	r24, 0x40	; 64
    7002:	90 e0       	ldi	r25, 0x00	; 0
    7004:	0a c0       	rjmp	.+20     	; 0x701a <createRxBuff+0x2e>
}
else {
 rxfifo.PRxBuff = malloc(1550);
    7006:	8e e0       	ldi	r24, 0x0E	; 14
    7008:	96 e0       	ldi	r25, 0x06	; 6
    700a:	0e 94 cb 4d 	call	0x9b96	; 0x9b96 <malloc>
    700e:	80 93 8c 24 	sts	0x248C, r24
    7012:	90 93 8d 24 	sts	0x248D, r25
 rxfifo.size = 1550;
    7016:	8e e0       	ldi	r24, 0x0E	; 14
    7018:	96 e0       	ldi	r25, 0x06	; 6
    701a:	80 93 8a 24 	sts	0x248A, r24
    701e:	90 93 8b 24 	sts	0x248B, r25
    7022:	08 95       	ret

00007024 <Handler_Init>:
  uint8_t lcv;

  // Initialize masks to FALSE
  for(lcv=0;lcv<HANDLER_MAX;lcv++)
  {
    mask[lcv] = FALSE;
    7024:	10 92 ce 2a 	sts	0x2ACE, r1
    7028:	10 92 cf 2a 	sts	0x2ACF, r1
    702c:	10 92 d0 2a 	sts	0x2AD0, r1
    7030:	10 92 d1 2a 	sts	0x2AD1, r1
    7034:	10 92 d2 2a 	sts	0x2AD2, r1
    7038:	10 92 d3 2a 	sts	0x2AD3, r1
  }

// Timer TCE0: set-up to match old system (32MHz/8/512 = 16MHz/8/256):
//  TCE0.CTRLA = 0x04;      // Prescaler: clk/8
//JL03092010 change the prescaler from 8 to 2 so the overflowrate inclrease 4 times
  TCE0.CTRLA = 0x02;      // Prescaler: clk/2
    703c:	e0 e0       	ldi	r30, 0x00	; 0
    703e:	fa e0       	ldi	r31, 0x0A	; 10
    7040:	82 e0       	ldi	r24, 0x02	; 2
    7042:	80 83       	st	Z, r24
  TCE0.PER   = 511;       // 256*2 - 1
    7044:	8f ef       	ldi	r24, 0xFF	; 255
    7046:	91 e0       	ldi	r25, 0x01	; 1
    7048:	86 a3       	std	Z+38, r24	; 0x26
    704a:	97 a3       	std	Z+39, r25	; 0x27
  TCE0.INTCTRLA = 0x03;   // Timer overflow is a the highest level interrupt
    704c:	83 e0       	ldi	r24, 0x03	; 3
    704e:	86 83       	std	Z+6, r24	; 0x06
}
    7050:	08 95       	ret

00007052 <__vector_47>:


// The interrupt handler function of the timer E0 interrupt.

ISR(TCE0_OVF_vect)
{
    7052:	1f 92       	push	r1
    7054:	0f 92       	push	r0
    7056:	0f b6       	in	r0, 0x3f	; 63
    7058:	0f 92       	push	r0
    705a:	08 b6       	in	r0, 0x38	; 56
    705c:	0f 92       	push	r0
    705e:	09 b6       	in	r0, 0x39	; 57
    7060:	0f 92       	push	r0
    7062:	0a b6       	in	r0, 0x3a	; 58
    7064:	0f 92       	push	r0
    7066:	0b b6       	in	r0, 0x3b	; 59
    7068:	0f 92       	push	r0
    706a:	11 24       	eor	r1, r1
    706c:	18 be       	out	0x38, r1	; 56
    706e:	19 be       	out	0x39, r1	; 57
    7070:	1a be       	out	0x3a, r1	; 58
    7072:	1b be       	out	0x3b, r1	; 59
    7074:	ef 92       	push	r14
    7076:	ff 92       	push	r15
    7078:	0f 93       	push	r16
    707a:	1f 93       	push	r17
    707c:	2f 93       	push	r18
    707e:	3f 93       	push	r19
    7080:	4f 93       	push	r20
    7082:	5f 93       	push	r21
    7084:	6f 93       	push	r22
    7086:	7f 93       	push	r23
    7088:	8f 93       	push	r24
    708a:	9f 93       	push	r25
    708c:	af 93       	push	r26
    708e:	bf 93       	push	r27
    7090:	cf 93       	push	r28
    7092:	df 93       	push	r29
    7094:	ef 93       	push	r30
    7096:	ff 93       	push	r31
    7098:	94 ed       	ldi	r25, 0xD4	; 212
    709a:	e9 2e       	mov	r14, r25
    709c:	9a e2       	ldi	r25, 0x2A	; 42
    709e:	f9 2e       	mov	r15, r25
    70a0:	02 ec       	ldi	r16, 0xC2	; 194
    70a2:	1a e2       	ldi	r17, 0x2A	; 42
    70a4:	c0 e0       	ldi	r28, 0x00	; 0
    70a6:	d0 e0       	ldi	r29, 0x00	; 0
//ledToggle(1);
//xputs(PSTR("\nISR Works\n"));

   for(lcv=0;lcv<HANDLER_MAX;lcv++)		/* check and act on all vectors */
   {
     if(mask[lcv]==TRUE)			/* if int enabled check count */
    70a8:	fe 01       	movw	r30, r28
    70aa:	e2 53       	subi	r30, 0x32	; 50
    70ac:	f5 4d       	sbci	r31, 0xD5	; 213
    70ae:	80 81       	ld	r24, Z
    70b0:	81 30       	cpi	r24, 0x01	; 1
    70b2:	39 f5       	brne	.+78     	; 0x7102 <__vector_47+0xb0>
     {
       count[lcv]--;			
    70b4:	fe 01       	movw	r30, r28
    70b6:	ee 0f       	add	r30, r30
    70b8:	ff 1f       	adc	r31, r31
    70ba:	ee 0f       	add	r30, r30
    70bc:	ff 1f       	adc	r31, r31
    70be:	e4 51       	subi	r30, 0x14	; 20
    70c0:	f5 4d       	sbci	r31, 0xD5	; 213
    70c2:	80 81       	ld	r24, Z
    70c4:	91 81       	ldd	r25, Z+1	; 0x01
    70c6:	a2 81       	ldd	r26, Z+2	; 0x02
    70c8:	b3 81       	ldd	r27, Z+3	; 0x03
    70ca:	01 97       	sbiw	r24, 0x01	; 1
    70cc:	a1 09       	sbc	r26, r1
    70ce:	b1 09       	sbc	r27, r1
    70d0:	80 83       	st	Z, r24
    70d2:	91 83       	std	Z+1, r25	; 0x01
    70d4:	a2 83       	std	Z+2, r26	; 0x02
    70d6:	b3 83       	std	Z+3, r27	; 0x03
       if(count[lcv]==0)		/* if count=0, perform function call and reset */
    70d8:	80 81       	ld	r24, Z
    70da:	91 81       	ldd	r25, Z+1	; 0x01
    70dc:	a2 81       	ldd	r26, Z+2	; 0x02
    70de:	b3 81       	ldd	r27, Z+3	; 0x03
    70e0:	00 97       	sbiw	r24, 0x00	; 0
    70e2:	a1 05       	cpc	r26, r1
    70e4:	b1 05       	cpc	r27, r1
    70e6:	69 f4       	brne	.+26     	; 0x7102 <__vector_47+0xb0>
       {
         count[lcv]=start_count[lcv];
    70e8:	d7 01       	movw	r26, r14
    70ea:	2d 91       	ld	r18, X+
    70ec:	3d 91       	ld	r19, X+
    70ee:	4d 91       	ld	r20, X+
    70f0:	5c 91       	ld	r21, X
    70f2:	20 83       	st	Z, r18
    70f4:	31 83       	std	Z+1, r19	; 0x01
    70f6:	42 83       	std	Z+2, r20	; 0x02
    70f8:	53 83       	std	Z+3, r21	; 0x03
		 //*
         (*p_handler_func[lcv]) ();
    70fa:	d8 01       	movw	r26, r16
    70fc:	ed 91       	ld	r30, X+
    70fe:	fc 91       	ld	r31, X
    7100:	19 95       	eicall
    7102:	21 96       	adiw	r28, 0x01	; 1
    7104:	84 e0       	ldi	r24, 0x04	; 4
    7106:	90 e0       	ldi	r25, 0x00	; 0
    7108:	e8 0e       	add	r14, r24
    710a:	f9 1e       	adc	r15, r25
    710c:	0e 5f       	subi	r16, 0xFE	; 254
    710e:	1f 4f       	sbci	r17, 0xFF	; 255
 uint8_t lcv;
  
//ledToggle(1);
//xputs(PSTR("\nISR Works\n"));

   for(lcv=0;lcv<HANDLER_MAX;lcv++)		/* check and act on all vectors */
    7110:	c6 30       	cpi	r28, 0x06	; 6
    7112:	d1 05       	cpc	r29, r1
    7114:	49 f6       	brne	.-110    	; 0x70a8 <__vector_47+0x56>
     }
   }



}
    7116:	ff 91       	pop	r31
    7118:	ef 91       	pop	r30
    711a:	df 91       	pop	r29
    711c:	cf 91       	pop	r28
    711e:	bf 91       	pop	r27
    7120:	af 91       	pop	r26
    7122:	9f 91       	pop	r25
    7124:	8f 91       	pop	r24
    7126:	7f 91       	pop	r23
    7128:	6f 91       	pop	r22
    712a:	5f 91       	pop	r21
    712c:	4f 91       	pop	r20
    712e:	3f 91       	pop	r19
    7130:	2f 91       	pop	r18
    7132:	1f 91       	pop	r17
    7134:	0f 91       	pop	r16
    7136:	ff 90       	pop	r15
    7138:	ef 90       	pop	r14
    713a:	0f 90       	pop	r0
    713c:	0b be       	out	0x3b, r0	; 59
    713e:	0f 90       	pop	r0
    7140:	0a be       	out	0x3a, r0	; 58
    7142:	0f 90       	pop	r0
    7144:	09 be       	out	0x39, r0	; 57
    7146:	0f 90       	pop	r0
    7148:	08 be       	out	0x38, r0	; 56
    714a:	0f 90       	pop	r0
    714c:	0f be       	out	0x3f, r0	; 63
    714e:	0f 90       	pop	r0
    7150:	1f 90       	pop	r1
    7152:	18 95       	reti

00007154 <Reg_Handler>:
//            long s_cnt = start count of the timer
//            unsigned char priority = priority of the interrupt request
//            unsigned char msk = the mask of the interrupt. TRUE/FALSE value
            
void Reg_Handler(void* fptr,uint32_t s_cnt, uint8_t priority, uint8_t msk)
{	
    7154:	0f 93       	push	r16
    7156:	cf 93       	push	r28
    7158:	df 93       	push	r29
    715a:	a2 2f       	mov	r26, r18
  mask[priority]=FALSE;             // disable while modifying vector
    715c:	b0 e0       	ldi	r27, 0x00	; 0
  p_handler_func[priority]=fptr;    // set function pointer
    715e:	fd 01       	movw	r30, r26
    7160:	ee 0f       	add	r30, r30
    7162:	ff 1f       	adc	r31, r31
    7164:	ee 53       	subi	r30, 0x3E	; 62
    7166:	f5 4d       	sbci	r31, 0xD5	; 213
    7168:	80 83       	st	Z, r24
    716a:	91 83       	std	Z+1, r25	; 0x01
  start_count[priority]=s_cnt;      // set start count
    716c:	fd 01       	movw	r30, r26
    716e:	ee 0f       	add	r30, r30
    7170:	ff 1f       	adc	r31, r31
    7172:	ee 0f       	add	r30, r30
    7174:	ff 1f       	adc	r31, r31
    7176:	cf 01       	movw	r24, r30
    7178:	8c 52       	subi	r24, 0x2C	; 44
    717a:	95 4d       	sbci	r25, 0xD5	; 213
    717c:	ec 01       	movw	r28, r24
    717e:	48 83       	st	Y, r20
    7180:	59 83       	std	Y+1, r21	; 0x01
    7182:	6a 83       	std	Y+2, r22	; 0x02
    7184:	7b 83       	std	Y+3, r23	; 0x03
  count[priority]=s_cnt;            // set count
    7186:	e4 51       	subi	r30, 0x14	; 20
    7188:	f5 4d       	sbci	r31, 0xD5	; 213
    718a:	40 83       	st	Z, r20
    718c:	51 83       	std	Z+1, r21	; 0x01
    718e:	62 83       	std	Z+2, r22	; 0x02
    7190:	73 83       	std	Z+3, r23	; 0x03
  mask[priority]=msk;				        // set interrupt mask
    7192:	a2 53       	subi	r26, 0x32	; 50
    7194:	b5 4d       	sbci	r27, 0xD5	; 213
    7196:	0c 93       	st	X, r16
}
    7198:	df 91       	pop	r29
    719a:	cf 91       	pop	r28
    719c:	0f 91       	pop	r16
    719e:	08 95       	ret

000071a0 <Update_Reg_Handler>:

void Update_Reg_Handler(void* fptr, uint32_t s_cnt, uint8_t priority, uint8_t msk)
{	
    71a0:	0f 93       	push	r16
    71a2:	cf 93       	push	r28
    71a4:	df 93       	push	r29
  mask[priority]=FALSE;             // disable while modifying vector
    71a6:	c2 2f       	mov	r28, r18
    71a8:	d0 e0       	ldi	r29, 0x00	; 0
  p_handler_func[priority]=fptr;    // set function pointer
    71aa:	fe 01       	movw	r30, r28
    71ac:	ee 0f       	add	r30, r30
    71ae:	ff 1f       	adc	r31, r31
    71b0:	ee 53       	subi	r30, 0x3E	; 62
    71b2:	f5 4d       	sbci	r31, 0xD5	; 213
    71b4:	80 83       	st	Z, r24
    71b6:	91 83       	std	Z+1, r25	; 0x01
  start_count[priority]=s_cnt;      // set start count
    71b8:	ce 01       	movw	r24, r28
    71ba:	88 0f       	add	r24, r24
    71bc:	99 1f       	adc	r25, r25
    71be:	88 0f       	add	r24, r24
    71c0:	99 1f       	adc	r25, r25
    71c2:	fc 01       	movw	r30, r24
    71c4:	ec 52       	subi	r30, 0x2C	; 44
    71c6:	f5 4d       	sbci	r31, 0xD5	; 213
    71c8:	40 83       	st	Z, r20
    71ca:	51 83       	std	Z+1, r21	; 0x01
    71cc:	62 83       	std	Z+2, r22	; 0x02
    71ce:	73 83       	std	Z+3, r23	; 0x03
	
  //if current count is greater than the desired count, then reset current count
  if (count[priority] > s_cnt){
    71d0:	fc 01       	movw	r30, r24
    71d2:	e4 51       	subi	r30, 0x14	; 20
    71d4:	f5 4d       	sbci	r31, 0xD5	; 213
    71d6:	80 81       	ld	r24, Z
    71d8:	91 81       	ldd	r25, Z+1	; 0x01
    71da:	a2 81       	ldd	r26, Z+2	; 0x02
    71dc:	b3 81       	ldd	r27, Z+3	; 0x03
    71de:	48 17       	cp	r20, r24
    71e0:	59 07       	cpc	r21, r25
    71e2:	6a 07       	cpc	r22, r26
    71e4:	7b 07       	cpc	r23, r27
    71e6:	20 f4       	brcc	.+8      	; 0x71f0 <Update_Reg_Handler+0x50>
    count[priority]=s_cnt;          // set count
    71e8:	40 83       	st	Z, r20
    71ea:	51 83       	std	Z+1, r21	; 0x01
    71ec:	62 83       	std	Z+2, r22	; 0x02
    71ee:	73 83       	std	Z+3, r23	; 0x03
  }

  mask[priority]=msk;               // set interrupt mask
    71f0:	c2 53       	subi	r28, 0x32	; 50
    71f2:	d5 4d       	sbci	r29, 0xD5	; 213
    71f4:	08 83       	st	Y, r16
}
    71f6:	df 91       	pop	r29
    71f8:	cf 91       	pop	r28
    71fa:	0f 91       	pop	r16
    71fc:	08 95       	ret

000071fe <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    71fe:	dc 01       	movw	r26, r24
    7200:	fb 01       	movw	r30, r22
	twi->interface = module;
    7202:	6d 93       	st	X+, r22
    7204:	7c 93       	st	X, r23
    7206:	11 97       	sbiw	r26, 0x01	; 1
	twi->interface->MASTER.CTRLA = intLevel |
    7208:	48 63       	ori	r20, 0x38	; 56
    720a:	41 83       	std	Z+1, r20	; 0x01
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    720c:	ed 91       	ld	r30, X+
    720e:	fc 91       	ld	r31, X
    7210:	11 97       	sbiw	r26, 0x01	; 1
    7212:	25 83       	std	Z+5, r18	; 0x05
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    7214:	ed 91       	ld	r30, X+
    7216:	fc 91       	ld	r31, X
    7218:	81 e0       	ldi	r24, 0x01	; 1
    721a:	84 83       	std	Z+4, r24	; 0x04
}
    721c:	08 95       	ret

0000721e <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_IDLE_gc    Bus state is idle.
 *  \retval TWI_MASTER_BUSSTATE_OWNER_gc   Bus state is owned by the master.
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
    721e:	fc 01       	movw	r30, r24
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm);
    7220:	01 90       	ld	r0, Z+
    7222:	f0 81       	ld	r31, Z
    7224:	e0 2d       	mov	r30, r0
    7226:	24 81       	ldd	r18, Z+4	; 0x04
    7228:	30 e0       	ldi	r19, 0x00	; 0
    722a:	23 70       	andi	r18, 0x03	; 3
    722c:	30 70       	andi	r19, 0x00	; 0
	return twi_status;
}
    722e:	c9 01       	movw	r24, r18
    7230:	08 95       	ret

00007232 <TWI_MasterReady>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
    7232:	fc 01       	movw	r30, r24
	bool twi_status = (twi->status == TWIM_STATUS_READY);
    7234:	85 85       	ldd	r24, Z+13	; 0x0d
    7236:	90 e0       	ldi	r25, 0x00	; 0
    7238:	88 23       	and	r24, r24
    723a:	09 f4       	brne	.+2      	; 0x723e <TWI_MasterReady+0xc>
    723c:	91 e0       	ldi	r25, 0x01	; 1
	return twi_status;
}
    723e:	89 2f       	mov	r24, r25
    7240:	08 95       	ret

00007242 <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
    7242:	0f 93       	push	r16
    7244:	cf 93       	push	r28
    7246:	df 93       	push	r29
    7248:	dc 01       	movw	r26, r24
    724a:	72 2f       	mov	r23, r18
  /*Parameter sanity check. */
  if (bytesToWrite > twi->writeBuffSize) {
    724c:	17 96       	adiw	r26, 0x07	; 7
    724e:	8c 91       	ld	r24, X
    7250:	17 97       	sbiw	r26, 0x07	; 7
    7252:	82 17       	cp	r24, r18
    7254:	08 f4       	brcc	.+2      	; 0x7258 <TWI_MasterWriteRead+0x16>
    7256:	48 c0       	rjmp	.+144    	; 0x72e8 <TWI_MasterWriteRead+0xa6>
    return false;
  }
  if (bytesToRead > twi->readBuffSize) {
    7258:	18 96       	adiw	r26, 0x08	; 8
    725a:	8c 91       	ld	r24, X
    725c:	18 97       	sbiw	r26, 0x08	; 8
    725e:	80 17       	cp	r24, r16
    7260:	08 f4       	brcc	.+2      	; 0x7264 <TWI_MasterWriteRead+0x22>
    7262:	42 c0       	rjmp	.+132    	; 0x72e8 <TWI_MasterWriteRead+0xa6>
    return false;
  }

  /*Initiate transaction if bus is ready. */
  if (twi->status == TWIM_STATUS_READY) {
    7264:	1d 96       	adiw	r26, 0x0d	; 13
    7266:	8c 91       	ld	r24, X
    7268:	1d 97       	sbiw	r26, 0x0d	; 13
    726a:	88 23       	and	r24, r24
    726c:	e9 f5       	brne	.+122    	; 0x72e8 <TWI_MasterWriteRead+0xa6>

    twi->status = TWIM_STATUS_BUSY;
    726e:	81 e0       	ldi	r24, 0x01	; 1
    7270:	1d 96       	adiw	r26, 0x0d	; 13
    7272:	8c 93       	st	X, r24
    7274:	1d 97       	sbiw	r26, 0x0d	; 13
    twi->result = TWIM_RESULT_UNKNOWN;
    7276:	1e 96       	adiw	r26, 0x0e	; 14
    7278:	1c 92       	st	X, r1
    727a:	1e 97       	sbiw	r26, 0x0e	; 14

    twi->address = address<<1;
    727c:	66 0f       	add	r22, r22
    727e:	12 96       	adiw	r26, 0x02	; 2
    7280:	6c 93       	st	X, r22
    7282:	12 97       	sbiw	r26, 0x02	; 2
    7284:	ea 01       	movw	r28, r20
    7286:	90 e0       	ldi	r25, 0x00	; 0
    7288:	09 c0       	rjmp	.+18     	; 0x729c <TWI_MasterWriteRead+0x5a>

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    728a:	13 96       	adiw	r26, 0x03	; 3
    728c:	ed 91       	ld	r30, X+
    728e:	fc 91       	ld	r31, X
    7290:	14 97       	sbiw	r26, 0x04	; 4
    7292:	e9 0f       	add	r30, r25
    7294:	f1 1d       	adc	r31, r1
    7296:	89 91       	ld	r24, Y+
    7298:	80 83       	st	Z, r24
    twi->result = TWIM_RESULT_UNKNOWN;

    twi->address = address<<1;

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    729a:	9f 5f       	subi	r25, 0xFF	; 255
    729c:	97 17       	cp	r25, r23
    729e:	a8 f3       	brcs	.-22     	; 0x728a <TWI_MasterWriteRead+0x48>
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    }

    twi->bytesToWrite = bytesToWrite;
    72a0:	19 96       	adiw	r26, 0x09	; 9
    72a2:	7c 93       	st	X, r23
    72a4:	19 97       	sbiw	r26, 0x09	; 9
    twi->bytesToRead = bytesToRead;
    72a6:	1a 96       	adiw	r26, 0x0a	; 10
    72a8:	0c 93       	st	X, r16
    72aa:	1a 97       	sbiw	r26, 0x0a	; 10
    twi->bytesWritten = 0;
    72ac:	1b 96       	adiw	r26, 0x0b	; 11
    72ae:	1c 92       	st	X, r1
    72b0:	1b 97       	sbiw	r26, 0x0b	; 11
    twi->bytesRead = 0;
    72b2:	1c 96       	adiw	r26, 0x0c	; 12
    72b4:	1c 92       	st	X, r1
    72b6:	1c 97       	sbiw	r26, 0x0c	; 12

    /* If write command, send the START condition + Address + 'R/_W = 0' */
    if (twi->bytesToWrite > 0) {
    72b8:	19 96       	adiw	r26, 0x09	; 9
    72ba:	8c 91       	ld	r24, X
    72bc:	19 97       	sbiw	r26, 0x09	; 9
    72be:	88 23       	and	r24, r24
    72c0:	29 f0       	breq	.+10     	; 0x72cc <TWI_MasterWriteRead+0x8a>
      uint8_t writeAddress = twi->address & ~0x01;
    72c2:	12 96       	adiw	r26, 0x02	; 2
    72c4:	8c 91       	ld	r24, X
    72c6:	12 97       	sbiw	r26, 0x02	; 2
    72c8:	8e 7f       	andi	r24, 0xFE	; 254
    72ca:	09 c0       	rjmp	.+18     	; 0x72de <TWI_MasterWriteRead+0x9c>
      twi->interface->MASTER.ADDR = writeAddress;
    }

    /* If read command, send the START condition + Address + 'R/_W = 1' */
    else if (twi->bytesToRead > 0) {
    72cc:	1a 96       	adiw	r26, 0x0a	; 10
    72ce:	8c 91       	ld	r24, X
    72d0:	1a 97       	sbiw	r26, 0x0a	; 10
    72d2:	88 23       	and	r24, r24
    72d4:	39 f0       	breq	.+14     	; 0x72e4 <TWI_MasterWriteRead+0xa2>
      uint8_t readAddress = twi->address | 0x01;
    72d6:	12 96       	adiw	r26, 0x02	; 2
    72d8:	8c 91       	ld	r24, X
    72da:	12 97       	sbiw	r26, 0x02	; 2
    72dc:	81 60       	ori	r24, 0x01	; 1
      twi->interface->MASTER.ADDR = readAddress;
    72de:	ed 91       	ld	r30, X+
    72e0:	fc 91       	ld	r31, X
    72e2:	86 83       	std	Z+6, r24	; 0x06
    72e4:	81 e0       	ldi	r24, 0x01	; 1
    72e6:	01 c0       	rjmp	.+2      	; 0x72ea <TWI_MasterWriteRead+0xa8>
    72e8:	80 e0       	ldi	r24, 0x00	; 0
    }
    return true;
  } else {
    return false;
  }
}
    72ea:	df 91       	pop	r29
    72ec:	cf 91       	pop	r28
    72ee:	0f 91       	pop	r16
    72f0:	08 95       	ret

000072f2 <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
    72f2:	0f 93       	push	r16
    72f4:	04 2f       	mov	r16, r20
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
    72f6:	40 e0       	ldi	r20, 0x00	; 0
    72f8:	50 e0       	ldi	r21, 0x00	; 0
    72fa:	20 e0       	ldi	r18, 0x00	; 0
    72fc:	0e 94 21 39 	call	0x7242	; 0x7242 <TWI_MasterWriteRead>
	return twi_status;
}
    7300:	0f 91       	pop	r16
    7302:	08 95       	ret

00007304 <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
    7304:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
    7306:	00 e0       	ldi	r16, 0x00	; 0
    7308:	0e 94 21 39 	call	0x7242	; 0x7242 <TWI_MasterWriteRead>
	return twi_status;
}
    730c:	0f 91       	pop	r16
    730e:	08 95       	ret

00007310 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
    7310:	dc 01       	movw	r26, r24
  uint8_t currentStatus = twi->interface->MASTER.STATUS;
    7312:	ed 91       	ld	r30, X+
    7314:	fc 91       	ld	r31, X
    7316:	11 97       	sbiw	r26, 0x01	; 1
    7318:	94 81       	ldd	r25, Z+4	; 0x04

  /* If bus error. */
  if (currentStatus & TWI_MASTER_BUSERR_bm) {
    731a:	92 ff       	sbrs	r25, 2
    731c:	02 c0       	rjmp	.+4      	; 0x7322 <TWI_MasterArbitrationLostBusErrorHandler+0x12>
    twi->result = TWIM_RESULT_BUS_ERROR;
    731e:	84 e0       	ldi	r24, 0x04	; 4
    7320:	01 c0       	rjmp	.+2      	; 0x7324 <TWI_MasterArbitrationLostBusErrorHandler+0x14>
  }
  /* If arbitration lost. */
  else {
    twi->result = TWIM_RESULT_ARBITRATION_LOST;
    7322:	83 e0       	ldi	r24, 0x03	; 3
    7324:	1e 96       	adiw	r26, 0x0e	; 14
    7326:	8c 93       	st	X, r24
    7328:	1e 97       	sbiw	r26, 0x0e	; 14
  }

  /* Clear interrupt flag. */
  twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    732a:	ed 91       	ld	r30, X+
    732c:	fc 91       	ld	r31, X
    732e:	11 97       	sbiw	r26, 0x01	; 1
    7330:	98 60       	ori	r25, 0x08	; 8
    7332:	94 83       	std	Z+4, r25	; 0x04
  twi->status = TWIM_STATUS_READY;
    7334:	1d 96       	adiw	r26, 0x0d	; 13
    7336:	1c 92       	st	X, r1
}
    7338:	08 95       	ret

0000733a <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    733a:	cf 93       	push	r28
    733c:	df 93       	push	r29
    733e:	dc 01       	movw	r26, r24
  /* Local variables used in if tests to avoid compiler warning. */
  uint8_t bytesToWrite  = twi->bytesToWrite;
    7340:	19 96       	adiw	r26, 0x09	; 9
    7342:	9c 91       	ld	r25, X
    7344:	19 97       	sbiw	r26, 0x09	; 9
  uint8_t bytesToRead   = twi->bytesToRead;
    7346:	1a 96       	adiw	r26, 0x0a	; 10
    7348:	2c 91       	ld	r18, X
    734a:	1a 97       	sbiw	r26, 0x0a	; 10

  /* If NOT acknowledged (NACK) by slave cancel the transaction. */
  if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    734c:	cd 91       	ld	r28, X+
    734e:	dc 91       	ld	r29, X
    7350:	11 97       	sbiw	r26, 0x01	; 1
    7352:	8c 81       	ldd	r24, Y+4	; 0x04
    7354:	84 ff       	sbrs	r24, 4
    7356:	04 c0       	rjmp	.+8      	; 0x7360 <TWI_MasterWriteHandler+0x26>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    7358:	83 e0       	ldi	r24, 0x03	; 3
    735a:	8b 83       	std	Y+3, r24	; 0x03
    twi->result = TWIM_RESULT_NACK_RECEIVED;
    735c:	85 e0       	ldi	r24, 0x05	; 5
    735e:	24 c0       	rjmp	.+72     	; 0x73a8 <TWI_MasterWriteHandler+0x6e>
    twi->status = TWIM_STATUS_READY;
  }

  /* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    7360:	1b 96       	adiw	r26, 0x0b	; 11
    7362:	8c 91       	ld	r24, X
    7364:	1b 97       	sbiw	r26, 0x0b	; 11
    7366:	89 17       	cp	r24, r25
    7368:	90 f4       	brcc	.+36     	; 0x738e <TWI_MasterWriteHandler+0x54>
    uint8_t data = *(twi->PwriteData + twi->bytesWritten);
    736a:	1b 96       	adiw	r26, 0x0b	; 11
    736c:	8c 91       	ld	r24, X
    736e:	1b 97       	sbiw	r26, 0x0b	; 11
    7370:	13 96       	adiw	r26, 0x03	; 3
    7372:	ed 91       	ld	r30, X+
    7374:	fc 91       	ld	r31, X
    7376:	14 97       	sbiw	r26, 0x04	; 4
    7378:	e8 0f       	add	r30, r24
    737a:	f1 1d       	adc	r31, r1
    737c:	80 81       	ld	r24, Z
    twi->interface->MASTER.DATA = data;
    737e:	8f 83       	std	Y+7, r24	; 0x07
    ++twi->bytesWritten;
    7380:	1b 96       	adiw	r26, 0x0b	; 11
    7382:	8c 91       	ld	r24, X
    7384:	1b 97       	sbiw	r26, 0x0b	; 11
    7386:	8f 5f       	subi	r24, 0xFF	; 255
    7388:	1b 96       	adiw	r26, 0x0b	; 11
    738a:	8c 93       	st	X, r24
    738c:	12 c0       	rjmp	.+36     	; 0x73b2 <TWI_MasterWriteHandler+0x78>
  }

  /* If bytes to read, send repeated START condition + Address + 'R/_W = 1' */
  else if (twi->bytesRead < bytesToRead) {
    738e:	1c 96       	adiw	r26, 0x0c	; 12
    7390:	8c 91       	ld	r24, X
    7392:	1c 97       	sbiw	r26, 0x0c	; 12
    7394:	82 17       	cp	r24, r18
    7396:	28 f4       	brcc	.+10     	; 0x73a2 <TWI_MasterWriteHandler+0x68>
    uint8_t readAddress = twi->address | 0x01;
    7398:	12 96       	adiw	r26, 0x02	; 2
    739a:	8c 91       	ld	r24, X
    739c:	81 60       	ori	r24, 0x01	; 1
    twi->interface->MASTER.ADDR = readAddress;
    739e:	8e 83       	std	Y+6, r24	; 0x06
    73a0:	08 c0       	rjmp	.+16     	; 0x73b2 <TWI_MasterWriteHandler+0x78>
  }

  /* If transaction finished, send STOP condition and set RESULT OK. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    73a2:	83 e0       	ldi	r24, 0x03	; 3
    73a4:	8b 83       	std	Y+3, r24	; 0x03
	  twi->result = TWIM_RESULT_OK;
    73a6:	81 e0       	ldi	r24, 0x01	; 1
    73a8:	1e 96       	adiw	r26, 0x0e	; 14
    73aa:	8c 93       	st	X, r24
    73ac:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    73ae:	1d 96       	adiw	r26, 0x0d	; 13
    73b0:	1c 92       	st	X, r1
	}
}
    73b2:	df 91       	pop	r29
    73b4:	cf 91       	pop	r28
    73b6:	08 95       	ret

000073b8 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
    73b8:	dc 01       	movw	r26, r24
  /* Fetch data if bytes to be read. */
  if (twi->bytesRead < twi->readBuffSize) {
    73ba:	1c 96       	adiw	r26, 0x0c	; 12
    73bc:	9c 91       	ld	r25, X
    73be:	1c 97       	sbiw	r26, 0x0c	; 12
    73c0:	18 96       	adiw	r26, 0x08	; 8
    73c2:	8c 91       	ld	r24, X
    73c4:	18 97       	sbiw	r26, 0x08	; 8
    73c6:	ed 91       	ld	r30, X+
    73c8:	fc 91       	ld	r31, X
    73ca:	11 97       	sbiw	r26, 0x01	; 1
    73cc:	98 17       	cp	r25, r24
    73ce:	98 f4       	brcc	.+38     	; 0x73f6 <TWI_MasterReadHandler+0x3e>
    uint8_t data = twi->interface->MASTER.DATA;
    73d0:	97 81       	ldd	r25, Z+7	; 0x07
    *(twi->PreadData + twi->bytesRead) = data;
    73d2:	1c 96       	adiw	r26, 0x0c	; 12
    73d4:	8c 91       	ld	r24, X
    73d6:	1c 97       	sbiw	r26, 0x0c	; 12
    73d8:	15 96       	adiw	r26, 0x05	; 5
    73da:	ed 91       	ld	r30, X+
    73dc:	fc 91       	ld	r31, X
    73de:	16 97       	sbiw	r26, 0x06	; 6
    73e0:	e8 0f       	add	r30, r24
    73e2:	f1 1d       	adc	r31, r1
    73e4:	90 83       	st	Z, r25
    twi->bytesRead++;
    73e6:	1c 96       	adiw	r26, 0x0c	; 12
    73e8:	8c 91       	ld	r24, X
    73ea:	1c 97       	sbiw	r26, 0x0c	; 12
    73ec:	8f 5f       	subi	r24, 0xFF	; 255
    73ee:	1c 96       	adiw	r26, 0x0c	; 12
    73f0:	8c 93       	st	X, r24
    73f2:	1c 97       	sbiw	r26, 0x0c	; 12
    73f4:	09 c0       	rjmp	.+18     	; 0x7408 <TWI_MasterReadHandler+0x50>
  }

  /* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    73f6:	83 e0       	ldi	r24, 0x03	; 3
    73f8:	83 83       	std	Z+3, r24	; 0x03
	  twi->result = TWIM_RESULT_BUFFER_OVERFLOW;
    73fa:	82 e0       	ldi	r24, 0x02	; 2
    73fc:	1e 96       	adiw	r26, 0x0e	; 14
    73fe:	8c 93       	st	X, r24
    7400:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    7402:	1d 96       	adiw	r26, 0x0d	; 13
    7404:	1c 92       	st	X, r1
    7406:	1d 97       	sbiw	r26, 0x0d	; 13
  }

  /* Local variable used in if test to avoid compiler warning. */
  uint8_t bytesToRead = twi->bytesToRead;
    7408:	1a 96       	adiw	r26, 0x0a	; 10
    740a:	9c 91       	ld	r25, X
    740c:	1a 97       	sbiw	r26, 0x0a	; 10

  /* If more bytes to read, issue ACK and start a byte read. */
  if (twi->bytesRead < bytesToRead) {
    740e:	1c 96       	adiw	r26, 0x0c	; 12
    7410:	8c 91       	ld	r24, X
    7412:	1c 97       	sbiw	r26, 0x0c	; 12
    7414:	ed 91       	ld	r30, X+
    7416:	fc 91       	ld	r31, X
    7418:	11 97       	sbiw	r26, 0x01	; 1
    741a:	89 17       	cp	r24, r25
    741c:	18 f4       	brcc	.+6      	; 0x7424 <TWI_MasterReadHandler+0x6c>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    741e:	82 e0       	ldi	r24, 0x02	; 2
    7420:	83 83       	std	Z+3, r24	; 0x03
    7422:	08 95       	ret
  }

  /* If transaction finished, issue NACK and STOP condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    7424:	87 e0       	ldi	r24, 0x07	; 7
    7426:	83 83       	std	Z+3, r24	; 0x03
	  twi->result = TWIM_RESULT_OK;
    7428:	81 e0       	ldi	r24, 0x01	; 1
    742a:	1e 96       	adiw	r26, 0x0e	; 14
    742c:	8c 93       	st	X, r24
    742e:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    7430:	1d 96       	adiw	r26, 0x0d	; 13
    7432:	1c 92       	st	X, r1
    7434:	08 95       	ret

00007436 <TWI_MasterInterruptHandler>:
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
    7436:	dc 01       	movw	r26, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    7438:	ed 91       	ld	r30, X+
    743a:	fc 91       	ld	r31, X
    743c:	11 97       	sbiw	r26, 0x01	; 1
    743e:	44 81       	ldd	r20, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    7440:	24 2f       	mov	r18, r20
    7442:	30 e0       	ldi	r19, 0x00	; 0
    7444:	c9 01       	movw	r24, r18
    7446:	8c 70       	andi	r24, 0x0C	; 12
    7448:	90 70       	andi	r25, 0x00	; 0
    744a:	89 2b       	or	r24, r25
    744c:	21 f0       	breq	.+8      	; 0x7456 <TWI_MasterInterruptHandler+0x20>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    744e:	cd 01       	movw	r24, r26
    7450:	0e 94 88 39 	call	0x7310	; 0x7310 <TWI_MasterArbitrationLostBusErrorHandler>
    7454:	08 95       	ret
  }

  /* If master write interrupt. */
  else if (currentStatus & TWI_MASTER_WIF_bm) {
    7456:	46 ff       	sbrs	r20, 6
    7458:	04 c0       	rjmp	.+8      	; 0x7462 <TWI_MasterInterruptHandler+0x2c>
    TWI_MasterWriteHandler(twi);
    745a:	cd 01       	movw	r24, r26
    745c:	0e 94 9d 39 	call	0x733a	; 0x733a <TWI_MasterWriteHandler>
    7460:	08 95       	ret
  }

	/* If master read interrupt. */
  else if (currentStatus & TWI_MASTER_RIF_bm) {
    7462:	47 ff       	sbrs	r20, 7
    7464:	04 c0       	rjmp	.+8      	; 0x746e <TWI_MasterInterruptHandler+0x38>
    TWI_MasterReadHandler(twi);
    7466:	cd 01       	movw	r24, r26
    7468:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <TWI_MasterReadHandler>
    746c:	08 95       	ret
  }

	/* If unexpected state. */
  else {
    twi->result = TWIM_RESULT_FAIL;
    746e:	86 e0       	ldi	r24, 0x06	; 6
    7470:	1e 96       	adiw	r26, 0x0e	; 14
    7472:	8c 93       	st	X, r24
    7474:	1e 97       	sbiw	r26, 0x0e	; 14
    twi->status = TWIM_STATUS_READY;
    7476:	1d 96       	adiw	r26, 0x0d	; 13
    7478:	1c 92       	st	X, r1
    747a:	08 95       	ret

0000747c <TWI_MasterReleaseBuff>:
 }
}


void TWI_MasterReleaseBuff(TWI_Master_t *twi)
{
    747c:	0f 93       	push	r16
    747e:	1f 93       	push	r17
    7480:	8c 01       	movw	r16, r24
 free(twi->PreadData);
    7482:	fc 01       	movw	r30, r24
    7484:	85 81       	ldd	r24, Z+5	; 0x05
    7486:	96 81       	ldd	r25, Z+6	; 0x06
    7488:	0e 94 78 4e 	call	0x9cf0	; 0x9cf0 <free>
 free(twi->PwriteData);
    748c:	f8 01       	movw	r30, r16
    748e:	83 81       	ldd	r24, Z+3	; 0x03
    7490:	94 81       	ldd	r25, Z+4	; 0x04
    7492:	0e 94 78 4e 	call	0x9cf0	; 0x9cf0 <free>
}
    7496:	1f 91       	pop	r17
    7498:	0f 91       	pop	r16
    749a:	08 95       	ret

0000749c <TWI_MasterCreateBuff>:
#include "twi.h"

void TWI_MasterCreateBuff(TWI_Master_t *twi, 
                          uint8_t mode)
{
    749c:	cf 93       	push	r28
    749e:	df 93       	push	r29
    74a0:	ec 01       	movw	r28, r24
if (mode == 0xff) {
    74a2:	6f 3f       	cpi	r22, 0xFF	; 255
    74a4:	79 f4       	brne	.+30     	; 0x74c4 <TWI_MasterCreateBuff+0x28>
 twi->PreadData = malloc(136);
    74a6:	88 e8       	ldi	r24, 0x88	; 136
    74a8:	90 e0       	ldi	r25, 0x00	; 0
    74aa:	0e 94 cb 4d 	call	0x9b96	; 0x9b96 <malloc>
    74ae:	8d 83       	std	Y+5, r24	; 0x05
    74b0:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(136);
    74b2:	88 e8       	ldi	r24, 0x88	; 136
    74b4:	90 e0       	ldi	r25, 0x00	; 0
    74b6:	0e 94 cb 4d 	call	0x9b96	; 0x9b96 <malloc>
    74ba:	8b 83       	std	Y+3, r24	; 0x03
    74bc:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 136;
    74be:	88 e8       	ldi	r24, 0x88	; 136
    74c0:	8f 83       	std	Y+7, r24	; 0x07
    74c2:	0f c0       	rjmp	.+30     	; 0x74e2 <TWI_MasterCreateBuff+0x46>
 twi->readBuffSize = 136;
}
else {
 twi->PreadData = malloc(30);
    74c4:	8e e1       	ldi	r24, 0x1E	; 30
    74c6:	90 e0       	ldi	r25, 0x00	; 0
    74c8:	0e 94 cb 4d 	call	0x9b96	; 0x9b96 <malloc>
    74cc:	8d 83       	std	Y+5, r24	; 0x05
    74ce:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(50);
    74d0:	82 e3       	ldi	r24, 0x32	; 50
    74d2:	90 e0       	ldi	r25, 0x00	; 0
    74d4:	0e 94 cb 4d 	call	0x9b96	; 0x9b96 <malloc>
    74d8:	8b 83       	std	Y+3, r24	; 0x03
    74da:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 100;
    74dc:	84 e6       	ldi	r24, 0x64	; 100
    74de:	8f 83       	std	Y+7, r24	; 0x07
 twi->readBuffSize = 50;
    74e0:	82 e3       	ldi	r24, 0x32	; 50
    74e2:	88 87       	std	Y+8, r24	; 0x08
 }
}
    74e4:	df 91       	pop	r29
    74e6:	cf 91       	pop	r28
    74e8:	08 95       	ret

000074ea <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    74ea:	ef 92       	push	r14
    74ec:	ff 92       	push	r15
    74ee:	0f 93       	push	r16
    74f0:	1f 93       	push	r17
    74f2:	cf 93       	push	r28
    74f4:	df 93       	push	r29
    74f6:	ec 01       	movw	r28, r24
    74f8:	7a 01       	movw	r14, r20
    74fa:	8b 01       	movw	r16, r22
	clst -= 2;
    74fc:	8e ef       	ldi	r24, 0xFE	; 254
    74fe:	9f ef       	ldi	r25, 0xFF	; 255
    7500:	af ef       	ldi	r26, 0xFF	; 255
    7502:	bf ef       	ldi	r27, 0xFF	; 255
    7504:	e8 0e       	add	r14, r24
    7506:	f9 1e       	adc	r15, r25
    7508:	0a 1f       	adc	r16, r26
    750a:	1b 1f       	adc	r17, r27
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    750c:	8a 85       	ldd	r24, Y+10	; 0x0a
    750e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7510:	ac 85       	ldd	r26, Y+12	; 0x0c
    7512:	bd 85       	ldd	r27, Y+13	; 0x0d
    7514:	02 97       	sbiw	r24, 0x02	; 2
    7516:	a1 09       	sbc	r26, r1
    7518:	b1 09       	sbc	r27, r1
    751a:	e8 16       	cp	r14, r24
    751c:	f9 06       	cpc	r15, r25
    751e:	0a 07       	cpc	r16, r26
    7520:	1b 07       	cpc	r17, r27
    7522:	28 f0       	brcs	.+10     	; 0x752e <clust2sect+0x44>
    7524:	20 e0       	ldi	r18, 0x00	; 0
    7526:	30 e0       	ldi	r19, 0x00	; 0
    7528:	40 e0       	ldi	r20, 0x00	; 0
    752a:	50 e0       	ldi	r21, 0x00	; 0
    752c:	12 c0       	rjmp	.+36     	; 0x7552 <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    752e:	2a 81       	ldd	r18, Y+2	; 0x02
    7530:	30 e0       	ldi	r19, 0x00	; 0
    7532:	40 e0       	ldi	r20, 0x00	; 0
    7534:	50 e0       	ldi	r21, 0x00	; 0
    7536:	c8 01       	movw	r24, r16
    7538:	b7 01       	movw	r22, r14
    753a:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    753e:	9b 01       	movw	r18, r22
    7540:	ac 01       	movw	r20, r24
    7542:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7544:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7546:	ac 8d       	ldd	r26, Y+28	; 0x1c
    7548:	bd 8d       	ldd	r27, Y+29	; 0x1d
    754a:	28 0f       	add	r18, r24
    754c:	39 1f       	adc	r19, r25
    754e:	4a 1f       	adc	r20, r26
    7550:	5b 1f       	adc	r21, r27
}
    7552:	b9 01       	movw	r22, r18
    7554:	ca 01       	movw	r24, r20
    7556:	cd b7       	in	r28, 0x3d	; 61
    7558:	de b7       	in	r29, 0x3e	; 62
    755a:	e6 e0       	ldi	r30, 0x06	; 6
    755c:	0c 94 b6 4d 	jmp	0x9b6c	; 0x9b6c <__epilogue_restores__+0x18>

00007560 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    7560:	db 01       	movw	r26, r22
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    7562:	88 23       	and	r24, r24
    7564:	19 f0       	breq	.+6      	; 0x756c <f_mount+0xc>
    7566:	2b e0       	ldi	r18, 0x0B	; 11
    7568:	30 e0       	ldi	r19, 0x00	; 0
    756a:	10 c0       	rjmp	.+32     	; 0x758c <f_mount+0x2c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
    756c:	e0 91 8e 24 	lds	r30, 0x248E
    7570:	f0 91 8f 24 	lds	r31, 0x248F

	if (rfs) {
    7574:	30 97       	sbiw	r30, 0x00	; 0
    7576:	09 f0       	breq	.+2      	; 0x757a <f_mount+0x1a>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    7578:	10 82       	st	Z, r1
	}

	if (fs) {
    757a:	10 97       	sbiw	r26, 0x00	; 0
    757c:	09 f0       	breq	.+2      	; 0x7580 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    757e:	1c 92       	st	X, r1
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    7580:	a0 93 8e 24 	sts	0x248E, r26
    7584:	b0 93 8f 24 	sts	0x248F, r27
    7588:	20 e0       	ldi	r18, 0x00	; 0
    758a:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
    758c:	c9 01       	movw	r24, r18
    758e:	08 95       	ret

00007590 <validate>:
)
{
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
    7590:	fc 01       	movw	r30, r24
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
    7592:	a0 81       	ld	r26, Z
    7594:	b1 81       	ldd	r27, Z+1	; 0x01
    7596:	10 97       	sbiw	r26, 0x00	; 0
    7598:	c1 f0       	breq	.+48     	; 0x75ca <validate+0x3a>
    759a:	8c 91       	ld	r24, X
    759c:	88 23       	and	r24, r24
    759e:	a9 f0       	breq	.+42     	; 0x75ca <validate+0x3a>
    75a0:	16 96       	adiw	r26, 0x06	; 6
    75a2:	2d 91       	ld	r18, X+
    75a4:	3c 91       	ld	r19, X
    75a6:	17 97       	sbiw	r26, 0x07	; 7
    75a8:	82 81       	ldd	r24, Z+2	; 0x02
    75aa:	93 81       	ldd	r25, Z+3	; 0x03
    75ac:	28 17       	cp	r18, r24
    75ae:	39 07       	cpc	r19, r25
    75b0:	61 f4       	brne	.+24     	; 0x75ca <validate+0x3a>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
    75b2:	11 96       	adiw	r26, 0x01	; 1
    75b4:	8c 91       	ld	r24, X
    75b6:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <disk_status>
    75ba:	80 fd       	sbrc	r24, 0
    75bc:	03 c0       	rjmp	.+6      	; 0x75c4 <validate+0x34>
    75be:	20 e0       	ldi	r18, 0x00	; 0
    75c0:	30 e0       	ldi	r19, 0x00	; 0
    75c2:	05 c0       	rjmp	.+10     	; 0x75ce <validate+0x3e>
    75c4:	23 e0       	ldi	r18, 0x03	; 3
    75c6:	30 e0       	ldi	r19, 0x00	; 0
    75c8:	02 c0       	rjmp	.+4      	; 0x75ce <validate+0x3e>
    75ca:	29 e0       	ldi	r18, 0x09	; 9
    75cc:	30 e0       	ldi	r19, 0x00	; 0
		return FR_NOT_READY;

	return FR_OK;
}
    75ce:	c9 01       	movw	r24, r18
    75d0:	08 95       	ret

000075d2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    75d2:	cf 93       	push	r28
    75d4:	df 93       	push	r29
    75d6:	ec 01       	movw	r28, r24
	FRESULT res;


#if _FS_READONLY
	res = validate(fp);
    75d8:	0e 94 c8 3a 	call	0x7590	; 0x7590 <validate>
    75dc:	9c 01       	movw	r18, r24
	{
#if _FS_REENTRANT
		FATFS *fs = fp->fs;
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    75de:	00 97       	sbiw	r24, 0x00	; 0
    75e0:	11 f4       	brne	.+4      	; 0x75e6 <f_close+0x14>
    75e2:	18 82       	st	Y, r1
    75e4:	19 82       	std	Y+1, r1	; 0x01
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	return res;
#endif
}
    75e6:	c9 01       	movw	r24, r18
    75e8:	df 91       	pop	r29
    75ea:	cf 91       	pop	r28
    75ec:	08 95       	ret

000075ee <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    75ee:	cf 92       	push	r12
    75f0:	df 92       	push	r13
    75f2:	ef 92       	push	r14
    75f4:	ff 92       	push	r15
    75f6:	0f 93       	push	r16
    75f8:	cf 93       	push	r28
    75fa:	df 93       	push	r29
    75fc:	ec 01       	movw	r28, r24
    75fe:	6a 01       	movw	r12, r20
    7600:	7b 01       	movw	r14, r22
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
    7602:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7604:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7606:	a8 a1       	ldd	r26, Y+32	; 0x20
    7608:	b9 a1       	ldd	r27, Y+33	; 0x21
    760a:	84 17       	cp	r24, r20
    760c:	95 07       	cpc	r25, r21
    760e:	a6 07       	cpc	r26, r22
    7610:	b7 07       	cpc	r27, r23
    7612:	b9 f0       	breq	.+46     	; 0x7642 <move_window+0x54>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    7614:	41 15       	cp	r20, r1
    7616:	51 05       	cpc	r21, r1
    7618:	61 05       	cpc	r22, r1
    761a:	71 05       	cpc	r23, r1
    761c:	91 f0       	breq	.+36     	; 0x7642 <move_window+0x54>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    761e:	be 01       	movw	r22, r28
    7620:	6e 5d       	subi	r22, 0xDE	; 222
    7622:	7f 4f       	sbci	r23, 0xFF	; 255
    7624:	89 81       	ldd	r24, Y+1	; 0x01
    7626:	a7 01       	movw	r20, r14
    7628:	96 01       	movw	r18, r12
    762a:	01 e0       	ldi	r16, 0x01	; 1
    762c:	0e 94 d6 47 	call	0x8fac	; 0x8fac <disk_read>
    7630:	89 2b       	or	r24, r25
    7632:	19 f0       	breq	.+6      	; 0x763a <move_window+0x4c>
    7634:	21 e0       	ldi	r18, 0x01	; 1
    7636:	30 e0       	ldi	r19, 0x00	; 0
    7638:	06 c0       	rjmp	.+12     	; 0x7646 <move_window+0x58>
				return FR_DISK_ERR;
			fs->winsect = sector;
    763a:	ce 8e       	std	Y+30, r12	; 0x1e
    763c:	df 8e       	std	Y+31, r13	; 0x1f
    763e:	e8 a2       	std	Y+32, r14	; 0x20
    7640:	f9 a2       	std	Y+33, r15	; 0x21
    7642:	20 e0       	ldi	r18, 0x00	; 0
    7644:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	return FR_OK;
}
    7646:	c9 01       	movw	r24, r18
    7648:	df 91       	pop	r29
    764a:	cf 91       	pop	r28
    764c:	0f 91       	pop	r16
    764e:	ff 90       	pop	r15
    7650:	ef 90       	pop	r14
    7652:	df 90       	pop	r13
    7654:	cf 90       	pop	r12
    7656:	08 95       	ret

00007658 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    7658:	a0 e0       	ldi	r26, 0x00	; 0
    765a:	b0 e0       	ldi	r27, 0x00	; 0
    765c:	e2 e3       	ldi	r30, 0x32	; 50
    765e:	fb e3       	ldi	r31, 0x3B	; 59
    7660:	0c 94 97 4d 	jmp	0x9b2e	; 0x9b2e <__prologue_saves__+0x12>
    7664:	ec 01       	movw	r28, r24
    7666:	7a 01       	movw	r14, r20
    7668:	8b 01       	movw	r16, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
    766a:	42 30       	cpi	r20, 0x02	; 2
    766c:	51 05       	cpc	r21, r1
    766e:	61 05       	cpc	r22, r1
    7670:	71 05       	cpc	r23, r1
    7672:	08 f4       	brcc	.+2      	; 0x7676 <get_fat+0x1e>
    7674:	e5 c0       	rjmp	.+458    	; 0x7840 <get_fat+0x1e8>
    7676:	8a 85       	ldd	r24, Y+10	; 0x0a
    7678:	9b 85       	ldd	r25, Y+11	; 0x0b
    767a:	ac 85       	ldd	r26, Y+12	; 0x0c
    767c:	bd 85       	ldd	r27, Y+13	; 0x0d
    767e:	48 17       	cp	r20, r24
    7680:	59 07       	cpc	r21, r25
    7682:	6a 07       	cpc	r22, r26
    7684:	7b 07       	cpc	r23, r27
    7686:	08 f0       	brcs	.+2      	; 0x768a <get_fat+0x32>
    7688:	db c0       	rjmp	.+438    	; 0x7840 <get_fat+0x1e8>
		return 1;

	switch (fs->fs_type) {
    768a:	88 81       	ld	r24, Y
    768c:	82 30       	cpi	r24, 0x02	; 2
    768e:	09 f4       	brne	.+2      	; 0x7692 <get_fat+0x3a>
    7690:	5b c0       	rjmp	.+182    	; 0x7748 <get_fat+0xf0>
    7692:	83 30       	cpi	r24, 0x03	; 3
    7694:	09 f4       	brne	.+2      	; 0x7698 <get_fat+0x40>
    7696:	7d c0       	rjmp	.+250    	; 0x7792 <get_fat+0x13a>
    7698:	81 30       	cpi	r24, 0x01	; 1
    769a:	09 f0       	breq	.+2      	; 0x769e <get_fat+0x46>
    769c:	d7 c0       	rjmp	.+430    	; 0x784c <get_fat+0x1f4>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    769e:	6a 01       	movw	r12, r20
    76a0:	d6 94       	lsr	r13
    76a2:	c7 94       	ror	r12
    76a4:	c4 0e       	add	r12, r20
    76a6:	d5 1e       	adc	r13, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    76a8:	a6 01       	movw	r20, r12
    76aa:	45 2f       	mov	r20, r21
    76ac:	55 27       	eor	r21, r21
    76ae:	46 95       	lsr	r20
    76b0:	60 e0       	ldi	r22, 0x00	; 0
    76b2:	70 e0       	ldi	r23, 0x00	; 0
    76b4:	8a 89       	ldd	r24, Y+18	; 0x12
    76b6:	9b 89       	ldd	r25, Y+19	; 0x13
    76b8:	ac 89       	ldd	r26, Y+20	; 0x14
    76ba:	bd 89       	ldd	r27, Y+21	; 0x15
    76bc:	48 0f       	add	r20, r24
    76be:	59 1f       	adc	r21, r25
    76c0:	6a 1f       	adc	r22, r26
    76c2:	7b 1f       	adc	r23, r27
    76c4:	ce 01       	movw	r24, r28
    76c6:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <move_window>
    76ca:	89 2b       	or	r24, r25
    76cc:	09 f0       	breq	.+2      	; 0x76d0 <get_fat+0x78>
    76ce:	be c0       	rjmp	.+380    	; 0x784c <get_fat+0x1f4>
		wc = fs->win[bc % SS(fs)]; bc++;
    76d0:	f6 01       	movw	r30, r12
    76d2:	f1 70       	andi	r31, 0x01	; 1
    76d4:	ec 0f       	add	r30, r28
    76d6:	fd 1f       	adc	r31, r29
    76d8:	b2 a0       	ldd	r11, Z+34	; 0x22
    76da:	08 94       	sec
    76dc:	c1 1c       	adc	r12, r1
    76de:	d1 1c       	adc	r13, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    76e0:	a6 01       	movw	r20, r12
    76e2:	45 2f       	mov	r20, r21
    76e4:	55 27       	eor	r21, r21
    76e6:	46 95       	lsr	r20
    76e8:	60 e0       	ldi	r22, 0x00	; 0
    76ea:	70 e0       	ldi	r23, 0x00	; 0
    76ec:	8a 89       	ldd	r24, Y+18	; 0x12
    76ee:	9b 89       	ldd	r25, Y+19	; 0x13
    76f0:	ac 89       	ldd	r26, Y+20	; 0x14
    76f2:	bd 89       	ldd	r27, Y+21	; 0x15
    76f4:	48 0f       	add	r20, r24
    76f6:	59 1f       	adc	r21, r25
    76f8:	6a 1f       	adc	r22, r26
    76fa:	7b 1f       	adc	r23, r27
    76fc:	ce 01       	movw	r24, r28
    76fe:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <move_window>
    7702:	89 2b       	or	r24, r25
    7704:	09 f0       	breq	.+2      	; 0x7708 <get_fat+0xb0>
    7706:	a2 c0       	rjmp	.+324    	; 0x784c <get_fat+0x1f4>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    7708:	2b 2d       	mov	r18, r11
    770a:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    770c:	af ef       	ldi	r26, 0xFF	; 255
    770e:	b1 e0       	ldi	r27, 0x01	; 1
    7710:	ca 22       	and	r12, r26
    7712:	db 22       	and	r13, r27
    7714:	cc 0e       	add	r12, r28
    7716:	dd 1e       	adc	r13, r29
    7718:	f6 01       	movw	r30, r12
    771a:	92 a1       	ldd	r25, Z+34	; 0x22
    771c:	80 e0       	ldi	r24, 0x00	; 0
    771e:	28 2b       	or	r18, r24
    7720:	39 2b       	or	r19, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    7722:	c7 01       	movw	r24, r14
    7724:	81 70       	andi	r24, 0x01	; 1
    7726:	90 70       	andi	r25, 0x00	; 0
    7728:	89 2b       	or	r24, r25
    772a:	31 f0       	breq	.+12     	; 0x7738 <get_fat+0xe0>
    772c:	b4 e0       	ldi	r27, 0x04	; 4
    772e:	36 95       	lsr	r19
    7730:	27 95       	ror	r18
    7732:	ba 95       	dec	r27
    7734:	e1 f7       	brne	.-8      	; 0x772e <get_fat+0xd6>
    7736:	29 c0       	rjmp	.+82     	; 0x778a <get_fat+0x132>
    7738:	79 01       	movw	r14, r18
    773a:	00 e0       	ldi	r16, 0x00	; 0
    773c:	10 e0       	ldi	r17, 0x00	; 0
    773e:	8f ef       	ldi	r24, 0xFF	; 255
    7740:	9f e0       	ldi	r25, 0x0F	; 15
    7742:	a0 e0       	ldi	r26, 0x00	; 0
    7744:	b0 e0       	ldi	r27, 0x00	; 0
    7746:	77 c0       	rjmp	.+238    	; 0x7836 <get_fat+0x1de>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7748:	45 2f       	mov	r20, r21
    774a:	56 2f       	mov	r21, r22
    774c:	67 2f       	mov	r22, r23
    774e:	77 27       	eor	r23, r23
    7750:	8a 89       	ldd	r24, Y+18	; 0x12
    7752:	9b 89       	ldd	r25, Y+19	; 0x13
    7754:	ac 89       	ldd	r26, Y+20	; 0x14
    7756:	bd 89       	ldd	r27, Y+21	; 0x15
    7758:	48 0f       	add	r20, r24
    775a:	59 1f       	adc	r21, r25
    775c:	6a 1f       	adc	r22, r26
    775e:	7b 1f       	adc	r23, r27
    7760:	ce 01       	movw	r24, r28
    7762:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <move_window>
    7766:	89 2b       	or	r24, r25
    7768:	09 f0       	breq	.+2      	; 0x776c <get_fat+0x114>
    776a:	70 c0       	rjmp	.+224    	; 0x784c <get_fat+0x1f4>
		p = &fs->win[clst * 2 % SS(fs)];
    776c:	ee 0c       	add	r14, r14
    776e:	ff 1c       	adc	r15, r15
    7770:	00 1f       	adc	r16, r16
    7772:	11 1f       	adc	r17, r17
    7774:	d7 01       	movw	r26, r14
    7776:	b1 70       	andi	r27, 0x01	; 1
		return LD_WORD(p);
    7778:	fe 01       	movw	r30, r28
    777a:	ea 0f       	add	r30, r26
    777c:	fb 1f       	adc	r31, r27
    777e:	22 a1       	ldd	r18, Z+34	; 0x22
    7780:	30 e0       	ldi	r19, 0x00	; 0
    7782:	93 a1       	ldd	r25, Z+35	; 0x23
    7784:	80 e0       	ldi	r24, 0x00	; 0
    7786:	28 2b       	or	r18, r24
    7788:	39 2b       	or	r19, r25
    778a:	79 01       	movw	r14, r18
    778c:	00 e0       	ldi	r16, 0x00	; 0
    778e:	10 e0       	ldi	r17, 0x00	; 0
    7790:	61 c0       	rjmp	.+194    	; 0x7854 <get_fat+0x1fc>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    7792:	e7 e0       	ldi	r30, 0x07	; 7
    7794:	76 95       	lsr	r23
    7796:	67 95       	ror	r22
    7798:	57 95       	ror	r21
    779a:	47 95       	ror	r20
    779c:	ea 95       	dec	r30
    779e:	d1 f7       	brne	.-12     	; 0x7794 <get_fat+0x13c>
    77a0:	8a 89       	ldd	r24, Y+18	; 0x12
    77a2:	9b 89       	ldd	r25, Y+19	; 0x13
    77a4:	ac 89       	ldd	r26, Y+20	; 0x14
    77a6:	bd 89       	ldd	r27, Y+21	; 0x15
    77a8:	48 0f       	add	r20, r24
    77aa:	59 1f       	adc	r21, r25
    77ac:	6a 1f       	adc	r22, r26
    77ae:	7b 1f       	adc	r23, r27
    77b0:	ce 01       	movw	r24, r28
    77b2:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <move_window>
    77b6:	89 2b       	or	r24, r25
    77b8:	09 f0       	breq	.+2      	; 0x77bc <get_fat+0x164>
    77ba:	48 c0       	rjmp	.+144    	; 0x784c <get_fat+0x1f4>
		p = &fs->win[clst * 4 % SS(fs)];
    77bc:	62 e0       	ldi	r22, 0x02	; 2
    77be:	ee 0c       	add	r14, r14
    77c0:	ff 1c       	adc	r15, r15
    77c2:	00 1f       	adc	r16, r16
    77c4:	11 1f       	adc	r17, r17
    77c6:	6a 95       	dec	r22
    77c8:	d1 f7       	brne	.-12     	; 0x77be <get_fat+0x166>
    77ca:	f7 01       	movw	r30, r14
    77cc:	f1 70       	andi	r31, 0x01	; 1
    77ce:	b2 96       	adiw	r30, 0x22	; 34
    77d0:	9e 01       	movw	r18, r28
    77d2:	2e 0f       	add	r18, r30
    77d4:	3f 1f       	adc	r19, r31
    77d6:	b2 97       	sbiw	r30, 0x22	; 34
		return LD_DWORD(p) & 0x0FFFFFFF;
    77d8:	d9 01       	movw	r26, r18
    77da:	12 96       	adiw	r26, 0x02	; 2
    77dc:	8c 91       	ld	r24, X
    77de:	90 e0       	ldi	r25, 0x00	; 0
    77e0:	a0 e0       	ldi	r26, 0x00	; 0
    77e2:	b0 e0       	ldi	r27, 0x00	; 0
    77e4:	8c 01       	movw	r16, r24
    77e6:	ff 24       	eor	r15, r15
    77e8:	ee 24       	eor	r14, r14
    77ea:	d9 01       	movw	r26, r18
    77ec:	13 96       	adiw	r26, 0x03	; 3
    77ee:	8c 91       	ld	r24, X
    77f0:	90 e0       	ldi	r25, 0x00	; 0
    77f2:	a0 e0       	ldi	r26, 0x00	; 0
    77f4:	b0 e0       	ldi	r27, 0x00	; 0
    77f6:	b8 2f       	mov	r27, r24
    77f8:	aa 27       	eor	r26, r26
    77fa:	99 27       	eor	r25, r25
    77fc:	88 27       	eor	r24, r24
    77fe:	e8 2a       	or	r14, r24
    7800:	f9 2a       	or	r15, r25
    7802:	0a 2b       	or	r16, r26
    7804:	1b 2b       	or	r17, r27
    7806:	d9 01       	movw	r26, r18
    7808:	11 96       	adiw	r26, 0x01	; 1
    780a:	9c 91       	ld	r25, X
    780c:	80 e0       	ldi	r24, 0x00	; 0
    780e:	a0 e0       	ldi	r26, 0x00	; 0
    7810:	b0 e0       	ldi	r27, 0x00	; 0
    7812:	e8 2a       	or	r14, r24
    7814:	f9 2a       	or	r15, r25
    7816:	0a 2b       	or	r16, r26
    7818:	1b 2b       	or	r17, r27
    781a:	ec 0f       	add	r30, r28
    781c:	fd 1f       	adc	r31, r29
    781e:	82 a1       	ldd	r24, Z+34	; 0x22
    7820:	90 e0       	ldi	r25, 0x00	; 0
    7822:	a0 e0       	ldi	r26, 0x00	; 0
    7824:	b0 e0       	ldi	r27, 0x00	; 0
    7826:	e8 2a       	or	r14, r24
    7828:	f9 2a       	or	r15, r25
    782a:	0a 2b       	or	r16, r26
    782c:	1b 2b       	or	r17, r27
    782e:	8f ef       	ldi	r24, 0xFF	; 255
    7830:	9f ef       	ldi	r25, 0xFF	; 255
    7832:	af ef       	ldi	r26, 0xFF	; 255
    7834:	bf e0       	ldi	r27, 0x0F	; 15
    7836:	e8 22       	and	r14, r24
    7838:	f9 22       	and	r15, r25
    783a:	0a 23       	and	r16, r26
    783c:	1b 23       	and	r17, r27
    783e:	0a c0       	rjmp	.+20     	; 0x7854 <get_fat+0x1fc>
    7840:	81 e0       	ldi	r24, 0x01	; 1
    7842:	e8 2e       	mov	r14, r24
    7844:	f1 2c       	mov	r15, r1
    7846:	01 2d       	mov	r16, r1
    7848:	11 2d       	mov	r17, r1
    784a:	04 c0       	rjmp	.+8      	; 0x7854 <get_fat+0x1fc>
    784c:	ee 24       	eor	r14, r14
    784e:	ea 94       	dec	r14
    7850:	fe 2c       	mov	r15, r14
    7852:	87 01       	movw	r16, r14
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
}
    7854:	b7 01       	movw	r22, r14
    7856:	c8 01       	movw	r24, r16
    7858:	cd b7       	in	r28, 0x3d	; 61
    785a:	de b7       	in	r29, 0x3e	; 62
    785c:	e9 e0       	ldi	r30, 0x09	; 9
    785e:	0c 94 b3 4d 	jmp	0x9b66	; 0x9b66 <__epilogue_restores__+0x12>

00007862 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    7862:	a4 e0       	ldi	r26, 0x04	; 4
    7864:	b0 e0       	ldi	r27, 0x00	; 0
    7866:	e7 e3       	ldi	r30, 0x37	; 55
    7868:	fc e3       	ldi	r31, 0x3C	; 60
    786a:	0c 94 8e 4d 	jmp	0x9b1c	; 0x9b1c <__prologue_saves__>
    786e:	8b 83       	std	Y+3, r24	; 0x03
    7870:	9c 83       	std	Y+4, r25	; 0x04
    7872:	d4 2e       	mov	r13, r20
    7874:	c5 2e       	mov	r12, r21
    7876:	b6 2e       	mov	r11, r22
    7878:	a7 2e       	mov	r10, r23
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
    787a:	0e 94 c8 3a 	call	0x7590	; 0x7590 <validate>
    787e:	89 83       	std	Y+1, r24	; 0x01
    7880:	9a 83       	std	Y+2, r25	; 0x02
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    7882:	89 2b       	or	r24, r25
    7884:	09 f0       	breq	.+2      	; 0x7888 <f_lseek+0x26>
    7886:	63 c1       	rjmp	.+710    	; 0x7b4e <f_lseek+0x2ec>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    7888:	ab 81       	ldd	r26, Y+3	; 0x03
    788a:	bc 81       	ldd	r27, Y+4	; 0x04
    788c:	14 96       	adiw	r26, 0x04	; 4
    788e:	8c 91       	ld	r24, X
    7890:	87 fd       	sbrc	r24, 7
    7892:	2d c1       	rjmp	.+602    	; 0x7aee <f_lseek+0x28c>
    7894:	ab 81       	ldd	r26, Y+3	; 0x03
    7896:	bc 81       	ldd	r27, Y+4	; 0x04
    7898:	1a 96       	adiw	r26, 0x0a	; 10
    789a:	ed 90       	ld	r14, X+
    789c:	fd 90       	ld	r15, X+
    789e:	0d 91       	ld	r16, X+
    78a0:	1c 91       	ld	r17, X
    78a2:	1d 97       	sbiw	r26, 0x0d	; 13
    78a4:	2d 2d       	mov	r18, r13
    78a6:	3c 2d       	mov	r19, r12
    78a8:	4b 2d       	mov	r20, r11
    78aa:	5a 2d       	mov	r21, r10
    78ac:	c9 01       	movw	r24, r18
    78ae:	da 01       	movw	r26, r20
    78b0:	3c 01       	movw	r6, r24
    78b2:	4d 01       	movw	r8, r26
    78b4:	e6 14       	cp	r14, r6
    78b6:	f7 04       	cpc	r15, r7
    78b8:	08 05       	cpc	r16, r8
    78ba:	19 05       	cpc	r17, r9
    78bc:	10 f4       	brcc	.+4      	; 0x78c2 <f_lseek+0x60>
    78be:	37 01       	movw	r6, r14
    78c0:	48 01       	movw	r8, r16
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    78c2:	eb 81       	ldd	r30, Y+3	; 0x03
    78c4:	fc 81       	ldd	r31, Y+4	; 0x04
    78c6:	e6 80       	ldd	r14, Z+6	; 0x06
    78c8:	f7 80       	ldd	r15, Z+7	; 0x07
    78ca:	00 85       	ldd	r16, Z+8	; 0x08
    78cc:	11 85       	ldd	r17, Z+9	; 0x09
		fp->fptr = nsect = 0;
    78ce:	16 82       	std	Z+6, r1	; 0x06
    78d0:	17 82       	std	Z+7, r1	; 0x07
    78d2:	10 86       	std	Z+8, r1	; 0x08
    78d4:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    78d6:	61 14       	cp	r6, r1
    78d8:	71 04       	cpc	r7, r1
    78da:	81 04       	cpc	r8, r1
    78dc:	91 04       	cpc	r9, r1
    78de:	09 f4       	brne	.+2      	; 0x78e2 <f_lseek+0x80>
    78e0:	19 c1       	rjmp	.+562    	; 0x7b14 <f_lseek+0x2b2>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    78e2:	01 90       	ld	r0, Z+
    78e4:	f0 81       	ld	r31, Z
    78e6:	e0 2d       	mov	r30, r0
    78e8:	82 81       	ldd	r24, Z+2	; 0x02
    78ea:	a8 2e       	mov	r10, r24
    78ec:	bb 24       	eor	r11, r11
    78ee:	cc 24       	eor	r12, r12
    78f0:	dd 24       	eor	r13, r13
    78f2:	f9 e0       	ldi	r31, 0x09	; 9
    78f4:	aa 0c       	add	r10, r10
    78f6:	bb 1c       	adc	r11, r11
    78f8:	cc 1c       	adc	r12, r12
    78fa:	dd 1c       	adc	r13, r13
    78fc:	fa 95       	dec	r31
    78fe:	d1 f7       	brne	.-12     	; 0x78f4 <f_lseek+0x92>
			if (ifptr > 0 &&
    7900:	e1 14       	cp	r14, r1
    7902:	f1 04       	cpc	r15, r1
    7904:	01 05       	cpc	r16, r1
    7906:	11 05       	cpc	r17, r1
    7908:	c1 f1       	breq	.+112    	; 0x797a <f_lseek+0x118>
    790a:	17 01       	movw	r2, r14
    790c:	28 01       	movw	r4, r16
    790e:	08 94       	sec
    7910:	21 08       	sbc	r2, r1
    7912:	31 08       	sbc	r3, r1
    7914:	41 08       	sbc	r4, r1
    7916:	51 08       	sbc	r5, r1
    7918:	c4 01       	movw	r24, r8
    791a:	b3 01       	movw	r22, r6
    791c:	61 50       	subi	r22, 0x01	; 1
    791e:	70 40       	sbci	r23, 0x00	; 0
    7920:	80 40       	sbci	r24, 0x00	; 0
    7922:	90 40       	sbci	r25, 0x00	; 0
    7924:	a6 01       	movw	r20, r12
    7926:	95 01       	movw	r18, r10
    7928:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    792c:	79 01       	movw	r14, r18
    792e:	8a 01       	movw	r16, r20
    7930:	c2 01       	movw	r24, r4
    7932:	b1 01       	movw	r22, r2
    7934:	a6 01       	movw	r20, r12
    7936:	95 01       	movw	r18, r10
    7938:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    793c:	e2 16       	cp	r14, r18
    793e:	f3 06       	cpc	r15, r19
    7940:	04 07       	cpc	r16, r20
    7942:	15 07       	cpc	r17, r21
    7944:	d0 f0       	brcs	.+52     	; 0x797a <f_lseek+0x118>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    7946:	88 27       	eor	r24, r24
    7948:	99 27       	eor	r25, r25
    794a:	dc 01       	movw	r26, r24
    794c:	8a 19       	sub	r24, r10
    794e:	9b 09       	sbc	r25, r11
    7950:	ac 09       	sbc	r26, r12
    7952:	bd 09       	sbc	r27, r13
    7954:	82 21       	and	r24, r2
    7956:	93 21       	and	r25, r3
    7958:	a4 21       	and	r26, r4
    795a:	b5 21       	and	r27, r5
    795c:	eb 81       	ldd	r30, Y+3	; 0x03
    795e:	fc 81       	ldd	r31, Y+4	; 0x04
    7960:	86 83       	std	Z+6, r24	; 0x06
    7962:	97 83       	std	Z+7, r25	; 0x07
    7964:	a0 87       	std	Z+8, r26	; 0x08
    7966:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    7968:	68 1a       	sub	r6, r24
    796a:	79 0a       	sbc	r7, r25
    796c:	8a 0a       	sbc	r8, r26
    796e:	9b 0a       	sbc	r9, r27
				clst = fp->clust;
    7970:	42 89       	ldd	r20, Z+18	; 0x12
    7972:	53 89       	ldd	r21, Z+19	; 0x13
    7974:	64 89       	ldd	r22, Z+20	; 0x14
    7976:	75 89       	ldd	r23, Z+21	; 0x15
    7978:	0d c0       	rjmp	.+26     	; 0x7994 <f_lseek+0x132>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    797a:	ab 81       	ldd	r26, Y+3	; 0x03
    797c:	bc 81       	ldd	r27, Y+4	; 0x04
    797e:	1e 96       	adiw	r26, 0x0e	; 14
    7980:	4d 91       	ld	r20, X+
    7982:	5d 91       	ld	r21, X+
    7984:	6d 91       	ld	r22, X+
    7986:	7c 91       	ld	r23, X
    7988:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
    798a:	fd 01       	movw	r30, r26
    798c:	42 8b       	std	Z+18, r20	; 0x12
    798e:	53 8b       	std	Z+19, r21	; 0x13
    7990:	64 8b       	std	Z+20, r22	; 0x14
    7992:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    7994:	41 15       	cp	r20, r1
    7996:	51 05       	cpc	r21, r1
    7998:	61 05       	cpc	r22, r1
    799a:	71 05       	cpc	r23, r1
    799c:	09 f0       	breq	.+2      	; 0x79a0 <f_lseek+0x13e>
    799e:	4e c0       	rjmp	.+156    	; 0x7a3c <f_lseek+0x1da>
    79a0:	b9 c0       	rjmp	.+370    	; 0x7b14 <f_lseek+0x2b2>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    79a2:	ab 81       	ldd	r26, Y+3	; 0x03
    79a4:	bc 81       	ldd	r27, Y+4	; 0x04
    79a6:	8d 91       	ld	r24, X+
    79a8:	9c 91       	ld	r25, X
    79aa:	0e 94 2c 3b 	call	0x7658	; 0x7658 <get_fat>
    79ae:	ab 01       	movw	r20, r22
    79b0:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    79b2:	4f 3f       	cpi	r20, 0xFF	; 255
    79b4:	bf ef       	ldi	r27, 0xFF	; 255
    79b6:	5b 07       	cpc	r21, r27
    79b8:	bf ef       	ldi	r27, 0xFF	; 255
    79ba:	6b 07       	cpc	r22, r27
    79bc:	bf ef       	ldi	r27, 0xFF	; 255
    79be:	7b 07       	cpc	r23, r27
    79c0:	41 f4       	brne	.+16     	; 0x79d2 <f_lseek+0x170>
    79c2:	eb 81       	ldd	r30, Y+3	; 0x03
    79c4:	fc 81       	ldd	r31, Y+4	; 0x04
    79c6:	84 81       	ldd	r24, Z+4	; 0x04
    79c8:	80 68       	ori	r24, 0x80	; 128
    79ca:	84 83       	std	Z+4, r24	; 0x04
    79cc:	81 e0       	ldi	r24, 0x01	; 1
    79ce:	90 e0       	ldi	r25, 0x00	; 0
    79d0:	19 c0       	rjmp	.+50     	; 0x7a04 <f_lseek+0x1a2>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    79d2:	42 30       	cpi	r20, 0x02	; 2
    79d4:	51 05       	cpc	r21, r1
    79d6:	61 05       	cpc	r22, r1
    79d8:	71 05       	cpc	r23, r1
    79da:	68 f0       	brcs	.+26     	; 0x79f6 <f_lseek+0x194>
    79dc:	ab 81       	ldd	r26, Y+3	; 0x03
    79de:	bc 81       	ldd	r27, Y+4	; 0x04
    79e0:	ed 91       	ld	r30, X+
    79e2:	fc 91       	ld	r31, X
    79e4:	82 85       	ldd	r24, Z+10	; 0x0a
    79e6:	93 85       	ldd	r25, Z+11	; 0x0b
    79e8:	a4 85       	ldd	r26, Z+12	; 0x0c
    79ea:	b5 85       	ldd	r27, Z+13	; 0x0d
    79ec:	48 17       	cp	r20, r24
    79ee:	59 07       	cpc	r21, r25
    79f0:	6a 07       	cpc	r22, r26
    79f2:	7b 07       	cpc	r23, r27
    79f4:	50 f0       	brcs	.+20     	; 0x7a0a <f_lseek+0x1a8>
    79f6:	eb 81       	ldd	r30, Y+3	; 0x03
    79f8:	fc 81       	ldd	r31, Y+4	; 0x04
    79fa:	84 81       	ldd	r24, Z+4	; 0x04
    79fc:	80 68       	ori	r24, 0x80	; 128
    79fe:	84 83       	std	Z+4, r24	; 0x04
    7a00:	82 e0       	ldi	r24, 0x02	; 2
    7a02:	90 e0       	ldi	r25, 0x00	; 0
    7a04:	89 83       	std	Y+1, r24	; 0x01
    7a06:	9a 83       	std	Y+2, r25	; 0x02
    7a08:	a2 c0       	rjmp	.+324    	; 0x7b4e <f_lseek+0x2ec>
					fp->clust = clst;
    7a0a:	ab 81       	ldd	r26, Y+3	; 0x03
    7a0c:	bc 81       	ldd	r27, Y+4	; 0x04
    7a0e:	52 96       	adiw	r26, 0x12	; 18
    7a10:	4d 93       	st	X+, r20
    7a12:	5d 93       	st	X+, r21
    7a14:	6d 93       	st	X+, r22
    7a16:	7c 93       	st	X, r23
    7a18:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    7a1a:	fd 01       	movw	r30, r26
    7a1c:	86 81       	ldd	r24, Z+6	; 0x06
    7a1e:	97 81       	ldd	r25, Z+7	; 0x07
    7a20:	a0 85       	ldd	r26, Z+8	; 0x08
    7a22:	b1 85       	ldd	r27, Z+9	; 0x09
    7a24:	8a 0d       	add	r24, r10
    7a26:	9b 1d       	adc	r25, r11
    7a28:	ac 1d       	adc	r26, r12
    7a2a:	bd 1d       	adc	r27, r13
    7a2c:	86 83       	std	Z+6, r24	; 0x06
    7a2e:	97 83       	std	Z+7, r25	; 0x07
    7a30:	a0 87       	std	Z+8, r26	; 0x08
    7a32:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    7a34:	6a 18       	sub	r6, r10
    7a36:	7b 08       	sbc	r7, r11
    7a38:	8c 08       	sbc	r8, r12
    7a3a:	9d 08       	sbc	r9, r13
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    7a3c:	a6 14       	cp	r10, r6
    7a3e:	b7 04       	cpc	r11, r7
    7a40:	c8 04       	cpc	r12, r8
    7a42:	d9 04       	cpc	r13, r9
    7a44:	08 f4       	brcc	.+2      	; 0x7a48 <f_lseek+0x1e6>
    7a46:	ad cf       	rjmp	.-166    	; 0x79a2 <f_lseek+0x140>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    7a48:	eb 81       	ldd	r30, Y+3	; 0x03
    7a4a:	fc 81       	ldd	r31, Y+4	; 0x04
    7a4c:	86 81       	ldd	r24, Z+6	; 0x06
    7a4e:	97 81       	ldd	r25, Z+7	; 0x07
    7a50:	a0 85       	ldd	r26, Z+8	; 0x08
    7a52:	b1 85       	ldd	r27, Z+9	; 0x09
    7a54:	86 0d       	add	r24, r6
    7a56:	97 1d       	adc	r25, r7
    7a58:	a8 1d       	adc	r26, r8
    7a5a:	b9 1d       	adc	r27, r9
    7a5c:	86 83       	std	Z+6, r24	; 0x06
    7a5e:	97 83       	std	Z+7, r25	; 0x07
    7a60:	a0 87       	std	Z+8, r26	; 0x08
    7a62:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    7a64:	d4 01       	movw	r26, r8
    7a66:	c3 01       	movw	r24, r6
    7a68:	91 70       	andi	r25, 0x01	; 1
    7a6a:	a0 70       	andi	r26, 0x00	; 0
    7a6c:	b0 70       	andi	r27, 0x00	; 0
    7a6e:	00 97       	sbiw	r24, 0x00	; 0
    7a70:	a1 05       	cpc	r26, r1
    7a72:	b1 05       	cpc	r27, r1
    7a74:	09 f4       	brne	.+2      	; 0x7a78 <f_lseek+0x216>
    7a76:	4e c0       	rjmp	.+156    	; 0x7b14 <f_lseek+0x2b2>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    7a78:	c0 80       	ld	r12, Z
    7a7a:	d1 80       	ldd	r13, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    7a7c:	ee ef       	ldi	r30, 0xFE	; 254
    7a7e:	ee 2e       	mov	r14, r30
    7a80:	ef ef       	ldi	r30, 0xFF	; 255
    7a82:	fe 2e       	mov	r15, r30
    7a84:	ef ef       	ldi	r30, 0xFF	; 255
    7a86:	0e 2f       	mov	r16, r30
    7a88:	ef ef       	ldi	r30, 0xFF	; 255
    7a8a:	1e 2f       	mov	r17, r30
    7a8c:	e4 0e       	add	r14, r20
    7a8e:	f5 1e       	adc	r15, r21
    7a90:	06 1f       	adc	r16, r22
    7a92:	17 1f       	adc	r17, r23
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    7a94:	f6 01       	movw	r30, r12
    7a96:	82 85       	ldd	r24, Z+10	; 0x0a
    7a98:	93 85       	ldd	r25, Z+11	; 0x0b
    7a9a:	a4 85       	ldd	r26, Z+12	; 0x0c
    7a9c:	b5 85       	ldd	r27, Z+13	; 0x0d
    7a9e:	02 97       	sbiw	r24, 0x02	; 2
    7aa0:	a1 09       	sbc	r26, r1
    7aa2:	b1 09       	sbc	r27, r1
    7aa4:	e8 16       	cp	r14, r24
    7aa6:	f9 06       	cpc	r15, r25
    7aa8:	0a 07       	cpc	r16, r26
    7aaa:	1b 07       	cpc	r17, r27
    7aac:	c0 f4       	brcc	.+48     	; 0x7ade <f_lseek+0x27c>
	return clst * fs->csize + fs->database;
    7aae:	22 81       	ldd	r18, Z+2	; 0x02
    7ab0:	30 e0       	ldi	r19, 0x00	; 0
    7ab2:	40 e0       	ldi	r20, 0x00	; 0
    7ab4:	50 e0       	ldi	r21, 0x00	; 0
    7ab6:	c8 01       	movw	r24, r16
    7ab8:	b7 01       	movw	r22, r14
    7aba:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    7abe:	9b 01       	movw	r18, r22
    7ac0:	ac 01       	movw	r20, r24
    7ac2:	f6 01       	movw	r30, r12
    7ac4:	82 8d       	ldd	r24, Z+26	; 0x1a
    7ac6:	93 8d       	ldd	r25, Z+27	; 0x1b
    7ac8:	a4 8d       	ldd	r26, Z+28	; 0x1c
    7aca:	b5 8d       	ldd	r27, Z+29	; 0x1d
    7acc:	28 0f       	add	r18, r24
    7ace:	39 1f       	adc	r19, r25
    7ad0:	4a 1f       	adc	r20, r26
    7ad2:	5b 1f       	adc	r21, r27
					ofs -= bcs;
				}
				fp->fptr += ofs;
				if (ofs % SS(fp->fs)) {
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    7ad4:	21 15       	cp	r18, r1
    7ad6:	31 05       	cpc	r19, r1
    7ad8:	41 05       	cpc	r20, r1
    7ada:	51 05       	cpc	r21, r1
    7adc:	69 f4       	brne	.+26     	; 0x7af8 <f_lseek+0x296>
    7ade:	ab 81       	ldd	r26, Y+3	; 0x03
    7ae0:	bc 81       	ldd	r27, Y+4	; 0x04
    7ae2:	14 96       	adiw	r26, 0x04	; 4
    7ae4:	8c 91       	ld	r24, X
    7ae6:	14 97       	sbiw	r26, 0x04	; 4
    7ae8:	80 68       	ori	r24, 0x80	; 128
    7aea:	14 96       	adiw	r26, 0x04	; 4
    7aec:	8c 93       	st	X, r24
    7aee:	e2 e0       	ldi	r30, 0x02	; 2
    7af0:	f0 e0       	ldi	r31, 0x00	; 0
    7af2:	e9 83       	std	Y+1, r30	; 0x01
    7af4:	fa 83       	std	Y+2, r31	; 0x02
    7af6:	2b c0       	rjmp	.+86     	; 0x7b4e <f_lseek+0x2ec>
					nsect += ofs / SS(fp->fs);
    7af8:	84 01       	movw	r16, r8
    7afa:	73 01       	movw	r14, r6
    7afc:	69 e0       	ldi	r22, 0x09	; 9
    7afe:	16 95       	lsr	r17
    7b00:	07 95       	ror	r16
    7b02:	f7 94       	ror	r15
    7b04:	e7 94       	ror	r14
    7b06:	6a 95       	dec	r22
    7b08:	d1 f7       	brne	.-12     	; 0x7afe <f_lseek+0x29c>
    7b0a:	e2 0e       	add	r14, r18
    7b0c:	f3 1e       	adc	r15, r19
    7b0e:	04 1f       	adc	r16, r20
    7b10:	15 1f       	adc	r17, r21
    7b12:	03 c0       	rjmp	.+6      	; 0x7b1a <f_lseek+0x2b8>
    7b14:	ee 24       	eor	r14, r14
    7b16:	ff 24       	eor	r15, r15
    7b18:	87 01       	movw	r16, r14
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    7b1a:	eb 81       	ldd	r30, Y+3	; 0x03
    7b1c:	fc 81       	ldd	r31, Y+4	; 0x04
    7b1e:	86 81       	ldd	r24, Z+6	; 0x06
    7b20:	97 81       	ldd	r25, Z+7	; 0x07
    7b22:	a0 85       	ldd	r26, Z+8	; 0x08
    7b24:	b1 85       	ldd	r27, Z+9	; 0x09
    7b26:	91 70       	andi	r25, 0x01	; 1
    7b28:	a0 70       	andi	r26, 0x00	; 0
    7b2a:	b0 70       	andi	r27, 0x00	; 0
    7b2c:	00 97       	sbiw	r24, 0x00	; 0
    7b2e:	a1 05       	cpc	r26, r1
    7b30:	b1 05       	cpc	r27, r1
    7b32:	69 f0       	breq	.+26     	; 0x7b4e <f_lseek+0x2ec>
    7b34:	86 89       	ldd	r24, Z+22	; 0x16
    7b36:	97 89       	ldd	r25, Z+23	; 0x17
    7b38:	a0 8d       	ldd	r26, Z+24	; 0x18
    7b3a:	b1 8d       	ldd	r27, Z+25	; 0x19
    7b3c:	e8 16       	cp	r14, r24
    7b3e:	f9 06       	cpc	r15, r25
    7b40:	0a 07       	cpc	r16, r26
    7b42:	1b 07       	cpc	r17, r27
    7b44:	21 f0       	breq	.+8      	; 0x7b4e <f_lseek+0x2ec>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    7b46:	e6 8a       	std	Z+22, r14	; 0x16
    7b48:	f7 8a       	std	Z+23, r15	; 0x17
    7b4a:	00 8f       	std	Z+24, r16	; 0x18
    7b4c:	11 8f       	std	Z+25, r17	; 0x19
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    7b4e:	89 81       	ldd	r24, Y+1	; 0x01
    7b50:	9a 81       	ldd	r25, Y+2	; 0x02
    7b52:	24 96       	adiw	r28, 0x04	; 4
    7b54:	e2 e1       	ldi	r30, 0x12	; 18
    7b56:	0c 94 aa 4d 	jmp	0x9b54	; 0x9b54 <__epilogue_restores__>

00007b5a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Index of directory table */
)
{
    7b5a:	a0 e0       	ldi	r26, 0x00	; 0
    7b5c:	b0 e0       	ldi	r27, 0x00	; 0
    7b5e:	e3 eb       	ldi	r30, 0xB3	; 179
    7b60:	fd e3       	ldi	r31, 0x3D	; 61
    7b62:	0c 94 96 4d 	jmp	0x9b2c	; 0x9b2c <__prologue_saves__+0x10>
    7b66:	5c 01       	movw	r10, r24
    7b68:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    7b6a:	dc 01       	movw	r26, r24
    7b6c:	14 96       	adiw	r26, 0x04	; 4
    7b6e:	6d 93       	st	X+, r22
    7b70:	7c 93       	st	X, r23
    7b72:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    7b74:	16 96       	adiw	r26, 0x06	; 6
    7b76:	4d 91       	ld	r20, X+
    7b78:	5d 91       	ld	r21, X+
    7b7a:	6d 91       	ld	r22, X+
    7b7c:	7c 91       	ld	r23, X
    7b7e:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    7b80:	41 30       	cpi	r20, 0x01	; 1
    7b82:	51 05       	cpc	r21, r1
    7b84:	61 05       	cpc	r22, r1
    7b86:	71 05       	cpc	r23, r1
    7b88:	09 f4       	brne	.+2      	; 0x7b8c <dir_sdi+0x32>
    7b8a:	d5 c0       	rjmp	.+426    	; 0x7d36 <dir_sdi+0x1dc>
    7b8c:	ed 91       	ld	r30, X+
    7b8e:	fc 91       	ld	r31, X
    7b90:	82 85       	ldd	r24, Z+10	; 0x0a
    7b92:	93 85       	ldd	r25, Z+11	; 0x0b
    7b94:	a4 85       	ldd	r26, Z+12	; 0x0c
    7b96:	b5 85       	ldd	r27, Z+13	; 0x0d
    7b98:	48 17       	cp	r20, r24
    7b9a:	59 07       	cpc	r21, r25
    7b9c:	6a 07       	cpc	r22, r26
    7b9e:	7b 07       	cpc	r23, r27
    7ba0:	08 f0       	brcs	.+2      	; 0x7ba4 <dir_sdi+0x4a>
    7ba2:	c9 c0       	rjmp	.+402    	; 0x7d36 <dir_sdi+0x1dc>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    7ba4:	41 15       	cp	r20, r1
    7ba6:	51 05       	cpc	r21, r1
    7ba8:	61 05       	cpc	r22, r1
    7baa:	71 05       	cpc	r23, r1
    7bac:	81 f5       	brne	.+96     	; 0x7c0e <dir_sdi+0xb4>
    7bae:	80 81       	ld	r24, Z
    7bb0:	83 30       	cpi	r24, 0x03	; 3
    7bb2:	49 f4       	brne	.+18     	; 0x7bc6 <dir_sdi+0x6c>
		clst = dj->fs->dirbase;
    7bb4:	46 89       	ldd	r20, Z+22	; 0x16
    7bb6:	57 89       	ldd	r21, Z+23	; 0x17
    7bb8:	60 8d       	ldd	r22, Z+24	; 0x18
    7bba:	71 8d       	ldd	r23, Z+25	; 0x19

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    7bbc:	41 15       	cp	r20, r1
    7bbe:	51 05       	cpc	r21, r1
    7bc0:	61 05       	cpc	r22, r1
    7bc2:	71 05       	cpc	r23, r1
    7bc4:	21 f5       	brne	.+72     	; 0x7c0e <dir_sdi+0xb4>
		dj->clust = clst;
    7bc6:	f5 01       	movw	r30, r10
    7bc8:	12 86       	std	Z+10, r1	; 0x0a
    7bca:	13 86       	std	Z+11, r1	; 0x0b
    7bcc:	14 86       	std	Z+12, r1	; 0x0c
    7bce:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    7bd0:	01 90       	ld	r0, Z+
    7bd2:	f0 81       	ld	r31, Z
    7bd4:	e0 2d       	mov	r30, r0
    7bd6:	80 85       	ldd	r24, Z+8	; 0x08
    7bd8:	91 85       	ldd	r25, Z+9	; 0x09
    7bda:	c8 16       	cp	r12, r24
    7bdc:	d9 06       	cpc	r13, r25
    7bde:	08 f0       	brcs	.+2      	; 0x7be2 <dir_sdi+0x88>
    7be0:	aa c0       	rjmp	.+340    	; 0x7d36 <dir_sdi+0x1dc>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7be2:	c6 01       	movw	r24, r12
    7be4:	24 e0       	ldi	r18, 0x04	; 4
    7be6:	96 95       	lsr	r25
    7be8:	87 95       	ror	r24
    7bea:	2a 95       	dec	r18
    7bec:	e1 f7       	brne	.-8      	; 0x7be6 <dir_sdi+0x8c>
    7bee:	a0 e0       	ldi	r26, 0x00	; 0
    7bf0:	b0 e0       	ldi	r27, 0x00	; 0
    7bf2:	26 89       	ldd	r18, Z+22	; 0x16
    7bf4:	37 89       	ldd	r19, Z+23	; 0x17
    7bf6:	40 8d       	ldd	r20, Z+24	; 0x18
    7bf8:	51 8d       	ldd	r21, Z+25	; 0x19
    7bfa:	82 0f       	add	r24, r18
    7bfc:	93 1f       	adc	r25, r19
    7bfe:	a4 1f       	adc	r26, r20
    7c00:	b5 1f       	adc	r27, r21
    7c02:	f5 01       	movw	r30, r10
    7c04:	86 87       	std	Z+14, r24	; 0x0e
    7c06:	97 87       	std	Z+15, r25	; 0x0f
    7c08:	a0 8b       	std	Z+16, r26	; 0x10
    7c0a:	b1 8b       	std	Z+17, r27	; 0x11
    7c0c:	7b c0       	rjmp	.+246    	; 0x7d04 <dir_sdi+0x1aa>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    7c0e:	82 81       	ldd	r24, Z+2	; 0x02
    7c10:	08 2f       	mov	r16, r24
    7c12:	10 e0       	ldi	r17, 0x00	; 0
    7c14:	94 e0       	ldi	r25, 0x04	; 4
    7c16:	00 0f       	add	r16, r16
    7c18:	11 1f       	adc	r17, r17
    7c1a:	9a 95       	dec	r25
    7c1c:	e1 f7       	brne	.-8      	; 0x7c16 <dir_sdi+0xbc>
    7c1e:	25 c0       	rjmp	.+74     	; 0x7c6a <dir_sdi+0x110>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    7c20:	ce 01       	movw	r24, r28
    7c22:	0e 94 2c 3b 	call	0x7658	; 0x7658 <get_fat>
    7c26:	ab 01       	movw	r20, r22
    7c28:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    7c2a:	4f 3f       	cpi	r20, 0xFF	; 255
    7c2c:	ff ef       	ldi	r31, 0xFF	; 255
    7c2e:	5f 07       	cpc	r21, r31
    7c30:	ff ef       	ldi	r31, 0xFF	; 255
    7c32:	6f 07       	cpc	r22, r31
    7c34:	ff ef       	ldi	r31, 0xFF	; 255
    7c36:	7f 07       	cpc	r23, r31
    7c38:	19 f4       	brne	.+6      	; 0x7c40 <dir_sdi+0xe6>
    7c3a:	21 e0       	ldi	r18, 0x01	; 1
    7c3c:	30 e0       	ldi	r19, 0x00	; 0
    7c3e:	7d c0       	rjmp	.+250    	; 0x7d3a <dir_sdi+0x1e0>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    7c40:	42 30       	cpi	r20, 0x02	; 2
    7c42:	51 05       	cpc	r21, r1
    7c44:	61 05       	cpc	r22, r1
    7c46:	71 05       	cpc	r23, r1
    7c48:	08 f4       	brcc	.+2      	; 0x7c4c <dir_sdi+0xf2>
    7c4a:	75 c0       	rjmp	.+234    	; 0x7d36 <dir_sdi+0x1dc>
    7c4c:	d5 01       	movw	r26, r10
    7c4e:	ed 91       	ld	r30, X+
    7c50:	fc 91       	ld	r31, X
    7c52:	82 85       	ldd	r24, Z+10	; 0x0a
    7c54:	93 85       	ldd	r25, Z+11	; 0x0b
    7c56:	a4 85       	ldd	r26, Z+12	; 0x0c
    7c58:	b5 85       	ldd	r27, Z+13	; 0x0d
    7c5a:	48 17       	cp	r20, r24
    7c5c:	59 07       	cpc	r21, r25
    7c5e:	6a 07       	cpc	r22, r26
    7c60:	7b 07       	cpc	r23, r27
    7c62:	08 f0       	brcs	.+2      	; 0x7c66 <dir_sdi+0x10c>
    7c64:	68 c0       	rjmp	.+208    	; 0x7d36 <dir_sdi+0x1dc>
				return FR_INT_ERR;
			idx -= ic;
    7c66:	c0 1a       	sub	r12, r16
    7c68:	d1 0a       	sbc	r13, r17
    7c6a:	f5 01       	movw	r30, r10
    7c6c:	c0 81       	ld	r28, Z
    7c6e:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    7c70:	c0 16       	cp	r12, r16
    7c72:	d1 06       	cpc	r13, r17
    7c74:	a8 f6       	brcc	.-86     	; 0x7c20 <dir_sdi+0xc6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    7c76:	d5 01       	movw	r26, r10
    7c78:	1a 96       	adiw	r26, 0x0a	; 10
    7c7a:	4d 93       	st	X+, r20
    7c7c:	5d 93       	st	X+, r21
    7c7e:	6d 93       	st	X+, r22
    7c80:	7c 93       	st	X, r23
    7c82:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    7c84:	8e ef       	ldi	r24, 0xFE	; 254
    7c86:	e8 2e       	mov	r14, r24
    7c88:	8f ef       	ldi	r24, 0xFF	; 255
    7c8a:	f8 2e       	mov	r15, r24
    7c8c:	8f ef       	ldi	r24, 0xFF	; 255
    7c8e:	08 2f       	mov	r16, r24
    7c90:	8f ef       	ldi	r24, 0xFF	; 255
    7c92:	18 2f       	mov	r17, r24
    7c94:	e4 0e       	add	r14, r20
    7c96:	f5 1e       	adc	r15, r21
    7c98:	06 1f       	adc	r16, r22
    7c9a:	17 1f       	adc	r17, r23
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    7c9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    7c9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7ca0:	ac 85       	ldd	r26, Y+12	; 0x0c
    7ca2:	bd 85       	ldd	r27, Y+13	; 0x0d
    7ca4:	02 97       	sbiw	r24, 0x02	; 2
    7ca6:	a1 09       	sbc	r26, r1
    7ca8:	b1 09       	sbc	r27, r1
    7caa:	e8 16       	cp	r14, r24
    7cac:	f9 06       	cpc	r15, r25
    7cae:	0a 07       	cpc	r16, r26
    7cb0:	1b 07       	cpc	r17, r27
    7cb2:	28 f0       	brcs	.+10     	; 0x7cbe <dir_sdi+0x164>
    7cb4:	20 e0       	ldi	r18, 0x00	; 0
    7cb6:	30 e0       	ldi	r19, 0x00	; 0
    7cb8:	40 e0       	ldi	r20, 0x00	; 0
    7cba:	50 e0       	ldi	r21, 0x00	; 0
    7cbc:	12 c0       	rjmp	.+36     	; 0x7ce2 <dir_sdi+0x188>
	return clst * fs->csize + fs->database;
    7cbe:	2a 81       	ldd	r18, Y+2	; 0x02
    7cc0:	30 e0       	ldi	r19, 0x00	; 0
    7cc2:	40 e0       	ldi	r20, 0x00	; 0
    7cc4:	50 e0       	ldi	r21, 0x00	; 0
    7cc6:	c8 01       	movw	r24, r16
    7cc8:	b7 01       	movw	r22, r14
    7cca:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    7cce:	9b 01       	movw	r18, r22
    7cd0:	ac 01       	movw	r20, r24
    7cd2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7cd4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7cd6:	ac 8d       	ldd	r26, Y+28	; 0x1c
    7cd8:	bd 8d       	ldd	r27, Y+29	; 0x1d
    7cda:	28 0f       	add	r18, r24
    7cdc:	39 1f       	adc	r19, r25
    7cde:	4a 1f       	adc	r20, r26
    7ce0:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7ce2:	c6 01       	movw	r24, r12
    7ce4:	b4 e0       	ldi	r27, 0x04	; 4
    7ce6:	96 95       	lsr	r25
    7ce8:	87 95       	ror	r24
    7cea:	ba 95       	dec	r27
    7cec:	e1 f7       	brne	.-8      	; 0x7ce6 <dir_sdi+0x18c>
    7cee:	a0 e0       	ldi	r26, 0x00	; 0
    7cf0:	b0 e0       	ldi	r27, 0x00	; 0
    7cf2:	28 0f       	add	r18, r24
    7cf4:	39 1f       	adc	r19, r25
    7cf6:	4a 1f       	adc	r20, r26
    7cf8:	5b 1f       	adc	r21, r27
    7cfa:	f5 01       	movw	r30, r10
    7cfc:	26 87       	std	Z+14, r18	; 0x0e
    7cfe:	37 87       	std	Z+15, r19	; 0x0f
    7d00:	40 8b       	std	Z+16, r20	; 0x10
    7d02:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    7d04:	ff e0       	ldi	r31, 0x0F	; 15
    7d06:	cf 22       	and	r12, r31
    7d08:	dd 24       	eor	r13, r13
    7d0a:	a5 e0       	ldi	r26, 0x05	; 5
    7d0c:	cc 0c       	add	r12, r12
    7d0e:	dd 1c       	adc	r13, r13
    7d10:	aa 95       	dec	r26
    7d12:	e1 f7       	brne	.-8      	; 0x7d0c <dir_sdi+0x1b2>
    7d14:	82 e2       	ldi	r24, 0x22	; 34
    7d16:	90 e0       	ldi	r25, 0x00	; 0
    7d18:	c8 0e       	add	r12, r24
    7d1a:	d9 1e       	adc	r13, r25
    7d1c:	d5 01       	movw	r26, r10
    7d1e:	8d 91       	ld	r24, X+
    7d20:	9c 91       	ld	r25, X
    7d22:	11 97       	sbiw	r26, 0x01	; 1
    7d24:	8c 0d       	add	r24, r12
    7d26:	9d 1d       	adc	r25, r13
    7d28:	52 96       	adiw	r26, 0x12	; 18
    7d2a:	8d 93       	st	X+, r24
    7d2c:	9c 93       	st	X, r25
    7d2e:	53 97       	sbiw	r26, 0x13	; 19
    7d30:	20 e0       	ldi	r18, 0x00	; 0
    7d32:	30 e0       	ldi	r19, 0x00	; 0
    7d34:	02 c0       	rjmp	.+4      	; 0x7d3a <dir_sdi+0x1e0>

	return FR_OK;	/* Seek succeeded */
    7d36:	22 e0       	ldi	r18, 0x02	; 2
    7d38:	30 e0       	ldi	r19, 0x00	; 0
}
    7d3a:	c9 01       	movw	r24, r18
    7d3c:	cd b7       	in	r28, 0x3d	; 61
    7d3e:	de b7       	in	r29, 0x3e	; 62
    7d40:	ea e0       	ldi	r30, 0x0A	; 10
    7d42:	0c 94 b2 4d 	jmp	0x9b64	; 0x9b64 <__epilogue_restores__+0x10>

00007d46 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    7d46:	a0 e0       	ldi	r26, 0x00	; 0
    7d48:	b0 e0       	ldi	r27, 0x00	; 0
    7d4a:	e9 ea       	ldi	r30, 0xA9	; 169
    7d4c:	fe e3       	ldi	r31, 0x3E	; 62
    7d4e:	0c 94 8e 4d 	jmp	0x9b1c	; 0x9b1c <__prologue_saves__>
    7d52:	ec 01       	movw	r28, r24
    7d54:	16 2f       	mov	r17, r22
    7d56:	07 2f       	mov	r16, r23
    7d58:	4a 01       	movw	r8, r20
    7d5a:	29 01       	movw	r4, r18
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Clear read byte counter */
    7d5c:	f9 01       	movw	r30, r18
    7d5e:	10 82       	st	Z, r1
    7d60:	11 82       	std	Z+1, r1	; 0x01

	res = validate(fp);							/* Check validity */
    7d62:	0e 94 c8 3a 	call	0x7590	; 0x7590 <validate>
    7d66:	5c 01       	movw	r10, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    7d68:	00 97       	sbiw	r24, 0x00	; 0
    7d6a:	09 f0       	breq	.+2      	; 0x7d6e <f_read+0x28>
    7d6c:	14 c1       	rjmp	.+552    	; 0x7f96 <f_read+0x250>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    7d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    7d70:	87 fd       	sbrc	r24, 7
    7d72:	59 c0       	rjmp	.+178    	; 0x7e26 <f_read+0xe0>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    7d74:	80 fd       	sbrc	r24, 0
    7d76:	04 c0       	rjmp	.+8      	; 0x7d80 <f_read+0x3a>
    7d78:	e7 e0       	ldi	r30, 0x07	; 7
    7d7a:	ae 2e       	mov	r10, r30
    7d7c:	b1 2c       	mov	r11, r1
    7d7e:	0b c1       	rjmp	.+534    	; 0x7f96 <f_read+0x250>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    7d80:	2a 85       	ldd	r18, Y+10	; 0x0a
    7d82:	3b 85       	ldd	r19, Y+11	; 0x0b
    7d84:	4c 85       	ldd	r20, Y+12	; 0x0c
    7d86:	5d 85       	ldd	r21, Y+13	; 0x0d
    7d88:	8e 81       	ldd	r24, Y+6	; 0x06
    7d8a:	9f 81       	ldd	r25, Y+7	; 0x07
    7d8c:	a8 85       	ldd	r26, Y+8	; 0x08
    7d8e:	b9 85       	ldd	r27, Y+9	; 0x09
    7d90:	28 1b       	sub	r18, r24
    7d92:	39 0b       	sbc	r19, r25
    7d94:	4a 0b       	sbc	r20, r26
    7d96:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    7d98:	c4 01       	movw	r24, r8
    7d9a:	a0 e0       	ldi	r26, 0x00	; 0
    7d9c:	b0 e0       	ldi	r27, 0x00	; 0
    7d9e:	28 17       	cp	r18, r24
    7da0:	39 07       	cpc	r19, r25
    7da2:	4a 07       	cpc	r20, r26
    7da4:	5b 07       	cpc	r21, r27
    7da6:	08 f4       	brcc	.+2      	; 0x7daa <f_read+0x64>
    7da8:	49 01       	movw	r8, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    7daa:	81 2f       	mov	r24, r17
    7dac:	90 2f       	mov	r25, r16
    7dae:	9c 01       	movw	r18, r24
    7db0:	39 01       	movw	r6, r18
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    7db2:	21 2c       	mov	r2, r1
    7db4:	72 e0       	ldi	r23, 0x02	; 2
    7db6:	37 2e       	mov	r3, r23
    7db8:	ea c0       	rjmp	.+468    	; 0x7f8e <f_read+0x248>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    7dba:	2e 81       	ldd	r18, Y+6	; 0x06
    7dbc:	3f 81       	ldd	r19, Y+7	; 0x07
    7dbe:	48 85       	ldd	r20, Y+8	; 0x08
    7dc0:	59 85       	ldd	r21, Y+9	; 0x09
    7dc2:	da 01       	movw	r26, r20
    7dc4:	c9 01       	movw	r24, r18
    7dc6:	91 70       	andi	r25, 0x01	; 1
    7dc8:	a0 70       	andi	r26, 0x00	; 0
    7dca:	b0 70       	andi	r27, 0x00	; 0
    7dcc:	00 97       	sbiw	r24, 0x00	; 0
    7dce:	a1 05       	cpc	r26, r1
    7dd0:	b1 05       	cpc	r27, r1
    7dd2:	09 f0       	breq	.+2      	; 0x7dd6 <f_read+0x90>
    7dd4:	91 c0       	rjmp	.+290    	; 0x7ef8 <f_read+0x1b2>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    7dd6:	e8 81       	ld	r30, Y
    7dd8:	f9 81       	ldd	r31, Y+1	; 0x01
    7dda:	da 01       	movw	r26, r20
    7ddc:	c9 01       	movw	r24, r18
    7dde:	69 e0       	ldi	r22, 0x09	; 9
    7de0:	b6 95       	lsr	r27
    7de2:	a7 95       	ror	r26
    7de4:	97 95       	ror	r25
    7de6:	87 95       	ror	r24
    7de8:	6a 95       	dec	r22
    7dea:	d1 f7       	brne	.-12     	; 0x7de0 <f_read+0x9a>
    7dec:	d2 80       	ldd	r13, Z+2	; 0x02
    7dee:	da 94       	dec	r13
    7df0:	d8 22       	and	r13, r24
			if (!csect) {						/* On the cluster boundary? */
    7df2:	51 f5       	brne	.+84     	; 0x7e48 <f_read+0x102>
				if (fp->fptr == 0) {			/* On the top of the file? */
    7df4:	21 15       	cp	r18, r1
    7df6:	31 05       	cpc	r19, r1
    7df8:	41 05       	cpc	r20, r1
    7dfa:	51 05       	cpc	r21, r1
    7dfc:	29 f4       	brne	.+10     	; 0x7e08 <f_read+0xc2>
					clst = fp->sclust;			/* Follow from the origin */
    7dfe:	6e 85       	ldd	r22, Y+14	; 0x0e
    7e00:	7f 85       	ldd	r23, Y+15	; 0x0f
    7e02:	88 89       	ldd	r24, Y+16	; 0x10
    7e04:	99 89       	ldd	r25, Y+17	; 0x11
    7e06:	07 c0       	rjmp	.+14     	; 0x7e16 <f_read+0xd0>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    7e08:	4a 89       	ldd	r20, Y+18	; 0x12
    7e0a:	5b 89       	ldd	r21, Y+19	; 0x13
    7e0c:	6c 89       	ldd	r22, Y+20	; 0x14
    7e0e:	7d 89       	ldd	r23, Y+21	; 0x15
    7e10:	cf 01       	movw	r24, r30
    7e12:	0e 94 2c 3b 	call	0x7658	; 0x7658 <get_fat>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    7e16:	62 30       	cpi	r22, 0x02	; 2
    7e18:	71 05       	cpc	r23, r1
    7e1a:	81 05       	cpc	r24, r1
    7e1c:	91 05       	cpc	r25, r1
    7e1e:	38 f4       	brcc	.+14     	; 0x7e2e <f_read+0xe8>
    7e20:	8c 81       	ldd	r24, Y+4	; 0x04
    7e22:	80 68       	ori	r24, 0x80	; 128
    7e24:	8c 83       	std	Y+4, r24	; 0x04
    7e26:	72 e0       	ldi	r23, 0x02	; 2
    7e28:	a7 2e       	mov	r10, r23
    7e2a:	b1 2c       	mov	r11, r1
    7e2c:	b4 c0       	rjmp	.+360    	; 0x7f96 <f_read+0x250>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    7e2e:	6f 3f       	cpi	r22, 0xFF	; 255
    7e30:	ff ef       	ldi	r31, 0xFF	; 255
    7e32:	7f 07       	cpc	r23, r31
    7e34:	ff ef       	ldi	r31, 0xFF	; 255
    7e36:	8f 07       	cpc	r24, r31
    7e38:	ff ef       	ldi	r31, 0xFF	; 255
    7e3a:	9f 07       	cpc	r25, r31
    7e3c:	09 f4       	brne	.+2      	; 0x7e40 <f_read+0xfa>
    7e3e:	6a c0       	rjmp	.+212    	; 0x7f14 <f_read+0x1ce>
				fp->clust = clst;				/* Update current cluster */
    7e40:	6a 8b       	std	Y+18, r22	; 0x12
    7e42:	7b 8b       	std	Y+19, r23	; 0x13
    7e44:	8c 8b       	std	Y+20, r24	; 0x14
    7e46:	9d 8b       	std	Y+21, r25	; 0x15
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    7e48:	08 81       	ld	r16, Y
    7e4a:	19 81       	ldd	r17, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    7e4c:	2a 89       	ldd	r18, Y+18	; 0x12
    7e4e:	3b 89       	ldd	r19, Y+19	; 0x13
    7e50:	4c 89       	ldd	r20, Y+20	; 0x14
    7e52:	5d 89       	ldd	r21, Y+21	; 0x15
    7e54:	22 50       	subi	r18, 0x02	; 2
    7e56:	30 40       	sbci	r19, 0x00	; 0
    7e58:	40 40       	sbci	r20, 0x00	; 0
    7e5a:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    7e5c:	f8 01       	movw	r30, r16
    7e5e:	82 85       	ldd	r24, Z+10	; 0x0a
    7e60:	93 85       	ldd	r25, Z+11	; 0x0b
    7e62:	a4 85       	ldd	r26, Z+12	; 0x0c
    7e64:	b5 85       	ldd	r27, Z+13	; 0x0d
    7e66:	02 97       	sbiw	r24, 0x02	; 2
    7e68:	a1 09       	sbc	r26, r1
    7e6a:	b1 09       	sbc	r27, r1
    7e6c:	28 17       	cp	r18, r24
    7e6e:	39 07       	cpc	r19, r25
    7e70:	4a 07       	cpc	r20, r26
    7e72:	5b 07       	cpc	r21, r27
    7e74:	a8 f6       	brcc	.-86     	; 0x7e20 <f_read+0xda>
	return clst * fs->csize + fs->database;
    7e76:	c2 80       	ldd	r12, Z+2	; 0x02
    7e78:	6c 2d       	mov	r22, r12
    7e7a:	70 e0       	ldi	r23, 0x00	; 0
    7e7c:	80 e0       	ldi	r24, 0x00	; 0
    7e7e:	90 e0       	ldi	r25, 0x00	; 0
    7e80:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    7e84:	9b 01       	movw	r18, r22
    7e86:	ac 01       	movw	r20, r24
    7e88:	f8 01       	movw	r30, r16
    7e8a:	82 8d       	ldd	r24, Z+26	; 0x1a
    7e8c:	93 8d       	ldd	r25, Z+27	; 0x1b
    7e8e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    7e90:	b5 8d       	ldd	r27, Z+29	; 0x1d
    7e92:	28 0f       	add	r18, r24
    7e94:	39 1f       	adc	r19, r25
    7e96:	4a 1f       	adc	r20, r26
    7e98:	5b 1f       	adc	r21, r27
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    7e9a:	21 15       	cp	r18, r1
    7e9c:	31 05       	cpc	r19, r1
    7e9e:	41 05       	cpc	r20, r1
    7ea0:	51 05       	cpc	r21, r1
    7ea2:	09 f4       	brne	.+2      	; 0x7ea6 <f_read+0x160>
    7ea4:	bd cf       	rjmp	.-134    	; 0x7e20 <f_read+0xda>
			sect += csect;
    7ea6:	2d 0d       	add	r18, r13
    7ea8:	31 1d       	adc	r19, r1
    7eaa:	41 1d       	adc	r20, r1
    7eac:	51 1d       	adc	r21, r1
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    7eae:	74 01       	movw	r14, r8
    7eb0:	ef 2c       	mov	r14, r15
    7eb2:	ff 24       	eor	r15, r15
    7eb4:	e6 94       	lsr	r14
			if (cc) {							/* Read maximum contiguous sectors directly */
    7eb6:	e1 14       	cp	r14, r1
    7eb8:	f1 04       	cpc	r15, r1
    7eba:	d1 f0       	breq	.+52     	; 0x7ef0 <f_read+0x1aa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    7ebc:	ed 2d       	mov	r30, r13
    7ebe:	f0 e0       	ldi	r31, 0x00	; 0
    7ec0:	c7 01       	movw	r24, r14
    7ec2:	8e 0f       	add	r24, r30
    7ec4:	9f 1f       	adc	r25, r31
    7ec6:	6c 2d       	mov	r22, r12
    7ec8:	70 e0       	ldi	r23, 0x00	; 0
    7eca:	68 17       	cp	r22, r24
    7ecc:	79 07       	cpc	r23, r25
    7ece:	18 f4       	brcc	.+6      	; 0x7ed6 <f_read+0x190>
					cc = fp->fs->csize - csect;
    7ed0:	7b 01       	movw	r14, r22
    7ed2:	ee 1a       	sub	r14, r30
    7ed4:	ff 0a       	sbc	r15, r31
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    7ed6:	f8 01       	movw	r30, r16
    7ed8:	81 81       	ldd	r24, Z+1	; 0x01
    7eda:	b3 01       	movw	r22, r6
    7edc:	0e 2d       	mov	r16, r14
    7ede:	0e 94 d6 47 	call	0x8fac	; 0x8fac <disk_read>
    7ee2:	89 2b       	or	r24, r25
    7ee4:	b9 f4       	brne	.+46     	; 0x7f14 <f_read+0x1ce>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    7ee6:	b7 01       	movw	r22, r14
    7ee8:	76 2f       	mov	r23, r22
    7eea:	66 27       	eor	r22, r22
    7eec:	77 0f       	add	r23, r23
    7eee:	35 c0       	rjmp	.+106    	; 0x7f5a <f_read+0x214>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    7ef0:	2e 8b       	std	Y+22, r18	; 0x16
    7ef2:	3f 8b       	std	Y+23, r19	; 0x17
    7ef4:	48 8f       	std	Y+24, r20	; 0x18
    7ef6:	59 8f       	std	Y+25, r21	; 0x19
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    7ef8:	ee 80       	ldd	r14, Y+6	; 0x06
    7efa:	ff 80       	ldd	r15, Y+7	; 0x07
    7efc:	08 85       	ldd	r16, Y+8	; 0x08
    7efe:	19 85       	ldd	r17, Y+9	; 0x09
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    7f00:	4e 89       	ldd	r20, Y+22	; 0x16
    7f02:	5f 89       	ldd	r21, Y+23	; 0x17
    7f04:	68 8d       	ldd	r22, Y+24	; 0x18
    7f06:	79 8d       	ldd	r23, Y+25	; 0x19
    7f08:	88 81       	ld	r24, Y
    7f0a:	99 81       	ldd	r25, Y+1	; 0x01
    7f0c:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <move_window>
    7f10:	89 2b       	or	r24, r25
    7f12:	39 f0       	breq	.+14     	; 0x7f22 <f_read+0x1dc>
			ABORT(fp->fs, FR_DISK_ERR);
    7f14:	8c 81       	ldd	r24, Y+4	; 0x04
    7f16:	80 68       	ori	r24, 0x80	; 128
    7f18:	8c 83       	std	Y+4, r24	; 0x04
    7f1a:	31 e0       	ldi	r19, 0x01	; 1
    7f1c:	a3 2e       	mov	r10, r19
    7f1e:	b1 2c       	mov	r11, r1
    7f20:	3a c0       	rjmp	.+116    	; 0x7f96 <f_read+0x250>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    7f22:	c7 01       	movw	r24, r14
    7f24:	91 70       	andi	r25, 0x01	; 1
    7f26:	91 01       	movw	r18, r2
    7f28:	28 1b       	sub	r18, r24
    7f2a:	39 0b       	sbc	r19, r25
    7f2c:	b4 01       	movw	r22, r8
    7f2e:	28 15       	cp	r18, r8
    7f30:	39 05       	cpc	r19, r9
    7f32:	08 f4       	brcc	.+2      	; 0x7f36 <f_read+0x1f0>
    7f34:	b9 01       	movw	r22, r18

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
    7f36:	8e 81       	ldd	r24, Y+6	; 0x06
    7f38:	9f 81       	ldd	r25, Y+7	; 0x07
    7f3a:	91 70       	andi	r25, 0x01	; 1
    7f3c:	82 96       	adiw	r24, 0x22	; 34
    7f3e:	e8 81       	ld	r30, Y
    7f40:	f9 81       	ldd	r31, Y+1	; 0x01
    7f42:	e8 0f       	add	r30, r24
    7f44:	f9 1f       	adc	r31, r25
    7f46:	d3 01       	movw	r26, r6
    7f48:	9b 01       	movw	r18, r22
    7f4a:	04 c0       	rjmp	.+8      	; 0x7f54 <f_read+0x20e>
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
    7f4c:	81 91       	ld	r24, Z+
    7f4e:	8d 93       	st	X+, r24
    7f50:	21 50       	subi	r18, 0x01	; 1
    7f52:	30 40       	sbci	r19, 0x00	; 0
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    7f54:	21 15       	cp	r18, r1
    7f56:	31 05       	cpc	r19, r1
    7f58:	c9 f7       	brne	.-14     	; 0x7f4c <f_read+0x206>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    7f5a:	66 0e       	add	r6, r22
    7f5c:	77 1e       	adc	r7, r23
    7f5e:	cb 01       	movw	r24, r22
    7f60:	a0 e0       	ldi	r26, 0x00	; 0
    7f62:	b0 e0       	ldi	r27, 0x00	; 0
    7f64:	2e 81       	ldd	r18, Y+6	; 0x06
    7f66:	3f 81       	ldd	r19, Y+7	; 0x07
    7f68:	48 85       	ldd	r20, Y+8	; 0x08
    7f6a:	59 85       	ldd	r21, Y+9	; 0x09
    7f6c:	28 0f       	add	r18, r24
    7f6e:	39 1f       	adc	r19, r25
    7f70:	4a 1f       	adc	r20, r26
    7f72:	5b 1f       	adc	r21, r27
    7f74:	2e 83       	std	Y+6, r18	; 0x06
    7f76:	3f 83       	std	Y+7, r19	; 0x07
    7f78:	48 87       	std	Y+8, r20	; 0x08
    7f7a:	59 87       	std	Y+9, r21	; 0x09
    7f7c:	f2 01       	movw	r30, r4
    7f7e:	80 81       	ld	r24, Z
    7f80:	91 81       	ldd	r25, Z+1	; 0x01
    7f82:	86 0f       	add	r24, r22
    7f84:	97 1f       	adc	r25, r23
    7f86:	80 83       	st	Z, r24
    7f88:	91 83       	std	Z+1, r25	; 0x01
    7f8a:	86 1a       	sub	r8, r22
    7f8c:	97 0a       	sbc	r9, r23
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    7f8e:	81 14       	cp	r8, r1
    7f90:	91 04       	cpc	r9, r1
    7f92:	09 f0       	breq	.+2      	; 0x7f96 <f_read+0x250>
    7f94:	12 cf       	rjmp	.-476    	; 0x7dba <f_read+0x74>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    7f96:	c5 01       	movw	r24, r10
    7f98:	cd b7       	in	r28, 0x3d	; 61
    7f9a:	de b7       	in	r29, 0x3e	; 62
    7f9c:	e2 e1       	ldi	r30, 0x12	; 18
    7f9e:	0c 94 aa 4d 	jmp	0x9b54	; 0x9b54 <__epilogue_restores__>

00007fa2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fil		/* Pointer to the file object */
)
{
    7fa2:	a4 e0       	ldi	r26, 0x04	; 4
    7fa4:	b0 e0       	ldi	r27, 0x00	; 0
    7fa6:	e7 ed       	ldi	r30, 0xD7	; 215
    7fa8:	ff e3       	ldi	r31, 0x3F	; 63
    7faa:	0c 94 90 4d 	jmp	0x9b20	; 0x9b20 <__prologue_saves__+0x4>
    7fae:	6c 01       	movw	r12, r24
    7fb0:	5b 01       	movw	r10, r22
    7fb2:	4a 01       	movw	r8, r20
    7fb4:	7c 01       	movw	r14, r24
    7fb6:	00 e0       	ldi	r16, 0x00	; 0
    7fb8:	10 e0       	ldi	r17, 0x00	; 0
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    7fba:	08 94       	sec
    7fbc:	a1 08       	sbc	r10, r1
    7fbe:	b1 08       	sbc	r11, r1
		f_read(fil, s, 1, &rc);
    7fc0:	f3 e0       	ldi	r31, 0x03	; 3
    7fc2:	4f 2e       	mov	r4, r31
    7fc4:	51 2c       	mov	r5, r1
    7fc6:	4c 0e       	add	r4, r28
    7fc8:	5d 1e       	adc	r5, r29
    7fca:	3e 01       	movw	r6, r28
    7fcc:	08 94       	sec
    7fce:	61 1c       	adc	r6, r1
    7fd0:	71 1c       	adc	r7, r1
    7fd2:	15 c0       	rjmp	.+42     	; 0x7ffe <f_gets+0x5c>
    7fd4:	c4 01       	movw	r24, r8
    7fd6:	b3 01       	movw	r22, r6
    7fd8:	41 e0       	ldi	r20, 0x01	; 1
    7fda:	50 e0       	ldi	r21, 0x00	; 0
    7fdc:	92 01       	movw	r18, r4
    7fde:	0e 94 a3 3e 	call	0x7d46	; 0x7d46 <f_read>
		if (rc != 1) break;			/* Break on EOF or error */
    7fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    7fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    7fe6:	01 97       	sbiw	r24, 0x01	; 1
    7fe8:	69 f4       	brne	.+26     	; 0x8004 <f_gets+0x62>
		c = s[0];
    7fea:	89 81       	ldd	r24, Y+1	; 0x01
				}
			}
		}
#endif
#if _USE_STRFUNC >= 2
		if (c == '\r') continue;	/* Strip '\r' */
    7fec:	8d 30       	cpi	r24, 0x0D	; 13
    7fee:	39 f0       	breq	.+14     	; 0x7ffe <f_gets+0x5c>
#endif
		*p++ = c;
    7ff0:	f7 01       	movw	r30, r14
    7ff2:	81 93       	st	Z+, r24
    7ff4:	7f 01       	movw	r14, r30
		n++;
    7ff6:	0f 5f       	subi	r16, 0xFF	; 255
    7ff8:	1f 4f       	sbci	r17, 0xFF	; 255
		if (c == '\n') break;		/* Break on EOL */
    7ffa:	8a 30       	cpi	r24, 0x0A	; 10
    7ffc:	19 f0       	breq	.+6      	; 0x8004 <f_gets+0x62>
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    7ffe:	0a 15       	cp	r16, r10
    8000:	1b 05       	cpc	r17, r11
    8002:	44 f3       	brlt	.-48     	; 0x7fd4 <f_gets+0x32>
#endif
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
    8004:	f7 01       	movw	r30, r14
    8006:	10 82       	st	Z, r1
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    8008:	01 15       	cp	r16, r1
    800a:	11 05       	cpc	r17, r1
    800c:	11 f4       	brne	.+4      	; 0x8012 <f_gets+0x70>
    800e:	cc 24       	eor	r12, r12
    8010:	dd 24       	eor	r13, r13
}
    8012:	c6 01       	movw	r24, r12
    8014:	24 96       	adiw	r28, 0x04	; 4
    8016:	e0 e1       	ldi	r30, 0x10	; 16
    8018:	0c 94 ac 4d 	jmp	0x9b58	; 0x9b58 <__epilogue_restores__+0x4>

0000801c <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    801c:	0f 93       	push	r16
    801e:	cf 93       	push	r28
    8020:	df 93       	push	r29
    8022:	ec 01       	movw	r28, r24
    8024:	9a 01       	movw	r18, r20
    8026:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    8028:	bc 01       	movw	r22, r24
    802a:	6e 5d       	subi	r22, 0xDE	; 222
    802c:	7f 4f       	sbci	r23, 0xFF	; 255
    802e:	89 81       	ldd	r24, Y+1	; 0x01
    8030:	01 e0       	ldi	r16, 0x01	; 1
    8032:	0e 94 d6 47 	call	0x8fac	; 0x8fac <disk_read>
    8036:	89 2b       	or	r24, r25
    8038:	11 f0       	breq	.+4      	; 0x803e <check_fs+0x22>
    803a:	63 e0       	ldi	r22, 0x03	; 3
    803c:	6d c0       	rjmp	.+218    	; 0x8118 <check_fs+0xfc>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    803e:	cf 5d       	subi	r28, 0xDF	; 223
    8040:	dd 4f       	sbci	r29, 0xFD	; 253
    8042:	98 81       	ld	r25, Y
    8044:	80 e0       	ldi	r24, 0x00	; 0
    8046:	2a 91       	ld	r18, -Y
    8048:	c0 52       	subi	r28, 0x20	; 32
    804a:	d2 40       	sbci	r29, 0x02	; 2
    804c:	30 e0       	ldi	r19, 0x00	; 0
    804e:	82 2b       	or	r24, r18
    8050:	93 2b       	or	r25, r19
    8052:	85 55       	subi	r24, 0x55	; 85
    8054:	9a 4a       	sbci	r25, 0xAA	; 170
    8056:	11 f0       	breq	.+4      	; 0x805c <check_fs+0x40>
    8058:	62 e0       	ldi	r22, 0x02	; 2
    805a:	5e c0       	rjmp	.+188    	; 0x8118 <check_fs+0xfc>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    805c:	c5 5a       	subi	r28, 0xA5	; 165
    805e:	df 4f       	sbci	r29, 0xFF	; 255
    8060:	28 81       	ld	r18, Y
    8062:	30 e0       	ldi	r19, 0x00	; 0
    8064:	40 e0       	ldi	r20, 0x00	; 0
    8066:	50 e0       	ldi	r21, 0x00	; 0
    8068:	52 2f       	mov	r21, r18
    806a:	44 27       	eor	r20, r20
    806c:	33 27       	eor	r19, r19
    806e:	22 27       	eor	r18, r18
    8070:	8a 91       	ld	r24, -Y
    8072:	90 e0       	ldi	r25, 0x00	; 0
    8074:	a0 e0       	ldi	r26, 0x00	; 0
    8076:	b0 e0       	ldi	r27, 0x00	; 0
    8078:	dc 01       	movw	r26, r24
    807a:	99 27       	eor	r25, r25
    807c:	88 27       	eor	r24, r24
    807e:	28 2b       	or	r18, r24
    8080:	39 2b       	or	r19, r25
    8082:	4a 2b       	or	r20, r26
    8084:	5b 2b       	or	r21, r27
    8086:	22 97       	sbiw	r28, 0x02	; 2
    8088:	89 91       	ld	r24, Y+
    808a:	90 e0       	ldi	r25, 0x00	; 0
    808c:	a0 e0       	ldi	r26, 0x00	; 0
    808e:	b0 e0       	ldi	r27, 0x00	; 0
    8090:	28 2b       	or	r18, r24
    8092:	39 2b       	or	r19, r25
    8094:	4a 2b       	or	r20, r26
    8096:	5b 2b       	or	r21, r27
    8098:	98 81       	ld	r25, Y
    809a:	c9 55       	subi	r28, 0x59	; 89
    809c:	d0 40       	sbci	r29, 0x00	; 0
    809e:	80 e0       	ldi	r24, 0x00	; 0
    80a0:	a0 e0       	ldi	r26, 0x00	; 0
    80a2:	b0 e0       	ldi	r27, 0x00	; 0
    80a4:	28 2b       	or	r18, r24
    80a6:	39 2b       	or	r19, r25
    80a8:	4a 2b       	or	r20, r26
    80aa:	5b 2b       	or	r21, r27
    80ac:	50 70       	andi	r21, 0x00	; 0
    80ae:	26 54       	subi	r18, 0x46	; 70
    80b0:	31 44       	sbci	r19, 0x41	; 65
    80b2:	44 45       	sbci	r20, 0x54	; 84
    80b4:	50 40       	sbci	r21, 0x00	; 0
    80b6:	11 f4       	brne	.+4      	; 0x80bc <check_fs+0xa0>
    80b8:	60 e0       	ldi	r22, 0x00	; 0
    80ba:	2e c0       	rjmp	.+92     	; 0x8118 <check_fs+0xfc>
    80bc:	60 e0       	ldi	r22, 0x00	; 0
    80be:	c9 58       	subi	r28, 0x89	; 137
    80c0:	df 4f       	sbci	r29, 0xFF	; 255
    80c2:	28 81       	ld	r18, Y
    80c4:	30 e0       	ldi	r19, 0x00	; 0
    80c6:	40 e0       	ldi	r20, 0x00	; 0
    80c8:	50 e0       	ldi	r21, 0x00	; 0
    80ca:	52 2f       	mov	r21, r18
    80cc:	44 27       	eor	r20, r20
    80ce:	33 27       	eor	r19, r19
    80d0:	22 27       	eor	r18, r18
    80d2:	8a 91       	ld	r24, -Y
    80d4:	90 e0       	ldi	r25, 0x00	; 0
    80d6:	a0 e0       	ldi	r26, 0x00	; 0
    80d8:	b0 e0       	ldi	r27, 0x00	; 0
    80da:	dc 01       	movw	r26, r24
    80dc:	99 27       	eor	r25, r25
    80de:	88 27       	eor	r24, r24
    80e0:	28 2b       	or	r18, r24
    80e2:	39 2b       	or	r19, r25
    80e4:	4a 2b       	or	r20, r26
    80e6:	5b 2b       	or	r21, r27
    80e8:	22 97       	sbiw	r28, 0x02	; 2
    80ea:	89 91       	ld	r24, Y+
    80ec:	90 e0       	ldi	r25, 0x00	; 0
    80ee:	a0 e0       	ldi	r26, 0x00	; 0
    80f0:	b0 e0       	ldi	r27, 0x00	; 0
    80f2:	28 2b       	or	r18, r24
    80f4:	39 2b       	or	r19, r25
    80f6:	4a 2b       	or	r20, r26
    80f8:	5b 2b       	or	r21, r27
    80fa:	98 81       	ld	r25, Y
    80fc:	80 e0       	ldi	r24, 0x00	; 0
    80fe:	a0 e0       	ldi	r26, 0x00	; 0
    8100:	b0 e0       	ldi	r27, 0x00	; 0
    8102:	28 2b       	or	r18, r24
    8104:	39 2b       	or	r19, r25
    8106:	4a 2b       	or	r20, r26
    8108:	5b 2b       	or	r21, r27
    810a:	50 70       	andi	r21, 0x00	; 0
    810c:	26 54       	subi	r18, 0x46	; 70
    810e:	31 44       	sbci	r19, 0x41	; 65
    8110:	44 45       	sbci	r20, 0x54	; 84
    8112:	50 40       	sbci	r21, 0x00	; 0
    8114:	09 f0       	breq	.+2      	; 0x8118 <check_fs+0xfc>
    8116:	61 e0       	ldi	r22, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    8118:	86 2f       	mov	r24, r22
    811a:	df 91       	pop	r29
    811c:	cf 91       	pop	r28
    811e:	0f 91       	pop	r16
    8120:	08 95       	ret

00008122 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    8122:	a3 e3       	ldi	r26, 0x33	; 51
    8124:	b0 e0       	ldi	r27, 0x00	; 0
    8126:	e7 e9       	ldi	r30, 0x97	; 151
    8128:	f0 e4       	ldi	r31, 0x40	; 64
    812a:	0c 94 8e 4d 	jmp	0x9b1c	; 0x9b1c <__prologue_saves__>
    812e:	8f a7       	std	Y+47, r24	; 0x2f
    8130:	98 ab       	std	Y+48, r25	; 0x30
    8132:	1b 01       	movw	r2, r22
    8134:	49 ab       	std	Y+49, r20	; 0x31
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    8136:	89 2b       	or	r24, r25
    8138:	19 f4       	brne	.+6      	; 0x8140 <f_open+0x1e>
    813a:	09 e0       	ldi	r16, 0x09	; 9
    813c:	10 e0       	ldi	r17, 0x00	; 0
    813e:	f4 c4       	rjmp	.+2536   	; 0x8b28 <f_open+0xa06>
	fp->fs = 0;			/* Clear file object */
    8140:	af a5       	ldd	r26, Y+47	; 0x2f
    8142:	b8 a9       	ldd	r27, Y+48	; 0x30
    8144:	1d 92       	st	X+, r1
    8146:	1c 92       	st	X, r1
	const TCHAR *p = *path;
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    8148:	fb 01       	movw	r30, r22
    814a:	80 81       	ld	r24, Z
    814c:	28 2f       	mov	r18, r24
    814e:	33 27       	eor	r19, r19
    8150:	27 fd       	sbrc	r18, 7
    8152:	30 95       	com	r19
    8154:	20 53       	subi	r18, 0x30	; 48
    8156:	30 40       	sbci	r19, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    8158:	2a 30       	cpi	r18, 0x0A	; 10
    815a:	31 05       	cpc	r19, r1
    815c:	50 f4       	brcc	.+20     	; 0x8172 <f_open+0x50>
    815e:	81 81       	ldd	r24, Z+1	; 0x01
    8160:	8a 33       	cpi	r24, 0x3A	; 58
    8162:	39 f4       	brne	.+14     	; 0x8172 <f_open+0x50>
		p += 2; *path = p;				/* Return pointer to the path name */
    8164:	42 e0       	ldi	r20, 0x02	; 2
    8166:	50 e0       	ldi	r21, 0x00	; 0
    8168:	24 0e       	add	r2, r20
    816a:	35 1e       	adc	r3, r21
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    816c:	23 2b       	or	r18, r19
    816e:	09 f0       	breq	.+2      	; 0x8172 <f_open+0x50>
    8170:	63 c2       	rjmp	.+1222   	; 0x8638 <f_open+0x516>
		return FR_INVALID_DRIVE;
	fs = FatFs[vol];					/* Get corresponding file system object */
    8172:	00 91 8e 24 	lds	r16, 0x248E
    8176:	10 91 8f 24 	lds	r17, 0x248F
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    817a:	01 15       	cp	r16, r1
    817c:	11 05       	cpc	r17, r1
    817e:	19 f4       	brne	.+6      	; 0x8186 <f_open+0x64>
    8180:	0c e0       	ldi	r16, 0x0C	; 12
    8182:	10 e0       	ldi	r17, 0x00	; 0
    8184:	d1 c4       	rjmp	.+2466   	; 0x8b28 <f_open+0xa06>

	ENTER_FF(fs);						/* Lock file system */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
    8186:	0d 87       	std	Y+13, r16	; 0x0d
    8188:	1e 87       	std	Y+14, r17	; 0x0e
	if (fs->fs_type) {					/* If the volume has been mounted */
    818a:	d8 01       	movw	r26, r16
    818c:	8c 91       	ld	r24, X
    818e:	88 23       	and	r24, r24
    8190:	31 f0       	breq	.+12     	; 0x819e <f_open+0x7c>
		stat = disk_status(fs->drv);
    8192:	11 96       	adiw	r26, 0x01	; 1
    8194:	8c 91       	ld	r24, X
    8196:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    819a:	80 ff       	sbrs	r24, 0
    819c:	cd c4       	rjmp	.+2458   	; 0x8b38 <f_open+0xa16>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    819e:	f8 01       	movw	r30, r16
    81a0:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    81a2:	11 82       	std	Z+1, r1	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    81a4:	80 e0       	ldi	r24, 0x00	; 0
    81a6:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    81aa:	80 ff       	sbrs	r24, 0
    81ac:	03 c0       	rjmp	.+6      	; 0x81b4 <f_open+0x92>
    81ae:	03 e0       	ldi	r16, 0x03	; 3
    81b0:	10 e0       	ldi	r17, 0x00	; 0
    81b2:	ba c4       	rjmp	.+2420   	; 0x8b28 <f_open+0xa06>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    81b4:	c8 01       	movw	r24, r16
    81b6:	40 e0       	ldi	r20, 0x00	; 0
    81b8:	50 e0       	ldi	r21, 0x00	; 0
    81ba:	60 e0       	ldi	r22, 0x00	; 0
    81bc:	70 e0       	ldi	r23, 0x00	; 0
    81be:	0e 94 0e 40 	call	0x801c	; 0x801c <check_fs>
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    81c2:	81 30       	cpi	r24, 0x01	; 1
    81c4:	29 f0       	breq	.+10     	; 0x81d0 <f_open+0xae>
    81c6:	1b a6       	std	Y+43, r1	; 0x2b
    81c8:	1c a6       	std	Y+44, r1	; 0x2c
    81ca:	1d a6       	std	Y+45, r1	; 0x2d
    81cc:	1e a6       	std	Y+46, r1	; 0x2e
    81ce:	33 c0       	rjmp	.+102    	; 0x8236 <f_open+0x114>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    81d0:	f8 01       	movw	r30, r16
    81d2:	e0 52       	subi	r30, 0x20	; 32
    81d4:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {						/* Is the partition existing? */
    81d6:	84 81       	ldd	r24, Z+4	; 0x04
    81d8:	88 23       	and	r24, r24
    81da:	09 f4       	brne	.+2      	; 0x81de <f_open+0xbc>
    81dc:	30 c2       	rjmp	.+1120   	; 0x863e <f_open+0x51c>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    81de:	83 85       	ldd	r24, Z+11	; 0x0b
    81e0:	90 e0       	ldi	r25, 0x00	; 0
    81e2:	a0 e0       	ldi	r26, 0x00	; 0
    81e4:	b0 e0       	ldi	r27, 0x00	; 0
    81e6:	58 2f       	mov	r21, r24
    81e8:	44 27       	eor	r20, r20
    81ea:	33 27       	eor	r19, r19
    81ec:	22 27       	eor	r18, r18
    81ee:	82 85       	ldd	r24, Z+10	; 0x0a
    81f0:	90 e0       	ldi	r25, 0x00	; 0
    81f2:	a0 e0       	ldi	r26, 0x00	; 0
    81f4:	b0 e0       	ldi	r27, 0x00	; 0
    81f6:	dc 01       	movw	r26, r24
    81f8:	99 27       	eor	r25, r25
    81fa:	88 27       	eor	r24, r24
    81fc:	28 2b       	or	r18, r24
    81fe:	39 2b       	or	r19, r25
    8200:	4a 2b       	or	r20, r26
    8202:	5b 2b       	or	r21, r27
    8204:	80 85       	ldd	r24, Z+8	; 0x08
    8206:	90 e0       	ldi	r25, 0x00	; 0
    8208:	a0 e0       	ldi	r26, 0x00	; 0
    820a:	b0 e0       	ldi	r27, 0x00	; 0
    820c:	28 2b       	or	r18, r24
    820e:	39 2b       	or	r19, r25
    8210:	4a 2b       	or	r20, r26
    8212:	5b 2b       	or	r21, r27
    8214:	91 85       	ldd	r25, Z+9	; 0x09
    8216:	80 e0       	ldi	r24, 0x00	; 0
    8218:	a0 e0       	ldi	r26, 0x00	; 0
    821a:	b0 e0       	ldi	r27, 0x00	; 0
    821c:	28 2b       	or	r18, r24
    821e:	39 2b       	or	r19, r25
    8220:	4a 2b       	or	r20, r26
    8222:	5b 2b       	or	r21, r27
    8224:	2b a7       	std	Y+43, r18	; 0x2b
    8226:	3c a7       	std	Y+44, r19	; 0x2c
    8228:	4d a7       	std	Y+45, r20	; 0x2d
    822a:	5e a7       	std	Y+46, r21	; 0x2e
			fmt = check_fs(fs, bsect);		/* Check the partition */
    822c:	c8 01       	movw	r24, r16
    822e:	ba 01       	movw	r22, r20
    8230:	a9 01       	movw	r20, r18
    8232:	0e 94 0e 40 	call	0x801c	; 0x801c <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    8236:	83 30       	cpi	r24, 0x03	; 3
    8238:	19 f4       	brne	.+6      	; 0x8240 <f_open+0x11e>
    823a:	01 e0       	ldi	r16, 0x01	; 1
    823c:	10 e0       	ldi	r17, 0x00	; 0
    823e:	74 c4       	rjmp	.+2280   	; 0x8b28 <f_open+0xa06>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    8240:	88 23       	and	r24, r24
    8242:	09 f0       	breq	.+2      	; 0x8246 <f_open+0x124>
    8244:	fc c1       	rjmp	.+1016   	; 0x863e <f_open+0x51c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    8246:	d8 01       	movw	r26, r16
    8248:	9e 96       	adiw	r26, 0x2e	; 46
    824a:	9c 91       	ld	r25, X
    824c:	9e 97       	sbiw	r26, 0x2e	; 46
    824e:	80 e0       	ldi	r24, 0x00	; 0
    8250:	9d 96       	adiw	r26, 0x2d	; 45
    8252:	2c 91       	ld	r18, X
    8254:	30 e0       	ldi	r19, 0x00	; 0
    8256:	82 2b       	or	r24, r18
    8258:	93 2b       	or	r25, r19
    825a:	80 50       	subi	r24, 0x00	; 0
    825c:	92 40       	sbci	r25, 0x02	; 2
    825e:	09 f0       	breq	.+2      	; 0x8262 <f_open+0x140>
    8260:	ee c1       	rjmp	.+988    	; 0x863e <f_open+0x51c>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    8262:	f8 01       	movw	r30, r16
    8264:	91 ad       	ldd	r25, Z+57	; 0x39
    8266:	80 e0       	ldi	r24, 0x00	; 0
    8268:	20 ad       	ldd	r18, Z+56	; 0x38
    826a:	30 e0       	ldi	r19, 0x00	; 0
    826c:	82 2b       	or	r24, r18
    826e:	93 2b       	or	r25, r19
    8270:	3c 01       	movw	r6, r24
    8272:	88 24       	eor	r8, r8
    8274:	99 24       	eor	r9, r9
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    8276:	61 14       	cp	r6, r1
    8278:	71 04       	cpc	r7, r1
    827a:	81 04       	cpc	r8, r1
    827c:	91 04       	cpc	r9, r1
    827e:	79 f5       	brne	.+94     	; 0x82de <f_open+0x1bc>
    8280:	07 5b       	subi	r16, 0xB7	; 183
    8282:	1f 4f       	sbci	r17, 0xFF	; 255
    8284:	d8 01       	movw	r26, r16
    8286:	8c 91       	ld	r24, X
    8288:	90 e0       	ldi	r25, 0x00	; 0
    828a:	a0 e0       	ldi	r26, 0x00	; 0
    828c:	b0 e0       	ldi	r27, 0x00	; 0
    828e:	98 2e       	mov	r9, r24
    8290:	88 24       	eor	r8, r8
    8292:	77 24       	eor	r7, r7
    8294:	66 24       	eor	r6, r6
    8296:	f8 01       	movw	r30, r16
    8298:	82 91       	ld	r24, -Z
    829a:	8f 01       	movw	r16, r30
    829c:	90 e0       	ldi	r25, 0x00	; 0
    829e:	a0 e0       	ldi	r26, 0x00	; 0
    82a0:	b0 e0       	ldi	r27, 0x00	; 0
    82a2:	dc 01       	movw	r26, r24
    82a4:	99 27       	eor	r25, r25
    82a6:	88 27       	eor	r24, r24
    82a8:	68 2a       	or	r6, r24
    82aa:	79 2a       	or	r7, r25
    82ac:	8a 2a       	or	r8, r26
    82ae:	9b 2a       	or	r9, r27
    82b0:	02 50       	subi	r16, 0x02	; 2
    82b2:	10 40       	sbci	r17, 0x00	; 0
    82b4:	d8 01       	movw	r26, r16
    82b6:	8d 91       	ld	r24, X+
    82b8:	8d 01       	movw	r16, r26
    82ba:	90 e0       	ldi	r25, 0x00	; 0
    82bc:	a0 e0       	ldi	r26, 0x00	; 0
    82be:	b0 e0       	ldi	r27, 0x00	; 0
    82c0:	68 2a       	or	r6, r24
    82c2:	79 2a       	or	r7, r25
    82c4:	8a 2a       	or	r8, r26
    82c6:	9b 2a       	or	r9, r27
    82c8:	f8 01       	movw	r30, r16
    82ca:	90 81       	ld	r25, Z
    82cc:	07 54       	subi	r16, 0x47	; 71
    82ce:	10 40       	sbci	r17, 0x00	; 0
    82d0:	80 e0       	ldi	r24, 0x00	; 0
    82d2:	a0 e0       	ldi	r26, 0x00	; 0
    82d4:	b0 e0       	ldi	r27, 0x00	; 0
    82d6:	68 2a       	or	r6, r24
    82d8:	79 2a       	or	r7, r25
    82da:	8a 2a       	or	r8, r26
    82dc:	9b 2a       	or	r9, r27
	fs->fsize = fasize;
    82de:	d8 01       	movw	r26, r16
    82e0:	1e 96       	adiw	r26, 0x0e	; 14
    82e2:	6d 92       	st	X+, r6
    82e4:	7d 92       	st	X+, r7
    82e6:	8d 92       	st	X+, r8
    82e8:	9c 92       	st	X, r9
    82ea:	51 97       	sbiw	r26, 0x11	; 17

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    82ec:	d2 96       	adiw	r26, 0x32	; 50
    82ee:	4c 91       	ld	r20, X
    82f0:	d2 97       	sbiw	r26, 0x32	; 50
    82f2:	13 96       	adiw	r26, 0x03	; 3
    82f4:	4c 93       	st	X, r20
    82f6:	13 97       	sbiw	r26, 0x03	; 3
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    82f8:	84 2f       	mov	r24, r20
    82fa:	81 50       	subi	r24, 0x01	; 1
    82fc:	82 30       	cpi	r24, 0x02	; 2
    82fe:	08 f0       	brcs	.+2      	; 0x8302 <f_open+0x1e0>
    8300:	9e c1       	rjmp	.+828    	; 0x863e <f_open+0x51c>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    8302:	9f 96       	adiw	r26, 0x2f	; 47
    8304:	2c 91       	ld	r18, X
    8306:	9f 97       	sbiw	r26, 0x2f	; 47
    8308:	12 96       	adiw	r26, 0x02	; 2
    830a:	2c 93       	st	X, r18
    830c:	12 97       	sbiw	r26, 0x02	; 2
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    830e:	22 23       	and	r18, r18
    8310:	09 f4       	brne	.+2      	; 0x8314 <f_open+0x1f2>
    8312:	95 c1       	rjmp	.+810    	; 0x863e <f_open+0x51c>
    8314:	30 e0       	ldi	r19, 0x00	; 0
    8316:	c9 01       	movw	r24, r18
    8318:	01 97       	sbiw	r24, 0x01	; 1
    831a:	82 23       	and	r24, r18
    831c:	93 23       	and	r25, r19
    831e:	89 2b       	or	r24, r25
    8320:	09 f0       	breq	.+2      	; 0x8324 <f_open+0x202>
    8322:	8d c1       	rjmp	.+794    	; 0x863e <f_open+0x51c>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    8324:	d4 96       	adiw	r26, 0x34	; 52
    8326:	9c 91       	ld	r25, X
    8328:	d4 97       	sbiw	r26, 0x34	; 52
    832a:	80 e0       	ldi	r24, 0x00	; 0
    832c:	d3 96       	adiw	r26, 0x33	; 51
    832e:	2c 91       	ld	r18, X
    8330:	d3 97       	sbiw	r26, 0x33	; 51
    8332:	42 2e       	mov	r4, r18
    8334:	55 24       	eor	r5, r5
    8336:	48 2a       	or	r4, r24
    8338:	59 2a       	or	r5, r25
    833a:	18 96       	adiw	r26, 0x08	; 8
    833c:	4d 92       	st	X+, r4
    833e:	5c 92       	st	X, r5
    8340:	19 97       	sbiw	r26, 0x09	; 9
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    8342:	c2 01       	movw	r24, r4
    8344:	8f 70       	andi	r24, 0x0F	; 15
    8346:	90 70       	andi	r25, 0x00	; 0
    8348:	89 2b       	or	r24, r25
    834a:	09 f0       	breq	.+2      	; 0x834e <f_open+0x22c>
    834c:	78 c1       	rjmp	.+752    	; 0x863e <f_open+0x51c>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    834e:	d6 96       	adiw	r26, 0x36	; 54
    8350:	9c 91       	ld	r25, X
    8352:	d6 97       	sbiw	r26, 0x36	; 54
    8354:	80 e0       	ldi	r24, 0x00	; 0
    8356:	d5 96       	adiw	r26, 0x35	; 53
    8358:	2c 91       	ld	r18, X
    835a:	30 e0       	ldi	r19, 0x00	; 0
    835c:	82 2b       	or	r24, r18
    835e:	93 2b       	or	r25, r19
    8360:	6c 01       	movw	r12, r24
    8362:	ee 24       	eor	r14, r14
    8364:	ff 24       	eor	r15, r15
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    8366:	c1 14       	cp	r12, r1
    8368:	d1 04       	cpc	r13, r1
    836a:	e1 04       	cpc	r14, r1
    836c:	f1 04       	cpc	r15, r1
    836e:	71 f5       	brne	.+92     	; 0x83cc <f_open+0x2aa>
    8370:	0b 5b       	subi	r16, 0xBB	; 187
    8372:	1f 4f       	sbci	r17, 0xFF	; 255
    8374:	f8 01       	movw	r30, r16
    8376:	80 81       	ld	r24, Z
    8378:	90 e0       	ldi	r25, 0x00	; 0
    837a:	a0 e0       	ldi	r26, 0x00	; 0
    837c:	b0 e0       	ldi	r27, 0x00	; 0
    837e:	f8 2e       	mov	r15, r24
    8380:	ee 24       	eor	r14, r14
    8382:	dd 24       	eor	r13, r13
    8384:	cc 24       	eor	r12, r12
    8386:	d8 01       	movw	r26, r16
    8388:	8e 91       	ld	r24, -X
    838a:	8d 01       	movw	r16, r26
    838c:	90 e0       	ldi	r25, 0x00	; 0
    838e:	a0 e0       	ldi	r26, 0x00	; 0
    8390:	b0 e0       	ldi	r27, 0x00	; 0
    8392:	dc 01       	movw	r26, r24
    8394:	99 27       	eor	r25, r25
    8396:	88 27       	eor	r24, r24
    8398:	c8 2a       	or	r12, r24
    839a:	d9 2a       	or	r13, r25
    839c:	ea 2a       	or	r14, r26
    839e:	fb 2a       	or	r15, r27
    83a0:	02 50       	subi	r16, 0x02	; 2
    83a2:	10 40       	sbci	r17, 0x00	; 0
    83a4:	f8 01       	movw	r30, r16
    83a6:	81 91       	ld	r24, Z+
    83a8:	8f 01       	movw	r16, r30
    83aa:	90 e0       	ldi	r25, 0x00	; 0
    83ac:	a0 e0       	ldi	r26, 0x00	; 0
    83ae:	b0 e0       	ldi	r27, 0x00	; 0
    83b0:	c8 2a       	or	r12, r24
    83b2:	d9 2a       	or	r13, r25
    83b4:	ea 2a       	or	r14, r26
    83b6:	fb 2a       	or	r15, r27
    83b8:	90 81       	ld	r25, Z
    83ba:	03 54       	subi	r16, 0x43	; 67
    83bc:	10 40       	sbci	r17, 0x00	; 0
    83be:	80 e0       	ldi	r24, 0x00	; 0
    83c0:	a0 e0       	ldi	r26, 0x00	; 0
    83c2:	b0 e0       	ldi	r27, 0x00	; 0
    83c4:	c8 2a       	or	r12, r24
    83c6:	d9 2a       	or	r13, r25
    83c8:	ea 2a       	or	r14, r26
    83ca:	fb 2a       	or	r15, r27

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    83cc:	d8 01       	movw	r26, r16
    83ce:	d1 96       	adiw	r26, 0x31	; 49
    83d0:	9c 91       	ld	r25, X
    83d2:	d1 97       	sbiw	r26, 0x31	; 49
    83d4:	80 e0       	ldi	r24, 0x00	; 0
    83d6:	d0 96       	adiw	r26, 0x30	; 48
    83d8:	2c 91       	ld	r18, X
    83da:	a2 2e       	mov	r10, r18
    83dc:	bb 24       	eor	r11, r11
    83de:	a8 2a       	or	r10, r24
    83e0:	b9 2a       	or	r11, r25
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    83e2:	a1 14       	cp	r10, r1
    83e4:	b1 04       	cpc	r11, r1
    83e6:	09 f4       	brne	.+2      	; 0x83ea <f_open+0x2c8>
    83e8:	2a c1       	rjmp	.+596    	; 0x863e <f_open+0x51c>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    83ea:	24 2f       	mov	r18, r20
    83ec:	30 e0       	ldi	r19, 0x00	; 0
    83ee:	40 e0       	ldi	r20, 0x00	; 0
    83f0:	50 e0       	ldi	r21, 0x00	; 0
    83f2:	c4 01       	movw	r24, r8
    83f4:	b3 01       	movw	r22, r6
    83f6:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    83fa:	6b a3       	std	Y+35, r22	; 0x23
    83fc:	7c a3       	std	Y+36, r23	; 0x24
    83fe:	8d a3       	std	Y+37, r24	; 0x25
    8400:	9e a3       	std	Y+38, r25	; 0x26

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    8402:	95 01       	movw	r18, r10
    8404:	40 e0       	ldi	r20, 0x00	; 0
    8406:	50 e0       	ldi	r21, 0x00	; 0
    8408:	2f a3       	std	Y+39, r18	; 0x27
    840a:	38 a7       	std	Y+40, r19	; 0x28
    840c:	49 a7       	std	Y+41, r20	; 0x29
    840e:	5a a7       	std	Y+42, r21	; 0x2a
    8410:	a4 e0       	ldi	r26, 0x04	; 4
    8412:	56 94       	lsr	r5
    8414:	47 94       	ror	r4
    8416:	aa 95       	dec	r26
    8418:	e1 f7       	brne	.-8      	; 0x8412 <f_open+0x2f0>
    841a:	42 01       	movw	r8, r4
    841c:	aa 24       	eor	r10, r10
    841e:	bb 24       	eor	r11, r11
    8420:	82 0e       	add	r8, r18
    8422:	93 1e       	adc	r9, r19
    8424:	a4 1e       	adc	r10, r20
    8426:	b5 1e       	adc	r11, r21
    8428:	86 0e       	add	r8, r22
    842a:	97 1e       	adc	r9, r23
    842c:	a8 1e       	adc	r10, r24
    842e:	b9 1e       	adc	r11, r25
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    8430:	c8 14       	cp	r12, r8
    8432:	d9 04       	cpc	r13, r9
    8434:	ea 04       	cpc	r14, r10
    8436:	fb 04       	cpc	r15, r11
    8438:	08 f4       	brcc	.+2      	; 0x843c <f_open+0x31a>
    843a:	01 c1       	rjmp	.+514    	; 0x863e <f_open+0x51c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    843c:	c8 18       	sub	r12, r8
    843e:	d9 08       	sbc	r13, r9
    8440:	ea 08       	sbc	r14, r10
    8442:	fb 08       	sbc	r15, r11
    8444:	d8 01       	movw	r26, r16
    8446:	12 96       	adiw	r26, 0x02	; 2
    8448:	2c 91       	ld	r18, X
    844a:	30 e0       	ldi	r19, 0x00	; 0
    844c:	40 e0       	ldi	r20, 0x00	; 0
    844e:	50 e0       	ldi	r21, 0x00	; 0
    8450:	c7 01       	movw	r24, r14
    8452:	b6 01       	movw	r22, r12
    8454:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    8458:	c9 01       	movw	r24, r18
    845a:	da 01       	movw	r26, r20
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    845c:	00 97       	sbiw	r24, 0x00	; 0
    845e:	a1 05       	cpc	r26, r1
    8460:	b1 05       	cpc	r27, r1
    8462:	09 f4       	brne	.+2      	; 0x8466 <f_open+0x344>
    8464:	ec c0       	rjmp	.+472    	; 0x863e <f_open+0x51c>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    8466:	86 3f       	cpi	r24, 0xF6	; 246
    8468:	ef e0       	ldi	r30, 0x0F	; 15
    846a:	9e 07       	cpc	r25, r30
    846c:	e0 e0       	ldi	r30, 0x00	; 0
    846e:	ae 07       	cpc	r26, r30
    8470:	e0 e0       	ldi	r30, 0x00	; 0
    8472:	be 07       	cpc	r27, r30
    8474:	10 f4       	brcc	.+4      	; 0x847a <f_open+0x358>
    8476:	61 e0       	ldi	r22, 0x01	; 1
    8478:	0b c0       	rjmp	.+22     	; 0x8490 <f_open+0x36e>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    847a:	86 3f       	cpi	r24, 0xF6	; 246
    847c:	ff ef       	ldi	r31, 0xFF	; 255
    847e:	9f 07       	cpc	r25, r31
    8480:	f0 e0       	ldi	r31, 0x00	; 0
    8482:	af 07       	cpc	r26, r31
    8484:	f0 e0       	ldi	r31, 0x00	; 0
    8486:	bf 07       	cpc	r27, r31
    8488:	10 f0       	brcs	.+4      	; 0x848e <f_open+0x36c>
    848a:	63 e0       	ldi	r22, 0x03	; 3
    848c:	01 c0       	rjmp	.+2      	; 0x8490 <f_open+0x36e>
    848e:	62 e0       	ldi	r22, 0x02	; 2

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    8490:	f2 e0       	ldi	r31, 0x02	; 2
    8492:	cf 2e       	mov	r12, r31
    8494:	d1 2c       	mov	r13, r1
    8496:	e1 2c       	mov	r14, r1
    8498:	f1 2c       	mov	r15, r1
    849a:	c8 0e       	add	r12, r24
    849c:	d9 1e       	adc	r13, r25
    849e:	ea 1e       	adc	r14, r26
    84a0:	fb 1e       	adc	r15, r27
    84a2:	d8 01       	movw	r26, r16
    84a4:	1a 96       	adiw	r26, 0x0a	; 10
    84a6:	cd 92       	st	X+, r12
    84a8:	dd 92       	st	X+, r13
    84aa:	ed 92       	st	X+, r14
    84ac:	fc 92       	st	X, r15
    84ae:	1d 97       	sbiw	r26, 0x0d	; 13
	fs->database = bsect + sysect;						/* Data start sector */
    84b0:	2b a5       	ldd	r18, Y+43	; 0x2b
    84b2:	3c a5       	ldd	r19, Y+44	; 0x2c
    84b4:	4d a5       	ldd	r20, Y+45	; 0x2d
    84b6:	5e a5       	ldd	r21, Y+46	; 0x2e
    84b8:	82 0e       	add	r8, r18
    84ba:	93 1e       	adc	r9, r19
    84bc:	a4 1e       	adc	r10, r20
    84be:	b5 1e       	adc	r11, r21
    84c0:	5a 96       	adiw	r26, 0x1a	; 26
    84c2:	8d 92       	st	X+, r8
    84c4:	9d 92       	st	X+, r9
    84c6:	ad 92       	st	X+, r10
    84c8:	bc 92       	st	X, r11
    84ca:	5d 97       	sbiw	r26, 0x1d	; 29
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    84cc:	8f a1       	ldd	r24, Y+39	; 0x27
    84ce:	98 a5       	ldd	r25, Y+40	; 0x28
    84d0:	a9 a5       	ldd	r26, Y+41	; 0x29
    84d2:	ba a5       	ldd	r27, Y+42	; 0x2a
    84d4:	28 0f       	add	r18, r24
    84d6:	39 1f       	adc	r19, r25
    84d8:	4a 1f       	adc	r20, r26
    84da:	5b 1f       	adc	r21, r27
    84dc:	d8 01       	movw	r26, r16
    84de:	52 96       	adiw	r26, 0x12	; 18
    84e0:	2d 93       	st	X+, r18
    84e2:	3d 93       	st	X+, r19
    84e4:	4d 93       	st	X+, r20
    84e6:	5c 93       	st	X, r21
    84e8:	55 97       	sbiw	r26, 0x15	; 21
    84ea:	18 96       	adiw	r26, 0x08	; 8
    84ec:	8d 91       	ld	r24, X+
    84ee:	9c 91       	ld	r25, X
    84f0:	19 97       	sbiw	r26, 0x09	; 9
	if (fmt == FS_FAT32) {
    84f2:	63 30       	cpi	r22, 0x03	; 3
    84f4:	09 f0       	breq	.+2      	; 0x84f8 <f_open+0x3d6>
    84f6:	42 c0       	rjmp	.+132    	; 0x857c <f_open+0x45a>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    84f8:	89 2b       	or	r24, r25
    84fa:	09 f0       	breq	.+2      	; 0x84fe <f_open+0x3dc>
    84fc:	a0 c0       	rjmp	.+320    	; 0x863e <f_open+0x51c>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    84fe:	0f 5a       	subi	r16, 0xAF	; 175
    8500:	1f 4f       	sbci	r17, 0xFF	; 255
    8502:	f8 01       	movw	r30, r16
    8504:	20 81       	ld	r18, Z
    8506:	30 e0       	ldi	r19, 0x00	; 0
    8508:	40 e0       	ldi	r20, 0x00	; 0
    850a:	50 e0       	ldi	r21, 0x00	; 0
    850c:	52 2f       	mov	r21, r18
    850e:	44 27       	eor	r20, r20
    8510:	33 27       	eor	r19, r19
    8512:	22 27       	eor	r18, r18
    8514:	d8 01       	movw	r26, r16
    8516:	8e 91       	ld	r24, -X
    8518:	8d 01       	movw	r16, r26
    851a:	90 e0       	ldi	r25, 0x00	; 0
    851c:	a0 e0       	ldi	r26, 0x00	; 0
    851e:	b0 e0       	ldi	r27, 0x00	; 0
    8520:	dc 01       	movw	r26, r24
    8522:	99 27       	eor	r25, r25
    8524:	88 27       	eor	r24, r24
    8526:	28 2b       	or	r18, r24
    8528:	39 2b       	or	r19, r25
    852a:	4a 2b       	or	r20, r26
    852c:	5b 2b       	or	r21, r27
    852e:	02 50       	subi	r16, 0x02	; 2
    8530:	10 40       	sbci	r17, 0x00	; 0
    8532:	f8 01       	movw	r30, r16
    8534:	81 91       	ld	r24, Z+
    8536:	8f 01       	movw	r16, r30
    8538:	90 e0       	ldi	r25, 0x00	; 0
    853a:	a0 e0       	ldi	r26, 0x00	; 0
    853c:	b0 e0       	ldi	r27, 0x00	; 0
    853e:	28 2b       	or	r18, r24
    8540:	39 2b       	or	r19, r25
    8542:	4a 2b       	or	r20, r26
    8544:	5b 2b       	or	r21, r27
    8546:	90 81       	ld	r25, Z
    8548:	0f 54       	subi	r16, 0x4F	; 79
    854a:	10 40       	sbci	r17, 0x00	; 0
    854c:	80 e0       	ldi	r24, 0x00	; 0
    854e:	a0 e0       	ldi	r26, 0x00	; 0
    8550:	b0 e0       	ldi	r27, 0x00	; 0
    8552:	28 2b       	or	r18, r24
    8554:	39 2b       	or	r19, r25
    8556:	4a 2b       	or	r20, r26
    8558:	5b 2b       	or	r21, r27
    855a:	d8 01       	movw	r26, r16
    855c:	56 96       	adiw	r26, 0x16	; 22
    855e:	2d 93       	st	X+, r18
    8560:	3d 93       	st	X+, r19
    8562:	4d 93       	st	X+, r20
    8564:	5c 93       	st	X, r21
    8566:	59 97       	sbiw	r26, 0x19	; 25
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    8568:	a7 01       	movw	r20, r14
    856a:	96 01       	movw	r18, r12
    856c:	f2 e0       	ldi	r31, 0x02	; 2
    856e:	22 0f       	add	r18, r18
    8570:	33 1f       	adc	r19, r19
    8572:	44 1f       	adc	r20, r20
    8574:	55 1f       	adc	r21, r21
    8576:	fa 95       	dec	r31
    8578:	d1 f7       	brne	.-12     	; 0x856e <f_open+0x44c>
    857a:	33 c0       	rjmp	.+102    	; 0x85e2 <f_open+0x4c0>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    857c:	89 2b       	or	r24, r25
    857e:	09 f4       	brne	.+2      	; 0x8582 <f_open+0x460>
    8580:	5e c0       	rjmp	.+188    	; 0x863e <f_open+0x51c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    8582:	8b a1       	ldd	r24, Y+35	; 0x23
    8584:	9c a1       	ldd	r25, Y+36	; 0x24
    8586:	ad a1       	ldd	r26, Y+37	; 0x25
    8588:	be a1       	ldd	r27, Y+38	; 0x26
    858a:	28 0f       	add	r18, r24
    858c:	39 1f       	adc	r19, r25
    858e:	4a 1f       	adc	r20, r26
    8590:	5b 1f       	adc	r21, r27
    8592:	d8 01       	movw	r26, r16
    8594:	56 96       	adiw	r26, 0x16	; 22
    8596:	2d 93       	st	X+, r18
    8598:	3d 93       	st	X+, r19
    859a:	4d 93       	st	X+, r20
    859c:	5c 93       	st	X, r21
    859e:	59 97       	sbiw	r26, 0x19	; 25
    85a0:	d7 01       	movw	r26, r14
    85a2:	c6 01       	movw	r24, r12
    85a4:	88 0f       	add	r24, r24
    85a6:	99 1f       	adc	r25, r25
    85a8:	aa 1f       	adc	r26, r26
    85aa:	bb 1f       	adc	r27, r27
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    85ac:	62 30       	cpi	r22, 0x02	; 2
    85ae:	19 f4       	brne	.+6      	; 0x85b6 <f_open+0x494>
    85b0:	9c 01       	movw	r18, r24
    85b2:	ad 01       	movw	r20, r26
    85b4:	16 c0       	rjmp	.+44     	; 0x85e2 <f_open+0x4c0>
    85b6:	9c 01       	movw	r18, r24
    85b8:	ad 01       	movw	r20, r26
    85ba:	2c 0d       	add	r18, r12
    85bc:	3d 1d       	adc	r19, r13
    85be:	4e 1d       	adc	r20, r14
    85c0:	5f 1d       	adc	r21, r15
    85c2:	56 95       	lsr	r21
    85c4:	47 95       	ror	r20
    85c6:	37 95       	ror	r19
    85c8:	27 95       	ror	r18
    85ca:	81 e0       	ldi	r24, 0x01	; 1
    85cc:	90 e0       	ldi	r25, 0x00	; 0
    85ce:	a0 e0       	ldi	r26, 0x00	; 0
    85d0:	b0 e0       	ldi	r27, 0x00	; 0
    85d2:	c8 22       	and	r12, r24
    85d4:	d9 22       	and	r13, r25
    85d6:	ea 22       	and	r14, r26
    85d8:	fb 22       	and	r15, r27
    85da:	2c 0d       	add	r18, r12
    85dc:	3d 1d       	adc	r19, r13
    85de:	4e 1d       	adc	r20, r14
    85e0:	5f 1d       	adc	r21, r15
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    85e2:	21 50       	subi	r18, 0x01	; 1
    85e4:	3e 4f       	sbci	r19, 0xFE	; 254
    85e6:	4f 4f       	sbci	r20, 0xFF	; 255
    85e8:	5f 4f       	sbci	r21, 0xFF	; 255
    85ea:	99 e0       	ldi	r25, 0x09	; 9
    85ec:	56 95       	lsr	r21
    85ee:	47 95       	ror	r20
    85f0:	37 95       	ror	r19
    85f2:	27 95       	ror	r18
    85f4:	9a 95       	dec	r25
    85f6:	d1 f7       	brne	.-12     	; 0x85ec <f_open+0x4ca>
    85f8:	f8 01       	movw	r30, r16
    85fa:	86 85       	ldd	r24, Z+14	; 0x0e
    85fc:	97 85       	ldd	r25, Z+15	; 0x0f
    85fe:	a0 89       	ldd	r26, Z+16	; 0x10
    8600:	b1 89       	ldd	r27, Z+17	; 0x11
    8602:	82 17       	cp	r24, r18
    8604:	93 07       	cpc	r25, r19
    8606:	a4 07       	cpc	r26, r20
    8608:	b5 07       	cpc	r27, r21
    860a:	c8 f0       	brcs	.+50     	; 0x863e <f_open+0x51c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    860c:	60 83       	st	Z, r22
	fs->id = ++Fsid;		/* File system mount ID */
    860e:	80 91 90 24 	lds	r24, 0x2490
    8612:	90 91 91 24 	lds	r25, 0x2491
    8616:	01 96       	adiw	r24, 0x01	; 1
    8618:	80 93 90 24 	sts	0x2490, r24
    861c:	90 93 91 24 	sts	0x2491, r25
    8620:	86 83       	std	Z+6, r24	; 0x06
    8622:	97 83       	std	Z+7, r25	; 0x07
	fs->winsect = 0;		/* Invalidate sector cache */
    8624:	d8 01       	movw	r26, r16
    8626:	5e 96       	adiw	r26, 0x1e	; 30
    8628:	1d 92       	st	X+, r1
    862a:	1d 92       	st	X+, r1
    862c:	1d 92       	st	X+, r1
    862e:	1c 92       	st	X, r1
    8630:	91 97       	sbiw	r26, 0x21	; 33
	fs->wflag = 0;
    8632:	14 96       	adiw	r26, 0x04	; 4
    8634:	1c 92       	st	X, r1
    8636:	80 c2       	rjmp	.+1280   	; 0x8b38 <f_open+0xa16>
    8638:	0b e0       	ldi	r16, 0x0B	; 11
    863a:	10 e0       	ldi	r17, 0x00	; 0
    863c:	75 c2       	rjmp	.+1258   	; 0x8b28 <f_open+0xa06>
    863e:	0d e0       	ldi	r16, 0x0D	; 13
    8640:	10 e0       	ldi	r17, 0x00	; 0
    8642:	72 c2       	rjmp	.+1252   	; 0x8b28 <f_open+0xa06>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    8644:	8c 35       	cpi	r24, 0x5C	; 92
    8646:	19 f4       	brne	.+6      	; 0x864e <f_open+0x52c>
		path++;
    8648:	08 94       	sec
    864a:	21 1c       	adc	r2, r1
    864c:	31 1c       	adc	r3, r1
	dj->sclust = 0;						/* Start from the root dir */
    864e:	1b 8a       	std	Y+19, r1	; 0x13
    8650:	1c 8a       	std	Y+20, r1	; 0x14
    8652:	1d 8a       	std	Y+21, r1	; 0x15
    8654:	1e 8a       	std	Y+22, r1	; 0x16
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    8656:	f1 01       	movw	r30, r2
    8658:	80 81       	ld	r24, Z
    865a:	80 32       	cpi	r24, 0x20	; 32
    865c:	68 f4       	brcc	.+26     	; 0x8678 <f_open+0x556>
		res = dir_sdi(dj, 0);
    865e:	ce 01       	movw	r24, r28
    8660:	0d 96       	adiw	r24, 0x0d	; 13
    8662:	60 e0       	ldi	r22, 0x00	; 0
    8664:	70 e0       	ldi	r23, 0x00	; 0
    8666:	0e 94 ad 3d 	call	0x7b5a	; 0x7b5a <dir_sdi>
    866a:	8c 01       	movw	r16, r24
		dj->dir = 0;
    866c:	1f 8e       	std	Y+31, r1	; 0x1f
    866e:	18 a2       	std	Y+32, r1	; 0x20
    8670:	e4 c1       	rjmp	.+968    	; 0x8a3a <f_open+0x918>
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    8672:	08 94       	sec
    8674:	21 1c       	adc	r2, r1
    8676:	31 1c       	adc	r3, r1
    8678:	d1 01       	movw	r26, r2
    867a:	8c 91       	ld	r24, X
    867c:	8f 32       	cpi	r24, 0x2F	; 47
    867e:	c9 f3       	breq	.-14     	; 0x8672 <f_open+0x550>
    8680:	8c 35       	cpi	r24, 0x5C	; 92
    8682:	b9 f3       	breq	.-18     	; 0x8672 <f_open+0x550>
	sfn = dj->fn;
    8684:	a9 a1       	ldd	r26, Y+33	; 0x21
    8686:	ba a1       	ldd	r27, Y+34	; 0x22
    8688:	fd 01       	movw	r30, r26
    868a:	8b e0       	ldi	r24, 0x0B	; 11
    868c:	90 e0       	ldi	r25, 0x00	; 0
    868e:	02 c0       	rjmp	.+4      	; 0x8694 <f_open+0x572>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    8690:	20 e2       	ldi	r18, 0x20	; 32
    8692:	21 93       	st	Z+, r18
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    8694:	01 97       	sbiw	r24, 0x01	; 1
    8696:	3f ef       	ldi	r19, 0xFF	; 255
    8698:	8f 3f       	cpi	r24, 0xFF	; 255
    869a:	93 07       	cpc	r25, r19
    869c:	c9 f7       	brne	.-14     	; 0x8690 <f_open+0x56e>
    869e:	40 e0       	ldi	r20, 0x00	; 0
    86a0:	50 e0       	ldi	r21, 0x00	; 0
    86a2:	66 24       	eor	r6, r6
    86a4:	77 24       	eor	r7, r7
    86a6:	88 e0       	ldi	r24, 0x08	; 8
    86a8:	e8 2e       	mov	r14, r24
    86aa:	f1 2c       	mov	r15, r1
    86ac:	10 e0       	ldi	r17, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    86ae:	f1 01       	movw	r30, r2
    86b0:	e6 0d       	add	r30, r6
    86b2:	f7 1d       	adc	r31, r7
    86b4:	20 81       	ld	r18, Z
    86b6:	08 94       	sec
    86b8:	61 1c       	adc	r6, r1
    86ba:	71 1c       	adc	r7, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    86bc:	21 32       	cpi	r18, 0x21	; 33
    86be:	08 f4       	brcc	.+2      	; 0x86c2 <f_open+0x5a0>
    86c0:	68 c0       	rjmp	.+208    	; 0x8792 <f_open+0x670>
    86c2:	2f 32       	cpi	r18, 0x2F	; 47
    86c4:	09 f4       	brne	.+2      	; 0x86c8 <f_open+0x5a6>
    86c6:	42 c2       	rjmp	.+1156   	; 0x8b4c <f_open+0xa2a>
    86c8:	2c 35       	cpi	r18, 0x5C	; 92
    86ca:	09 f4       	brne	.+2      	; 0x86ce <f_open+0x5ac>
    86cc:	3f c2       	rjmp	.+1150   	; 0x8b4c <f_open+0xa2a>
		if (c == '.' || i >= ni) {
    86ce:	2e 32       	cpi	r18, 0x2E	; 46
    86d0:	19 f0       	breq	.+6      	; 0x86d8 <f_open+0x5b6>
    86d2:	4e 15       	cp	r20, r14
    86d4:	5f 05       	cpc	r21, r15
    86d6:	80 f0       	brcs	.+32     	; 0x86f8 <f_open+0x5d6>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    86d8:	48 e0       	ldi	r20, 0x08	; 8
    86da:	e4 16       	cp	r14, r20
    86dc:	f1 04       	cpc	r15, r1
    86de:	09 f0       	breq	.+2      	; 0x86e2 <f_open+0x5c0>
    86e0:	a5 c1       	rjmp	.+842    	; 0x8a2c <f_open+0x90a>
    86e2:	2e 32       	cpi	r18, 0x2E	; 46
    86e4:	09 f0       	breq	.+2      	; 0x86e8 <f_open+0x5c6>
    86e6:	a2 c1       	rjmp	.+836    	; 0x8a2c <f_open+0x90a>
			i = 8; ni = 11;
			b <<= 2; continue;
    86e8:	11 0f       	add	r17, r17
    86ea:	11 0f       	add	r17, r17
    86ec:	48 e0       	ldi	r20, 0x08	; 8
    86ee:	50 e0       	ldi	r21, 0x00	; 0
    86f0:	0b e0       	ldi	r16, 0x0B	; 11
    86f2:	e0 2e       	mov	r14, r16
    86f4:	f1 2c       	mov	r15, r1
    86f6:	db cf       	rjmp	.-74     	; 0x86ae <f_open+0x58c>
		}
		if (c >= 0x80) {				/* Extended char? */
    86f8:	27 fd       	sbrc	r18, 7
			b |= 3;						/* Eliminate NT flag */
    86fa:	13 60       	ori	r17, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    86fc:	82 2f       	mov	r24, r18
    86fe:	81 58       	subi	r24, 0x81	; 129
    8700:	8f 31       	cpi	r24, 0x1F	; 31
    8702:	18 f0       	brcs	.+6      	; 0x870a <f_open+0x5e8>
    8704:	8f 55       	subi	r24, 0x5F	; 95
    8706:	8d 31       	cpi	r24, 0x1D	; 29
    8708:	08 f5       	brcc	.+66     	; 0x874c <f_open+0x62a>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    870a:	f1 01       	movw	r30, r2
    870c:	e6 0d       	add	r30, r6
    870e:	f7 1d       	adc	r31, r7
    8710:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    8712:	83 2f       	mov	r24, r19
    8714:	80 54       	subi	r24, 0x40	; 64
    8716:	8f 33       	cpi	r24, 0x3F	; 63
    8718:	20 f0       	brcs	.+8      	; 0x8722 <f_open+0x600>
    871a:	80 54       	subi	r24, 0x40	; 64
    871c:	8d 37       	cpi	r24, 0x7D	; 125
    871e:	08 f0       	brcs	.+2      	; 0x8722 <f_open+0x600>
    8720:	85 c1       	rjmp	.+778    	; 0x8a2c <f_open+0x90a>
    8722:	c7 01       	movw	r24, r14
    8724:	01 97       	sbiw	r24, 0x01	; 1
    8726:	48 17       	cp	r20, r24
    8728:	59 07       	cpc	r21, r25
    872a:	08 f0       	brcs	.+2      	; 0x872e <f_open+0x60c>
    872c:	7f c1       	rjmp	.+766    	; 0x8a2c <f_open+0x90a>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    872e:	08 94       	sec
    8730:	61 1c       	adc	r6, r1
    8732:	71 1c       	adc	r7, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    8734:	fd 01       	movw	r30, r26
    8736:	e4 0f       	add	r30, r20
    8738:	f5 1f       	adc	r31, r21
    873a:	20 83       	st	Z, r18
    873c:	ca 01       	movw	r24, r20
    873e:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    8740:	fd 01       	movw	r30, r26
    8742:	e8 0f       	add	r30, r24
    8744:	f9 1f       	adc	r31, r25
    8746:	30 83       	st	Z, r19
    8748:	ac 01       	movw	r20, r24
    874a:	20 c0       	rjmp	.+64     	; 0x878c <f_open+0x66a>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    874c:	62 2f       	mov	r22, r18
    874e:	70 e0       	ldi	r23, 0x00	; 0
    8750:	e7 ee       	ldi	r30, 0xE7	; 231
    8752:	f3 e2       	ldi	r31, 0x23	; 35
    8754:	01 c0       	rjmp	.+2      	; 0x8758 <f_open+0x636>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    8756:	31 96       	adiw	r30, 0x01	; 1
    8758:	80 81       	ld	r24, Z
    875a:	88 23       	and	r24, r24
    875c:	39 f0       	breq	.+14     	; 0x876c <f_open+0x64a>
    875e:	99 27       	eor	r25, r25
    8760:	87 fd       	sbrc	r24, 7
    8762:	90 95       	com	r25
    8764:	86 17       	cp	r24, r22
    8766:	97 07       	cpc	r25, r23
    8768:	b1 f7       	brne	.-20     	; 0x8756 <f_open+0x634>
    876a:	60 c1       	rjmp	.+704    	; 0x8a2c <f_open+0x90a>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    876c:	82 2f       	mov	r24, r18
    876e:	81 54       	subi	r24, 0x41	; 65
    8770:	8a 31       	cpi	r24, 0x1A	; 26
    8772:	10 f4       	brcc	.+4      	; 0x8778 <f_open+0x656>
				b |= 2;
    8774:	12 60       	ori	r17, 0x02	; 2
    8776:	06 c0       	rjmp	.+12     	; 0x8784 <f_open+0x662>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    8778:	82 2f       	mov	r24, r18
    877a:	81 56       	subi	r24, 0x61	; 97
    877c:	8a 31       	cpi	r24, 0x1A	; 26
    877e:	10 f4       	brcc	.+4      	; 0x8784 <f_open+0x662>
					b |= 1; c -= 0x20;
    8780:	11 60       	ori	r17, 0x01	; 1
    8782:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    8784:	fd 01       	movw	r30, r26
    8786:	e4 0f       	add	r30, r20
    8788:	f5 1f       	adc	r31, r21
    878a:	20 83       	st	Z, r18
    878c:	4f 5f       	subi	r20, 0xFF	; 255
    878e:	5f 4f       	sbci	r21, 0xFF	; 255
    8790:	8e cf       	rjmp	.-228    	; 0x86ae <f_open+0x58c>
    8792:	91 2f       	mov	r25, r17
    8794:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    8796:	45 2b       	or	r20, r21
    8798:	09 f4       	brne	.+2      	; 0x879c <f_open+0x67a>
    879a:	48 c1       	rjmp	.+656    	; 0x8a2c <f_open+0x90a>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    879c:	8c 91       	ld	r24, X
    879e:	85 3e       	cpi	r24, 0xE5	; 229
    87a0:	11 f4       	brne	.+4      	; 0x87a6 <f_open+0x684>
    87a2:	55 e0       	ldi	r21, 0x05	; 5
    87a4:	5c 93       	st	X, r21

	if (ni == 8) b <<= 2;
    87a6:	78 e0       	ldi	r23, 0x08	; 8
    87a8:	e7 16       	cp	r14, r23
    87aa:	f1 04       	cpc	r15, r1
    87ac:	19 f4       	brne	.+6      	; 0x87b4 <f_open+0x692>
    87ae:	91 2f       	mov	r25, r17
    87b0:	99 0f       	add	r25, r25
    87b2:	99 0f       	add	r25, r25
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    87b4:	29 2f       	mov	r18, r25
    87b6:	30 e0       	ldi	r19, 0x00	; 0
    87b8:	c9 01       	movw	r24, r18
    87ba:	83 70       	andi	r24, 0x03	; 3
    87bc:	90 70       	andi	r25, 0x00	; 0
    87be:	01 97       	sbiw	r24, 0x01	; 1
    87c0:	09 f4       	brne	.+2      	; 0x87c4 <f_open+0x6a2>
    87c2:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    87c4:	2c 70       	andi	r18, 0x0C	; 12
    87c6:	30 70       	andi	r19, 0x00	; 0
    87c8:	24 30       	cpi	r18, 0x04	; 4
    87ca:	31 05       	cpc	r19, r1
    87cc:	09 f4       	brne	.+2      	; 0x87d0 <f_open+0x6ae>
    87ce:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    87d0:	1b 96       	adiw	r26, 0x0b	; 11
    87d2:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    87d4:	ce 01       	movw	r24, r28
    87d6:	0d 96       	adiw	r24, 0x0d	; 13
    87d8:	60 e0       	ldi	r22, 0x00	; 0
    87da:	70 e0       	ldi	r23, 0x00	; 0
    87dc:	0e 94 ad 3d 	call	0x7b5a	; 0x7b5a <dir_sdi>
    87e0:	ac 01       	movw	r20, r24
	if (res != FR_OK) return res;
    87e2:	00 97       	sbiw	r24, 0x00	; 0
    87e4:	09 f0       	breq	.+2      	; 0x87e8 <f_open+0x6c6>
    87e6:	de c0       	rjmp	.+444    	; 0x89a4 <f_open+0x882>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    87e8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    87ea:	5c 8d       	ldd	r21, Y+28	; 0x1c
    87ec:	6d 8d       	ldd	r22, Y+29	; 0x1d
    87ee:	7e 8d       	ldd	r23, Y+30	; 0x1e
    87f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    87f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    87f4:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <move_window>
    87f8:	ac 01       	movw	r20, r24
		if (res != FR_OK) break;
    87fa:	00 97       	sbiw	r24, 0x00	; 0
    87fc:	09 f0       	breq	.+2      	; 0x8800 <f_open+0x6de>
    87fe:	d2 c0       	rjmp	.+420    	; 0x89a4 <f_open+0x882>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    8800:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8802:	f8 a1       	ldd	r31, Y+32	; 0x20
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    8804:	80 81       	ld	r24, Z
    8806:	88 23       	and	r24, r24
    8808:	09 f4       	brne	.+2      	; 0x880c <f_open+0x6ea>
    880a:	ca c0       	rjmp	.+404    	; 0x89a0 <f_open+0x87e>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    880c:	83 85       	ldd	r24, Z+11	; 0x0b
    880e:	83 fd       	sbrc	r24, 3
    8810:	14 c0       	rjmp	.+40     	; 0x883a <f_open+0x718>
    8812:	89 a1       	ldd	r24, Y+33	; 0x21
    8814:	9a a1       	ldd	r25, Y+34	; 0x22
    8816:	9c 01       	movw	r18, r24
    8818:	d9 01       	movw	r26, r18
    881a:	2b e0       	ldi	r18, 0x0B	; 11
    881c:	30 e0       	ldi	r19, 0x00	; 0
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    881e:	21 50       	subi	r18, 0x01	; 1
    8820:	30 40       	sbci	r19, 0x00	; 0
    8822:	8f ef       	ldi	r24, 0xFF	; 255
    8824:	2f 3f       	cpi	r18, 0xFF	; 255
    8826:	38 07       	cpc	r19, r24
    8828:	09 f4       	brne	.+2      	; 0x882c <f_open+0x70a>
    882a:	bc c0       	rjmp	.+376    	; 0x89a4 <f_open+0x882>
    882c:	90 81       	ld	r25, Z
    882e:	8c 91       	ld	r24, X
    8830:	98 17       	cp	r25, r24
    8832:	19 f4       	brne	.+6      	; 0x883a <f_open+0x718>
    8834:	31 96       	adiw	r30, 0x01	; 1
    8836:	11 96       	adiw	r26, 0x01	; 1
    8838:	f2 cf       	rjmp	.-28     	; 0x881e <f_open+0x6fc>
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    883a:	a9 88       	ldd	r10, Y+17	; 0x11
    883c:	ba 88       	ldd	r11, Y+18	; 0x12
    883e:	08 94       	sec
    8840:	a1 1c       	adc	r10, r1
    8842:	b1 1c       	adc	r11, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    8844:	a1 14       	cp	r10, r1
    8846:	b1 04       	cpc	r11, r1
    8848:	09 f4       	brne	.+2      	; 0x884c <f_open+0x72a>
    884a:	aa c0       	rjmp	.+340    	; 0x89a0 <f_open+0x87e>
    884c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    884e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8850:	ad 8d       	ldd	r26, Y+29	; 0x1d
    8852:	be 8d       	ldd	r27, Y+30	; 0x1e
    8854:	00 97       	sbiw	r24, 0x00	; 0
    8856:	a1 05       	cpc	r26, r1
    8858:	b1 05       	cpc	r27, r1
    885a:	09 f4       	brne	.+2      	; 0x885e <f_open+0x73c>
    885c:	a1 c0       	rjmp	.+322    	; 0x89a0 <f_open+0x87e>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    885e:	1f e0       	ldi	r17, 0x0F	; 15
    8860:	81 2e       	mov	r8, r17
    8862:	91 2c       	mov	r9, r1
    8864:	8a 20       	and	r8, r10
    8866:	9b 20       	and	r9, r11
    8868:	81 14       	cp	r8, r1
    886a:	91 04       	cpc	r9, r1
    886c:	09 f0       	breq	.+2      	; 0x8870 <f_open+0x74e>
    886e:	86 c0       	rjmp	.+268    	; 0x897c <f_open+0x85a>
		dj->sect++;					/* Next sector */
    8870:	01 96       	adiw	r24, 0x01	; 1
    8872:	a1 1d       	adc	r26, r1
    8874:	b1 1d       	adc	r27, r1
    8876:	8b 8f       	std	Y+27, r24	; 0x1b
    8878:	9c 8f       	std	Y+28, r25	; 0x1c
    887a:	ad 8f       	std	Y+29, r26	; 0x1d
    887c:	be 8f       	std	Y+30, r27	; 0x1e

		if (dj->clust == 0) {	/* Static table */
    887e:	4f 89       	ldd	r20, Y+23	; 0x17
    8880:	58 8d       	ldd	r21, Y+24	; 0x18
    8882:	69 8d       	ldd	r22, Y+25	; 0x19
    8884:	7a 8d       	ldd	r23, Y+26	; 0x1a
    8886:	ed 85       	ldd	r30, Y+13	; 0x0d
    8888:	fe 85       	ldd	r31, Y+14	; 0x0e
    888a:	41 15       	cp	r20, r1
    888c:	51 05       	cpc	r21, r1
    888e:	61 05       	cpc	r22, r1
    8890:	71 05       	cpc	r23, r1
    8892:	39 f4       	brne	.+14     	; 0x88a2 <f_open+0x780>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    8894:	80 85       	ldd	r24, Z+8	; 0x08
    8896:	91 85       	ldd	r25, Z+9	; 0x09
    8898:	a8 16       	cp	r10, r24
    889a:	b9 06       	cpc	r11, r25
    889c:	08 f0       	brcs	.+2      	; 0x88a0 <f_open+0x77e>
    889e:	80 c0       	rjmp	.+256    	; 0x89a0 <f_open+0x87e>
    88a0:	6d c0       	rjmp	.+218    	; 0x897c <f_open+0x85a>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    88a2:	82 81       	ldd	r24, Z+2	; 0x02
    88a4:	90 e0       	ldi	r25, 0x00	; 0
    88a6:	01 97       	sbiw	r24, 0x01	; 1
    88a8:	95 01       	movw	r18, r10
    88aa:	b4 e0       	ldi	r27, 0x04	; 4
    88ac:	36 95       	lsr	r19
    88ae:	27 95       	ror	r18
    88b0:	ba 95       	dec	r27
    88b2:	e1 f7       	brne	.-8      	; 0x88ac <f_open+0x78a>
    88b4:	82 23       	and	r24, r18
    88b6:	93 23       	and	r25, r19
    88b8:	89 2b       	or	r24, r25
    88ba:	09 f0       	breq	.+2      	; 0x88be <f_open+0x79c>
    88bc:	5f c0       	rjmp	.+190    	; 0x897c <f_open+0x85a>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    88be:	cf 01       	movw	r24, r30
    88c0:	0e 94 2c 3b 	call	0x7658	; 0x7658 <get_fat>
    88c4:	9b 01       	movw	r18, r22
    88c6:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_INT_ERR;
    88c8:	62 30       	cpi	r22, 0x02	; 2
    88ca:	71 05       	cpc	r23, r1
    88cc:	81 05       	cpc	r24, r1
    88ce:	91 05       	cpc	r25, r1
    88d0:	18 f4       	brcc	.+6      	; 0x88d8 <f_open+0x7b6>
    88d2:	42 e0       	ldi	r20, 0x02	; 2
    88d4:	50 e0       	ldi	r21, 0x00	; 0
    88d6:	66 c0       	rjmp	.+204    	; 0x89a4 <f_open+0x882>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    88d8:	2f 3f       	cpi	r18, 0xFF	; 255
    88da:	9f ef       	ldi	r25, 0xFF	; 255
    88dc:	39 07       	cpc	r19, r25
    88de:	9f ef       	ldi	r25, 0xFF	; 255
    88e0:	49 07       	cpc	r20, r25
    88e2:	9f ef       	ldi	r25, 0xFF	; 255
    88e4:	59 07       	cpc	r21, r25
    88e6:	19 f4       	brne	.+6      	; 0x88ee <f_open+0x7cc>
    88e8:	41 e0       	ldi	r20, 0x01	; 1
    88ea:	50 e0       	ldi	r21, 0x00	; 0
    88ec:	5b c0       	rjmp	.+182    	; 0x89a4 <f_open+0x882>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    88ee:	cd 84       	ldd	r12, Y+13	; 0x0d
    88f0:	de 84       	ldd	r13, Y+14	; 0x0e
    88f2:	f6 01       	movw	r30, r12
    88f4:	82 85       	ldd	r24, Z+10	; 0x0a
    88f6:	93 85       	ldd	r25, Z+11	; 0x0b
    88f8:	a4 85       	ldd	r26, Z+12	; 0x0c
    88fa:	b5 85       	ldd	r27, Z+13	; 0x0d
    88fc:	28 17       	cp	r18, r24
    88fe:	39 07       	cpc	r19, r25
    8900:	4a 07       	cpc	r20, r26
    8902:	5b 07       	cpc	r21, r27
    8904:	08 f0       	brcs	.+2      	; 0x8908 <f_open+0x7e6>
    8906:	4c c0       	rjmp	.+152    	; 0x89a0 <f_open+0x87e>
					dj->fs->winsect -= c;						/* Rewind window address */
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    8908:	2f 8b       	std	Y+23, r18	; 0x17
    890a:	38 8f       	std	Y+24, r19	; 0x18
    890c:	49 8f       	std	Y+25, r20	; 0x19
    890e:	5a 8f       	std	Y+26, r21	; 0x1a
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    8910:	ae ef       	ldi	r26, 0xFE	; 254
    8912:	ea 2e       	mov	r14, r26
    8914:	af ef       	ldi	r26, 0xFF	; 255
    8916:	fa 2e       	mov	r15, r26
    8918:	af ef       	ldi	r26, 0xFF	; 255
    891a:	0a 2f       	mov	r16, r26
    891c:	af ef       	ldi	r26, 0xFF	; 255
    891e:	1a 2f       	mov	r17, r26
    8920:	e2 0e       	add	r14, r18
    8922:	f3 1e       	adc	r15, r19
    8924:	04 1f       	adc	r16, r20
    8926:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    8928:	82 85       	ldd	r24, Z+10	; 0x0a
    892a:	93 85       	ldd	r25, Z+11	; 0x0b
    892c:	a4 85       	ldd	r26, Z+12	; 0x0c
    892e:	b5 85       	ldd	r27, Z+13	; 0x0d
    8930:	02 97       	sbiw	r24, 0x02	; 2
    8932:	a1 09       	sbc	r26, r1
    8934:	b1 09       	sbc	r27, r1
    8936:	e8 16       	cp	r14, r24
    8938:	f9 06       	cpc	r15, r25
    893a:	0a 07       	cpc	r16, r26
    893c:	1b 07       	cpc	r17, r27
    893e:	28 f0       	brcs	.+10     	; 0x894a <f_open+0x828>
    8940:	20 e0       	ldi	r18, 0x00	; 0
    8942:	30 e0       	ldi	r19, 0x00	; 0
    8944:	40 e0       	ldi	r20, 0x00	; 0
    8946:	50 e0       	ldi	r21, 0x00	; 0
    8948:	15 c0       	rjmp	.+42     	; 0x8974 <f_open+0x852>
	return clst * fs->csize + fs->database;
    894a:	d6 01       	movw	r26, r12
    894c:	12 96       	adiw	r26, 0x02	; 2
    894e:	2c 91       	ld	r18, X
    8950:	30 e0       	ldi	r19, 0x00	; 0
    8952:	40 e0       	ldi	r20, 0x00	; 0
    8954:	50 e0       	ldi	r21, 0x00	; 0
    8956:	c8 01       	movw	r24, r16
    8958:	b7 01       	movw	r22, r14
    895a:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    895e:	9b 01       	movw	r18, r22
    8960:	ac 01       	movw	r20, r24
    8962:	f6 01       	movw	r30, r12
    8964:	82 8d       	ldd	r24, Z+26	; 0x1a
    8966:	93 8d       	ldd	r25, Z+27	; 0x1b
    8968:	a4 8d       	ldd	r26, Z+28	; 0x1c
    896a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    896c:	28 0f       	add	r18, r24
    896e:	39 1f       	adc	r19, r25
    8970:	4a 1f       	adc	r20, r26
    8972:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    8974:	2b 8f       	std	Y+27, r18	; 0x1b
    8976:	3c 8f       	std	Y+28, r19	; 0x1c
    8978:	4d 8f       	std	Y+29, r20	; 0x1d
    897a:	5e 8f       	std	Y+30, r21	; 0x1e
			}
		}
	}

	dj->index = i;
    897c:	a9 8a       	std	Y+17, r10	; 0x11
    897e:	ba 8a       	std	Y+18, r11	; 0x12
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    8980:	75 e0       	ldi	r23, 0x05	; 5
    8982:	88 0c       	add	r8, r8
    8984:	99 1c       	adc	r9, r9
    8986:	7a 95       	dec	r23
    8988:	e1 f7       	brne	.-8      	; 0x8982 <f_open+0x860>
    898a:	22 e2       	ldi	r18, 0x22	; 34
    898c:	30 e0       	ldi	r19, 0x00	; 0
    898e:	82 0e       	add	r8, r18
    8990:	93 1e       	adc	r9, r19
    8992:	8d 85       	ldd	r24, Y+13	; 0x0d
    8994:	9e 85       	ldd	r25, Y+14	; 0x0e
    8996:	88 0d       	add	r24, r8
    8998:	99 1d       	adc	r25, r9
    899a:	8f 8f       	std	Y+31, r24	; 0x1f
    899c:	98 a3       	std	Y+32, r25	; 0x20
    899e:	24 cf       	rjmp	.-440    	; 0x87e8 <f_open+0x6c6>
    89a0:	44 e0       	ldi	r20, 0x04	; 4
    89a2:	50 e0       	ldi	r21, 0x00	; 0
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    89a4:	e9 a1       	ldd	r30, Y+33	; 0x21
    89a6:	fa a1       	ldd	r31, Y+34	; 0x22
    89a8:	83 85       	ldd	r24, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
    89aa:	41 15       	cp	r20, r1
    89ac:	51 05       	cpc	r21, r1
    89ae:	39 f0       	breq	.+14     	; 0x89be <f_open+0x89c>
    89b0:	8a 01       	movw	r16, r20
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
    89b2:	44 30       	cpi	r20, 0x04	; 4
    89b4:	51 05       	cpc	r21, r1
    89b6:	e9 f5       	brne	.+122    	; 0x8a32 <f_open+0x910>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    89b8:	82 ff       	sbrs	r24, 2
    89ba:	3d c0       	rjmp	.+122    	; 0x8a36 <f_open+0x914>
    89bc:	3e c0       	rjmp	.+124    	; 0x8a3a <f_open+0x918>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    89be:	82 fd       	sbrc	r24, 2
    89c0:	38 c0       	rjmp	.+112    	; 0x8a32 <f_open+0x910>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    89c2:	af 8d       	ldd	r26, Y+31	; 0x1f
    89c4:	b8 a1       	ldd	r27, Y+32	; 0x20
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    89c6:	1b 96       	adiw	r26, 0x0b	; 11
    89c8:	8c 91       	ld	r24, X
    89ca:	1b 97       	sbiw	r26, 0x0b	; 11
    89cc:	84 ff       	sbrs	r24, 4
    89ce:	33 c0       	rjmp	.+102    	; 0x8a36 <f_open+0x914>
	BYTE *dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
    89d0:	5b 96       	adiw	r26, 0x1b	; 27
    89d2:	5c 90       	ld	r5, X
    89d4:	5b 97       	sbiw	r26, 0x1b	; 27
    89d6:	44 24       	eor	r4, r4
    89d8:	5a 96       	adiw	r26, 0x1a	; 26
    89da:	8c 91       	ld	r24, X
    89dc:	5a 97       	sbiw	r26, 0x1a	; 26
    89de:	90 e0       	ldi	r25, 0x00	; 0
    89e0:	84 29       	or	r24, r4
    89e2:	95 29       	or	r25, r5
    89e4:	9c 01       	movw	r18, r24
    89e6:	40 e0       	ldi	r20, 0x00	; 0
    89e8:	50 e0       	ldi	r21, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    89ea:	ed 85       	ldd	r30, Y+13	; 0x0d
    89ec:	fe 85       	ldd	r31, Y+14	; 0x0e
    89ee:	80 81       	ld	r24, Z
    89f0:	83 30       	cpi	r24, 0x03	; 3
    89f2:	a9 f4       	brne	.+42     	; 0x8a1e <f_open+0x8fc>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
    89f4:	55 96       	adiw	r26, 0x15	; 21
    89f6:	6c 91       	ld	r22, X
    89f8:	55 97       	sbiw	r26, 0x15	; 21
    89fa:	6b ab       	std	Y+51, r22	; 0x33
    89fc:	1a aa       	std	Y+50, r1	; 0x32
    89fe:	54 96       	adiw	r26, 0x14	; 20
    8a00:	8c 91       	ld	r24, X
    8a02:	90 e0       	ldi	r25, 0x00	; 0
    8a04:	aa a9       	ldd	r26, Y+50	; 0x32
    8a06:	bb a9       	ldd	r27, Y+51	; 0x33
    8a08:	8a 2b       	or	r24, r26
    8a0a:	9b 2b       	or	r25, r27
    8a0c:	a0 e0       	ldi	r26, 0x00	; 0
    8a0e:	b0 e0       	ldi	r27, 0x00	; 0
    8a10:	dc 01       	movw	r26, r24
    8a12:	99 27       	eor	r25, r25
    8a14:	88 27       	eor	r24, r24
    8a16:	28 2b       	or	r18, r24
    8a18:	39 2b       	or	r19, r25
    8a1a:	4a 2b       	or	r20, r26
    8a1c:	5b 2b       	or	r21, r27
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    8a1e:	26 0c       	add	r2, r6
    8a20:	37 1c       	adc	r3, r7
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ld_clust(dj->fs, dir);
    8a22:	2b 8b       	std	Y+19, r18	; 0x13
    8a24:	3c 8b       	std	Y+20, r19	; 0x14
    8a26:	4d 8b       	std	Y+21, r20	; 0x15
    8a28:	5e 8b       	std	Y+22, r21	; 0x16
    8a2a:	26 ce       	rjmp	.-948    	; 0x8678 <f_open+0x556>
    8a2c:	06 e0       	ldi	r16, 0x06	; 6
    8a2e:	10 e0       	ldi	r17, 0x00	; 0
    8a30:	04 c0       	rjmp	.+8      	; 0x8a3a <f_open+0x918>
    8a32:	8a 01       	movw	r16, r20
    8a34:	02 c0       	rjmp	.+4      	; 0x8a3a <f_open+0x918>
    8a36:	05 e0       	ldi	r16, 0x05	; 5
    8a38:	10 e0       	ldi	r17, 0x00	; 0
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    8a3a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8a3c:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!fp->lockid) res = FR_INT_ERR;
#endif
		}

#else				/* R/O configuration */
		if (res == FR_OK) {					/* Follow succeeded */
    8a3e:	01 15       	cp	r16, r1
    8a40:	11 05       	cpc	r17, r1
    8a42:	09 f0       	breq	.+2      	; 0x8a46 <f_open+0x924>
    8a44:	71 c0       	rjmp	.+226    	; 0x8b28 <f_open+0xa06>
			dir = dj.dir;
			if (!dir) {						/* Current dir itself */
    8a46:	30 97       	sbiw	r30, 0x00	; 0
    8a48:	19 f4       	brne	.+6      	; 0x8a50 <f_open+0x92e>
    8a4a:	06 e0       	ldi	r16, 0x06	; 6
    8a4c:	10 e0       	ldi	r17, 0x00	; 0
    8a4e:	6c c0       	rjmp	.+216    	; 0x8b28 <f_open+0xa06>
				res = FR_INVALID_NAME;
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
    8a50:	83 85       	ldd	r24, Z+11	; 0x0b
    8a52:	84 fd       	sbrc	r24, 4
    8a54:	6e c0       	rjmp	.+220    	; 0x8b32 <f_open+0xa10>
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    8a56:	b9 a9       	ldd	r27, Y+49	; 0x31
    8a58:	b1 70       	andi	r27, 0x01	; 1
    8a5a:	2b 2f       	mov	r18, r27
    8a5c:	af a5       	ldd	r26, Y+47	; 0x2f
    8a5e:	b8 a9       	ldd	r27, Y+48	; 0x30
    8a60:	14 96       	adiw	r26, 0x04	; 4
    8a62:	2c 93       	st	X, r18
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    8a64:	ed 84       	ldd	r14, Y+13	; 0x0d
    8a66:	fe 84       	ldd	r15, Y+14	; 0x0e
	BYTE *dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
    8a68:	93 8d       	ldd	r25, Z+27	; 0x1b
    8a6a:	80 e0       	ldi	r24, 0x00	; 0
    8a6c:	22 8d       	ldd	r18, Z+26	; 0x1a
    8a6e:	30 e0       	ldi	r19, 0x00	; 0
    8a70:	82 2b       	or	r24, r18
    8a72:	93 2b       	or	r25, r19
    8a74:	ac 01       	movw	r20, r24
    8a76:	60 e0       	ldi	r22, 0x00	; 0
    8a78:	70 e0       	ldi	r23, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    8a7a:	d7 01       	movw	r26, r14
    8a7c:	8c 91       	ld	r24, X
    8a7e:	83 30       	cpi	r24, 0x03	; 3
    8a80:	79 f4       	brne	.+30     	; 0x8aa0 <f_open+0x97e>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
    8a82:	95 89       	ldd	r25, Z+21	; 0x15
    8a84:	80 e0       	ldi	r24, 0x00	; 0
    8a86:	24 89       	ldd	r18, Z+20	; 0x14
    8a88:	30 e0       	ldi	r19, 0x00	; 0
    8a8a:	82 2b       	or	r24, r18
    8a8c:	93 2b       	or	r25, r19
    8a8e:	a0 e0       	ldi	r26, 0x00	; 0
    8a90:	b0 e0       	ldi	r27, 0x00	; 0
    8a92:	dc 01       	movw	r26, r24
    8a94:	99 27       	eor	r25, r25
    8a96:	88 27       	eor	r24, r24
    8a98:	48 2b       	or	r20, r24
    8a9a:	59 2b       	or	r21, r25
    8a9c:	6a 2b       	or	r22, r26
    8a9e:	7b 2b       	or	r23, r27
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    8aa0:	af a5       	ldd	r26, Y+47	; 0x2f
    8aa2:	b8 a9       	ldd	r27, Y+48	; 0x30
    8aa4:	1e 96       	adiw	r26, 0x0e	; 14
    8aa6:	4d 93       	st	X+, r20
    8aa8:	5d 93       	st	X+, r21
    8aaa:	6d 93       	st	X+, r22
    8aac:	7c 93       	st	X, r23
    8aae:	51 97       	sbiw	r26, 0x11	; 17
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    8ab0:	27 8d       	ldd	r18, Z+31	; 0x1f
    8ab2:	30 e0       	ldi	r19, 0x00	; 0
    8ab4:	40 e0       	ldi	r20, 0x00	; 0
    8ab6:	50 e0       	ldi	r21, 0x00	; 0
    8ab8:	52 2f       	mov	r21, r18
    8aba:	44 27       	eor	r20, r20
    8abc:	33 27       	eor	r19, r19
    8abe:	22 27       	eor	r18, r18
    8ac0:	86 8d       	ldd	r24, Z+30	; 0x1e
    8ac2:	90 e0       	ldi	r25, 0x00	; 0
    8ac4:	a0 e0       	ldi	r26, 0x00	; 0
    8ac6:	b0 e0       	ldi	r27, 0x00	; 0
    8ac8:	dc 01       	movw	r26, r24
    8aca:	99 27       	eor	r25, r25
    8acc:	88 27       	eor	r24, r24
    8ace:	28 2b       	or	r18, r24
    8ad0:	39 2b       	or	r19, r25
    8ad2:	4a 2b       	or	r20, r26
    8ad4:	5b 2b       	or	r21, r27
    8ad6:	84 8d       	ldd	r24, Z+28	; 0x1c
    8ad8:	90 e0       	ldi	r25, 0x00	; 0
    8ada:	a0 e0       	ldi	r26, 0x00	; 0
    8adc:	b0 e0       	ldi	r27, 0x00	; 0
    8ade:	28 2b       	or	r18, r24
    8ae0:	39 2b       	or	r19, r25
    8ae2:	4a 2b       	or	r20, r26
    8ae4:	5b 2b       	or	r21, r27
    8ae6:	95 8d       	ldd	r25, Z+29	; 0x1d
    8ae8:	80 e0       	ldi	r24, 0x00	; 0
    8aea:	a0 e0       	ldi	r26, 0x00	; 0
    8aec:	b0 e0       	ldi	r27, 0x00	; 0
    8aee:	28 2b       	or	r18, r24
    8af0:	39 2b       	or	r19, r25
    8af2:	4a 2b       	or	r20, r26
    8af4:	5b 2b       	or	r21, r27
    8af6:	ef a5       	ldd	r30, Y+47	; 0x2f
    8af8:	f8 a9       	ldd	r31, Y+48	; 0x30
    8afa:	22 87       	std	Z+10, r18	; 0x0a
    8afc:	33 87       	std	Z+11, r19	; 0x0b
    8afe:	44 87       	std	Z+12, r20	; 0x0c
    8b00:	55 87       	std	Z+13, r21	; 0x0d
			fp->fptr = 0;						/* File pointer */
    8b02:	df 01       	movw	r26, r30
    8b04:	16 82       	std	Z+6, r1	; 0x06
    8b06:	17 82       	std	Z+7, r1	; 0x07
    8b08:	10 86       	std	Z+8, r1	; 0x08
    8b0a:	11 86       	std	Z+9, r1	; 0x09
			fp->dsect = 0;
    8b0c:	16 8a       	std	Z+22, r1	; 0x16
    8b0e:	17 8a       	std	Z+23, r1	; 0x17
    8b10:	10 8e       	std	Z+24, r1	; 0x18
    8b12:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    8b14:	e0 82       	st	Z, r14
    8b16:	f1 82       	std	Z+1, r15	; 0x01
    8b18:	ed 85       	ldd	r30, Y+13	; 0x0d
    8b1a:	fe 85       	ldd	r31, Y+14	; 0x0e
    8b1c:	86 81       	ldd	r24, Z+6	; 0x06
    8b1e:	97 81       	ldd	r25, Z+7	; 0x07
    8b20:	12 96       	adiw	r26, 0x02	; 2
    8b22:	8d 93       	st	X+, r24
    8b24:	9c 93       	st	X, r25
    8b26:	13 97       	sbiw	r26, 0x03	; 3
		}
	}

	LEAVE_FF(dj.fs, res);
}
    8b28:	c8 01       	movw	r24, r16
    8b2a:	e3 96       	adiw	r28, 0x33	; 51
    8b2c:	e2 e1       	ldi	r30, 0x12	; 18
    8b2e:	0c 94 aa 4d 	jmp	0x9b54	; 0x9b54 <__epilogue_restores__>
			fp->fptr = 0;						/* File pointer */
			fp->dsect = 0;
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    8b32:	04 e0       	ldi	r16, 0x04	; 4
    8b34:	10 e0       	ldi	r17, 0x00	; 0
    8b36:	f8 cf       	rjmp	.-16     	; 0x8b28 <f_open+0xa06>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
    8b38:	ce 01       	movw	r24, r28
    8b3a:	01 96       	adiw	r24, 0x01	; 1
    8b3c:	89 a3       	std	Y+33, r24	; 0x21
    8b3e:	9a a3       	std	Y+34, r25	; 0x22
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    8b40:	f1 01       	movw	r30, r2
    8b42:	80 81       	ld	r24, Z
    8b44:	8f 32       	cpi	r24, 0x2F	; 47
    8b46:	09 f0       	breq	.+2      	; 0x8b4a <f_open+0xa28>
    8b48:	7d cd       	rjmp	.-1286   	; 0x8644 <f_open+0x522>
    8b4a:	7e cd       	rjmp	.-1284   	; 0x8648 <f_open+0x526>
    8b4c:	91 2f       	mov	r25, r17
    8b4e:	60 e0       	ldi	r22, 0x00	; 0
    8b50:	22 ce       	rjmp	.-956    	; 0x8796 <f_open+0x674>

00008b52 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
    8b52:	80 e1       	ldi	r24, 0x10	; 16
    8b54:	e0 e8       	ldi	r30, 0x80	; 128
    8b56:	f6 e0       	ldi	r31, 0x06	; 6
    8b58:	86 83       	std	Z+6, r24	; 0x06
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8b5a:	8f ef       	ldi	r24, 0xFF	; 255
    8b5c:	e0 ec       	ldi	r30, 0xC0	; 192
    8b5e:	fa e0       	ldi	r31, 0x0A	; 10
    8b60:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8b62:	80 91 c2 0a 	lds	r24, 0x0AC2
    8b66:	87 ff       	sbrs	r24, 7
    8b68:	fc cf       	rjmp	.-8      	; 0x8b62 <select+0x10>
	return SPIE.DATA;
    8b6a:	80 91 c3 0a 	lds	r24, 0x0AC3
int wait_ready (void)
{
	BYTE d;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    8b6e:	82 e3       	ldi	r24, 0x32	; 50
    8b70:	80 93 93 24 	sts	0x2493, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8b74:	e0 ec       	ldi	r30, 0xC0	; 192
    8b76:	fa e0       	ldi	r31, 0x0A	; 10
    8b78:	9f ef       	ldi	r25, 0xFF	; 255
    8b7a:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8b7c:	80 91 c2 0a 	lds	r24, 0x0AC2
    8b80:	87 ff       	sbrs	r24, 7
    8b82:	fc cf       	rjmp	.-8      	; 0x8b7c <select+0x2a>
	return SPIE.DATA;
    8b84:	80 91 c3 0a 	lds	r24, 0x0AC3


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    8b88:	8f 3f       	cpi	r24, 0xFF	; 255
    8b8a:	19 f4       	brne	.+6      	; 0x8b92 <select+0x40>
    8b8c:	21 e0       	ldi	r18, 0x01	; 1
    8b8e:	30 e0       	ldi	r19, 0x00	; 0
    8b90:	14 c0       	rjmp	.+40     	; 0x8bba <select+0x68>
    8b92:	80 91 93 24 	lds	r24, 0x2493
    8b96:	88 23       	and	r24, r24
    8b98:	81 f7       	brne	.-32     	; 0x8b7a <select+0x28>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    8b9a:	80 e1       	ldi	r24, 0x10	; 16
    8b9c:	e0 e8       	ldi	r30, 0x80	; 128
    8b9e:	f6 e0       	ldi	r31, 0x06	; 6
    8ba0:	85 83       	std	Z+5, r24	; 0x05
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8ba2:	8f ef       	ldi	r24, 0xFF	; 255
    8ba4:	e0 ec       	ldi	r30, 0xC0	; 192
    8ba6:	fa e0       	ldi	r31, 0x0A	; 10
    8ba8:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8baa:	80 91 c2 0a 	lds	r24, 0x0AC2
    8bae:	87 ff       	sbrs	r24, 7
    8bb0:	fc cf       	rjmp	.-8      	; 0x8baa <select+0x58>
	return SPIE.DATA;
    8bb2:	80 91 c3 0a 	lds	r24, 0x0AC3
    8bb6:	20 e0       	ldi	r18, 0x00	; 0
    8bb8:	30 e0       	ldi	r19, 0x00	; 0
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready()) return 1;	/* OK */
	deselect();
	return 0;	/* Timeout */
}
    8bba:	c9 01       	movw	r24, r18
    8bbc:	08 95       	ret

00008bbe <power_off>:
}

static
void power_off (void)
{
  CS_LOW();        /* Wait for card ready */
    8bbe:	80 e1       	ldi	r24, 0x10	; 16
    8bc0:	e0 e8       	ldi	r30, 0x80	; 128
    8bc2:	f6 e0       	ldi	r31, 0x06	; 6
    8bc4:	86 83       	std	Z+6, r24	; 0x06
int wait_ready (void)
{
	BYTE d;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    8bc6:	82 e3       	ldi	r24, 0x32	; 50
    8bc8:	80 93 93 24 	sts	0x2493, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8bcc:	e0 ec       	ldi	r30, 0xC0	; 192
    8bce:	fa e0       	ldi	r31, 0x0A	; 10
    8bd0:	9f ef       	ldi	r25, 0xFF	; 255
    8bd2:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8bd4:	80 91 c2 0a 	lds	r24, 0x0AC2
    8bd8:	87 ff       	sbrs	r24, 7
    8bda:	fc cf       	rjmp	.-8      	; 0x8bd4 <power_off+0x16>
	return SPIE.DATA;
    8bdc:	80 91 c3 0a 	lds	r24, 0x0AC3


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    8be0:	8f 3f       	cpi	r24, 0xFF	; 255
    8be2:	21 f0       	breq	.+8      	; 0x8bec <power_off+0x2e>
    8be4:	80 91 93 24 	lds	r24, 0x2493
    8be8:	88 23       	and	r24, r24
    8bea:	99 f7       	brne	.-26     	; 0x8bd2 <power_off+0x14>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    8bec:	80 e1       	ldi	r24, 0x10	; 16
    8bee:	e0 e8       	ldi	r30, 0x80	; 128
    8bf0:	f6 e0       	ldi	r31, 0x06	; 6
    8bf2:	85 83       	std	Z+5, r24	; 0x05
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8bf4:	8f ef       	ldi	r24, 0xFF	; 255
    8bf6:	e0 ec       	ldi	r30, 0xC0	; 192
    8bf8:	fa e0       	ldi	r31, 0x0A	; 10
    8bfa:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8bfc:	80 91 c2 0a 	lds	r24, 0x0AC2
    8c00:	87 ff       	sbrs	r24, 7
    8c02:	fc cf       	rjmp	.-8      	; 0x8bfc <power_off+0x3e>
	return SPIE.DATA;
    8c04:	80 91 c3 0a 	lds	r24, 0x0AC3
void power_off (void)
{
  CS_LOW();        /* Wait for card ready */
  wait_ready();
  deselect();
  Stat |= STA_NOINIT;    /* Set STA_NOINIT */
    8c08:	80 91 f6 23 	lds	r24, 0x23F6
    8c0c:	81 60       	ori	r24, 0x01	; 1
    8c0e:	80 93 f6 23 	sts	0x23F6, r24
	}
    8c12:	08 95       	ret

00008c14 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    8c14:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
    8c16:	84 e1       	ldi	r24, 0x14	; 20
    8c18:	80 93 92 24 	sts	0x2492, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8c1c:	a0 ec       	ldi	r26, 0xC0	; 192
    8c1e:	ba e0       	ldi	r27, 0x0A	; 10
    8c20:	9f ef       	ldi	r25, 0xFF	; 255
    8c22:	13 96       	adiw	r26, 0x03	; 3
    8c24:	9c 93       	st	X, r25
    8c26:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8c28:	80 91 c2 0a 	lds	r24, 0x0AC2
    8c2c:	87 ff       	sbrs	r24, 7
    8c2e:	fc cf       	rjmp	.-8      	; 0x8c28 <rcvr_datablock+0x14>
	return SPIE.DATA;
    8c30:	80 91 c3 0a 	lds	r24, 0x0AC3


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    8c34:	8f 3f       	cpi	r24, 0xFF	; 255
    8c36:	29 f4       	brne	.+10     	; 0x8c42 <rcvr_datablock+0x2e>
    8c38:	80 91 92 24 	lds	r24, 0x2492
    8c3c:	88 23       	and	r24, r24
    8c3e:	89 f7       	brne	.-30     	; 0x8c22 <rcvr_datablock+0xe>
    8c40:	35 c0       	rjmp	.+106    	; 0x8cac <rcvr_datablock+0x98>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    8c42:	8e 3f       	cpi	r24, 0xFE	; 254
    8c44:	99 f5       	brne	.+102    	; 0x8cac <rcvr_datablock+0x98>
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPIE.DATA = 0xFF; loop_until_bit_is_set(SPIE.STATUS,7); *p++ = SPIE.DATA;
    8c46:	a0 ec       	ldi	r26, 0xC0	; 192
    8c48:	ba e0       	ldi	r27, 0x0A	; 10
    8c4a:	9f ef       	ldi	r25, 0xFF	; 255
    8c4c:	13 96       	adiw	r26, 0x03	; 3
    8c4e:	9c 93       	st	X, r25
    8c50:	13 97       	sbiw	r26, 0x03	; 3
    8c52:	80 91 c2 0a 	lds	r24, 0x0AC2
    8c56:	87 ff       	sbrs	r24, 7
    8c58:	fc cf       	rjmp	.-8      	; 0x8c52 <rcvr_datablock+0x3e>
    8c5a:	80 91 c3 0a 	lds	r24, 0x0AC3
    8c5e:	80 83       	st	Z, r24
		SPIE.DATA = 0xFF; loop_until_bit_is_set(SPIE.STATUS,7); *p++ = SPIE.DATA;
    8c60:	13 96       	adiw	r26, 0x03	; 3
    8c62:	9c 93       	st	X, r25
    8c64:	13 97       	sbiw	r26, 0x03	; 3
    8c66:	80 91 c2 0a 	lds	r24, 0x0AC2
    8c6a:	87 ff       	sbrs	r24, 7
    8c6c:	fc cf       	rjmp	.-8      	; 0x8c66 <rcvr_datablock+0x52>
    8c6e:	80 91 c3 0a 	lds	r24, 0x0AC3
    8c72:	81 83       	std	Z+1, r24	; 0x01
	} while (cnt -= 2);
    8c74:	62 50       	subi	r22, 0x02	; 2
    8c76:	70 40       	sbci	r23, 0x00	; 0
    8c78:	11 f0       	breq	.+4      	; 0x8c7e <rcvr_datablock+0x6a>
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    8c7a:	32 96       	adiw	r30, 0x02	; 2
    8c7c:	e7 cf       	rjmp	.-50     	; 0x8c4c <rcvr_datablock+0x38>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8c7e:	8f ef       	ldi	r24, 0xFF	; 255
    8c80:	e0 ec       	ldi	r30, 0xC0	; 192
    8c82:	fa e0       	ldi	r31, 0x0A	; 10
    8c84:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8c86:	80 91 c2 0a 	lds	r24, 0x0AC2
    8c8a:	87 ff       	sbrs	r24, 7
    8c8c:	fc cf       	rjmp	.-8      	; 0x8c86 <rcvr_datablock+0x72>
	return SPIE.DATA;
    8c8e:	80 91 c3 0a 	lds	r24, 0x0AC3
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8c92:	8f ef       	ldi	r24, 0xFF	; 255
    8c94:	e0 ec       	ldi	r30, 0xC0	; 192
    8c96:	fa e0       	ldi	r31, 0x0A	; 10
    8c98:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8c9a:	80 91 c2 0a 	lds	r24, 0x0AC2
    8c9e:	87 ff       	sbrs	r24, 7
    8ca0:	fc cf       	rjmp	.-8      	; 0x8c9a <rcvr_datablock+0x86>
	return SPIE.DATA;
    8ca2:	80 91 c3 0a 	lds	r24, 0x0AC3
    8ca6:	21 e0       	ldi	r18, 0x01	; 1
    8ca8:	30 e0       	ldi	r19, 0x00	; 0
    8caa:	02 c0       	rjmp	.+4      	; 0x8cb0 <rcvr_datablock+0x9c>

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
    8cac:	20 e0       	ldi	r18, 0x00	; 0
    8cae:	30 e0       	ldi	r19, 0x00	; 0
}
    8cb0:	c9 01       	movw	r24, r18
    8cb2:	08 95       	ret

00008cb4 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    8cb4:	df 92       	push	r13
    8cb6:	ef 92       	push	r14
    8cb8:	ff 92       	push	r15
    8cba:	0f 93       	push	r16
    8cbc:	1f 93       	push	r17
    8cbe:	d8 2e       	mov	r13, r24
    8cc0:	7a 01       	movw	r14, r20
    8cc2:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    8cc4:	87 ff       	sbrs	r24, 7
    8cc6:	0c c0       	rjmp	.+24     	; 0x8ce0 <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    8cc8:	87 e3       	ldi	r24, 0x37	; 55
    8cca:	40 e0       	ldi	r20, 0x00	; 0
    8ccc:	50 e0       	ldi	r21, 0x00	; 0
    8cce:	60 e0       	ldi	r22, 0x00	; 0
    8cd0:	70 e0       	ldi	r23, 0x00	; 0
    8cd2:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <send_cmd>
		if (res > 1) return res;
    8cd6:	82 30       	cpi	r24, 0x02	; 2
    8cd8:	08 f0       	brcs	.+2      	; 0x8cdc <send_cmd+0x28>
    8cda:	7f c0       	rjmp	.+254    	; 0x8dda <send_cmd+0x126>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    8cdc:	8f e7       	ldi	r24, 0x7F	; 127
    8cde:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    8ce0:	80 e1       	ldi	r24, 0x10	; 16
    8ce2:	e0 e8       	ldi	r30, 0x80	; 128
    8ce4:	f6 e0       	ldi	r31, 0x06	; 6
    8ce6:	85 83       	std	Z+5, r24	; 0x05
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8ce8:	8f ef       	ldi	r24, 0xFF	; 255
    8cea:	e0 ec       	ldi	r30, 0xC0	; 192
    8cec:	fa e0       	ldi	r31, 0x0A	; 10
    8cee:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8cf0:	80 91 c2 0a 	lds	r24, 0x0AC2
    8cf4:	87 ff       	sbrs	r24, 7
    8cf6:	fc cf       	rjmp	.-8      	; 0x8cf0 <send_cmd+0x3c>
	return SPIE.DATA;
    8cf8:	80 91 c3 0a 	lds	r24, 0x0AC3
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
  if (!select()) return 0xFF;
    8cfc:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <select>
    8d00:	89 2b       	or	r24, r25
    8d02:	11 f4       	brne	.+4      	; 0x8d08 <send_cmd+0x54>
    8d04:	8f ef       	ldi	r24, 0xFF	; 255
    8d06:	69 c0       	rjmp	.+210    	; 0x8dda <send_cmd+0x126>

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    8d08:	8d 2d       	mov	r24, r13
    8d0a:	80 64       	ori	r24, 0x40	; 64
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8d0c:	e0 ec       	ldi	r30, 0xC0	; 192
    8d0e:	fa e0       	ldi	r31, 0x0A	; 10
    8d10:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8d12:	80 91 c2 0a 	lds	r24, 0x0AC2
    8d16:	87 ff       	sbrs	r24, 7
    8d18:	fc cf       	rjmp	.-8      	; 0x8d12 <send_cmd+0x5e>
	return SPIE.DATA;
    8d1a:	80 91 c3 0a 	lds	r24, 0x0AC3
	deselect();
  if (!select()) return 0xFF;

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    8d1e:	81 2f       	mov	r24, r17
    8d20:	99 27       	eor	r25, r25
    8d22:	aa 27       	eor	r26, r26
    8d24:	bb 27       	eor	r27, r27
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8d26:	e0 ec       	ldi	r30, 0xC0	; 192
    8d28:	fa e0       	ldi	r31, 0x0A	; 10
    8d2a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8d2c:	80 91 c2 0a 	lds	r24, 0x0AC2
    8d30:	87 ff       	sbrs	r24, 7
    8d32:	fc cf       	rjmp	.-8      	; 0x8d2c <send_cmd+0x78>
	return SPIE.DATA;
    8d34:	80 91 c3 0a 	lds	r24, 0x0AC3
  if (!select()) return 0xFF;

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    8d38:	c8 01       	movw	r24, r16
    8d3a:	aa 27       	eor	r26, r26
    8d3c:	bb 27       	eor	r27, r27
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8d3e:	e0 ec       	ldi	r30, 0xC0	; 192
    8d40:	fa e0       	ldi	r31, 0x0A	; 10
    8d42:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8d44:	80 91 c2 0a 	lds	r24, 0x0AC2
    8d48:	87 ff       	sbrs	r24, 7
    8d4a:	fc cf       	rjmp	.-8      	; 0x8d44 <send_cmd+0x90>
	return SPIE.DATA;
    8d4c:	80 91 c3 0a 	lds	r24, 0x0AC3

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    8d50:	bb 27       	eor	r27, r27
    8d52:	a1 2f       	mov	r26, r17
    8d54:	90 2f       	mov	r25, r16
    8d56:	8f 2d       	mov	r24, r15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8d58:	e0 ec       	ldi	r30, 0xC0	; 192
    8d5a:	fa e0       	ldi	r31, 0x0A	; 10
    8d5c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8d5e:	80 91 c2 0a 	lds	r24, 0x0AC2
    8d62:	87 ff       	sbrs	r24, 7
    8d64:	fc cf       	rjmp	.-8      	; 0x8d5e <send_cmd+0xaa>
	return SPIE.DATA;
    8d66:	80 91 c3 0a 	lds	r24, 0x0AC3
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8d6a:	e0 ec       	ldi	r30, 0xC0	; 192
    8d6c:	fa e0       	ldi	r31, 0x0A	; 10
    8d6e:	e3 82       	std	Z+3, r14	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8d70:	80 91 c2 0a 	lds	r24, 0x0AC2
    8d74:	87 ff       	sbrs	r24, 7
    8d76:	fc cf       	rjmp	.-8      	; 0x8d70 <send_cmd+0xbc>
	return SPIE.DATA;
    8d78:	80 91 c3 0a 	lds	r24, 0x0AC3
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    8d7c:	dd 20       	and	r13, r13
    8d7e:	11 f4       	brne	.+4      	; 0x8d84 <send_cmd+0xd0>
    8d80:	85 e9       	ldi	r24, 0x95	; 149
    8d82:	06 c0       	rjmp	.+12     	; 0x8d90 <send_cmd+0xdc>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    8d84:	88 e0       	ldi	r24, 0x08	; 8
    8d86:	d8 16       	cp	r13, r24
    8d88:	11 f4       	brne	.+4      	; 0x8d8e <send_cmd+0xda>
    8d8a:	87 e8       	ldi	r24, 0x87	; 135
    8d8c:	01 c0       	rjmp	.+2      	; 0x8d90 <send_cmd+0xdc>
    8d8e:	81 e0       	ldi	r24, 0x01	; 1
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8d90:	e0 ec       	ldi	r30, 0xC0	; 192
    8d92:	fa e0       	ldi	r31, 0x0A	; 10
    8d94:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8d96:	80 91 c2 0a 	lds	r24, 0x0AC2
    8d9a:	87 ff       	sbrs	r24, 7
    8d9c:	fc cf       	rjmp	.-8      	; 0x8d96 <send_cmd+0xe2>
	return SPIE.DATA;
    8d9e:	80 91 c3 0a 	lds	r24, 0x0AC3
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    8da2:	8c e0       	ldi	r24, 0x0C	; 12
    8da4:	d8 16       	cp	r13, r24
    8da6:	51 f4       	brne	.+20     	; 0x8dbc <send_cmd+0x108>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8da8:	8f ef       	ldi	r24, 0xFF	; 255
    8daa:	e0 ec       	ldi	r30, 0xC0	; 192
    8dac:	fa e0       	ldi	r31, 0x0A	; 10
    8dae:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8db0:	80 91 c2 0a 	lds	r24, 0x0AC2
    8db4:	87 ff       	sbrs	r24, 7
    8db6:	fc cf       	rjmp	.-8      	; 0x8db0 <send_cmd+0xfc>
	return SPIE.DATA;
    8db8:	80 91 c3 0a 	lds	r24, 0x0AC3
    8dbc:	9a e0       	ldi	r25, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8dbe:	e0 ec       	ldi	r30, 0xC0	; 192
    8dc0:	fa e0       	ldi	r31, 0x0A	; 10
    8dc2:	2f ef       	ldi	r18, 0xFF	; 255
    8dc4:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8dc6:	80 91 c2 0a 	lds	r24, 0x0AC2
    8dca:	87 ff       	sbrs	r24, 7
    8dcc:	fc cf       	rjmp	.-8      	; 0x8dc6 <send_cmd+0x112>
	return SPIE.DATA;
    8dce:	80 91 c3 0a 	lds	r24, 0x0AC3
	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);
    8dd2:	87 ff       	sbrs	r24, 7
    8dd4:	02 c0       	rjmp	.+4      	; 0x8dda <send_cmd+0x126>
    8dd6:	91 50       	subi	r25, 0x01	; 1
    8dd8:	a9 f7       	brne	.-22     	; 0x8dc4 <send_cmd+0x110>

	return res;			/* Return with the response value */
}
    8dda:	1f 91       	pop	r17
    8ddc:	0f 91       	pop	r16
    8dde:	ff 90       	pop	r15
    8de0:	ef 90       	pop	r14
    8de2:	df 90       	pop	r13
    8de4:	08 95       	ret

00008de6 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    8de6:	a4 e0       	ldi	r26, 0x04	; 4
    8de8:	b0 e0       	ldi	r27, 0x00	; 0
    8dea:	e9 ef       	ldi	r30, 0xF9	; 249
    8dec:	f6 e4       	ldi	r31, 0x46	; 70
    8dee:	0c 94 9a 4d 	jmp	0x9b34	; 0x9b34 <__prologue_saves__+0x18>
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    8df2:	88 23       	and	r24, r24
    8df4:	11 f0       	breq	.+4      	; 0x8dfa <disk_initialize+0x14>
    8df6:	81 e0       	ldi	r24, 0x01	; 1
    8df8:	ce c0       	rjmp	.+412    	; 0x8f96 <disk_initialize+0x1b0>
	//power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    8dfa:	80 91 f6 23 	lds	r24, 0x23F6
    8dfe:	81 fd       	sbrc	r24, 1
    8e00:	c8 c0       	rjmp	.+400    	; 0x8f92 <disk_initialize+0x1ac>
}

static
void power_on (void)
{
  for (Timer1 = 3; Timer1; );  /* Wait for 30ms */
    8e02:	83 e0       	ldi	r24, 0x03	; 3
    8e04:	80 93 92 24 	sts	0x2492, r24
    8e08:	80 91 92 24 	lds	r24, 0x2492
    8e0c:	88 23       	and	r24, r24
    8e0e:	e1 f7       	brne	.-8      	; 0x8e08 <disk_initialize+0x22>
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
    8e10:	83 e5       	ldi	r24, 0x53	; 83
    8e12:	80 93 c0 0a 	sts	0x0AC0, r24
	if (drv) return STA_NOINIT;			/* Supports only single drive */
	//power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
 //CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc));  /* 16MHz */
	FCLK_SLOW();
    8e16:	80 93 c0 0a 	sts	0x0AC0, r24
    8e1a:	9a e0       	ldi	r25, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8e1c:	e0 ec       	ldi	r30, 0xC0	; 192
    8e1e:	fa e0       	ldi	r31, 0x0A	; 10
    8e20:	2f ef       	ldi	r18, 0xFF	; 255
    8e22:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8e24:	80 91 c2 0a 	lds	r24, 0x0AC2
    8e28:	87 ff       	sbrs	r24, 7
    8e2a:	fc cf       	rjmp	.-8      	; 0x8e24 <disk_initialize+0x3e>
	return SPIE.DATA;
    8e2c:	80 91 c3 0a 	lds	r24, 0x0AC3
	//power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
 //CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc));  /* 16MHz */
	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    8e30:	91 50       	subi	r25, 0x01	; 1
    8e32:	b9 f7       	brne	.-18     	; 0x8e22 <disk_initialize+0x3c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    8e34:	80 e0       	ldi	r24, 0x00	; 0
    8e36:	40 e0       	ldi	r20, 0x00	; 0
    8e38:	50 e0       	ldi	r21, 0x00	; 0
    8e3a:	60 e0       	ldi	r22, 0x00	; 0
    8e3c:	70 e0       	ldi	r23, 0x00	; 0
    8e3e:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <send_cmd>
    8e42:	81 30       	cpi	r24, 0x01	; 1
    8e44:	09 f0       	breq	.+2      	; 0x8e48 <disk_initialize+0x62>
    8e46:	87 c0       	rjmp	.+270    	; 0x8f56 <disk_initialize+0x170>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    8e48:	84 e6       	ldi	r24, 0x64	; 100
    8e4a:	80 93 92 24 	sts	0x2492, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    8e4e:	88 e0       	ldi	r24, 0x08	; 8
    8e50:	4a ea       	ldi	r20, 0xAA	; 170
    8e52:	51 e0       	ldi	r21, 0x01	; 1
    8e54:	60 e0       	ldi	r22, 0x00	; 0
    8e56:	70 e0       	ldi	r23, 0x00	; 0
    8e58:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <send_cmd>
    8e5c:	81 30       	cpi	r24, 0x01	; 1
    8e5e:	09 f0       	breq	.+2      	; 0x8e62 <disk_initialize+0x7c>
    8e60:	53 c0       	rjmp	.+166    	; 0x8f08 <disk_initialize+0x122>
    8e62:	7e 01       	movw	r14, r28
    8e64:	08 94       	sec
    8e66:	e1 1c       	adc	r14, r1
    8e68:	f1 1c       	adc	r15, r1
    8e6a:	87 01       	movw	r16, r14
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8e6c:	e0 ec       	ldi	r30, 0xC0	; 192
    8e6e:	fa e0       	ldi	r31, 0x0A	; 10
    8e70:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    8e72:	9e 01       	movw	r18, r28
    8e74:	2b 5f       	subi	r18, 0xFB	; 251
    8e76:	3f 4f       	sbci	r19, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8e78:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8e7a:	80 91 c2 0a 	lds	r24, 0x0AC2
    8e7e:	87 ff       	sbrs	r24, 7
    8e80:	fc cf       	rjmp	.-8      	; 0x8e7a <disk_initialize+0x94>
	return SPIE.DATA;
    8e82:	80 91 c3 0a 	lds	r24, 0x0AC3

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    8e86:	d8 01       	movw	r26, r16
    8e88:	8d 93       	st	X+, r24
    8e8a:	8d 01       	movw	r16, r26
    8e8c:	a2 17       	cp	r26, r18
    8e8e:	b3 07       	cpc	r27, r19
    8e90:	99 f7       	brne	.-26     	; 0x8e78 <disk_initialize+0x92>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    8e92:	8b 81       	ldd	r24, Y+3	; 0x03
    8e94:	81 30       	cpi	r24, 0x01	; 1
    8e96:	09 f0       	breq	.+2      	; 0x8e9a <disk_initialize+0xb4>
    8e98:	5e c0       	rjmp	.+188    	; 0x8f56 <disk_initialize+0x170>
    8e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    8e9c:	8a 3a       	cpi	r24, 0xAA	; 170
    8e9e:	09 f0       	breq	.+2      	; 0x8ea2 <disk_initialize+0xbc>
    8ea0:	5a c0       	rjmp	.+180    	; 0x8f56 <disk_initialize+0x170>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    8ea2:	80 91 92 24 	lds	r24, 0x2492
    8ea6:	88 23       	and	r24, r24
    8ea8:	49 f0       	breq	.+18     	; 0x8ebc <disk_initialize+0xd6>
    8eaa:	89 ea       	ldi	r24, 0xA9	; 169
    8eac:	40 e0       	ldi	r20, 0x00	; 0
    8eae:	50 e0       	ldi	r21, 0x00	; 0
    8eb0:	60 e0       	ldi	r22, 0x00	; 0
    8eb2:	70 e4       	ldi	r23, 0x40	; 64
    8eb4:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <send_cmd>
    8eb8:	88 23       	and	r24, r24
    8eba:	99 f7       	brne	.-26     	; 0x8ea2 <disk_initialize+0xbc>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    8ebc:	80 91 92 24 	lds	r24, 0x2492
    8ec0:	88 23       	and	r24, r24
    8ec2:	09 f4       	brne	.+2      	; 0x8ec6 <disk_initialize+0xe0>
    8ec4:	48 c0       	rjmp	.+144    	; 0x8f56 <disk_initialize+0x170>
    8ec6:	8a e3       	ldi	r24, 0x3A	; 58
    8ec8:	40 e0       	ldi	r20, 0x00	; 0
    8eca:	50 e0       	ldi	r21, 0x00	; 0
    8ecc:	60 e0       	ldi	r22, 0x00	; 0
    8ece:	70 e0       	ldi	r23, 0x00	; 0
    8ed0:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <send_cmd>
    8ed4:	88 23       	and	r24, r24
    8ed6:	09 f0       	breq	.+2      	; 0x8eda <disk_initialize+0xf4>
    8ed8:	3e c0       	rjmp	.+124    	; 0x8f56 <disk_initialize+0x170>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8eda:	e0 ec       	ldi	r30, 0xC0	; 192
    8edc:	fa e0       	ldi	r31, 0x0A	; 10
    8ede:	9f ef       	ldi	r25, 0xFF	; 255
    8ee0:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8ee2:	80 91 c2 0a 	lds	r24, 0x0AC2
    8ee6:	87 ff       	sbrs	r24, 7
    8ee8:	fc cf       	rjmp	.-8      	; 0x8ee2 <disk_initialize+0xfc>
	return SPIE.DATA;
    8eea:	80 91 c3 0a 	lds	r24, 0x0AC3
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    8eee:	d7 01       	movw	r26, r14
    8ef0:	8d 93       	st	X+, r24
    8ef2:	7d 01       	movw	r14, r26
    8ef4:	a0 17       	cp	r26, r16
    8ef6:	b1 07       	cpc	r27, r17
    8ef8:	99 f7       	brne	.-26     	; 0x8ee0 <disk_initialize+0xfa>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    8efa:	89 81       	ldd	r24, Y+1	; 0x01
    8efc:	86 fd       	sbrc	r24, 6
    8efe:	02 c0       	rjmp	.+4      	; 0x8f04 <disk_initialize+0x11e>
    8f00:	14 e0       	ldi	r17, 0x04	; 4
    8f02:	2a c0       	rjmp	.+84     	; 0x8f58 <disk_initialize+0x172>
    8f04:	1c e0       	ldi	r17, 0x0C	; 12
    8f06:	28 c0       	rjmp	.+80     	; 0x8f58 <disk_initialize+0x172>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    8f08:	89 ea       	ldi	r24, 0xA9	; 169
    8f0a:	40 e0       	ldi	r20, 0x00	; 0
    8f0c:	50 e0       	ldi	r21, 0x00	; 0
    8f0e:	60 e0       	ldi	r22, 0x00	; 0
    8f10:	70 e0       	ldi	r23, 0x00	; 0
    8f12:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <send_cmd>
    8f16:	82 30       	cpi	r24, 0x02	; 2
    8f18:	18 f0       	brcs	.+6      	; 0x8f20 <disk_initialize+0x13a>
    8f1a:	01 e0       	ldi	r16, 0x01	; 1
    8f1c:	11 e0       	ldi	r17, 0x01	; 1
    8f1e:	02 c0       	rjmp	.+4      	; 0x8f24 <disk_initialize+0x13e>
    8f20:	09 ea       	ldi	r16, 0xA9	; 169
    8f22:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    8f24:	80 91 92 24 	lds	r24, 0x2492
    8f28:	88 23       	and	r24, r24
    8f2a:	49 f0       	breq	.+18     	; 0x8f3e <disk_initialize+0x158>
    8f2c:	80 2f       	mov	r24, r16
    8f2e:	40 e0       	ldi	r20, 0x00	; 0
    8f30:	50 e0       	ldi	r21, 0x00	; 0
    8f32:	60 e0       	ldi	r22, 0x00	; 0
    8f34:	70 e0       	ldi	r23, 0x00	; 0
    8f36:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <send_cmd>
    8f3a:	88 23       	and	r24, r24
    8f3c:	99 f7       	brne	.-26     	; 0x8f24 <disk_initialize+0x13e>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    8f3e:	80 91 92 24 	lds	r24, 0x2492
    8f42:	88 23       	and	r24, r24
    8f44:	41 f0       	breq	.+16     	; 0x8f56 <disk_initialize+0x170>
    8f46:	80 e1       	ldi	r24, 0x10	; 16
    8f48:	40 e0       	ldi	r20, 0x00	; 0
    8f4a:	52 e0       	ldi	r21, 0x02	; 2
    8f4c:	60 e0       	ldi	r22, 0x00	; 0
    8f4e:	70 e0       	ldi	r23, 0x00	; 0
    8f50:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <send_cmd>
    8f54:	81 11       	cpse	r24, r1
    8f56:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
    8f58:	10 93 94 24 	sts	0x2494, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    8f5c:	80 e1       	ldi	r24, 0x10	; 16
    8f5e:	e0 e8       	ldi	r30, 0x80	; 128
    8f60:	f6 e0       	ldi	r31, 0x06	; 6
    8f62:	85 83       	std	Z+5, r24	; 0x05
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    8f64:	8f ef       	ldi	r24, 0xFF	; 255
    8f66:	e0 ec       	ldi	r30, 0xC0	; 192
    8f68:	fa e0       	ldi	r31, 0x0A	; 10
    8f6a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8f6c:	80 91 c2 0a 	lds	r24, 0x0AC2
    8f70:	87 ff       	sbrs	r24, 7
    8f72:	fc cf       	rjmp	.-8      	; 0x8f6c <disk_initialize+0x186>
	return SPIE.DATA;
    8f74:	80 91 c3 0a 	lds	r24, 0x0AC3
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
    8f78:	11 23       	and	r17, r17
    8f7a:	49 f0       	breq	.+18     	; 0x8f8e <disk_initialize+0x1a8>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    8f7c:	80 91 f6 23 	lds	r24, 0x23F6
    8f80:	8e 7f       	andi	r24, 0xFE	; 254
    8f82:	80 93 f6 23 	sts	0x23F6, r24
		FCLK_FAST();
    8f86:	80 ed       	ldi	r24, 0xD0	; 208
    8f88:	80 93 c0 0a 	sts	0x0AC0, r24
    8f8c:	02 c0       	rjmp	.+4      	; 0x8f92 <disk_initialize+0x1ac>
	} else {			/* Initialization failed */
		power_off();
    8f8e:	0e 94 df 45 	call	0x8bbe	; 0x8bbe <power_off>
	}

 //CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc));  /* 32MHz */
	return Stat;
    8f92:	80 91 f6 23 	lds	r24, 0x23F6
}
    8f96:	24 96       	adiw	r28, 0x04	; 4
    8f98:	e6 e0       	ldi	r30, 0x06	; 6
    8f9a:	0c 94 b6 4d 	jmp	0x9b6c	; 0x9b6c <__epilogue_restores__+0x18>

00008f9e <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    8f9e:	88 23       	and	r24, r24
    8fa0:	11 f0       	breq	.+4      	; 0x8fa6 <disk_status+0x8>
    8fa2:	81 e0       	ldi	r24, 0x01	; 1
    8fa4:	08 95       	ret
	return Stat;
    8fa6:	80 91 f6 23 	lds	r24, 0x23F6
}
    8faa:	08 95       	ret

00008fac <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    8fac:	0f 93       	push	r16
    8fae:	cf 93       	push	r28
    8fb0:	df 93       	push	r29
    8fb2:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
    8fb4:	88 23       	and	r24, r24
    8fb6:	09 f0       	breq	.+2      	; 0x8fba <disk_read+0xe>
    8fb8:	57 c0       	rjmp	.+174    	; 0x9068 <disk_read+0xbc>
    8fba:	00 23       	and	r16, r16
    8fbc:	09 f4       	brne	.+2      	; 0x8fc0 <disk_read+0x14>
    8fbe:	54 c0       	rjmp	.+168    	; 0x9068 <disk_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    8fc0:	80 91 f6 23 	lds	r24, 0x23F6
    8fc4:	80 ff       	sbrs	r24, 0
    8fc6:	03 c0       	rjmp	.+6      	; 0x8fce <disk_read+0x22>
    8fc8:	23 e0       	ldi	r18, 0x03	; 3
    8fca:	30 e0       	ldi	r19, 0x00	; 0
    8fcc:	4f c0       	rjmp	.+158    	; 0x906c <disk_read+0xc0>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    8fce:	80 91 94 24 	lds	r24, 0x2494
    8fd2:	83 fd       	sbrc	r24, 3
    8fd4:	07 c0       	rjmp	.+14     	; 0x8fe4 <disk_read+0x38>
    8fd6:	69 e0       	ldi	r22, 0x09	; 9
    8fd8:	22 0f       	add	r18, r18
    8fda:	33 1f       	adc	r19, r19
    8fdc:	44 1f       	adc	r20, r20
    8fde:	55 1f       	adc	r21, r21
    8fe0:	6a 95       	dec	r22
    8fe2:	d1 f7       	brne	.-12     	; 0x8fd8 <disk_read+0x2c>

	if (count == 1) {	/* Single block read */
    8fe4:	01 30       	cpi	r16, 0x01	; 1
    8fe6:	89 f4       	brne	.+34     	; 0x900a <disk_read+0x5e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    8fe8:	81 e1       	ldi	r24, 0x11	; 17
    8fea:	ba 01       	movw	r22, r20
    8fec:	a9 01       	movw	r20, r18
    8fee:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <send_cmd>
    8ff2:	88 23       	and	r24, r24
    8ff4:	21 f5       	brne	.+72     	; 0x903e <disk_read+0x92>
    8ff6:	ce 01       	movw	r24, r28
    8ff8:	60 e0       	ldi	r22, 0x00	; 0
    8ffa:	72 e0       	ldi	r23, 0x02	; 2
    8ffc:	0e 94 0a 46 	call	0x8c14	; 0x8c14 <rcvr_datablock>
    9000:	00 e0       	ldi	r16, 0x00	; 0
    9002:	89 2b       	or	r24, r25
    9004:	e1 f4       	brne	.+56     	; 0x903e <disk_read+0x92>
    9006:	01 e0       	ldi	r16, 0x01	; 1
    9008:	1a c0       	rjmp	.+52     	; 0x903e <disk_read+0x92>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    900a:	82 e1       	ldi	r24, 0x12	; 18
    900c:	ba 01       	movw	r22, r20
    900e:	a9 01       	movw	r20, r18
    9010:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <send_cmd>
    9014:	88 23       	and	r24, r24
    9016:	99 f4       	brne	.+38     	; 0x903e <disk_read+0x92>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    9018:	ce 01       	movw	r24, r28
    901a:	60 e0       	ldi	r22, 0x00	; 0
    901c:	72 e0       	ldi	r23, 0x02	; 2
    901e:	0e 94 0a 46 	call	0x8c14	; 0x8c14 <rcvr_datablock>
    9022:	89 2b       	or	r24, r25
    9024:	29 f0       	breq	.+10     	; 0x9030 <disk_read+0x84>
				buff += 512;
			} while (--count);
    9026:	01 50       	subi	r16, 0x01	; 1
    9028:	19 f0       	breq	.+6      	; 0x9030 <disk_read+0x84>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
    902a:	c0 50       	subi	r28, 0x00	; 0
    902c:	de 4f       	sbci	r29, 0xFE	; 254
    902e:	f4 cf       	rjmp	.-24     	; 0x9018 <disk_read+0x6c>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    9030:	8c e0       	ldi	r24, 0x0C	; 12
    9032:	40 e0       	ldi	r20, 0x00	; 0
    9034:	50 e0       	ldi	r21, 0x00	; 0
    9036:	60 e0       	ldi	r22, 0x00	; 0
    9038:	70 e0       	ldi	r23, 0x00	; 0
    903a:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    903e:	80 e1       	ldi	r24, 0x10	; 16
    9040:	e0 e8       	ldi	r30, 0x80	; 128
    9042:	f6 e0       	ldi	r31, 0x06	; 6
    9044:	85 83       	std	Z+5, r24	; 0x05
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9046:	8f ef       	ldi	r24, 0xFF	; 255
    9048:	e0 ec       	ldi	r30, 0xC0	; 192
    904a:	fa e0       	ldi	r31, 0x0A	; 10
    904c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    904e:	80 91 c2 0a 	lds	r24, 0x0AC2
    9052:	87 ff       	sbrs	r24, 7
    9054:	fc cf       	rjmp	.-8      	; 0x904e <disk_read+0xa2>
	return SPIE.DATA;
    9056:	80 91 c3 0a 	lds	r24, 0x0AC3
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
    905a:	20 e0       	ldi	r18, 0x00	; 0
    905c:	30 e0       	ldi	r19, 0x00	; 0
    905e:	00 23       	and	r16, r16
    9060:	29 f0       	breq	.+10     	; 0x906c <disk_read+0xc0>
    9062:	21 e0       	ldi	r18, 0x01	; 1
    9064:	30 e0       	ldi	r19, 0x00	; 0
    9066:	02 c0       	rjmp	.+4      	; 0x906c <disk_read+0xc0>
    9068:	24 e0       	ldi	r18, 0x04	; 4
    906a:	30 e0       	ldi	r19, 0x00	; 0
}
    906c:	c9 01       	movw	r24, r18
    906e:	df 91       	pop	r29
    9070:	cf 91       	pop	r28
    9072:	0f 91       	pop	r16
    9074:	08 95       	ret

00009076 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    9076:	a0 e1       	ldi	r26, 0x10	; 16
    9078:	b0 e0       	ldi	r27, 0x00	; 0
    907a:	e1 e4       	ldi	r30, 0x41	; 65
    907c:	f8 e4       	ldi	r31, 0x48	; 72
    907e:	0c 94 9b 4d 	jmp	0x9b36	; 0x9b36 <__prologue_saves__+0x1a>
    9082:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (drv) return RES_PARERR;
    9084:	88 23       	and	r24, r24
    9086:	09 f0       	breq	.+2      	; 0x908a <disk_ioctl+0x14>
    9088:	ab c1       	rjmp	.+854    	; 0x93e0 <disk_ioctl+0x36a>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
    908a:	65 30       	cpi	r22, 0x05	; 5
    908c:	81 f4       	brne	.+32     	; 0x90ae <disk_ioctl+0x38>
		switch (ptr[0]) {
    908e:	fa 01       	movw	r30, r20
    9090:	80 81       	ld	r24, Z
    9092:	88 23       	and	r24, r24
    9094:	21 f0       	breq	.+8      	; 0x909e <disk_ioctl+0x28>
    9096:	81 30       	cpi	r24, 0x01	; 1
    9098:	09 f0       	breq	.+2      	; 0x909c <disk_ioctl+0x26>
    909a:	a2 c1       	rjmp	.+836    	; 0x93e0 <disk_ioctl+0x36a>
    909c:	03 c0       	rjmp	.+6      	; 0x90a4 <disk_ioctl+0x2e>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
    909e:	0e 94 df 45 	call	0x8bbe	; 0x8bbe <power_off>
    90a2:	02 c0       	rjmp	.+4      	; 0x90a8 <disk_ioctl+0x32>
			res = RES_OK;
			break;
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
    90a4:	fa 01       	movw	r30, r20
    90a6:	81 83       	std	Z+1, r24	; 0x01
    90a8:	20 e0       	ldi	r18, 0x00	; 0
    90aa:	30 e0       	ldi	r19, 0x00	; 0
    90ac:	9b c1       	rjmp	.+822    	; 0x93e4 <disk_ioctl+0x36e>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    90ae:	80 91 f6 23 	lds	r24, 0x23F6
    90b2:	80 ff       	sbrs	r24, 0
    90b4:	03 c0       	rjmp	.+6      	; 0x90bc <disk_ioctl+0x46>
    90b6:	23 e0       	ldi	r18, 0x03	; 3
    90b8:	30 e0       	ldi	r19, 0x00	; 0
    90ba:	94 c1       	rjmp	.+808    	; 0x93e4 <disk_ioctl+0x36e>

		switch (ctrl) {
    90bc:	e6 2f       	mov	r30, r22
    90be:	f0 e0       	ldi	r31, 0x00	; 0
    90c0:	ef 30       	cpi	r30, 0x0F	; 15
    90c2:	f1 05       	cpc	r31, r1
    90c4:	20 f4       	brcc	.+8      	; 0x90ce <disk_ioctl+0x58>
    90c6:	e5 5f       	subi	r30, 0xF5	; 245
    90c8:	fe 4f       	sbci	r31, 0xFE	; 254
    90ca:	0c 94 c5 4d 	jmp	0x9b8a	; 0x9b8a <__tablejump2__>
    90ce:	24 e0       	ldi	r18, 0x04	; 4
    90d0:	30 e0       	ldi	r19, 0x00	; 0
    90d2:	77 c1       	rjmp	.+750    	; 0x93c2 <disk_ioctl+0x34c>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    90d4:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <select>
    90d8:	89 2b       	or	r24, r25
    90da:	09 f4       	brne	.+2      	; 0x90de <disk_ioctl+0x68>
    90dc:	70 c1       	rjmp	.+736    	; 0x93be <disk_ioctl+0x348>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    90de:	80 e1       	ldi	r24, 0x10	; 16
    90e0:	e0 e8       	ldi	r30, 0x80	; 128
    90e2:	f6 e0       	ldi	r31, 0x06	; 6
    90e4:	85 83       	std	Z+5, r24	; 0x05
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    90e6:	8f ef       	ldi	r24, 0xFF	; 255
    90e8:	e0 ec       	ldi	r30, 0xC0	; 192
    90ea:	fa e0       	ldi	r31, 0x0A	; 10
    90ec:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    90ee:	80 91 c2 0a 	lds	r24, 0x0AC2
    90f2:	87 ff       	sbrs	r24, 7
    90f4:	fc cf       	rjmp	.-8      	; 0x90ee <disk_ioctl+0x78>
	return SPIE.DATA;
    90f6:	80 91 c3 0a 	lds	r24, 0x0AC3
    90fa:	0e c1       	rjmp	.+540    	; 0x9318 <disk_ioctl+0x2a2>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    90fc:	89 e0       	ldi	r24, 0x09	; 9
    90fe:	40 e0       	ldi	r20, 0x00	; 0
    9100:	50 e0       	ldi	r21, 0x00	; 0
    9102:	60 e0       	ldi	r22, 0x00	; 0
    9104:	70 e0       	ldi	r23, 0x00	; 0
    9106:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <send_cmd>
    910a:	88 23       	and	r24, r24
    910c:	09 f0       	breq	.+2      	; 0x9110 <disk_ioctl+0x9a>
    910e:	57 c1       	rjmp	.+686    	; 0x93be <disk_ioctl+0x348>
    9110:	ce 01       	movw	r24, r28
    9112:	01 96       	adiw	r24, 0x01	; 1
    9114:	60 e1       	ldi	r22, 0x10	; 16
    9116:	70 e0       	ldi	r23, 0x00	; 0
    9118:	0e 94 0a 46 	call	0x8c14	; 0x8c14 <rcvr_datablock>
    911c:	89 2b       	or	r24, r25
    911e:	09 f4       	brne	.+2      	; 0x9122 <disk_ioctl+0xac>
    9120:	4e c1       	rjmp	.+668    	; 0x93be <disk_ioctl+0x348>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    9122:	89 81       	ldd	r24, Y+1	; 0x01
    9124:	82 95       	swap	r24
    9126:	86 95       	lsr	r24
    9128:	86 95       	lsr	r24
    912a:	83 70       	andi	r24, 0x03	; 3
    912c:	28 85       	ldd	r18, Y+8	; 0x08
    912e:	69 85       	ldd	r22, Y+9	; 0x09
    9130:	7a 85       	ldd	r23, Y+10	; 0x0a
    9132:	81 30       	cpi	r24, 0x01	; 1
    9134:	01 f5       	brne	.+64     	; 0x9176 <disk_ioctl+0x100>
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = csize << 10;
    9136:	30 e0       	ldi	r19, 0x00	; 0
    9138:	40 e0       	ldi	r20, 0x00	; 0
    913a:	50 e0       	ldi	r21, 0x00	; 0
    913c:	2f 73       	andi	r18, 0x3F	; 63
    913e:	30 70       	andi	r19, 0x00	; 0
    9140:	40 70       	andi	r20, 0x00	; 0
    9142:	50 70       	andi	r21, 0x00	; 0
    9144:	a9 01       	movw	r20, r18
    9146:	33 27       	eor	r19, r19
    9148:	22 27       	eor	r18, r18
    914a:	2f 5f       	subi	r18, 0xFF	; 255
    914c:	3f 4f       	sbci	r19, 0xFF	; 255
    914e:	4f 4f       	sbci	r20, 0xFF	; 255
    9150:	5f 4f       	sbci	r21, 0xFF	; 255
    9152:	96 2f       	mov	r25, r22
    9154:	80 e0       	ldi	r24, 0x00	; 0
    9156:	87 0f       	add	r24, r23
    9158:	91 1d       	adc	r25, r1
    915a:	a0 e0       	ldi	r26, 0x00	; 0
    915c:	b0 e0       	ldi	r27, 0x00	; 0
    915e:	28 0f       	add	r18, r24
    9160:	39 1f       	adc	r19, r25
    9162:	4a 1f       	adc	r20, r26
    9164:	5b 1f       	adc	r21, r27
    9166:	8a e0       	ldi	r24, 0x0A	; 10
    9168:	22 0f       	add	r18, r18
    916a:	33 1f       	adc	r19, r19
    916c:	44 1f       	adc	r20, r20
    916e:	55 1f       	adc	r21, r21
    9170:	8a 95       	dec	r24
    9172:	d1 f7       	brne	.-12     	; 0x9168 <disk_ioctl+0xf2>
    9174:	2d c0       	rjmp	.+90     	; 0x91d0 <disk_ioctl+0x15a>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = csize << (n - 9);
    9176:	62 95       	swap	r22
    9178:	66 95       	lsr	r22
    917a:	66 95       	lsr	r22
    917c:	63 70       	andi	r22, 0x03	; 3
    917e:	30 e0       	ldi	r19, 0x00	; 0
    9180:	22 0f       	add	r18, r18
    9182:	33 1f       	adc	r19, r19
    9184:	22 0f       	add	r18, r18
    9186:	33 1f       	adc	r19, r19
    9188:	26 0f       	add	r18, r22
    918a:	31 1d       	adc	r19, r1
    918c:	2f 5f       	subi	r18, 0xFF	; 255
    918e:	3f 4f       	sbci	r19, 0xFF	; 255
    9190:	8f 81       	ldd	r24, Y+7	; 0x07
    9192:	90 e0       	ldi	r25, 0x00	; 0
    9194:	83 70       	andi	r24, 0x03	; 3
    9196:	90 70       	andi	r25, 0x00	; 0
    9198:	98 2f       	mov	r25, r24
    919a:	88 27       	eor	r24, r24
    919c:	99 0f       	add	r25, r25
    919e:	99 0f       	add	r25, r25
    91a0:	28 0f       	add	r18, r24
    91a2:	39 1f       	adc	r19, r25
    91a4:	40 e0       	ldi	r20, 0x00	; 0
    91a6:	50 e0       	ldi	r21, 0x00	; 0
    91a8:	8e 81       	ldd	r24, Y+6	; 0x06
    91aa:	8f 70       	andi	r24, 0x0F	; 15
    91ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    91ae:	66 1f       	adc	r22, r22
    91b0:	66 27       	eor	r22, r22
    91b2:	66 1f       	adc	r22, r22
    91b4:	86 0f       	add	r24, r22
    91b6:	8e 5f       	subi	r24, 0xFE	; 254
    91b8:	73 70       	andi	r23, 0x03	; 3
    91ba:	77 0f       	add	r23, r23
    91bc:	87 0f       	add	r24, r23
    91be:	90 e0       	ldi	r25, 0x00	; 0
    91c0:	09 97       	sbiw	r24, 0x09	; 9
    91c2:	04 c0       	rjmp	.+8      	; 0x91cc <disk_ioctl+0x156>
    91c4:	22 0f       	add	r18, r18
    91c6:	33 1f       	adc	r19, r19
    91c8:	44 1f       	adc	r20, r20
    91ca:	55 1f       	adc	r21, r21
    91cc:	8a 95       	dec	r24
    91ce:	d2 f7       	brpl	.-12     	; 0x91c4 <disk_ioctl+0x14e>
    91d0:	f8 01       	movw	r30, r16
    91d2:	20 83       	st	Z, r18
    91d4:	31 83       	std	Z+1, r19	; 0x01
    91d6:	42 83       	std	Z+2, r20	; 0x02
    91d8:	53 83       	std	Z+3, r21	; 0x03
    91da:	9e c0       	rjmp	.+316    	; 0x9318 <disk_ioctl+0x2a2>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    91dc:	80 e0       	ldi	r24, 0x00	; 0
    91de:	92 e0       	ldi	r25, 0x02	; 2
    91e0:	fa 01       	movw	r30, r20
    91e2:	80 83       	st	Z, r24
    91e4:	91 83       	std	Z+1, r25	; 0x01
    91e6:	98 c0       	rjmp	.+304    	; 0x9318 <disk_ioctl+0x2a2>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
    91e8:	80 91 94 24 	lds	r24, 0x2494
    91ec:	f8 2e       	mov	r15, r24
    91ee:	82 ff       	sbrs	r24, 2
    91f0:	39 c0       	rjmp	.+114    	; 0x9264 <disk_ioctl+0x1ee>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    91f2:	8d e8       	ldi	r24, 0x8D	; 141
    91f4:	40 e0       	ldi	r20, 0x00	; 0
    91f6:	50 e0       	ldi	r21, 0x00	; 0
    91f8:	60 e0       	ldi	r22, 0x00	; 0
    91fa:	70 e0       	ldi	r23, 0x00	; 0
    91fc:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <send_cmd>
    9200:	88 23       	and	r24, r24
    9202:	09 f0       	breq	.+2      	; 0x9206 <disk_ioctl+0x190>
    9204:	dc c0       	rjmp	.+440    	; 0x93be <disk_ioctl+0x348>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9206:	8f ef       	ldi	r24, 0xFF	; 255
    9208:	e0 ec       	ldi	r30, 0xC0	; 192
    920a:	fa e0       	ldi	r31, 0x0A	; 10
    920c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    920e:	80 91 c2 0a 	lds	r24, 0x0AC2
    9212:	87 ff       	sbrs	r24, 7
    9214:	fc cf       	rjmp	.-8      	; 0x920e <disk_ioctl+0x198>
	return SPIE.DATA;
    9216:	80 91 c3 0a 	lds	r24, 0x0AC3

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					xchg_spi(0xFF);
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    921a:	ce 01       	movw	r24, r28
    921c:	01 96       	adiw	r24, 0x01	; 1
    921e:	60 e1       	ldi	r22, 0x10	; 16
    9220:	70 e0       	ldi	r23, 0x00	; 0
    9222:	0e 94 0a 46 	call	0x8c14	; 0x8c14 <rcvr_datablock>
    9226:	89 2b       	or	r24, r25
    9228:	09 f4       	brne	.+2      	; 0x922c <disk_ioctl+0x1b6>
    922a:	c9 c0       	rjmp	.+402    	; 0x93be <disk_ioctl+0x348>
    922c:	90 e3       	ldi	r25, 0x30	; 48
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    922e:	e0 ec       	ldi	r30, 0xC0	; 192
    9230:	fa e0       	ldi	r31, 0x0A	; 10
    9232:	2f ef       	ldi	r18, 0xFF	; 255
    9234:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    9236:	80 91 c2 0a 	lds	r24, 0x0AC2
    923a:	87 ff       	sbrs	r24, 7
    923c:	fc cf       	rjmp	.-8      	; 0x9236 <disk_ioctl+0x1c0>
	return SPIE.DATA;
    923e:	80 91 c3 0a 	lds	r24, 0x0AC3
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					xchg_spi(0xFF);
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    9242:	91 50       	subi	r25, 0x01	; 1
    9244:	b9 f7       	brne	.-18     	; 0x9234 <disk_ioctl+0x1be>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    9246:	2b 85       	ldd	r18, Y+11	; 0x0b
    9248:	22 95       	swap	r18
    924a:	2f 70       	andi	r18, 0x0F	; 15
    924c:	80 e1       	ldi	r24, 0x10	; 16
    924e:	90 e0       	ldi	r25, 0x00	; 0
    9250:	a0 e0       	ldi	r26, 0x00	; 0
    9252:	b0 e0       	ldi	r27, 0x00	; 0
    9254:	04 c0       	rjmp	.+8      	; 0x925e <disk_ioctl+0x1e8>
    9256:	88 0f       	add	r24, r24
    9258:	99 1f       	adc	r25, r25
    925a:	aa 1f       	adc	r26, r26
    925c:	bb 1f       	adc	r27, r27
    925e:	2a 95       	dec	r18
    9260:	d2 f7       	brpl	.-12     	; 0x9256 <disk_ioctl+0x1e0>
    9262:	55 c0       	rjmp	.+170    	; 0x930e <disk_ioctl+0x298>
						res = RES_OK;
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    9264:	89 e0       	ldi	r24, 0x09	; 9
    9266:	40 e0       	ldi	r20, 0x00	; 0
    9268:	50 e0       	ldi	r21, 0x00	; 0
    926a:	60 e0       	ldi	r22, 0x00	; 0
    926c:	70 e0       	ldi	r23, 0x00	; 0
    926e:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <send_cmd>
    9272:	88 23       	and	r24, r24
    9274:	09 f0       	breq	.+2      	; 0x9278 <disk_ioctl+0x202>
    9276:	a3 c0       	rjmp	.+326    	; 0x93be <disk_ioctl+0x348>
    9278:	ce 01       	movw	r24, r28
    927a:	01 96       	adiw	r24, 0x01	; 1
    927c:	60 e1       	ldi	r22, 0x10	; 16
    927e:	70 e0       	ldi	r23, 0x00	; 0
    9280:	0e 94 0a 46 	call	0x8c14	; 0x8c14 <rcvr_datablock>
    9284:	89 2b       	or	r24, r25
    9286:	09 f4       	brne	.+2      	; 0x928a <disk_ioctl+0x214>
    9288:	9a c0       	rjmp	.+308    	; 0x93be <disk_ioctl+0x348>
    928a:	4b 85       	ldd	r20, Y+11	; 0x0b
    928c:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDv1 */
    928e:	f1 fe       	sbrs	r15, 1
    9290:	1b c0       	rjmp	.+54     	; 0x92c8 <disk_ioctl+0x252>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    9292:	88 1f       	adc	r24, r24
    9294:	88 27       	eor	r24, r24
    9296:	88 1f       	adc	r24, r24
    9298:	90 e0       	ldi	r25, 0x00	; 0
    929a:	01 96       	adiw	r24, 0x01	; 1
    929c:	24 2f       	mov	r18, r20
    929e:	30 e0       	ldi	r19, 0x00	; 0
    92a0:	2f 73       	andi	r18, 0x3F	; 63
    92a2:	30 70       	andi	r19, 0x00	; 0
    92a4:	22 0f       	add	r18, r18
    92a6:	33 1f       	adc	r19, r19
    92a8:	82 0f       	add	r24, r18
    92aa:	93 1f       	adc	r25, r19
    92ac:	2e 85       	ldd	r18, Y+14	; 0x0e
    92ae:	22 95       	swap	r18
    92b0:	26 95       	lsr	r18
    92b2:	26 95       	lsr	r18
    92b4:	23 70       	andi	r18, 0x03	; 3
    92b6:	30 e0       	ldi	r19, 0x00	; 0
    92b8:	21 50       	subi	r18, 0x01	; 1
    92ba:	30 40       	sbci	r19, 0x00	; 0
    92bc:	02 c0       	rjmp	.+4      	; 0x92c2 <disk_ioctl+0x24c>
    92be:	88 0f       	add	r24, r24
    92c0:	99 1f       	adc	r25, r25
    92c2:	2a 95       	dec	r18
    92c4:	e2 f7       	brpl	.-8      	; 0x92be <disk_ioctl+0x248>
    92c6:	21 c0       	rjmp	.+66     	; 0x930a <disk_ioctl+0x294>
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    92c8:	28 2f       	mov	r18, r24
    92ca:	30 e0       	ldi	r19, 0x00	; 0
    92cc:	23 70       	andi	r18, 0x03	; 3
    92ce:	30 70       	andi	r19, 0x00	; 0
    92d0:	e3 e0       	ldi	r30, 0x03	; 3
    92d2:	22 0f       	add	r18, r18
    92d4:	33 1f       	adc	r19, r19
    92d6:	ea 95       	dec	r30
    92d8:	e1 f7       	brne	.-8      	; 0x92d2 <disk_ioctl+0x25c>
    92da:	82 95       	swap	r24
    92dc:	86 95       	lsr	r24
    92de:	87 70       	andi	r24, 0x07	; 7
    92e0:	28 0f       	add	r18, r24
    92e2:	31 1d       	adc	r19, r1
    92e4:	2f 5f       	subi	r18, 0xFF	; 255
    92e6:	3f 4f       	sbci	r19, 0xFF	; 255
    92e8:	84 2f       	mov	r24, r20
    92ea:	90 e0       	ldi	r25, 0x00	; 0
    92ec:	8c 77       	andi	r24, 0x7C	; 124
    92ee:	90 70       	andi	r25, 0x00	; 0
    92f0:	95 95       	asr	r25
    92f2:	87 95       	ror	r24
    92f4:	95 95       	asr	r25
    92f6:	87 95       	ror	r24
    92f8:	01 96       	adiw	r24, 0x01	; 1
    92fa:	ac 01       	movw	r20, r24
    92fc:	24 9f       	mul	r18, r20
    92fe:	c0 01       	movw	r24, r0
    9300:	25 9f       	mul	r18, r21
    9302:	90 0d       	add	r25, r0
    9304:	34 9f       	mul	r19, r20
    9306:	90 0d       	add	r25, r0
    9308:	11 24       	eor	r1, r1
    930a:	a0 e0       	ldi	r26, 0x00	; 0
    930c:	b0 e0       	ldi	r27, 0x00	; 0
    930e:	f8 01       	movw	r30, r16
    9310:	80 83       	st	Z, r24
    9312:	91 83       	std	Z+1, r25	; 0x01
    9314:	a2 83       	std	Z+2, r26	; 0x02
    9316:	b3 83       	std	Z+3, r27	; 0x03
    9318:	20 e0       	ldi	r18, 0x00	; 0
    931a:	30 e0       	ldi	r19, 0x00	; 0
    931c:	52 c0       	rjmp	.+164    	; 0x93c2 <disk_ioctl+0x34c>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    931e:	80 91 94 24 	lds	r24, 0x2494
    9322:	fa 01       	movw	r30, r20
    9324:	80 83       	st	Z, r24
    9326:	f8 cf       	rjmp	.-16     	; 0x9318 <disk_ioctl+0x2a2>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    9328:	89 e0       	ldi	r24, 0x09	; 9
    932a:	01 c0       	rjmp	.+2      	; 0x932e <disk_ioctl+0x2b8>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    932c:	8a e0       	ldi	r24, 0x0A	; 10
    932e:	40 e0       	ldi	r20, 0x00	; 0
    9330:	50 e0       	ldi	r21, 0x00	; 0
    9332:	60 e0       	ldi	r22, 0x00	; 0
    9334:	70 e0       	ldi	r23, 0x00	; 0
    9336:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <send_cmd>
    933a:	88 23       	and	r24, r24
    933c:	09 f0       	breq	.+2      	; 0x9340 <disk_ioctl+0x2ca>
    933e:	3f c0       	rjmp	.+126    	; 0x93be <disk_ioctl+0x348>
    9340:	c8 01       	movw	r24, r16
    9342:	60 e1       	ldi	r22, 0x10	; 16
    9344:	70 e0       	ldi	r23, 0x00	; 0
    9346:	35 c0       	rjmp	.+106    	; 0x93b2 <disk_ioctl+0x33c>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    9348:	8a e3       	ldi	r24, 0x3A	; 58
    934a:	40 e0       	ldi	r20, 0x00	; 0
    934c:	50 e0       	ldi	r21, 0x00	; 0
    934e:	60 e0       	ldi	r22, 0x00	; 0
    9350:	70 e0       	ldi	r23, 0x00	; 0
    9352:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <send_cmd>
    9356:	88 23       	and	r24, r24
    9358:	91 f5       	brne	.+100    	; 0x93be <disk_ioctl+0x348>
    935a:	f8 01       	movw	r30, r16
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    935c:	a0 ec       	ldi	r26, 0xC0	; 192
    935e:	ba e0       	ldi	r27, 0x0A	; 10
    9360:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    9362:	98 01       	movw	r18, r16
    9364:	2d 5f       	subi	r18, 0xFD	; 253
    9366:	3f 4f       	sbci	r19, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9368:	13 96       	adiw	r26, 0x03	; 3
    936a:	9c 93       	st	X, r25
    936c:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SPIE.STATUS, 7);
    936e:	80 91 c2 0a 	lds	r24, 0x0AC2
    9372:	87 ff       	sbrs	r24, 7
    9374:	fc cf       	rjmp	.-8      	; 0x936e <disk_ioctl+0x2f8>
	return SPIE.DATA;
    9376:	80 91 c3 0a 	lds	r24, 0x0AC3
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    937a:	80 83       	st	Z, r24
    937c:	e2 17       	cp	r30, r18
    937e:	f3 07       	cpc	r31, r19
    9380:	59 f2       	breq	.-106    	; 0x9318 <disk_ioctl+0x2a2>
    9382:	31 96       	adiw	r30, 0x01	; 1
    9384:	f1 cf       	rjmp	.-30     	; 0x9368 <disk_ioctl+0x2f2>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    9386:	8d e8       	ldi	r24, 0x8D	; 141
    9388:	40 e0       	ldi	r20, 0x00	; 0
    938a:	50 e0       	ldi	r21, 0x00	; 0
    938c:	60 e0       	ldi	r22, 0x00	; 0
    938e:	70 e0       	ldi	r23, 0x00	; 0
    9390:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <send_cmd>
    9394:	88 23       	and	r24, r24
    9396:	99 f4       	brne	.+38     	; 0x93be <disk_ioctl+0x348>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9398:	8f ef       	ldi	r24, 0xFF	; 255
    939a:	e0 ec       	ldi	r30, 0xC0	; 192
    939c:	fa e0       	ldi	r31, 0x0A	; 10
    939e:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    93a0:	80 91 c2 0a 	lds	r24, 0x0AC2
    93a4:	87 ff       	sbrs	r24, 7
    93a6:	fc cf       	rjmp	.-8      	; 0x93a0 <disk_ioctl+0x32a>
	return SPIE.DATA;
    93a8:	80 91 c3 0a 	lds	r24, 0x0AC3
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				xchg_spi(0xFF);
				if (rcvr_datablock(ptr, 64))
    93ac:	c8 01       	movw	r24, r16
    93ae:	60 e4       	ldi	r22, 0x40	; 64
    93b0:	70 e0       	ldi	r23, 0x00	; 0
    93b2:	0e 94 0a 46 	call	0x8c14	; 0x8c14 <rcvr_datablock>
    93b6:	20 e0       	ldi	r18, 0x00	; 0
    93b8:	30 e0       	ldi	r19, 0x00	; 0
    93ba:	89 2b       	or	r24, r25
    93bc:	11 f4       	brne	.+4      	; 0x93c2 <disk_ioctl+0x34c>
    93be:	21 e0       	ldi	r18, 0x01	; 1
    93c0:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    93c2:	80 e1       	ldi	r24, 0x10	; 16
    93c4:	e0 e8       	ldi	r30, 0x80	; 128
    93c6:	f6 e0       	ldi	r31, 0x06	; 6
    93c8:	85 83       	std	Z+5, r24	; 0x05
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    93ca:	8f ef       	ldi	r24, 0xFF	; 255
    93cc:	e0 ec       	ldi	r30, 0xC0	; 192
    93ce:	fa e0       	ldi	r31, 0x0A	; 10
    93d0:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    93d2:	80 91 c2 0a 	lds	r24, 0x0AC2
    93d6:	87 ff       	sbrs	r24, 7
    93d8:	fc cf       	rjmp	.-8      	; 0x93d2 <disk_ioctl+0x35c>
	return SPIE.DATA;
    93da:	80 91 c3 0a 	lds	r24, 0x0AC3
    93de:	02 c0       	rjmp	.+4      	; 0x93e4 <disk_ioctl+0x36e>
    93e0:	24 e0       	ldi	r18, 0x04	; 4
    93e2:	30 e0       	ldi	r19, 0x00	; 0

		deselect();
	}

	return res;
}
    93e4:	c9 01       	movw	r24, r18
    93e6:	60 96       	adiw	r28, 0x10	; 16
    93e8:	e5 e0       	ldi	r30, 0x05	; 5
    93ea:	0c 94 b7 4d 	jmp	0x9b6e	; 0x9b6e <__epilogue_restores__+0x1a>

000093ee <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    93ee:	80 91 92 24 	lds	r24, 0x2492
	if (n) Timer1 = --n;
    93f2:	88 23       	and	r24, r24
    93f4:	19 f0       	breq	.+6      	; 0x93fc <disk_timerproc+0xe>
    93f6:	81 50       	subi	r24, 0x01	; 1
    93f8:	80 93 92 24 	sts	0x2492, r24
	n = Timer2;
    93fc:	80 91 93 24 	lds	r24, 0x2493
	if (n) Timer2 = --n;
    9400:	88 23       	and	r24, r24
    9402:	19 f0       	breq	.+6      	; 0x940a <disk_timerproc+0x1c>
    9404:	81 50       	subi	r24, 0x01	; 1
    9406:	80 93 93 24 	sts	0x2493, r24

	s = Stat;
    940a:	90 91 f6 23 	lds	r25, 0x23F6

	if (SOCKWP)				/* Write protected */
    940e:	80 91 e8 06 	lds	r24, 0x06E8
    9412:	80 ff       	sbrs	r24, 0
    9414:	02 c0       	rjmp	.+4      	; 0x941a <disk_timerproc+0x2c>
		s |= STA_PROTECT;
    9416:	94 60       	ori	r25, 0x04	; 4
    9418:	01 c0       	rjmp	.+2      	; 0x941c <disk_timerproc+0x2e>
	else					/* Write enabled */
		s &= ~STA_PROTECT;
    941a:	9b 7f       	andi	r25, 0xFB	; 251

	if (SOCKINS)			/* Card inserted */
    941c:	80 91 e8 06 	lds	r24, 0x06E8
    9420:	81 ff       	sbrs	r24, 1
    9422:	03 c0       	rjmp	.+6      	; 0x942a <disk_timerproc+0x3c>
      s |= (STA_NODISK | STA_NOINIT);
    9424:	89 2f       	mov	r24, r25
    9426:	83 60       	ori	r24, 0x03	; 3
    9428:	02 c0       	rjmp	.+4      	; 0x942e <disk_timerproc+0x40>
	else					/* Socket empty */
      s &= ~STA_NODISK;
    942a:	89 2f       	mov	r24, r25
    942c:	8d 7f       	andi	r24, 0xFD	; 253

	Stat = s;				/* Update MMC status */
    942e:	80 93 f6 23 	sts	0x23F6, r24
}
    9432:	08 95       	ret

00009434 <__vector_53>:
/*---------------------------------------------------------*/
/* 100Hz timer interrupt generated by TCE1                 */
/*---------------------------------------------------------*/

ISR(TCE1_OVF_vect)
{
    9434:	1f 92       	push	r1
    9436:	0f 92       	push	r0
    9438:	0f b6       	in	r0, 0x3f	; 63
    943a:	0f 92       	push	r0
    943c:	08 b6       	in	r0, 0x38	; 56
    943e:	0f 92       	push	r0
    9440:	09 b6       	in	r0, 0x39	; 57
    9442:	0f 92       	push	r0
    9444:	0b b6       	in	r0, 0x3b	; 59
    9446:	0f 92       	push	r0
    9448:	11 24       	eor	r1, r1
    944a:	18 be       	out	0x38, r1	; 56
    944c:	19 be       	out	0x39, r1	; 57
    944e:	1b be       	out	0x3b, r1	; 59
    9450:	2f 93       	push	r18
    9452:	3f 93       	push	r19
    9454:	4f 93       	push	r20
    9456:	5f 93       	push	r21
    9458:	6f 93       	push	r22
    945a:	7f 93       	push	r23
    945c:	8f 93       	push	r24
    945e:	9f 93       	push	r25
    9460:	af 93       	push	r26
    9462:	bf 93       	push	r27
    9464:	ef 93       	push	r30
    9466:	ff 93       	push	r31
  disk_timerproc();  /* Drive timer procedure of low level disk I/O module */
    9468:	0e 94 f7 49 	call	0x93ee	; 0x93ee <disk_timerproc>
}
    946c:	ff 91       	pop	r31
    946e:	ef 91       	pop	r30
    9470:	bf 91       	pop	r27
    9472:	af 91       	pop	r26
    9474:	9f 91       	pop	r25
    9476:	8f 91       	pop	r24
    9478:	7f 91       	pop	r23
    947a:	6f 91       	pop	r22
    947c:	5f 91       	pop	r21
    947e:	4f 91       	pop	r20
    9480:	3f 91       	pop	r19
    9482:	2f 91       	pop	r18
    9484:	0f 90       	pop	r0
    9486:	0b be       	out	0x3b, r0	; 59
    9488:	0f 90       	pop	r0
    948a:	09 be       	out	0x39, r0	; 57
    948c:	0f 90       	pop	r0
    948e:	08 be       	out	0x38, r0	; 56
    9490:	0f 90       	pop	r0
    9492:	0f be       	out	0x3f, r0	; 63
    9494:	0f 90       	pop	r0
    9496:	1f 90       	pop	r1
    9498:	18 95       	reti

0000949a <rtc_gettime>:
#include <string.h>
#include "rtc.h"


BOOL rtc_gettime (RTCLK *rtc)
{
    949a:	fc 01       	movw	r30, r24
	rtc->sec = 30;
    949c:	8e e1       	ldi	r24, 0x1E	; 30
    949e:	87 83       	std	Z+7, r24	; 0x07
	rtc->min = 59;
    94a0:	8b e3       	ldi	r24, 0x3B	; 59
    94a2:	86 83       	std	Z+6, r24	; 0x06
	rtc->hour = 11;
    94a4:	8b e0       	ldi	r24, 0x0B	; 11
    94a6:	85 83       	std	Z+5, r24	; 0x05
	rtc->mday = 3;
    94a8:	83 e0       	ldi	r24, 0x03	; 3
    94aa:	83 83       	std	Z+3, r24	; 0x03
	rtc->month = 9;
    94ac:	89 e0       	ldi	r24, 0x09	; 9
    94ae:	82 83       	std	Z+2, r24	; 0x02
	rtc->year = 2009;
    94b0:	89 ed       	ldi	r24, 0xD9	; 217
    94b2:	97 e0       	ldi	r25, 0x07	; 7
    94b4:	80 83       	st	Z, r24
    94b6:	91 83       	std	Z+1, r25	; 0x01

	return TRUE;
}
    94b8:	81 e0       	ldi	r24, 0x01	; 1
    94ba:	90 e0       	ldi	r25, 0x00	; 0
    94bc:	08 95       	ret

000094be <rtc_settime>:
	buf[4] = rtc->mday / 10 * 16 + rtc->mday % 10;
	buf[5] = rtc->month / 10 * 16 + rtc->month % 10;
	buf[6] = (rtc->year - 2000) / 10 * 16 + (rtc->year - 2000) % 10;

	return TRUE;
}
    94be:	81 e0       	ldi	r24, 0x01	; 1
    94c0:	90 e0       	ldi	r25, 0x00	; 0
    94c2:	08 95       	ret

000094c4 <rtc_init>:

BOOL rtc_init (void)
{
	return TRUE;
}
    94c4:	81 e0       	ldi	r24, 0x01	; 1
    94c6:	90 e0       	ldi	r25, 0x00	; 0
    94c8:	08 95       	ret

000094ca <get_fattime>:
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
    94ca:	6f e6       	ldi	r22, 0x6F	; 111
    94cc:	7f e5       	ldi	r23, 0x5F	; 95
    94ce:	83 e2       	ldi	r24, 0x23	; 35
    94d0:	9b e3       	ldi	r25, 0x3B	; 59
    94d2:	08 95       	ret

000094d4 <__vector_108>:

volatile uint32_t ticks=0;


ISR(TCF0_OVF_vect)			/*signal Handler for timer ovf 0 */
{
    94d4:	1f 92       	push	r1
    94d6:	0f 92       	push	r0
    94d8:	0f b6       	in	r0, 0x3f	; 63
    94da:	0f 92       	push	r0
    94dc:	08 b6       	in	r0, 0x38	; 56
    94de:	0f 92       	push	r0
    94e0:	09 b6       	in	r0, 0x39	; 57
    94e2:	0f 92       	push	r0
    94e4:	11 24       	eor	r1, r1
    94e6:	18 be       	out	0x38, r1	; 56
    94e8:	19 be       	out	0x39, r1	; 57
    94ea:	8f 93       	push	r24
    94ec:	9f 93       	push	r25
    94ee:	af 93       	push	r26
    94f0:	bf 93       	push	r27
	ticks++;
    94f2:	80 91 95 24 	lds	r24, 0x2495
    94f6:	90 91 96 24 	lds	r25, 0x2496
    94fa:	a0 91 97 24 	lds	r26, 0x2497
    94fe:	b0 91 98 24 	lds	r27, 0x2498
    9502:	01 96       	adiw	r24, 0x01	; 1
    9504:	a1 1d       	adc	r26, r1
    9506:	b1 1d       	adc	r27, r1
    9508:	80 93 95 24 	sts	0x2495, r24
    950c:	90 93 96 24 	sts	0x2496, r25
    9510:	a0 93 97 24 	sts	0x2497, r26
    9514:	b0 93 98 24 	sts	0x2498, r27
}
    9518:	bf 91       	pop	r27
    951a:	af 91       	pop	r26
    951c:	9f 91       	pop	r25
    951e:	8f 91       	pop	r24
    9520:	0f 90       	pop	r0
    9522:	09 be       	out	0x39, r0	; 57
    9524:	0f 90       	pop	r0
    9526:	08 be       	out	0x38, r0	; 56
    9528:	0f 90       	pop	r0
    952a:	0f be       	out	0x3f, r0	; 63
    952c:	0f 90       	pop	r0
    952e:	1f 90       	pop	r1
    9530:	18 95       	reti

00009532 <timer_init>:


void timer_init(void)
{	
	ticks=0;
    9532:	10 92 95 24 	sts	0x2495, r1
    9536:	10 92 96 24 	sts	0x2496, r1
    953a:	10 92 97 24 	sts	0x2497, r1
    953e:	10 92 98 24 	sts	0x2498, r1
  TCF0.CTRLA = 0x04;      // Prescaler: clk/8
    9542:	e0 e0       	ldi	r30, 0x00	; 0
    9544:	fb e0       	ldi	r31, 0x0B	; 11
    9546:	84 e0       	ldi	r24, 0x04	; 4
    9548:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    954a:	8f e9       	ldi	r24, 0x9F	; 159
    954c:	9f e0       	ldi	r25, 0x0F	; 15
    954e:	86 a3       	std	Z+38, r24	; 0x26
    9550:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    9552:	82 e0       	ldi	r24, 0x02	; 2
    9554:	86 83       	std	Z+6, r24	; 0x06
}
    9556:	08 95       	ret

00009558 <Wait>:

void Wait(uint16_t delay)
{
    9558:	ef 92       	push	r14
    955a:	ff 92       	push	r15
    955c:	0f 93       	push	r16
    955e:	1f 93       	push	r17
	uint32_t temp=ticks;
    9560:	e0 90 95 24 	lds	r14, 0x2495
    9564:	f0 90 96 24 	lds	r15, 0x2496
    9568:	00 91 97 24 	lds	r16, 0x2497
    956c:	10 91 98 24 	lds	r17, 0x2498

	while(ticks - temp < delay);
    9570:	9c 01       	movw	r18, r24
    9572:	40 e0       	ldi	r20, 0x00	; 0
    9574:	50 e0       	ldi	r21, 0x00	; 0
    9576:	80 91 95 24 	lds	r24, 0x2495
    957a:	90 91 96 24 	lds	r25, 0x2496
    957e:	a0 91 97 24 	lds	r26, 0x2497
    9582:	b0 91 98 24 	lds	r27, 0x2498
    9586:	8e 19       	sub	r24, r14
    9588:	9f 09       	sbc	r25, r15
    958a:	a0 0b       	sbc	r26, r16
    958c:	b1 0b       	sbc	r27, r17
    958e:	82 17       	cp	r24, r18
    9590:	93 07       	cpc	r25, r19
    9592:	a4 07       	cpc	r26, r20
    9594:	b5 07       	cpc	r27, r21
    9596:	78 f3       	brcs	.-34     	; 0x9576 <Wait+0x1e>
}
    9598:	1f 91       	pop	r17
    959a:	0f 91       	pop	r16
    959c:	ff 90       	pop	r15
    959e:	ef 90       	pop	r14
    95a0:	08 95       	ret

000095a2 <timer_fine_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 64
// with prescaler = 64, counts happen every 32E6/64, so 1 counts are 2 us
// full count is (2^16)*(64)/(32E6) = 128 ms

TCF1.CTRLA = 0x05;     /*Prescaler = 64*/
    95a2:	e0 e4       	ldi	r30, 0x40	; 64
    95a4:	fb e0       	ldi	r31, 0x0B	; 11
    95a6:	85 e0       	ldi	r24, 0x05	; 5
    95a8:	80 83       	st	Z, r24
TCF1.CNT = 0; //reset TCF1 
    95aa:	10 a2       	std	Z+32, r1	; 0x20
    95ac:	11 a2       	std	Z+33, r1	; 0x21
}
    95ae:	08 95       	ret

000095b0 <timer_fine_toc>:

uint16_t timer_fine_toc(void)
{
// read and return the 16 bit timer
	uint16_t del_t;
	del_t = TCF1.CNT * 2;
    95b0:	e0 e4       	ldi	r30, 0x40	; 64
    95b2:	fb e0       	ldi	r31, 0x0B	; 11
    95b4:	20 a1       	ldd	r18, Z+32	; 0x20
    95b6:	31 a1       	ldd	r19, Z+33	; 0x21
    95b8:	22 0f       	add	r18, r18
    95ba:	33 1f       	adc	r19, r19
	return del_t;
}	
    95bc:	c9 01       	movw	r24, r18
    95be:	08 95       	ret

000095c0 <timer_coarse_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 8
// with prescaler = 8, and per = 4000, overflow happens every 1ms

	
	ticks=0;
    95c0:	10 92 95 24 	sts	0x2495, r1
    95c4:	10 92 96 24 	sts	0x2496, r1
    95c8:	10 92 97 24 	sts	0x2497, r1
    95cc:	10 92 98 24 	sts	0x2498, r1

  TCF0.CTRLA = 0x04;      // Prescaler: 8
    95d0:	e0 e0       	ldi	r30, 0x00	; 0
    95d2:	fb e0       	ldi	r31, 0x0B	; 11
    95d4:	84 e0       	ldi	r24, 0x04	; 4
    95d6:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    95d8:	8f e9       	ldi	r24, 0x9F	; 159
    95da:	9f e0       	ldi	r25, 0x0F	; 15
    95dc:	86 a3       	std	Z+38, r24	; 0x26
    95de:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    95e0:	82 e0       	ldi	r24, 0x02	; 2
    95e2:	86 83       	std	Z+6, r24	; 0x06
  TCF0.CNT = 0;            //reset TCF0
    95e4:	10 a2       	std	Z+32, r1	; 0x20
    95e6:	11 a2       	std	Z+33, r1	; 0x21
}
    95e8:	08 95       	ret

000095ea <timer_coarse_toc>:
uint32_t timer_coarse_toc(void)
{
// read and return the ticks counter
// to convert this value to ms - divide by 
	unsigned long del_t;	
	del_t = (uint32_t)ticks;
    95ea:	20 91 95 24 	lds	r18, 0x2495
    95ee:	30 91 96 24 	lds	r19, 0x2496
    95f2:	40 91 97 24 	lds	r20, 0x2497
    95f6:	50 91 98 24 	lds	r21, 0x2498
	return del_t;
}	
    95fa:	b9 01       	movw	r22, r18
    95fc:	ca 01       	movw	r24, r20
    95fe:	08 95       	ret

00009600 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    9600:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    9602:	e0 ec       	ldi	r30, 0xC0	; 192
    9604:	f1 e0       	ldi	r31, 0x01	; 1
    9606:	80 91 cf 01 	lds	r24, 0x01CF
    960a:	87 fd       	sbrc	r24, 7
    960c:	fa cf       	rjmp	.-12     	; 0x9602 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    960e:	26 2f       	mov	r18, r22
    9610:	30 e0       	ldi	r19, 0x00	; 0
    9612:	2f 71       	andi	r18, 0x1F	; 31
    9614:	30 70       	andi	r19, 0x00	; 0
    9616:	89 2f       	mov	r24, r25
    9618:	90 e0       	ldi	r25, 0x00	; 0
    961a:	45 e0       	ldi	r20, 0x05	; 5
    961c:	88 0f       	add	r24, r24
    961e:	99 1f       	adc	r25, r25
    9620:	4a 95       	dec	r20
    9622:	e1 f7       	brne	.-8      	; 0x961c <EEPROM_ReadByte+0x1c>
    9624:	28 2b       	or	r18, r24
    9626:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    9628:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    962c:	83 2f       	mov	r24, r19
    962e:	8f 71       	andi	r24, 0x1F	; 31
    9630:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    9632:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    9634:	86 e0       	ldi	r24, 0x06	; 6
    9636:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    9638:	eb ec       	ldi	r30, 0xCB	; 203
    963a:	f1 e0       	ldi	r31, 0x01	; 1
    963c:	21 e0       	ldi	r18, 0x01	; 1
    963e:	30 e0       	ldi	r19, 0x00	; 0
    9640:	88 ed       	ldi	r24, 0xD8	; 216
    9642:	90 e0       	ldi	r25, 0x00	; 0
    9644:	84 bf       	out	0x34, r24	; 52
    9646:	20 83       	st	Z, r18

	/* Issue EEPROM Read command. */
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();

	return NVM.DATA0;
    9648:	80 91 c4 01 	lds	r24, 0x01C4
}
    964c:	08 95       	ret

0000964e <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    964e:	80 91 cf 01 	lds	r24, 0x01CF
    9652:	87 fd       	sbrc	r24, 7
    9654:	fc cf       	rjmp	.-8      	; 0x964e <EEPROM_WaitForNVM>
}
    9656:	08 95       	ret

00009658 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    9658:	80 91 cf 01 	lds	r24, 0x01CF
    965c:	87 fd       	sbrc	r24, 7
    965e:	fc cf       	rjmp	.-8      	; 0x9658 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    9660:	80 91 cf 01 	lds	r24, 0x01CF
    9664:	81 ff       	sbrs	r24, 1
    9666:	0c c0       	rjmp	.+24     	; 0x9680 <EEPROM_FlushBuffer+0x28>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    9668:	86 e3       	ldi	r24, 0x36	; 54
    966a:	e0 ec       	ldi	r30, 0xC0	; 192
    966c:	f1 e0       	ldi	r31, 0x01	; 1
    966e:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    9670:	eb ec       	ldi	r30, 0xCB	; 203
    9672:	f1 e0       	ldi	r31, 0x01	; 1
    9674:	21 e0       	ldi	r18, 0x01	; 1
    9676:	30 e0       	ldi	r19, 0x00	; 0
    9678:	88 ed       	ldi	r24, 0xD8	; 216
    967a:	90 e0       	ldi	r25, 0x00	; 0
    967c:	84 bf       	out	0x34, r24	; 52
    967e:	20 83       	st	Z, r18
    9680:	08 95       	ret

00009682 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    9682:	df 92       	push	r13
    9684:	ef 92       	push	r14
    9686:	ff 92       	push	r15
    9688:	0f 93       	push	r16
    968a:	1f 93       	push	r17
    968c:	e8 2e       	mov	r14, r24
    968e:	06 2f       	mov	r16, r22
    9690:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    9692:	0e 94 2c 4b 	call	0x9658	; 0x9658 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    9696:	e0 ec       	ldi	r30, 0xC0	; 192
    9698:	f1 e0       	ldi	r31, 0x01	; 1
    969a:	83 e3       	ldi	r24, 0x33	; 51
    969c:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    969e:	10 e0       	ldi	r17, 0x00	; 0
    96a0:	0f 71       	andi	r16, 0x1F	; 31
    96a2:	10 70       	andi	r17, 0x00	; 0
    96a4:	ff 24       	eor	r15, r15
    96a6:	55 e0       	ldi	r21, 0x05	; 5
    96a8:	ee 0c       	add	r14, r14
    96aa:	ff 1c       	adc	r15, r15
    96ac:	5a 95       	dec	r21
    96ae:	e1 f7       	brne	.-8      	; 0x96a8 <EEPROM_WriteByte+0x26>
    96b0:	0e 29       	or	r16, r14
    96b2:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    96b4:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    96b6:	81 2f       	mov	r24, r17
    96b8:	8f 71       	andi	r24, 0x1F	; 31
    96ba:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    96bc:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    96be:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    96c0:	85 e3       	ldi	r24, 0x35	; 53
    96c2:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    96c4:	eb ec       	ldi	r30, 0xCB	; 203
    96c6:	f1 e0       	ldi	r31, 0x01	; 1
    96c8:	21 e0       	ldi	r18, 0x01	; 1
    96ca:	30 e0       	ldi	r19, 0x00	; 0
    96cc:	88 ed       	ldi	r24, 0xD8	; 216
    96ce:	90 e0       	ldi	r25, 0x00	; 0
    96d0:	84 bf       	out	0x34, r24	; 52
    96d2:	20 83       	st	Z, r18
	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    96d4:	1f 91       	pop	r17
    96d6:	0f 91       	pop	r16
    96d8:	ff 90       	pop	r15
    96da:	ef 90       	pop	r14
    96dc:	df 90       	pop	r13
    96de:	08 95       	ret

000096e0 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    96e0:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    96e2:	e0 ec       	ldi	r30, 0xC0	; 192
    96e4:	f1 e0       	ldi	r31, 0x01	; 1
    96e6:	80 91 cf 01 	lds	r24, 0x01CF
    96ea:	87 fd       	sbrc	r24, 7
    96ec:	fa cf       	rjmp	.-12     	; 0x96e2 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    96ee:	83 e3       	ldi	r24, 0x33	; 51
    96f0:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    96f2:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    96f6:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    96f8:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    96fa:	64 83       	std	Z+4, r22	; 0x04
}
    96fc:	08 95       	ret

000096fe <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    96fe:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    9700:	e0 ec       	ldi	r30, 0xC0	; 192
    9702:	f1 e0       	ldi	r31, 0x01	; 1
    9704:	80 91 cf 01 	lds	r24, 0x01CF
    9708:	87 fd       	sbrc	r24, 7
    970a:	fa cf       	rjmp	.-12     	; 0x9700 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    970c:	83 e3       	ldi	r24, 0x33	; 51
    970e:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    9710:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    9712:	12 82       	std	Z+2, r1	; 0x02
    9714:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		NVM.ADDR0 = i;
    9716:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    971a:	8d 91       	ld	r24, X+
    971c:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    971e:	9f 5f       	subi	r25, 0xFF	; 255
    9720:	90 32       	cpi	r25, 0x20	; 32
    9722:	c9 f7       	brne	.-14     	; 0x9716 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    9724:	08 95       	ret

00009726 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    9726:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    9728:	e0 ec       	ldi	r30, 0xC0	; 192
    972a:	f1 e0       	ldi	r31, 0x01	; 1
    972c:	80 91 cf 01 	lds	r24, 0x01CF
    9730:	87 fd       	sbrc	r24, 7
    9732:	fa cf       	rjmp	.-12     	; 0x9728 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    9734:	89 2f       	mov	r24, r25
    9736:	90 e0       	ldi	r25, 0x00	; 0
    9738:	65 e0       	ldi	r22, 0x05	; 5
    973a:	88 0f       	add	r24, r24
    973c:	99 1f       	adc	r25, r25
    973e:	6a 95       	dec	r22
    9740:	e1 f7       	brne	.-8      	; 0x973a <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    9742:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    9746:	89 2f       	mov	r24, r25
    9748:	8f 71       	andi	r24, 0x1F	; 31
    974a:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    974c:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    974e:	85 e3       	ldi	r24, 0x35	; 53
    9750:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    9752:	eb ec       	ldi	r30, 0xCB	; 203
    9754:	f1 e0       	ldi	r31, 0x01	; 1
    9756:	21 e0       	ldi	r18, 0x01	; 1
    9758:	30 e0       	ldi	r19, 0x00	; 0
    975a:	88 ed       	ldi	r24, 0xD8	; 216
    975c:	90 e0       	ldi	r25, 0x00	; 0
    975e:	84 bf       	out	0x34, r24	; 52
    9760:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC();
}
    9762:	08 95       	ret

00009764 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    9764:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    9766:	e0 ec       	ldi	r30, 0xC0	; 192
    9768:	f1 e0       	ldi	r31, 0x01	; 1
    976a:	80 91 cf 01 	lds	r24, 0x01CF
    976e:	87 fd       	sbrc	r24, 7
    9770:	fa cf       	rjmp	.-12     	; 0x9766 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    9772:	89 2f       	mov	r24, r25
    9774:	90 e0       	ldi	r25, 0x00	; 0
    9776:	75 e0       	ldi	r23, 0x05	; 5
    9778:	88 0f       	add	r24, r24
    977a:	99 1f       	adc	r25, r25
    977c:	7a 95       	dec	r23
    977e:	e1 f7       	brne	.-8      	; 0x9778 <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    9780:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    9784:	89 2f       	mov	r24, r25
    9786:	8f 71       	andi	r24, 0x1F	; 31
    9788:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    978a:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    978c:	82 e3       	ldi	r24, 0x32	; 50
    978e:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    9790:	eb ec       	ldi	r30, 0xCB	; 203
    9792:	f1 e0       	ldi	r31, 0x01	; 1
    9794:	21 e0       	ldi	r18, 0x01	; 1
    9796:	30 e0       	ldi	r19, 0x00	; 0
    9798:	88 ed       	ldi	r24, 0xD8	; 216
    979a:	90 e0       	ldi	r25, 0x00	; 0
    979c:	84 bf       	out	0x34, r24	; 52
    979e:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Erase command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    97a0:	08 95       	ret

000097a2 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    97a2:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    97a4:	e0 ec       	ldi	r30, 0xC0	; 192
    97a6:	f1 e0       	ldi	r31, 0x01	; 1
    97a8:	80 91 cf 01 	lds	r24, 0x01CF
    97ac:	87 fd       	sbrc	r24, 7
    97ae:	fa cf       	rjmp	.-12     	; 0x97a4 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    97b0:	89 2f       	mov	r24, r25
    97b2:	90 e0       	ldi	r25, 0x00	; 0
    97b4:	a5 e0       	ldi	r26, 0x05	; 5
    97b6:	88 0f       	add	r24, r24
    97b8:	99 1f       	adc	r25, r25
    97ba:	aa 95       	dec	r26
    97bc:	e1 f7       	brne	.-8      	; 0x97b6 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    97be:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    97c2:	89 2f       	mov	r24, r25
    97c4:	8f 71       	andi	r24, 0x1F	; 31
    97c6:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    97c8:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
        NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    97ca:	84 e3       	ldi	r24, 0x34	; 52
    97cc:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    97ce:	eb ec       	ldi	r30, 0xCB	; 203
    97d0:	f1 e0       	ldi	r31, 0x01	; 1
    97d2:	21 e0       	ldi	r18, 0x01	; 1
    97d4:	30 e0       	ldi	r19, 0x00	; 0
    97d6:	88 ed       	ldi	r24, 0xD8	; 216
    97d8:	90 e0       	ldi	r25, 0x00	; 0
    97da:	84 bf       	out	0x34, r24	; 52
    97dc:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Split Write command. */
        NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    97de:	08 95       	ret

000097e0 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    97e0:	80 91 cf 01 	lds	r24, 0x01CF
    97e4:	87 fd       	sbrc	r24, 7
    97e6:	fc cf       	rjmp	.-8      	; 0x97e0 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    97e8:	80 e3       	ldi	r24, 0x30	; 48
    97ea:	e0 ec       	ldi	r30, 0xC0	; 192
    97ec:	f1 e0       	ldi	r31, 0x01	; 1
    97ee:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    97f0:	eb ec       	ldi	r30, 0xCB	; 203
    97f2:	f1 e0       	ldi	r31, 0x01	; 1
    97f4:	21 e0       	ldi	r18, 0x01	; 1
    97f6:	30 e0       	ldi	r19, 0x00	; 0
    97f8:	88 ed       	ldi	r24, 0xD8	; 216
    97fa:	90 e0       	ldi	r25, 0x00	; 0
    97fc:	84 bf       	out	0x34, r24	; 52
    97fe:	20 83       	st	Z, r18
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
        NVM_EXEC_WRAPPER();
}
    9800:	08 95       	ret

00009802 <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    9802:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    9804:	19 f4       	brne	.+6      	; 0x980c <xputc+0xa>
	ldi	r24, 13		;
    9806:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    9808:	01 d0       	rcall	.+2      	; 0x980c <xputc+0xa>
	ldi	r24, 10		;/
    980a:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    980c:	ff 93       	push	r31
	push	ZL
    980e:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    9810:	e0 91 99 24 	lds	r30, 0x2499
	lds	ZH, xfunc_out+1	;/
    9814:	f0 91 9a 24 	lds	r31, 0x249A
	icall
    9818:	09 95       	icall
	pop	ZL
    981a:	ef 91       	pop	r30
	pop	ZH
    981c:	ff 91       	pop	r31
	ret
    981e:	08 95       	ret

00009820 <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    9820:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    9822:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    9824:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    9826:	11 f0       	breq	.+4      	; 0x982c <xputs+0xc>
	rcall	xputc
    9828:	ec df       	rcall	.-40     	; 0x9802 <xputc>
	rjmp	1b
    982a:	fb cf       	rjmp	.-10     	; 0x9822 <xputs+0x2>
2:	ret
    982c:	08 95       	ret

0000982e <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    982e:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    9830:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    9832:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    9834:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    9836:	0c c0       	rjmp	.+24     	; 0x9850 <xitoa+0x22>
	neg	r20		;
    9838:	41 95       	neg	r20
	sbrs	r25, 7		;
    983a:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    983c:	09 c0       	rjmp	.+18     	; 0x9850 <xitoa+0x22>
	ldi	r30, '-'	;
    983e:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    9840:	60 95       	com	r22
	com	r23		;
    9842:	70 95       	com	r23
	com	r24		;
    9844:	80 95       	com	r24
	com	r25		;
    9846:	90 95       	com	r25
	adc	r22, r1		;
    9848:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    984a:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    984c:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    984e:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    9850:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    9852:	02 c0       	rjmp	.+4      	; 0x9858 <xitoa+0x2a>
	neg	r18		;
    9854:	21 95       	neg	r18
	ldi	r19, '0'	;/
    9856:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    9858:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    985a:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    985c:	66 0f       	add	r22, r22
	rol	r23		;
    985e:	77 1f       	adc	r23, r23
	rol	r24		;
    9860:	88 1f       	adc	r24, r24
	rol	r25		;
    9862:	99 1f       	adc	r25, r25
	rol	r26		;
    9864:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    9866:	a4 17       	cp	r26, r20
	brcs	3f		;
    9868:	10 f0       	brcs	.+4      	; 0x986e <xitoa+0x40>
	sub	r26, r20	;
    986a:	a4 1b       	sub	r26, r20
	inc	r22		;
    986c:	63 95       	inc	r22
3:	dec	r21		;
    986e:	5a 95       	dec	r21
	brne	2b		;/
    9870:	a9 f7       	brne	.-22     	; 0x985c <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    9872:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    9874:	08 f0       	brcs	.+2      	; 0x9878 <xitoa+0x4a>
	subi	r26, -7		;
    9876:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    9878:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    987a:	af 93       	push	r26
	inc	r31		;/
    987c:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    987e:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    9880:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    9882:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    9884:	91 05       	cpc	r25, r1
	brne	1b		;/
    9886:	41 f7       	brne	.-48     	; 0x9858 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    9888:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    988a:	11 f4       	brne	.+4      	; 0x9890 <xitoa+0x62>
	push	r30		;
    988c:	ef 93       	push	r30
	inc	r31		;/
    988e:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    9890:	f2 17       	cp	r31, r18
	brcc	6f		;
    9892:	18 f4       	brcc	.+6      	; 0x989a <xitoa+0x6c>
	push	r19		;
    9894:	3f 93       	push	r19
	inc	r31		;
    9896:	f3 95       	inc	r31
	rjmp	5b		;/
    9898:	fb cf       	rjmp	.-10     	; 0x9890 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    989a:	8f 91       	pop	r24
	rcall	xputc		;
    989c:	b2 df       	rcall	.-156    	; 0x9802 <xputc>
	dec	r31		;
    989e:	fa 95       	dec	r31
	brne	6b		;/
    98a0:	e1 f7       	brne	.-8      	; 0x989a <xitoa+0x6c>

	ret
    98a2:	08 95       	ret

000098a4 <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    98a4:	df 93       	push	r29
	push	YL
    98a6:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    98a8:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    98aa:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
    98ac:	26 96       	adiw	r28, 0x06	; 6
#else
	adiw	YL, 5		;Y = pointer to arguments
#endif
	ld	ZL, Y+		;Z = pointer to format string
    98ae:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    98b0:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    98b2:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    98b4:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    98b6:	21 f0       	breq	.+8      	; 0x98c0 <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    98b8:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    98ba:	29 f0       	breq	.+10     	; 0x98c6 <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    98bc:	a2 df       	rcall	.-188    	; 0x9802 <xputc>
	rjmp	0b		;/
    98be:	f9 cf       	rjmp	.-14     	; 0x98b2 <xprintf+0xe>
90:	pop	YL
    98c0:	cf 91       	pop	r28
	pop	YH
    98c2:	df 91       	pop	r29
	ret
    98c4:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    98c6:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    98c8:	e8 94       	clt
	_LPMI	r21		;Get flags
    98ca:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    98cc:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    98ce:	b1 f3       	breq	.-20     	; 0x98bc <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    98d0:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    98d2:	11 f4       	brne	.+4      	; 0x98d8 <xprintf+0x34>
	set			;/
    98d4:	68 94       	set
22:	_LPMI	r21		;Get width
    98d6:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    98d8:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    98da:	48 f4       	brcc	.+18     	; 0x98ee <xprintf+0x4a>
	subi	r21, '0'	;
    98dc:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    98de:	80 f3       	brcs	.-32     	; 0x98c0 <xprintf+0x1c>
	lsl	r18		;
    98e0:	22 0f       	add	r18, r18
	mov	r0, r18		;
    98e2:	02 2e       	mov	r0, r18
	lsl	r18		;
    98e4:	22 0f       	add	r18, r18
	lsl	r18		;
    98e6:	22 0f       	add	r18, r18
	add	r18, r0		;
    98e8:	20 0d       	add	r18, r0
	add	r18, r21	;
    98ea:	25 0f       	add	r18, r21
	rjmp	22b		;/
    98ec:	f4 cf       	rjmp	.-24     	; 0x98d6 <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    98ee:	0e f4       	brtc	.+2      	; 0x98f2 <xprintf+0x4e>
	neg	r18		;
    98f0:	21 95       	neg	r18
25:	ld	r24, Y+		;
    98f2:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    98f4:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    98f6:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    98f8:	09 f3       	breq	.-62     	; 0x98bc <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    98fa:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    98fc:	29 f1       	breq	.+74     	; 0x9948 <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    98fe:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    9900:	59 f1       	breq	.+86     	; 0x9958 <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    9902:	bc 01       	movw	r22, r24
	clr	r24		;
    9904:	88 27       	eor	r24, r24
	clr	r25		;
    9906:	99 27       	eor	r25, r25
	clt			;/
    9908:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    990a:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    990c:	21 f4       	brne	.+8      	; 0x9916 <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    990e:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    9910:	99 91       	ld	r25, Y+
	set			;
    9912:	68 94       	set
	_LPMI	r21		;/
    9914:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    9916:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    9918:	39 f4       	brne	.+14     	; 0x9928 <xprintf+0x84>
	ldi	r20, -10	;
    991a:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    991c:	7e f0       	brts	.+30     	; 0x993c <xprintf+0x98>
	sbrs	r23, 7		;
    991e:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    9920:	0d c0       	rjmp	.+26     	; 0x993c <xprintf+0x98>
	ldi	r24, -1		;
    9922:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    9924:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    9926:	0a c0       	rjmp	.+20     	; 0x993c <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    9928:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    992a:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    992c:	39 f0       	breq	.+14     	; 0x993c <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    992e:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    9930:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    9932:	21 f0       	breq	.+8      	; 0x993c <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    9934:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    9936:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    9938:	09 f0       	breq	.+2      	; 0x993c <xprintf+0x98>
	rjmp	90b		;abort
    993a:	c2 cf       	rjmp	.-124    	; 0x98c0 <xprintf+0x1c>
40:	push	ZH		;Output the value
    993c:	ff 93       	push	r31
	push	ZL		;
    993e:	ef 93       	push	r30
	rcall	xitoa		;
    9940:	76 df       	rcall	.-276    	; 0x982e <xitoa>
42:	pop	ZL		;
    9942:	ef 91       	pop	r30
	pop	ZH		;
    9944:	ff 91       	pop	r31
	rjmp	0b		;/
    9946:	b5 cf       	rjmp	.-150    	; 0x98b2 <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    9948:	ff 93       	push	r31
	push	ZL
    994a:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    994c:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    994e:	81 91       	ld	r24, Z+
	cpi	r24, 0
    9950:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    9952:	b9 f3       	breq	.-18     	; 0x9942 <xprintf+0x9e>
	rcall	xputc
    9954:	56 df       	rcall	.-340    	; 0x9802 <xputc>
	rjmp	51b
    9956:	fb cf       	rjmp	.-10     	; 0x994e <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    9958:	ff 93       	push	r31
	push	ZL
    995a:	ef 93       	push	r30
	rcall	xputs
    995c:	61 df       	rcall	.-318    	; 0x9820 <xputs>
	rjmp	42b
    995e:	f1 cf       	rjmp	.-30     	; 0x9942 <xprintf+0x9e>

00009960 <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    9960:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    9962:	dc 01       	movw	r26, r24
	ld	ZL, X+
    9964:	ed 91       	ld	r30, X+
	ld	ZH, X+
    9966:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    9968:	22 27       	eor	r18, r18
	clr	r19		;
    996a:	33 27       	eor	r19, r19
	clr	r20		;
    996c:	44 27       	eor	r20, r20
	clr	r21		;/
    996e:	55 27       	eor	r21, r21
	clt			;T = 0;
    9970:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    9972:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    9974:	01 c0       	rjmp	.+2      	; 0x9978 <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    9976:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    9978:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    997a:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    997c:	e1 f3       	breq	.-8      	; 0x9976 <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    997e:	a8 f1       	brcs	.+106    	; 0x99ea <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    9980:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    9982:	11 f4       	brne	.+4      	; 0x9988 <xatoi+0x28>
	set			; continue;
    9984:	68 94       	set
	rjmp	40b		;}
    9986:	f7 cf       	rjmp	.-18     	; 0x9976 <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    9988:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    998a:	78 f5       	brcc	.+94     	; 0x99ea <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    998c:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    998e:	68 f1       	brcs	.+90     	; 0x99ea <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    9990:	71 f4       	brne	.+28     	; 0x99ae <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    9992:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    9994:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    9996:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    9998:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    999a:	48 f1       	brcs	.+82     	; 0x99ee <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    999c:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    999e:	11 f4       	brne	.+4      	; 0x99a4 <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    99a0:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    99a2:	03 c0       	rjmp	.+6      	; 0x99aa <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    99a4:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    99a6:	19 f4       	brne	.+6      	; 0x99ae <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    99a8:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    99aa:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    99ac:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    99ae:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    99b0:	f0 f0       	brcs	.+60     	; 0x99ee <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    99b2:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    99b4:	08 f0       	brcs	.+2      	; 0x99b8 <xatoi+0x58>
	subi	r22, 0x20	;/
    99b6:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    99b8:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    99ba:	b8 f0       	brcs	.+46     	; 0x99ea <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    99bc:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    99be:	18 f0       	brcs	.+6      	; 0x99c6 <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    99c0:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    99c2:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    99c4:	90 f0       	brcs	.+36     	; 0x99ea <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    99c6:	69 17       	cp	r22, r25
	brcc	70f		;/
    99c8:	80 f4       	brcc	.+32     	; 0x99ea <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    99ca:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    99cc:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    99ce:	08 f4       	brcc	.+2      	; 0x99d2 <xatoi+0x72>
	add	r23, r25	;
    99d0:	79 0f       	add	r23, r25
62:	lsr	r23		;
    99d2:	76 95       	lsr	r23
	ror	r21		;
    99d4:	57 95       	ror	r21
	ror	r20		;
    99d6:	47 95       	ror	r20
	ror	r19		;
    99d8:	37 95       	ror	r19
	ror	r18		;
    99da:	27 95       	ror	r18
	dec	r24		;
    99dc:	8a 95       	dec	r24
	brne	61b		;/
    99de:	b9 f7       	brne	.-18     	; 0x99ce <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    99e0:	26 0f       	add	r18, r22
	adc	r19, r24	;
    99e2:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    99e4:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    99e6:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    99e8:	e0 cf       	rjmp	.-64     	; 0x99aa <xatoi+0x4a>

70:	ldi	r24, 0
    99ea:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    99ec:	01 c0       	rjmp	.+2      	; 0x99f0 <xatoi+0x90>
80:	ldi	r24, 1
    99ee:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    99f0:	4e f4       	brtc	.+18     	; 0x9a04 <xatoi+0xa4>
	clr	r22
    99f2:	66 27       	eor	r22, r22
	com	r18
    99f4:	20 95       	com	r18
	com	r19
    99f6:	30 95       	com	r19
	com	r20
    99f8:	40 95       	com	r20
	com	r21
    99fa:	50 95       	com	r21
	adc	r18, r22
    99fc:	26 1f       	adc	r18, r22
	adc	r19, r22
    99fe:	36 1f       	adc	r19, r22
	adc	r20, r22
    9a00:	46 1f       	adc	r20, r22
	adc	r21, r22
    9a02:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    9a04:	fe 93       	st	-X, r31
	st	-X, ZL
    9a06:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    9a08:	d0 01       	movw	r26, r0
	st	X+, r18
    9a0a:	2d 93       	st	X+, r18
	st	X+, r19
    9a0c:	3d 93       	st	X+, r19
	st	X+, r20
    9a0e:	4d 93       	st	X+, r20
	st	X+, r21
    9a10:	5d 93       	st	X+, r21
	clr	r1
    9a12:	11 24       	eor	r1, r1
	ret
    9a14:	08 95       	ret

00009a16 <__mulsi3>:
    9a16:	62 9f       	mul	r22, r18
    9a18:	d0 01       	movw	r26, r0
    9a1a:	73 9f       	mul	r23, r19
    9a1c:	f0 01       	movw	r30, r0
    9a1e:	82 9f       	mul	r24, r18
    9a20:	e0 0d       	add	r30, r0
    9a22:	f1 1d       	adc	r31, r1
    9a24:	64 9f       	mul	r22, r20
    9a26:	e0 0d       	add	r30, r0
    9a28:	f1 1d       	adc	r31, r1
    9a2a:	92 9f       	mul	r25, r18
    9a2c:	f0 0d       	add	r31, r0
    9a2e:	83 9f       	mul	r24, r19
    9a30:	f0 0d       	add	r31, r0
    9a32:	74 9f       	mul	r23, r20
    9a34:	f0 0d       	add	r31, r0
    9a36:	65 9f       	mul	r22, r21
    9a38:	f0 0d       	add	r31, r0
    9a3a:	99 27       	eor	r25, r25
    9a3c:	72 9f       	mul	r23, r18
    9a3e:	b0 0d       	add	r27, r0
    9a40:	e1 1d       	adc	r30, r1
    9a42:	f9 1f       	adc	r31, r25
    9a44:	63 9f       	mul	r22, r19
    9a46:	b0 0d       	add	r27, r0
    9a48:	e1 1d       	adc	r30, r1
    9a4a:	f9 1f       	adc	r31, r25
    9a4c:	bd 01       	movw	r22, r26
    9a4e:	cf 01       	movw	r24, r30
    9a50:	11 24       	eor	r1, r1
    9a52:	08 95       	ret

00009a54 <__udivmodhi4>:
    9a54:	aa 1b       	sub	r26, r26
    9a56:	bb 1b       	sub	r27, r27
    9a58:	51 e1       	ldi	r21, 0x11	; 17
    9a5a:	07 c0       	rjmp	.+14     	; 0x9a6a <__udivmodhi4_ep>

00009a5c <__udivmodhi4_loop>:
    9a5c:	aa 1f       	adc	r26, r26
    9a5e:	bb 1f       	adc	r27, r27
    9a60:	a6 17       	cp	r26, r22
    9a62:	b7 07       	cpc	r27, r23
    9a64:	10 f0       	brcs	.+4      	; 0x9a6a <__udivmodhi4_ep>
    9a66:	a6 1b       	sub	r26, r22
    9a68:	b7 0b       	sbc	r27, r23

00009a6a <__udivmodhi4_ep>:
    9a6a:	88 1f       	adc	r24, r24
    9a6c:	99 1f       	adc	r25, r25
    9a6e:	5a 95       	dec	r21
    9a70:	a9 f7       	brne	.-22     	; 0x9a5c <__udivmodhi4_loop>
    9a72:	80 95       	com	r24
    9a74:	90 95       	com	r25
    9a76:	bc 01       	movw	r22, r24
    9a78:	cd 01       	movw	r24, r26
    9a7a:	08 95       	ret

00009a7c <__divmodhi4>:
    9a7c:	97 fb       	bst	r25, 7
    9a7e:	09 2e       	mov	r0, r25
    9a80:	07 26       	eor	r0, r23
    9a82:	0a d0       	rcall	.+20     	; 0x9a98 <__divmodhi4_neg1>
    9a84:	77 fd       	sbrc	r23, 7
    9a86:	04 d0       	rcall	.+8      	; 0x9a90 <__divmodhi4_neg2>
    9a88:	e5 df       	rcall	.-54     	; 0x9a54 <__udivmodhi4>
    9a8a:	06 d0       	rcall	.+12     	; 0x9a98 <__divmodhi4_neg1>
    9a8c:	00 20       	and	r0, r0
    9a8e:	1a f4       	brpl	.+6      	; 0x9a96 <__divmodhi4_exit>

00009a90 <__divmodhi4_neg2>:
    9a90:	70 95       	com	r23
    9a92:	61 95       	neg	r22
    9a94:	7f 4f       	sbci	r23, 0xFF	; 255

00009a96 <__divmodhi4_exit>:
    9a96:	08 95       	ret

00009a98 <__divmodhi4_neg1>:
    9a98:	f6 f7       	brtc	.-4      	; 0x9a96 <__divmodhi4_exit>
    9a9a:	90 95       	com	r25
    9a9c:	81 95       	neg	r24
    9a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    9aa0:	08 95       	ret

00009aa2 <__udivmodsi4>:
    9aa2:	a1 e2       	ldi	r26, 0x21	; 33
    9aa4:	1a 2e       	mov	r1, r26
    9aa6:	aa 1b       	sub	r26, r26
    9aa8:	bb 1b       	sub	r27, r27
    9aaa:	fd 01       	movw	r30, r26
    9aac:	0d c0       	rjmp	.+26     	; 0x9ac8 <__udivmodsi4_ep>

00009aae <__udivmodsi4_loop>:
    9aae:	aa 1f       	adc	r26, r26
    9ab0:	bb 1f       	adc	r27, r27
    9ab2:	ee 1f       	adc	r30, r30
    9ab4:	ff 1f       	adc	r31, r31
    9ab6:	a2 17       	cp	r26, r18
    9ab8:	b3 07       	cpc	r27, r19
    9aba:	e4 07       	cpc	r30, r20
    9abc:	f5 07       	cpc	r31, r21
    9abe:	20 f0       	brcs	.+8      	; 0x9ac8 <__udivmodsi4_ep>
    9ac0:	a2 1b       	sub	r26, r18
    9ac2:	b3 0b       	sbc	r27, r19
    9ac4:	e4 0b       	sbc	r30, r20
    9ac6:	f5 0b       	sbc	r31, r21

00009ac8 <__udivmodsi4_ep>:
    9ac8:	66 1f       	adc	r22, r22
    9aca:	77 1f       	adc	r23, r23
    9acc:	88 1f       	adc	r24, r24
    9ace:	99 1f       	adc	r25, r25
    9ad0:	1a 94       	dec	r1
    9ad2:	69 f7       	brne	.-38     	; 0x9aae <__udivmodsi4_loop>
    9ad4:	60 95       	com	r22
    9ad6:	70 95       	com	r23
    9ad8:	80 95       	com	r24
    9ada:	90 95       	com	r25
    9adc:	9b 01       	movw	r18, r22
    9ade:	ac 01       	movw	r20, r24
    9ae0:	bd 01       	movw	r22, r26
    9ae2:	cf 01       	movw	r24, r30
    9ae4:	08 95       	ret

00009ae6 <__divmodsi4>:
    9ae6:	97 fb       	bst	r25, 7
    9ae8:	09 2e       	mov	r0, r25
    9aea:	05 26       	eor	r0, r21
    9aec:	0e d0       	rcall	.+28     	; 0x9b0a <__divmodsi4_neg1>
    9aee:	57 fd       	sbrc	r21, 7
    9af0:	04 d0       	rcall	.+8      	; 0x9afa <__divmodsi4_neg2>
    9af2:	d7 df       	rcall	.-82     	; 0x9aa2 <__udivmodsi4>
    9af4:	0a d0       	rcall	.+20     	; 0x9b0a <__divmodsi4_neg1>
    9af6:	00 1c       	adc	r0, r0
    9af8:	38 f4       	brcc	.+14     	; 0x9b08 <__divmodsi4_exit>

00009afa <__divmodsi4_neg2>:
    9afa:	50 95       	com	r21
    9afc:	40 95       	com	r20
    9afe:	30 95       	com	r19
    9b00:	21 95       	neg	r18
    9b02:	3f 4f       	sbci	r19, 0xFF	; 255
    9b04:	4f 4f       	sbci	r20, 0xFF	; 255
    9b06:	5f 4f       	sbci	r21, 0xFF	; 255

00009b08 <__divmodsi4_exit>:
    9b08:	08 95       	ret

00009b0a <__divmodsi4_neg1>:
    9b0a:	f6 f7       	brtc	.-4      	; 0x9b08 <__divmodsi4_exit>
    9b0c:	90 95       	com	r25
    9b0e:	80 95       	com	r24
    9b10:	70 95       	com	r23
    9b12:	61 95       	neg	r22
    9b14:	7f 4f       	sbci	r23, 0xFF	; 255
    9b16:	8f 4f       	sbci	r24, 0xFF	; 255
    9b18:	9f 4f       	sbci	r25, 0xFF	; 255
    9b1a:	08 95       	ret

00009b1c <__prologue_saves__>:
    9b1c:	2f 92       	push	r2
    9b1e:	3f 92       	push	r3
    9b20:	4f 92       	push	r4
    9b22:	5f 92       	push	r5
    9b24:	6f 92       	push	r6
    9b26:	7f 92       	push	r7
    9b28:	8f 92       	push	r8
    9b2a:	9f 92       	push	r9
    9b2c:	af 92       	push	r10
    9b2e:	bf 92       	push	r11
    9b30:	cf 92       	push	r12
    9b32:	df 92       	push	r13
    9b34:	ef 92       	push	r14
    9b36:	ff 92       	push	r15
    9b38:	0f 93       	push	r16
    9b3a:	1f 93       	push	r17
    9b3c:	cf 93       	push	r28
    9b3e:	df 93       	push	r29
    9b40:	cd b7       	in	r28, 0x3d	; 61
    9b42:	de b7       	in	r29, 0x3e	; 62
    9b44:	ca 1b       	sub	r28, r26
    9b46:	db 0b       	sbc	r29, r27
    9b48:	0f b6       	in	r0, 0x3f	; 63
    9b4a:	f8 94       	cli
    9b4c:	de bf       	out	0x3e, r29	; 62
    9b4e:	0f be       	out	0x3f, r0	; 63
    9b50:	cd bf       	out	0x3d, r28	; 61
    9b52:	19 94       	eijmp

00009b54 <__epilogue_restores__>:
    9b54:	2a 88       	ldd	r2, Y+18	; 0x12
    9b56:	39 88       	ldd	r3, Y+17	; 0x11
    9b58:	48 88       	ldd	r4, Y+16	; 0x10
    9b5a:	5f 84       	ldd	r5, Y+15	; 0x0f
    9b5c:	6e 84       	ldd	r6, Y+14	; 0x0e
    9b5e:	7d 84       	ldd	r7, Y+13	; 0x0d
    9b60:	8c 84       	ldd	r8, Y+12	; 0x0c
    9b62:	9b 84       	ldd	r9, Y+11	; 0x0b
    9b64:	aa 84       	ldd	r10, Y+10	; 0x0a
    9b66:	b9 84       	ldd	r11, Y+9	; 0x09
    9b68:	c8 84       	ldd	r12, Y+8	; 0x08
    9b6a:	df 80       	ldd	r13, Y+7	; 0x07
    9b6c:	ee 80       	ldd	r14, Y+6	; 0x06
    9b6e:	fd 80       	ldd	r15, Y+5	; 0x05
    9b70:	0c 81       	ldd	r16, Y+4	; 0x04
    9b72:	1b 81       	ldd	r17, Y+3	; 0x03
    9b74:	aa 81       	ldd	r26, Y+2	; 0x02
    9b76:	b9 81       	ldd	r27, Y+1	; 0x01
    9b78:	ce 0f       	add	r28, r30
    9b7a:	d1 1d       	adc	r29, r1
    9b7c:	0f b6       	in	r0, 0x3f	; 63
    9b7e:	f8 94       	cli
    9b80:	de bf       	out	0x3e, r29	; 62
    9b82:	0f be       	out	0x3f, r0	; 63
    9b84:	cd bf       	out	0x3d, r28	; 61
    9b86:	ed 01       	movw	r28, r26
    9b88:	08 95       	ret

00009b8a <__tablejump2__>:
    9b8a:	ee 0f       	add	r30, r30
    9b8c:	ff 1f       	adc	r31, r31

00009b8e <__tablejump__>:
    9b8e:	05 90       	lpm	r0, Z+
    9b90:	f4 91       	lpm	r31, Z+
    9b92:	e0 2d       	mov	r30, r0
    9b94:	19 94       	eijmp

00009b96 <malloc>:
    9b96:	cf 93       	push	r28
    9b98:	df 93       	push	r29
    9b9a:	bc 01       	movw	r22, r24
    9b9c:	82 30       	cpi	r24, 0x02	; 2
    9b9e:	91 05       	cpc	r25, r1
    9ba0:	10 f4       	brcc	.+4      	; 0x9ba6 <malloc+0x10>
    9ba2:	62 e0       	ldi	r22, 0x02	; 2
    9ba4:	70 e0       	ldi	r23, 0x00	; 0
    9ba6:	a0 91 06 2b 	lds	r26, 0x2B06
    9baa:	b0 91 07 2b 	lds	r27, 0x2B07
    9bae:	ed 01       	movw	r28, r26
    9bb0:	e0 e0       	ldi	r30, 0x00	; 0
    9bb2:	f0 e0       	ldi	r31, 0x00	; 0
    9bb4:	40 e0       	ldi	r20, 0x00	; 0
    9bb6:	50 e0       	ldi	r21, 0x00	; 0
    9bb8:	21 c0       	rjmp	.+66     	; 0x9bfc <malloc+0x66>
    9bba:	88 81       	ld	r24, Y
    9bbc:	99 81       	ldd	r25, Y+1	; 0x01
    9bbe:	86 17       	cp	r24, r22
    9bc0:	97 07       	cpc	r25, r23
    9bc2:	69 f4       	brne	.+26     	; 0x9bde <malloc+0x48>
    9bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    9bc6:	9b 81       	ldd	r25, Y+3	; 0x03
    9bc8:	30 97       	sbiw	r30, 0x00	; 0
    9bca:	19 f0       	breq	.+6      	; 0x9bd2 <malloc+0x3c>
    9bcc:	82 83       	std	Z+2, r24	; 0x02
    9bce:	93 83       	std	Z+3, r25	; 0x03
    9bd0:	04 c0       	rjmp	.+8      	; 0x9bda <malloc+0x44>
    9bd2:	80 93 06 2b 	sts	0x2B06, r24
    9bd6:	90 93 07 2b 	sts	0x2B07, r25
    9bda:	fe 01       	movw	r30, r28
    9bdc:	34 c0       	rjmp	.+104    	; 0x9c46 <malloc+0xb0>
    9bde:	68 17       	cp	r22, r24
    9be0:	79 07       	cpc	r23, r25
    9be2:	38 f4       	brcc	.+14     	; 0x9bf2 <malloc+0x5c>
    9be4:	41 15       	cp	r20, r1
    9be6:	51 05       	cpc	r21, r1
    9be8:	19 f0       	breq	.+6      	; 0x9bf0 <malloc+0x5a>
    9bea:	84 17       	cp	r24, r20
    9bec:	95 07       	cpc	r25, r21
    9bee:	08 f4       	brcc	.+2      	; 0x9bf2 <malloc+0x5c>
    9bf0:	ac 01       	movw	r20, r24
    9bf2:	fe 01       	movw	r30, r28
    9bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    9bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    9bf8:	9c 01       	movw	r18, r24
    9bfa:	e9 01       	movw	r28, r18
    9bfc:	20 97       	sbiw	r28, 0x00	; 0
    9bfe:	e9 f6       	brne	.-70     	; 0x9bba <malloc+0x24>
    9c00:	41 15       	cp	r20, r1
    9c02:	51 05       	cpc	r21, r1
    9c04:	a9 f1       	breq	.+106    	; 0x9c70 <malloc+0xda>
    9c06:	ca 01       	movw	r24, r20
    9c08:	86 1b       	sub	r24, r22
    9c0a:	97 0b       	sbc	r25, r23
    9c0c:	04 97       	sbiw	r24, 0x04	; 4
    9c0e:	08 f4       	brcc	.+2      	; 0x9c12 <malloc+0x7c>
    9c10:	ba 01       	movw	r22, r20
    9c12:	e0 e0       	ldi	r30, 0x00	; 0
    9c14:	f0 e0       	ldi	r31, 0x00	; 0
    9c16:	2a c0       	rjmp	.+84     	; 0x9c6c <malloc+0xd6>
    9c18:	8d 91       	ld	r24, X+
    9c1a:	9c 91       	ld	r25, X
    9c1c:	11 97       	sbiw	r26, 0x01	; 1
    9c1e:	84 17       	cp	r24, r20
    9c20:	95 07       	cpc	r25, r21
    9c22:	f9 f4       	brne	.+62     	; 0x9c62 <malloc+0xcc>
    9c24:	64 17       	cp	r22, r20
    9c26:	75 07       	cpc	r23, r21
    9c28:	81 f4       	brne	.+32     	; 0x9c4a <malloc+0xb4>
    9c2a:	12 96       	adiw	r26, 0x02	; 2
    9c2c:	8d 91       	ld	r24, X+
    9c2e:	9c 91       	ld	r25, X
    9c30:	13 97       	sbiw	r26, 0x03	; 3
    9c32:	30 97       	sbiw	r30, 0x00	; 0
    9c34:	19 f0       	breq	.+6      	; 0x9c3c <malloc+0xa6>
    9c36:	82 83       	std	Z+2, r24	; 0x02
    9c38:	93 83       	std	Z+3, r25	; 0x03
    9c3a:	04 c0       	rjmp	.+8      	; 0x9c44 <malloc+0xae>
    9c3c:	80 93 06 2b 	sts	0x2B06, r24
    9c40:	90 93 07 2b 	sts	0x2B07, r25
    9c44:	fd 01       	movw	r30, r26
    9c46:	32 96       	adiw	r30, 0x02	; 2
    9c48:	4f c0       	rjmp	.+158    	; 0x9ce8 <malloc+0x152>
    9c4a:	ca 01       	movw	r24, r20
    9c4c:	86 1b       	sub	r24, r22
    9c4e:	97 0b       	sbc	r25, r23
    9c50:	fd 01       	movw	r30, r26
    9c52:	e8 0f       	add	r30, r24
    9c54:	f9 1f       	adc	r31, r25
    9c56:	61 93       	st	Z+, r22
    9c58:	71 93       	st	Z+, r23
    9c5a:	02 97       	sbiw	r24, 0x02	; 2
    9c5c:	8d 93       	st	X+, r24
    9c5e:	9c 93       	st	X, r25
    9c60:	43 c0       	rjmp	.+134    	; 0x9ce8 <malloc+0x152>
    9c62:	fd 01       	movw	r30, r26
    9c64:	82 81       	ldd	r24, Z+2	; 0x02
    9c66:	93 81       	ldd	r25, Z+3	; 0x03
    9c68:	9c 01       	movw	r18, r24
    9c6a:	d9 01       	movw	r26, r18
    9c6c:	10 97       	sbiw	r26, 0x00	; 0
    9c6e:	a1 f6       	brne	.-88     	; 0x9c18 <malloc+0x82>
    9c70:	80 91 04 2b 	lds	r24, 0x2B04
    9c74:	90 91 05 2b 	lds	r25, 0x2B05
    9c78:	89 2b       	or	r24, r25
    9c7a:	41 f4       	brne	.+16     	; 0x9c8c <malloc+0xf6>
    9c7c:	80 91 f9 23 	lds	r24, 0x23F9
    9c80:	90 91 fa 23 	lds	r25, 0x23FA
    9c84:	80 93 04 2b 	sts	0x2B04, r24
    9c88:	90 93 05 2b 	sts	0x2B05, r25
    9c8c:	40 91 fb 23 	lds	r20, 0x23FB
    9c90:	50 91 fc 23 	lds	r21, 0x23FC
    9c94:	41 15       	cp	r20, r1
    9c96:	51 05       	cpc	r21, r1
    9c98:	41 f4       	brne	.+16     	; 0x9caa <malloc+0x114>
    9c9a:	4d b7       	in	r20, 0x3d	; 61
    9c9c:	5e b7       	in	r21, 0x3e	; 62
    9c9e:	80 91 f7 23 	lds	r24, 0x23F7
    9ca2:	90 91 f8 23 	lds	r25, 0x23F8
    9ca6:	48 1b       	sub	r20, r24
    9ca8:	59 0b       	sbc	r21, r25
    9caa:	20 91 04 2b 	lds	r18, 0x2B04
    9cae:	30 91 05 2b 	lds	r19, 0x2B05
    9cb2:	24 17       	cp	r18, r20
    9cb4:	35 07       	cpc	r19, r21
    9cb6:	b0 f4       	brcc	.+44     	; 0x9ce4 <malloc+0x14e>
    9cb8:	ca 01       	movw	r24, r20
    9cba:	82 1b       	sub	r24, r18
    9cbc:	93 0b       	sbc	r25, r19
    9cbe:	86 17       	cp	r24, r22
    9cc0:	97 07       	cpc	r25, r23
    9cc2:	80 f0       	brcs	.+32     	; 0x9ce4 <malloc+0x14e>
    9cc4:	ab 01       	movw	r20, r22
    9cc6:	4e 5f       	subi	r20, 0xFE	; 254
    9cc8:	5f 4f       	sbci	r21, 0xFF	; 255
    9cca:	84 17       	cp	r24, r20
    9ccc:	95 07       	cpc	r25, r21
    9cce:	50 f0       	brcs	.+20     	; 0x9ce4 <malloc+0x14e>
    9cd0:	42 0f       	add	r20, r18
    9cd2:	53 1f       	adc	r21, r19
    9cd4:	40 93 04 2b 	sts	0x2B04, r20
    9cd8:	50 93 05 2b 	sts	0x2B05, r21
    9cdc:	f9 01       	movw	r30, r18
    9cde:	61 93       	st	Z+, r22
    9ce0:	71 93       	st	Z+, r23
    9ce2:	02 c0       	rjmp	.+4      	; 0x9ce8 <malloc+0x152>
    9ce4:	e0 e0       	ldi	r30, 0x00	; 0
    9ce6:	f0 e0       	ldi	r31, 0x00	; 0
    9ce8:	cf 01       	movw	r24, r30
    9cea:	df 91       	pop	r29
    9cec:	cf 91       	pop	r28
    9cee:	08 95       	ret

00009cf0 <free>:
    9cf0:	cf 93       	push	r28
    9cf2:	df 93       	push	r29
    9cf4:	00 97       	sbiw	r24, 0x00	; 0
    9cf6:	09 f4       	brne	.+2      	; 0x9cfa <free+0xa>
    9cf8:	50 c0       	rjmp	.+160    	; 0x9d9a <free+0xaa>
    9cfa:	ec 01       	movw	r28, r24
    9cfc:	22 97       	sbiw	r28, 0x02	; 2
    9cfe:	1a 82       	std	Y+2, r1	; 0x02
    9d00:	1b 82       	std	Y+3, r1	; 0x03
    9d02:	a0 91 06 2b 	lds	r26, 0x2B06
    9d06:	b0 91 07 2b 	lds	r27, 0x2B07
    9d0a:	10 97       	sbiw	r26, 0x00	; 0
    9d0c:	09 f1       	breq	.+66     	; 0x9d50 <free+0x60>
    9d0e:	40 e0       	ldi	r20, 0x00	; 0
    9d10:	50 e0       	ldi	r21, 0x00	; 0
    9d12:	ac 17       	cp	r26, r28
    9d14:	bd 07       	cpc	r27, r29
    9d16:	08 f1       	brcs	.+66     	; 0x9d5a <free+0x6a>
    9d18:	aa 83       	std	Y+2, r26	; 0x02
    9d1a:	bb 83       	std	Y+3, r27	; 0x03
    9d1c:	fe 01       	movw	r30, r28
    9d1e:	21 91       	ld	r18, Z+
    9d20:	31 91       	ld	r19, Z+
    9d22:	e2 0f       	add	r30, r18
    9d24:	f3 1f       	adc	r31, r19
    9d26:	ae 17       	cp	r26, r30
    9d28:	bf 07       	cpc	r27, r31
    9d2a:	79 f4       	brne	.+30     	; 0x9d4a <free+0x5a>
    9d2c:	8d 91       	ld	r24, X+
    9d2e:	9c 91       	ld	r25, X
    9d30:	11 97       	sbiw	r26, 0x01	; 1
    9d32:	28 0f       	add	r18, r24
    9d34:	39 1f       	adc	r19, r25
    9d36:	2e 5f       	subi	r18, 0xFE	; 254
    9d38:	3f 4f       	sbci	r19, 0xFF	; 255
    9d3a:	28 83       	st	Y, r18
    9d3c:	39 83       	std	Y+1, r19	; 0x01
    9d3e:	12 96       	adiw	r26, 0x02	; 2
    9d40:	8d 91       	ld	r24, X+
    9d42:	9c 91       	ld	r25, X
    9d44:	13 97       	sbiw	r26, 0x03	; 3
    9d46:	8a 83       	std	Y+2, r24	; 0x02
    9d48:	9b 83       	std	Y+3, r25	; 0x03
    9d4a:	41 15       	cp	r20, r1
    9d4c:	51 05       	cpc	r21, r1
    9d4e:	71 f4       	brne	.+28     	; 0x9d6c <free+0x7c>
    9d50:	c0 93 06 2b 	sts	0x2B06, r28
    9d54:	d0 93 07 2b 	sts	0x2B07, r29
    9d58:	20 c0       	rjmp	.+64     	; 0x9d9a <free+0xaa>
    9d5a:	12 96       	adiw	r26, 0x02	; 2
    9d5c:	8d 91       	ld	r24, X+
    9d5e:	9c 91       	ld	r25, X
    9d60:	13 97       	sbiw	r26, 0x03	; 3
    9d62:	ad 01       	movw	r20, r26
    9d64:	00 97       	sbiw	r24, 0x00	; 0
    9d66:	11 f0       	breq	.+4      	; 0x9d6c <free+0x7c>
    9d68:	dc 01       	movw	r26, r24
    9d6a:	d3 cf       	rjmp	.-90     	; 0x9d12 <free+0x22>
    9d6c:	fa 01       	movw	r30, r20
    9d6e:	c2 83       	std	Z+2, r28	; 0x02
    9d70:	d3 83       	std	Z+3, r29	; 0x03
    9d72:	21 91       	ld	r18, Z+
    9d74:	31 91       	ld	r19, Z+
    9d76:	e2 0f       	add	r30, r18
    9d78:	f3 1f       	adc	r31, r19
    9d7a:	ce 17       	cp	r28, r30
    9d7c:	df 07       	cpc	r29, r31
    9d7e:	69 f4       	brne	.+26     	; 0x9d9a <free+0xaa>
    9d80:	88 81       	ld	r24, Y
    9d82:	99 81       	ldd	r25, Y+1	; 0x01
    9d84:	28 0f       	add	r18, r24
    9d86:	39 1f       	adc	r19, r25
    9d88:	2e 5f       	subi	r18, 0xFE	; 254
    9d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    9d8c:	fa 01       	movw	r30, r20
    9d8e:	20 83       	st	Z, r18
    9d90:	31 83       	std	Z+1, r19	; 0x01
    9d92:	8a 81       	ldd	r24, Y+2	; 0x02
    9d94:	9b 81       	ldd	r25, Y+3	; 0x03
    9d96:	82 83       	std	Z+2, r24	; 0x02
    9d98:	93 83       	std	Z+3, r25	; 0x03
    9d9a:	df 91       	pop	r29
    9d9c:	cf 91       	pop	r28
    9d9e:	08 95       	ret

00009da0 <strtoul>:
    9da0:	3f 92       	push	r3
    9da2:	4f 92       	push	r4
    9da4:	5f 92       	push	r5
    9da6:	6f 92       	push	r6
    9da8:	7f 92       	push	r7
    9daa:	8f 92       	push	r8
    9dac:	9f 92       	push	r9
    9dae:	af 92       	push	r10
    9db0:	bf 92       	push	r11
    9db2:	cf 92       	push	r12
    9db4:	df 92       	push	r13
    9db6:	ef 92       	push	r14
    9db8:	ff 92       	push	r15
    9dba:	0f 93       	push	r16
    9dbc:	1f 93       	push	r17
    9dbe:	cf 93       	push	r28
    9dc0:	df 93       	push	r29
    9dc2:	ec 01       	movw	r28, r24
    9dc4:	2b 01       	movw	r4, r22
    9dc6:	6a 01       	movw	r12, r20
    9dc8:	61 15       	cp	r22, r1
    9dca:	71 05       	cpc	r23, r1
    9dcc:	19 f0       	breq	.+6      	; 0x9dd4 <strtoul+0x34>
    9dce:	fb 01       	movw	r30, r22
    9dd0:	80 83       	st	Z, r24
    9dd2:	91 83       	std	Z+1, r25	; 0x01
    9dd4:	c1 14       	cp	r12, r1
    9dd6:	d1 04       	cpc	r13, r1
    9dd8:	49 f0       	breq	.+18     	; 0x9dec <strtoul+0x4c>
    9dda:	c6 01       	movw	r24, r12
    9ddc:	02 97       	sbiw	r24, 0x02	; 2
    9dde:	83 97       	sbiw	r24, 0x23	; 35
    9de0:	28 f0       	brcs	.+10     	; 0x9dec <strtoul+0x4c>
    9de2:	20 e0       	ldi	r18, 0x00	; 0
    9de4:	30 e0       	ldi	r19, 0x00	; 0
    9de6:	40 e0       	ldi	r20, 0x00	; 0
    9de8:	50 e0       	ldi	r21, 0x00	; 0
    9dea:	dc c0       	rjmp	.+440    	; 0x9fa4 <strtoul+0x204>
    9dec:	a9 90       	ld	r10, Y+
    9dee:	8a 2d       	mov	r24, r10
    9df0:	90 e0       	ldi	r25, 0x00	; 0
    9df2:	0e 94 e6 4f 	call	0x9fcc	; 0x9fcc <isspace>
    9df6:	89 2b       	or	r24, r25
    9df8:	c9 f7       	brne	.-14     	; 0x9dec <strtoul+0x4c>
    9dfa:	fd e2       	ldi	r31, 0x2D	; 45
    9dfc:	af 16       	cp	r10, r31
    9dfe:	21 f4       	brne	.+8      	; 0x9e08 <strtoul+0x68>
    9e00:	a9 90       	ld	r10, Y+
    9e02:	33 24       	eor	r3, r3
    9e04:	33 94       	inc	r3
    9e06:	05 c0       	rjmp	.+10     	; 0x9e12 <strtoul+0x72>
    9e08:	8b e2       	ldi	r24, 0x2B	; 43
    9e0a:	a8 16       	cp	r10, r24
    9e0c:	09 f4       	brne	.+2      	; 0x9e10 <strtoul+0x70>
    9e0e:	a9 90       	ld	r10, Y+
    9e10:	33 24       	eor	r3, r3
    9e12:	c1 14       	cp	r12, r1
    9e14:	d1 04       	cpc	r13, r1
    9e16:	21 f0       	breq	.+8      	; 0x9e20 <strtoul+0x80>
    9e18:	e0 e1       	ldi	r30, 0x10	; 16
    9e1a:	ce 16       	cp	r12, r30
    9e1c:	d1 04       	cpc	r13, r1
    9e1e:	11 f5       	brne	.+68     	; 0x9e64 <strtoul+0xc4>
    9e20:	f0 e3       	ldi	r31, 0x30	; 48
    9e22:	af 16       	cp	r10, r31
    9e24:	69 f4       	brne	.+26     	; 0x9e40 <strtoul+0xa0>
    9e26:	88 81       	ld	r24, Y
    9e28:	88 37       	cpi	r24, 0x78	; 120
    9e2a:	11 f0       	breq	.+4      	; 0x9e30 <strtoul+0x90>
    9e2c:	88 35       	cpi	r24, 0x58	; 88
    9e2e:	41 f4       	brne	.+16     	; 0x9e40 <strtoul+0xa0>
    9e30:	a9 80       	ldd	r10, Y+1	; 0x01
    9e32:	22 96       	adiw	r28, 0x02	; 2
    9e34:	82 e0       	ldi	r24, 0x02	; 2
    9e36:	38 2a       	or	r3, r24
    9e38:	20 e1       	ldi	r18, 0x10	; 16
    9e3a:	c2 2e       	mov	r12, r18
    9e3c:	d1 2c       	mov	r13, r1
    9e3e:	12 c0       	rjmp	.+36     	; 0x9e64 <strtoul+0xc4>
    9e40:	c1 14       	cp	r12, r1
    9e42:	d1 04       	cpc	r13, r1
    9e44:	79 f4       	brne	.+30     	; 0x9e64 <strtoul+0xc4>
    9e46:	e0 e3       	ldi	r30, 0x30	; 48
    9e48:	ae 16       	cp	r10, r30
    9e4a:	59 f1       	breq	.+86     	; 0x9ea2 <strtoul+0x102>
    9e4c:	99 e9       	ldi	r25, 0x99	; 153
    9e4e:	e9 2e       	mov	r14, r25
    9e50:	99 e9       	ldi	r25, 0x99	; 153
    9e52:	f9 2e       	mov	r15, r25
    9e54:	99 e9       	ldi	r25, 0x99	; 153
    9e56:	09 2f       	mov	r16, r25
    9e58:	99 e1       	ldi	r25, 0x19	; 25
    9e5a:	19 2f       	mov	r17, r25
    9e5c:	8a e0       	ldi	r24, 0x0A	; 10
    9e5e:	c8 2e       	mov	r12, r24
    9e60:	d1 2c       	mov	r13, r1
    9e62:	3a c0       	rjmp	.+116    	; 0x9ed8 <strtoul+0x138>
    9e64:	fa e0       	ldi	r31, 0x0A	; 10
    9e66:	cf 16       	cp	r12, r31
    9e68:	d1 04       	cpc	r13, r1
    9e6a:	91 f0       	breq	.+36     	; 0x9e90 <strtoul+0xf0>
    9e6c:	80 e1       	ldi	r24, 0x10	; 16
    9e6e:	c8 16       	cp	r12, r24
    9e70:	d1 04       	cpc	r13, r1
    9e72:	29 f0       	breq	.+10     	; 0x9e7e <strtoul+0xde>
    9e74:	e8 e0       	ldi	r30, 0x08	; 8
    9e76:	ce 16       	cp	r12, r30
    9e78:	d1 04       	cpc	r13, r1
    9e7a:	f9 f4       	brne	.+62     	; 0x9eba <strtoul+0x11a>
    9e7c:	15 c0       	rjmp	.+42     	; 0x9ea8 <strtoul+0x108>
    9e7e:	bf ef       	ldi	r27, 0xFF	; 255
    9e80:	eb 2e       	mov	r14, r27
    9e82:	bf ef       	ldi	r27, 0xFF	; 255
    9e84:	fb 2e       	mov	r15, r27
    9e86:	bf ef       	ldi	r27, 0xFF	; 255
    9e88:	0b 2f       	mov	r16, r27
    9e8a:	bf e0       	ldi	r27, 0x0F	; 15
    9e8c:	1b 2f       	mov	r17, r27
    9e8e:	24 c0       	rjmp	.+72     	; 0x9ed8 <strtoul+0x138>
    9e90:	a9 e9       	ldi	r26, 0x99	; 153
    9e92:	ea 2e       	mov	r14, r26
    9e94:	a9 e9       	ldi	r26, 0x99	; 153
    9e96:	fa 2e       	mov	r15, r26
    9e98:	a9 e9       	ldi	r26, 0x99	; 153
    9e9a:	0a 2f       	mov	r16, r26
    9e9c:	a9 e1       	ldi	r26, 0x19	; 25
    9e9e:	1a 2f       	mov	r17, r26
    9ea0:	1b c0       	rjmp	.+54     	; 0x9ed8 <strtoul+0x138>
    9ea2:	f8 e0       	ldi	r31, 0x08	; 8
    9ea4:	cf 2e       	mov	r12, r31
    9ea6:	d1 2c       	mov	r13, r1
    9ea8:	ef ef       	ldi	r30, 0xFF	; 255
    9eaa:	ee 2e       	mov	r14, r30
    9eac:	ef ef       	ldi	r30, 0xFF	; 255
    9eae:	fe 2e       	mov	r15, r30
    9eb0:	ef ef       	ldi	r30, 0xFF	; 255
    9eb2:	0e 2f       	mov	r16, r30
    9eb4:	ef e1       	ldi	r30, 0x1F	; 31
    9eb6:	1e 2f       	mov	r17, r30
    9eb8:	0f c0       	rjmp	.+30     	; 0x9ed8 <strtoul+0x138>
    9eba:	96 01       	movw	r18, r12
    9ebc:	44 27       	eor	r20, r20
    9ebe:	37 fd       	sbrc	r19, 7
    9ec0:	40 95       	com	r20
    9ec2:	54 2f       	mov	r21, r20
    9ec4:	6f ef       	ldi	r22, 0xFF	; 255
    9ec6:	7f ef       	ldi	r23, 0xFF	; 255
    9ec8:	8f ef       	ldi	r24, 0xFF	; 255
    9eca:	9f ef       	ldi	r25, 0xFF	; 255
    9ecc:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <__udivmodsi4>
    9ed0:	c9 01       	movw	r24, r18
    9ed2:	da 01       	movw	r26, r20
    9ed4:	7c 01       	movw	r14, r24
    9ed6:	8d 01       	movw	r16, r26
    9ed8:	20 e0       	ldi	r18, 0x00	; 0
    9eda:	30 e0       	ldi	r19, 0x00	; 0
    9edc:	40 e0       	ldi	r20, 0x00	; 0
    9ede:	50 e0       	ldi	r21, 0x00	; 0
    9ee0:	60 e0       	ldi	r22, 0x00	; 0
    9ee2:	36 01       	movw	r6, r12
    9ee4:	88 24       	eor	r8, r8
    9ee6:	77 fc       	sbrc	r7, 7
    9ee8:	80 94       	com	r8
    9eea:	98 2c       	mov	r9, r8
    9eec:	70 ed       	ldi	r23, 0xD0	; 208
    9eee:	b7 2e       	mov	r11, r23
    9ef0:	ba 0c       	add	r11, r10
    9ef2:	f9 e0       	ldi	r31, 0x09	; 9
    9ef4:	fb 15       	cp	r31, r11
    9ef6:	70 f4       	brcc	.+28     	; 0x9f14 <strtoul+0x174>
    9ef8:	8a 2d       	mov	r24, r10
    9efa:	81 54       	subi	r24, 0x41	; 65
    9efc:	8a 31       	cpi	r24, 0x1A	; 26
    9efe:	18 f4       	brcc	.+6      	; 0x9f06 <strtoul+0x166>
    9f00:	99 ec       	ldi	r25, 0xC9	; 201
    9f02:	b9 2e       	mov	r11, r25
    9f04:	06 c0       	rjmp	.+12     	; 0x9f12 <strtoul+0x172>
    9f06:	8a 2d       	mov	r24, r10
    9f08:	81 56       	subi	r24, 0x61	; 97
    9f0a:	8a 31       	cpi	r24, 0x1A	; 26
    9f0c:	48 f5       	brcc	.+82     	; 0x9f60 <strtoul+0x1c0>
    9f0e:	89 ea       	ldi	r24, 0xA9	; 169
    9f10:	b8 2e       	mov	r11, r24
    9f12:	ba 0c       	add	r11, r10
    9f14:	8b 2d       	mov	r24, r11
    9f16:	90 e0       	ldi	r25, 0x00	; 0
    9f18:	8c 15       	cp	r24, r12
    9f1a:	9d 05       	cpc	r25, r13
    9f1c:	0c f5       	brge	.+66     	; 0x9f60 <strtoul+0x1c0>
    9f1e:	6f 3f       	cpi	r22, 0xFF	; 255
    9f20:	e9 f0       	breq	.+58     	; 0x9f5c <strtoul+0x1bc>
    9f22:	e2 16       	cp	r14, r18
    9f24:	f3 06       	cpc	r15, r19
    9f26:	04 07       	cpc	r16, r20
    9f28:	15 07       	cpc	r17, r21
    9f2a:	b8 f0       	brcs	.+46     	; 0x9f5a <strtoul+0x1ba>
    9f2c:	ca 01       	movw	r24, r20
    9f2e:	b9 01       	movw	r22, r18
    9f30:	a4 01       	movw	r20, r8
    9f32:	93 01       	movw	r18, r6
    9f34:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <__mulsi3>
    9f38:	9b 01       	movw	r18, r22
    9f3a:	ac 01       	movw	r20, r24
    9f3c:	8b 2d       	mov	r24, r11
    9f3e:	90 e0       	ldi	r25, 0x00	; 0
    9f40:	a0 e0       	ldi	r26, 0x00	; 0
    9f42:	b0 e0       	ldi	r27, 0x00	; 0
    9f44:	28 0f       	add	r18, r24
    9f46:	39 1f       	adc	r19, r25
    9f48:	4a 1f       	adc	r20, r26
    9f4a:	5b 1f       	adc	r21, r27
    9f4c:	28 17       	cp	r18, r24
    9f4e:	39 07       	cpc	r19, r25
    9f50:	4a 07       	cpc	r20, r26
    9f52:	5b 07       	cpc	r21, r27
    9f54:	10 f0       	brcs	.+4      	; 0x9f5a <strtoul+0x1ba>
    9f56:	61 e0       	ldi	r22, 0x01	; 1
    9f58:	01 c0       	rjmp	.+2      	; 0x9f5c <strtoul+0x1bc>
    9f5a:	6f ef       	ldi	r22, 0xFF	; 255
    9f5c:	a9 90       	ld	r10, Y+
    9f5e:	c6 cf       	rjmp	.-116    	; 0x9eec <strtoul+0x14c>
    9f60:	41 14       	cp	r4, r1
    9f62:	51 04       	cpc	r5, r1
    9f64:	51 f0       	breq	.+20     	; 0x9f7a <strtoul+0x1da>
    9f66:	66 23       	and	r22, r22
    9f68:	11 f0       	breq	.+4      	; 0x9f6e <strtoul+0x1ce>
    9f6a:	21 97       	sbiw	r28, 0x01	; 1
    9f6c:	03 c0       	rjmp	.+6      	; 0x9f74 <strtoul+0x1d4>
    9f6e:	31 fe       	sbrs	r3, 1
    9f70:	04 c0       	rjmp	.+8      	; 0x9f7a <strtoul+0x1da>
    9f72:	22 97       	sbiw	r28, 0x02	; 2
    9f74:	f2 01       	movw	r30, r4
    9f76:	c0 83       	st	Z, r28
    9f78:	d1 83       	std	Z+1, r29	; 0x01
    9f7a:	30 fe       	sbrs	r3, 0
    9f7c:	07 c0       	rjmp	.+14     	; 0x9f8c <strtoul+0x1ec>
    9f7e:	50 95       	com	r21
    9f80:	40 95       	com	r20
    9f82:	30 95       	com	r19
    9f84:	21 95       	neg	r18
    9f86:	3f 4f       	sbci	r19, 0xFF	; 255
    9f88:	4f 4f       	sbci	r20, 0xFF	; 255
    9f8a:	5f 4f       	sbci	r21, 0xFF	; 255
    9f8c:	67 ff       	sbrs	r22, 7
    9f8e:	0a c0       	rjmp	.+20     	; 0x9fa4 <strtoul+0x204>
    9f90:	82 e2       	ldi	r24, 0x22	; 34
    9f92:	90 e0       	ldi	r25, 0x00	; 0
    9f94:	80 93 08 2b 	sts	0x2B08, r24
    9f98:	90 93 09 2b 	sts	0x2B09, r25
    9f9c:	2f ef       	ldi	r18, 0xFF	; 255
    9f9e:	3f ef       	ldi	r19, 0xFF	; 255
    9fa0:	4f ef       	ldi	r20, 0xFF	; 255
    9fa2:	5f ef       	ldi	r21, 0xFF	; 255
    9fa4:	b9 01       	movw	r22, r18
    9fa6:	ca 01       	movw	r24, r20
    9fa8:	df 91       	pop	r29
    9faa:	cf 91       	pop	r28
    9fac:	1f 91       	pop	r17
    9fae:	0f 91       	pop	r16
    9fb0:	ff 90       	pop	r15
    9fb2:	ef 90       	pop	r14
    9fb4:	df 90       	pop	r13
    9fb6:	cf 90       	pop	r12
    9fb8:	bf 90       	pop	r11
    9fba:	af 90       	pop	r10
    9fbc:	9f 90       	pop	r9
    9fbe:	8f 90       	pop	r8
    9fc0:	7f 90       	pop	r7
    9fc2:	6f 90       	pop	r6
    9fc4:	5f 90       	pop	r5
    9fc6:	4f 90       	pop	r4
    9fc8:	3f 90       	pop	r3
    9fca:	08 95       	ret

00009fcc <isspace>:
    9fcc:	91 11       	cpse	r25, r1
    9fce:	64 c2       	rjmp	.+1224   	; 0xa498 <__ctype_isfalse>
    9fd0:	80 32       	cpi	r24, 0x20	; 32
    9fd2:	19 f0       	breq	.+6      	; 0x9fda <isspace+0xe>
    9fd4:	89 50       	subi	r24, 0x09	; 9
    9fd6:	85 50       	subi	r24, 0x05	; 5
    9fd8:	d0 f7       	brcc	.-12     	; 0x9fce <isspace+0x2>
    9fda:	08 95       	ret

00009fdc <sprintf>:
    9fdc:	0f 93       	push	r16
    9fde:	1f 93       	push	r17
    9fe0:	df 93       	push	r29
    9fe2:	cf 93       	push	r28
    9fe4:	cd b7       	in	r28, 0x3d	; 61
    9fe6:	de b7       	in	r29, 0x3e	; 62
    9fe8:	2e 97       	sbiw	r28, 0x0e	; 14
    9fea:	cd bf       	out	0x3d, r28	; 61
    9fec:	de bf       	out	0x3e, r29	; 62
    9fee:	0e 89       	ldd	r16, Y+22	; 0x16
    9ff0:	1f 89       	ldd	r17, Y+23	; 0x17
    9ff2:	86 e0       	ldi	r24, 0x06	; 6
    9ff4:	8c 83       	std	Y+4, r24	; 0x04
    9ff6:	09 83       	std	Y+1, r16	; 0x01
    9ff8:	1a 83       	std	Y+2, r17	; 0x02
    9ffa:	8f ef       	ldi	r24, 0xFF	; 255
    9ffc:	9f e7       	ldi	r25, 0x7F	; 127
    9ffe:	8d 83       	std	Y+5, r24	; 0x05
    a000:	9e 83       	std	Y+6, r25	; 0x06
    a002:	9e 01       	movw	r18, r28
    a004:	26 5e       	subi	r18, 0xE6	; 230
    a006:	3f 4f       	sbci	r19, 0xFF	; 255
    a008:	ce 01       	movw	r24, r28
    a00a:	01 96       	adiw	r24, 0x01	; 1
    a00c:	68 8d       	ldd	r22, Y+24	; 0x18
    a00e:	79 8d       	ldd	r23, Y+25	; 0x19
    a010:	a9 01       	movw	r20, r18
    a012:	0e 94 19 50 	call	0xa032	; 0xa032 <vfprintf>
    a016:	2f 81       	ldd	r18, Y+7	; 0x07
    a018:	38 85       	ldd	r19, Y+8	; 0x08
    a01a:	02 0f       	add	r16, r18
    a01c:	13 1f       	adc	r17, r19
    a01e:	f8 01       	movw	r30, r16
    a020:	10 82       	st	Z, r1
    a022:	2e 96       	adiw	r28, 0x0e	; 14
    a024:	cd bf       	out	0x3d, r28	; 61
    a026:	de bf       	out	0x3e, r29	; 62
    a028:	cf 91       	pop	r28
    a02a:	df 91       	pop	r29
    a02c:	1f 91       	pop	r17
    a02e:	0f 91       	pop	r16
    a030:	08 95       	ret

0000a032 <vfprintf>:
    a032:	2f 92       	push	r2
    a034:	3f 92       	push	r3
    a036:	4f 92       	push	r4
    a038:	5f 92       	push	r5
    a03a:	6f 92       	push	r6
    a03c:	7f 92       	push	r7
    a03e:	8f 92       	push	r8
    a040:	9f 92       	push	r9
    a042:	af 92       	push	r10
    a044:	bf 92       	push	r11
    a046:	cf 92       	push	r12
    a048:	df 92       	push	r13
    a04a:	ef 92       	push	r14
    a04c:	ff 92       	push	r15
    a04e:	0f 93       	push	r16
    a050:	1f 93       	push	r17
    a052:	df 93       	push	r29
    a054:	cf 93       	push	r28
    a056:	cd b7       	in	r28, 0x3d	; 61
    a058:	de b7       	in	r29, 0x3e	; 62
    a05a:	2b 97       	sbiw	r28, 0x0b	; 11
    a05c:	cd bf       	out	0x3d, r28	; 61
    a05e:	de bf       	out	0x3e, r29	; 62
    a060:	3c 01       	movw	r6, r24
    a062:	2b 01       	movw	r4, r22
    a064:	5a 01       	movw	r10, r20
    a066:	fc 01       	movw	r30, r24
    a068:	16 82       	std	Z+6, r1	; 0x06
    a06a:	17 82       	std	Z+7, r1	; 0x07
    a06c:	83 81       	ldd	r24, Z+3	; 0x03
    a06e:	81 fd       	sbrc	r24, 1
    a070:	03 c0       	rjmp	.+6      	; 0xa078 <vfprintf+0x46>
    a072:	6f ef       	ldi	r22, 0xFF	; 255
    a074:	7f ef       	ldi	r23, 0xFF	; 255
    a076:	c6 c1       	rjmp	.+908    	; 0xa404 <vfprintf+0x3d2>
    a078:	9a e0       	ldi	r25, 0x0A	; 10
    a07a:	89 2e       	mov	r8, r25
    a07c:	1e 01       	movw	r2, r28
    a07e:	08 94       	sec
    a080:	21 1c       	adc	r2, r1
    a082:	31 1c       	adc	r3, r1
    a084:	f3 01       	movw	r30, r6
    a086:	23 81       	ldd	r18, Z+3	; 0x03
    a088:	f2 01       	movw	r30, r4
    a08a:	23 fd       	sbrc	r18, 3
    a08c:	85 91       	lpm	r24, Z+
    a08e:	23 ff       	sbrs	r18, 3
    a090:	81 91       	ld	r24, Z+
    a092:	2f 01       	movw	r4, r30
    a094:	88 23       	and	r24, r24
    a096:	09 f4       	brne	.+2      	; 0xa09a <vfprintf+0x68>
    a098:	b2 c1       	rjmp	.+868    	; 0xa3fe <vfprintf+0x3cc>
    a09a:	85 32       	cpi	r24, 0x25	; 37
    a09c:	39 f4       	brne	.+14     	; 0xa0ac <vfprintf+0x7a>
    a09e:	23 fd       	sbrc	r18, 3
    a0a0:	85 91       	lpm	r24, Z+
    a0a2:	23 ff       	sbrs	r18, 3
    a0a4:	81 91       	ld	r24, Z+
    a0a6:	2f 01       	movw	r4, r30
    a0a8:	85 32       	cpi	r24, 0x25	; 37
    a0aa:	29 f4       	brne	.+10     	; 0xa0b6 <vfprintf+0x84>
    a0ac:	90 e0       	ldi	r25, 0x00	; 0
    a0ae:	b3 01       	movw	r22, r6
    a0b0:	0e 94 65 52 	call	0xa4ca	; 0xa4ca <fputc>
    a0b4:	e7 cf       	rjmp	.-50     	; 0xa084 <vfprintf+0x52>
    a0b6:	98 2f       	mov	r25, r24
    a0b8:	ff 24       	eor	r15, r15
    a0ba:	ee 24       	eor	r14, r14
    a0bc:	99 24       	eor	r9, r9
    a0be:	ff e1       	ldi	r31, 0x1F	; 31
    a0c0:	ff 15       	cp	r31, r15
    a0c2:	d0 f0       	brcs	.+52     	; 0xa0f8 <vfprintf+0xc6>
    a0c4:	9b 32       	cpi	r25, 0x2B	; 43
    a0c6:	69 f0       	breq	.+26     	; 0xa0e2 <vfprintf+0xb0>
    a0c8:	9c 32       	cpi	r25, 0x2C	; 44
    a0ca:	28 f4       	brcc	.+10     	; 0xa0d6 <vfprintf+0xa4>
    a0cc:	90 32       	cpi	r25, 0x20	; 32
    a0ce:	59 f0       	breq	.+22     	; 0xa0e6 <vfprintf+0xb4>
    a0d0:	93 32       	cpi	r25, 0x23	; 35
    a0d2:	91 f4       	brne	.+36     	; 0xa0f8 <vfprintf+0xc6>
    a0d4:	0e c0       	rjmp	.+28     	; 0xa0f2 <vfprintf+0xc0>
    a0d6:	9d 32       	cpi	r25, 0x2D	; 45
    a0d8:	49 f0       	breq	.+18     	; 0xa0ec <vfprintf+0xba>
    a0da:	90 33       	cpi	r25, 0x30	; 48
    a0dc:	69 f4       	brne	.+26     	; 0xa0f8 <vfprintf+0xc6>
    a0de:	41 e0       	ldi	r20, 0x01	; 1
    a0e0:	24 c0       	rjmp	.+72     	; 0xa12a <vfprintf+0xf8>
    a0e2:	52 e0       	ldi	r21, 0x02	; 2
    a0e4:	f5 2a       	or	r15, r21
    a0e6:	84 e0       	ldi	r24, 0x04	; 4
    a0e8:	f8 2a       	or	r15, r24
    a0ea:	28 c0       	rjmp	.+80     	; 0xa13c <vfprintf+0x10a>
    a0ec:	98 e0       	ldi	r25, 0x08	; 8
    a0ee:	f9 2a       	or	r15, r25
    a0f0:	25 c0       	rjmp	.+74     	; 0xa13c <vfprintf+0x10a>
    a0f2:	e0 e1       	ldi	r30, 0x10	; 16
    a0f4:	fe 2a       	or	r15, r30
    a0f6:	22 c0       	rjmp	.+68     	; 0xa13c <vfprintf+0x10a>
    a0f8:	f7 fc       	sbrc	r15, 7
    a0fa:	29 c0       	rjmp	.+82     	; 0xa14e <vfprintf+0x11c>
    a0fc:	89 2f       	mov	r24, r25
    a0fe:	80 53       	subi	r24, 0x30	; 48
    a100:	8a 30       	cpi	r24, 0x0A	; 10
    a102:	70 f4       	brcc	.+28     	; 0xa120 <vfprintf+0xee>
    a104:	f6 fe       	sbrs	r15, 6
    a106:	05 c0       	rjmp	.+10     	; 0xa112 <vfprintf+0xe0>
    a108:	98 9c       	mul	r9, r8
    a10a:	90 2c       	mov	r9, r0
    a10c:	11 24       	eor	r1, r1
    a10e:	98 0e       	add	r9, r24
    a110:	15 c0       	rjmp	.+42     	; 0xa13c <vfprintf+0x10a>
    a112:	e8 9c       	mul	r14, r8
    a114:	e0 2c       	mov	r14, r0
    a116:	11 24       	eor	r1, r1
    a118:	e8 0e       	add	r14, r24
    a11a:	f0 e2       	ldi	r31, 0x20	; 32
    a11c:	ff 2a       	or	r15, r31
    a11e:	0e c0       	rjmp	.+28     	; 0xa13c <vfprintf+0x10a>
    a120:	9e 32       	cpi	r25, 0x2E	; 46
    a122:	29 f4       	brne	.+10     	; 0xa12e <vfprintf+0xfc>
    a124:	f6 fc       	sbrc	r15, 6
    a126:	6b c1       	rjmp	.+726    	; 0xa3fe <vfprintf+0x3cc>
    a128:	40 e4       	ldi	r20, 0x40	; 64
    a12a:	f4 2a       	or	r15, r20
    a12c:	07 c0       	rjmp	.+14     	; 0xa13c <vfprintf+0x10a>
    a12e:	9c 36       	cpi	r25, 0x6C	; 108
    a130:	19 f4       	brne	.+6      	; 0xa138 <vfprintf+0x106>
    a132:	50 e8       	ldi	r21, 0x80	; 128
    a134:	f5 2a       	or	r15, r21
    a136:	02 c0       	rjmp	.+4      	; 0xa13c <vfprintf+0x10a>
    a138:	98 36       	cpi	r25, 0x68	; 104
    a13a:	49 f4       	brne	.+18     	; 0xa14e <vfprintf+0x11c>
    a13c:	f2 01       	movw	r30, r4
    a13e:	23 fd       	sbrc	r18, 3
    a140:	95 91       	lpm	r25, Z+
    a142:	23 ff       	sbrs	r18, 3
    a144:	91 91       	ld	r25, Z+
    a146:	2f 01       	movw	r4, r30
    a148:	99 23       	and	r25, r25
    a14a:	09 f0       	breq	.+2      	; 0xa14e <vfprintf+0x11c>
    a14c:	b8 cf       	rjmp	.-144    	; 0xa0be <vfprintf+0x8c>
    a14e:	89 2f       	mov	r24, r25
    a150:	85 54       	subi	r24, 0x45	; 69
    a152:	83 30       	cpi	r24, 0x03	; 3
    a154:	18 f0       	brcs	.+6      	; 0xa15c <vfprintf+0x12a>
    a156:	80 52       	subi	r24, 0x20	; 32
    a158:	83 30       	cpi	r24, 0x03	; 3
    a15a:	38 f4       	brcc	.+14     	; 0xa16a <vfprintf+0x138>
    a15c:	44 e0       	ldi	r20, 0x04	; 4
    a15e:	50 e0       	ldi	r21, 0x00	; 0
    a160:	a4 0e       	add	r10, r20
    a162:	b5 1e       	adc	r11, r21
    a164:	5f e3       	ldi	r21, 0x3F	; 63
    a166:	59 83       	std	Y+1, r21	; 0x01
    a168:	0f c0       	rjmp	.+30     	; 0xa188 <vfprintf+0x156>
    a16a:	93 36       	cpi	r25, 0x63	; 99
    a16c:	31 f0       	breq	.+12     	; 0xa17a <vfprintf+0x148>
    a16e:	93 37       	cpi	r25, 0x73	; 115
    a170:	79 f0       	breq	.+30     	; 0xa190 <vfprintf+0x15e>
    a172:	93 35       	cpi	r25, 0x53	; 83
    a174:	09 f0       	breq	.+2      	; 0xa178 <vfprintf+0x146>
    a176:	56 c0       	rjmp	.+172    	; 0xa224 <vfprintf+0x1f2>
    a178:	20 c0       	rjmp	.+64     	; 0xa1ba <vfprintf+0x188>
    a17a:	f5 01       	movw	r30, r10
    a17c:	80 81       	ld	r24, Z
    a17e:	89 83       	std	Y+1, r24	; 0x01
    a180:	42 e0       	ldi	r20, 0x02	; 2
    a182:	50 e0       	ldi	r21, 0x00	; 0
    a184:	a4 0e       	add	r10, r20
    a186:	b5 1e       	adc	r11, r21
    a188:	61 01       	movw	r12, r2
    a18a:	01 e0       	ldi	r16, 0x01	; 1
    a18c:	10 e0       	ldi	r17, 0x00	; 0
    a18e:	12 c0       	rjmp	.+36     	; 0xa1b4 <vfprintf+0x182>
    a190:	f5 01       	movw	r30, r10
    a192:	c0 80       	ld	r12, Z
    a194:	d1 80       	ldd	r13, Z+1	; 0x01
    a196:	f6 fc       	sbrc	r15, 6
    a198:	03 c0       	rjmp	.+6      	; 0xa1a0 <vfprintf+0x16e>
    a19a:	6f ef       	ldi	r22, 0xFF	; 255
    a19c:	7f ef       	ldi	r23, 0xFF	; 255
    a19e:	02 c0       	rjmp	.+4      	; 0xa1a4 <vfprintf+0x172>
    a1a0:	69 2d       	mov	r22, r9
    a1a2:	70 e0       	ldi	r23, 0x00	; 0
    a1a4:	42 e0       	ldi	r20, 0x02	; 2
    a1a6:	50 e0       	ldi	r21, 0x00	; 0
    a1a8:	a4 0e       	add	r10, r20
    a1aa:	b5 1e       	adc	r11, r21
    a1ac:	c6 01       	movw	r24, r12
    a1ae:	0e 94 5a 52 	call	0xa4b4	; 0xa4b4 <strnlen>
    a1b2:	8c 01       	movw	r16, r24
    a1b4:	5f e7       	ldi	r21, 0x7F	; 127
    a1b6:	f5 22       	and	r15, r21
    a1b8:	14 c0       	rjmp	.+40     	; 0xa1e2 <vfprintf+0x1b0>
    a1ba:	f5 01       	movw	r30, r10
    a1bc:	c0 80       	ld	r12, Z
    a1be:	d1 80       	ldd	r13, Z+1	; 0x01
    a1c0:	f6 fc       	sbrc	r15, 6
    a1c2:	03 c0       	rjmp	.+6      	; 0xa1ca <vfprintf+0x198>
    a1c4:	6f ef       	ldi	r22, 0xFF	; 255
    a1c6:	7f ef       	ldi	r23, 0xFF	; 255
    a1c8:	02 c0       	rjmp	.+4      	; 0xa1ce <vfprintf+0x19c>
    a1ca:	69 2d       	mov	r22, r9
    a1cc:	70 e0       	ldi	r23, 0x00	; 0
    a1ce:	42 e0       	ldi	r20, 0x02	; 2
    a1d0:	50 e0       	ldi	r21, 0x00	; 0
    a1d2:	a4 0e       	add	r10, r20
    a1d4:	b5 1e       	adc	r11, r21
    a1d6:	c6 01       	movw	r24, r12
    a1d8:	0e 94 4f 52 	call	0xa49e	; 0xa49e <strnlen_P>
    a1dc:	8c 01       	movw	r16, r24
    a1de:	50 e8       	ldi	r21, 0x80	; 128
    a1e0:	f5 2a       	or	r15, r21
    a1e2:	f3 fe       	sbrs	r15, 3
    a1e4:	07 c0       	rjmp	.+14     	; 0xa1f4 <vfprintf+0x1c2>
    a1e6:	1a c0       	rjmp	.+52     	; 0xa21c <vfprintf+0x1ea>
    a1e8:	80 e2       	ldi	r24, 0x20	; 32
    a1ea:	90 e0       	ldi	r25, 0x00	; 0
    a1ec:	b3 01       	movw	r22, r6
    a1ee:	0e 94 65 52 	call	0xa4ca	; 0xa4ca <fputc>
    a1f2:	ea 94       	dec	r14
    a1f4:	8e 2d       	mov	r24, r14
    a1f6:	90 e0       	ldi	r25, 0x00	; 0
    a1f8:	08 17       	cp	r16, r24
    a1fa:	19 07       	cpc	r17, r25
    a1fc:	a8 f3       	brcs	.-22     	; 0xa1e8 <vfprintf+0x1b6>
    a1fe:	0e c0       	rjmp	.+28     	; 0xa21c <vfprintf+0x1ea>
    a200:	f6 01       	movw	r30, r12
    a202:	f7 fc       	sbrc	r15, 7
    a204:	85 91       	lpm	r24, Z+
    a206:	f7 fe       	sbrs	r15, 7
    a208:	81 91       	ld	r24, Z+
    a20a:	6f 01       	movw	r12, r30
    a20c:	90 e0       	ldi	r25, 0x00	; 0
    a20e:	b3 01       	movw	r22, r6
    a210:	0e 94 65 52 	call	0xa4ca	; 0xa4ca <fputc>
    a214:	e1 10       	cpse	r14, r1
    a216:	ea 94       	dec	r14
    a218:	01 50       	subi	r16, 0x01	; 1
    a21a:	10 40       	sbci	r17, 0x00	; 0
    a21c:	01 15       	cp	r16, r1
    a21e:	11 05       	cpc	r17, r1
    a220:	79 f7       	brne	.-34     	; 0xa200 <vfprintf+0x1ce>
    a222:	ea c0       	rjmp	.+468    	; 0xa3f8 <vfprintf+0x3c6>
    a224:	94 36       	cpi	r25, 0x64	; 100
    a226:	11 f0       	breq	.+4      	; 0xa22c <vfprintf+0x1fa>
    a228:	99 36       	cpi	r25, 0x69	; 105
    a22a:	69 f5       	brne	.+90     	; 0xa286 <vfprintf+0x254>
    a22c:	f7 fe       	sbrs	r15, 7
    a22e:	08 c0       	rjmp	.+16     	; 0xa240 <vfprintf+0x20e>
    a230:	f5 01       	movw	r30, r10
    a232:	20 81       	ld	r18, Z
    a234:	31 81       	ldd	r19, Z+1	; 0x01
    a236:	42 81       	ldd	r20, Z+2	; 0x02
    a238:	53 81       	ldd	r21, Z+3	; 0x03
    a23a:	84 e0       	ldi	r24, 0x04	; 4
    a23c:	90 e0       	ldi	r25, 0x00	; 0
    a23e:	0a c0       	rjmp	.+20     	; 0xa254 <vfprintf+0x222>
    a240:	f5 01       	movw	r30, r10
    a242:	80 81       	ld	r24, Z
    a244:	91 81       	ldd	r25, Z+1	; 0x01
    a246:	9c 01       	movw	r18, r24
    a248:	44 27       	eor	r20, r20
    a24a:	37 fd       	sbrc	r19, 7
    a24c:	40 95       	com	r20
    a24e:	54 2f       	mov	r21, r20
    a250:	82 e0       	ldi	r24, 0x02	; 2
    a252:	90 e0       	ldi	r25, 0x00	; 0
    a254:	a8 0e       	add	r10, r24
    a256:	b9 1e       	adc	r11, r25
    a258:	9f e6       	ldi	r25, 0x6F	; 111
    a25a:	f9 22       	and	r15, r25
    a25c:	57 ff       	sbrs	r21, 7
    a25e:	09 c0       	rjmp	.+18     	; 0xa272 <vfprintf+0x240>
    a260:	50 95       	com	r21
    a262:	40 95       	com	r20
    a264:	30 95       	com	r19
    a266:	21 95       	neg	r18
    a268:	3f 4f       	sbci	r19, 0xFF	; 255
    a26a:	4f 4f       	sbci	r20, 0xFF	; 255
    a26c:	5f 4f       	sbci	r21, 0xFF	; 255
    a26e:	e0 e8       	ldi	r30, 0x80	; 128
    a270:	fe 2a       	or	r15, r30
    a272:	ca 01       	movw	r24, r20
    a274:	b9 01       	movw	r22, r18
    a276:	a1 01       	movw	r20, r2
    a278:	2a e0       	ldi	r18, 0x0A	; 10
    a27a:	30 e0       	ldi	r19, 0x00	; 0
    a27c:	0e 94 91 52 	call	0xa522	; 0xa522 <__ultoa_invert>
    a280:	d8 2e       	mov	r13, r24
    a282:	d2 18       	sub	r13, r2
    a284:	40 c0       	rjmp	.+128    	; 0xa306 <vfprintf+0x2d4>
    a286:	95 37       	cpi	r25, 0x75	; 117
    a288:	29 f4       	brne	.+10     	; 0xa294 <vfprintf+0x262>
    a28a:	1f 2d       	mov	r17, r15
    a28c:	1f 7e       	andi	r17, 0xEF	; 239
    a28e:	2a e0       	ldi	r18, 0x0A	; 10
    a290:	30 e0       	ldi	r19, 0x00	; 0
    a292:	1d c0       	rjmp	.+58     	; 0xa2ce <vfprintf+0x29c>
    a294:	1f 2d       	mov	r17, r15
    a296:	19 7f       	andi	r17, 0xF9	; 249
    a298:	9f 36       	cpi	r25, 0x6F	; 111
    a29a:	61 f0       	breq	.+24     	; 0xa2b4 <vfprintf+0x282>
    a29c:	90 37       	cpi	r25, 0x70	; 112
    a29e:	20 f4       	brcc	.+8      	; 0xa2a8 <vfprintf+0x276>
    a2a0:	98 35       	cpi	r25, 0x58	; 88
    a2a2:	09 f0       	breq	.+2      	; 0xa2a6 <vfprintf+0x274>
    a2a4:	ac c0       	rjmp	.+344    	; 0xa3fe <vfprintf+0x3cc>
    a2a6:	0f c0       	rjmp	.+30     	; 0xa2c6 <vfprintf+0x294>
    a2a8:	90 37       	cpi	r25, 0x70	; 112
    a2aa:	39 f0       	breq	.+14     	; 0xa2ba <vfprintf+0x288>
    a2ac:	98 37       	cpi	r25, 0x78	; 120
    a2ae:	09 f0       	breq	.+2      	; 0xa2b2 <vfprintf+0x280>
    a2b0:	a6 c0       	rjmp	.+332    	; 0xa3fe <vfprintf+0x3cc>
    a2b2:	04 c0       	rjmp	.+8      	; 0xa2bc <vfprintf+0x28a>
    a2b4:	28 e0       	ldi	r18, 0x08	; 8
    a2b6:	30 e0       	ldi	r19, 0x00	; 0
    a2b8:	0a c0       	rjmp	.+20     	; 0xa2ce <vfprintf+0x29c>
    a2ba:	10 61       	ori	r17, 0x10	; 16
    a2bc:	14 fd       	sbrc	r17, 4
    a2be:	14 60       	ori	r17, 0x04	; 4
    a2c0:	20 e1       	ldi	r18, 0x10	; 16
    a2c2:	30 e0       	ldi	r19, 0x00	; 0
    a2c4:	04 c0       	rjmp	.+8      	; 0xa2ce <vfprintf+0x29c>
    a2c6:	14 fd       	sbrc	r17, 4
    a2c8:	16 60       	ori	r17, 0x06	; 6
    a2ca:	20 e1       	ldi	r18, 0x10	; 16
    a2cc:	32 e0       	ldi	r19, 0x02	; 2
    a2ce:	17 ff       	sbrs	r17, 7
    a2d0:	08 c0       	rjmp	.+16     	; 0xa2e2 <vfprintf+0x2b0>
    a2d2:	f5 01       	movw	r30, r10
    a2d4:	60 81       	ld	r22, Z
    a2d6:	71 81       	ldd	r23, Z+1	; 0x01
    a2d8:	82 81       	ldd	r24, Z+2	; 0x02
    a2da:	93 81       	ldd	r25, Z+3	; 0x03
    a2dc:	44 e0       	ldi	r20, 0x04	; 4
    a2de:	50 e0       	ldi	r21, 0x00	; 0
    a2e0:	08 c0       	rjmp	.+16     	; 0xa2f2 <vfprintf+0x2c0>
    a2e2:	f5 01       	movw	r30, r10
    a2e4:	80 81       	ld	r24, Z
    a2e6:	91 81       	ldd	r25, Z+1	; 0x01
    a2e8:	bc 01       	movw	r22, r24
    a2ea:	80 e0       	ldi	r24, 0x00	; 0
    a2ec:	90 e0       	ldi	r25, 0x00	; 0
    a2ee:	42 e0       	ldi	r20, 0x02	; 2
    a2f0:	50 e0       	ldi	r21, 0x00	; 0
    a2f2:	a4 0e       	add	r10, r20
    a2f4:	b5 1e       	adc	r11, r21
    a2f6:	a1 01       	movw	r20, r2
    a2f8:	0e 94 91 52 	call	0xa522	; 0xa522 <__ultoa_invert>
    a2fc:	d8 2e       	mov	r13, r24
    a2fe:	d2 18       	sub	r13, r2
    a300:	8f e7       	ldi	r24, 0x7F	; 127
    a302:	f8 2e       	mov	r15, r24
    a304:	f1 22       	and	r15, r17
    a306:	f6 fe       	sbrs	r15, 6
    a308:	0b c0       	rjmp	.+22     	; 0xa320 <vfprintf+0x2ee>
    a30a:	5e ef       	ldi	r21, 0xFE	; 254
    a30c:	f5 22       	and	r15, r21
    a30e:	d9 14       	cp	r13, r9
    a310:	38 f4       	brcc	.+14     	; 0xa320 <vfprintf+0x2ee>
    a312:	f4 fe       	sbrs	r15, 4
    a314:	07 c0       	rjmp	.+14     	; 0xa324 <vfprintf+0x2f2>
    a316:	f2 fc       	sbrc	r15, 2
    a318:	05 c0       	rjmp	.+10     	; 0xa324 <vfprintf+0x2f2>
    a31a:	8f ee       	ldi	r24, 0xEF	; 239
    a31c:	f8 22       	and	r15, r24
    a31e:	02 c0       	rjmp	.+4      	; 0xa324 <vfprintf+0x2f2>
    a320:	1d 2d       	mov	r17, r13
    a322:	01 c0       	rjmp	.+2      	; 0xa326 <vfprintf+0x2f4>
    a324:	19 2d       	mov	r17, r9
    a326:	f4 fe       	sbrs	r15, 4
    a328:	0d c0       	rjmp	.+26     	; 0xa344 <vfprintf+0x312>
    a32a:	fe 01       	movw	r30, r28
    a32c:	ed 0d       	add	r30, r13
    a32e:	f1 1d       	adc	r31, r1
    a330:	80 81       	ld	r24, Z
    a332:	80 33       	cpi	r24, 0x30	; 48
    a334:	19 f4       	brne	.+6      	; 0xa33c <vfprintf+0x30a>
    a336:	99 ee       	ldi	r25, 0xE9	; 233
    a338:	f9 22       	and	r15, r25
    a33a:	08 c0       	rjmp	.+16     	; 0xa34c <vfprintf+0x31a>
    a33c:	1f 5f       	subi	r17, 0xFF	; 255
    a33e:	f2 fe       	sbrs	r15, 2
    a340:	05 c0       	rjmp	.+10     	; 0xa34c <vfprintf+0x31a>
    a342:	03 c0       	rjmp	.+6      	; 0xa34a <vfprintf+0x318>
    a344:	8f 2d       	mov	r24, r15
    a346:	86 78       	andi	r24, 0x86	; 134
    a348:	09 f0       	breq	.+2      	; 0xa34c <vfprintf+0x31a>
    a34a:	1f 5f       	subi	r17, 0xFF	; 255
    a34c:	0f 2d       	mov	r16, r15
    a34e:	f3 fc       	sbrc	r15, 3
    a350:	14 c0       	rjmp	.+40     	; 0xa37a <vfprintf+0x348>
    a352:	f0 fe       	sbrs	r15, 0
    a354:	0f c0       	rjmp	.+30     	; 0xa374 <vfprintf+0x342>
    a356:	1e 15       	cp	r17, r14
    a358:	10 f0       	brcs	.+4      	; 0xa35e <vfprintf+0x32c>
    a35a:	9d 2c       	mov	r9, r13
    a35c:	0b c0       	rjmp	.+22     	; 0xa374 <vfprintf+0x342>
    a35e:	9d 2c       	mov	r9, r13
    a360:	9e 0c       	add	r9, r14
    a362:	91 1a       	sub	r9, r17
    a364:	1e 2d       	mov	r17, r14
    a366:	06 c0       	rjmp	.+12     	; 0xa374 <vfprintf+0x342>
    a368:	80 e2       	ldi	r24, 0x20	; 32
    a36a:	90 e0       	ldi	r25, 0x00	; 0
    a36c:	b3 01       	movw	r22, r6
    a36e:	0e 94 65 52 	call	0xa4ca	; 0xa4ca <fputc>
    a372:	1f 5f       	subi	r17, 0xFF	; 255
    a374:	1e 15       	cp	r17, r14
    a376:	c0 f3       	brcs	.-16     	; 0xa368 <vfprintf+0x336>
    a378:	04 c0       	rjmp	.+8      	; 0xa382 <vfprintf+0x350>
    a37a:	1e 15       	cp	r17, r14
    a37c:	10 f4       	brcc	.+4      	; 0xa382 <vfprintf+0x350>
    a37e:	e1 1a       	sub	r14, r17
    a380:	01 c0       	rjmp	.+2      	; 0xa384 <vfprintf+0x352>
    a382:	ee 24       	eor	r14, r14
    a384:	04 ff       	sbrs	r16, 4
    a386:	0f c0       	rjmp	.+30     	; 0xa3a6 <vfprintf+0x374>
    a388:	80 e3       	ldi	r24, 0x30	; 48
    a38a:	90 e0       	ldi	r25, 0x00	; 0
    a38c:	b3 01       	movw	r22, r6
    a38e:	0e 94 65 52 	call	0xa4ca	; 0xa4ca <fputc>
    a392:	02 ff       	sbrs	r16, 2
    a394:	1d c0       	rjmp	.+58     	; 0xa3d0 <vfprintf+0x39e>
    a396:	01 fd       	sbrc	r16, 1
    a398:	03 c0       	rjmp	.+6      	; 0xa3a0 <vfprintf+0x36e>
    a39a:	88 e7       	ldi	r24, 0x78	; 120
    a39c:	90 e0       	ldi	r25, 0x00	; 0
    a39e:	0e c0       	rjmp	.+28     	; 0xa3bc <vfprintf+0x38a>
    a3a0:	88 e5       	ldi	r24, 0x58	; 88
    a3a2:	90 e0       	ldi	r25, 0x00	; 0
    a3a4:	0b c0       	rjmp	.+22     	; 0xa3bc <vfprintf+0x38a>
    a3a6:	80 2f       	mov	r24, r16
    a3a8:	86 78       	andi	r24, 0x86	; 134
    a3aa:	91 f0       	breq	.+36     	; 0xa3d0 <vfprintf+0x39e>
    a3ac:	01 ff       	sbrs	r16, 1
    a3ae:	02 c0       	rjmp	.+4      	; 0xa3b4 <vfprintf+0x382>
    a3b0:	8b e2       	ldi	r24, 0x2B	; 43
    a3b2:	01 c0       	rjmp	.+2      	; 0xa3b6 <vfprintf+0x384>
    a3b4:	80 e2       	ldi	r24, 0x20	; 32
    a3b6:	f7 fc       	sbrc	r15, 7
    a3b8:	8d e2       	ldi	r24, 0x2D	; 45
    a3ba:	90 e0       	ldi	r25, 0x00	; 0
    a3bc:	b3 01       	movw	r22, r6
    a3be:	0e 94 65 52 	call	0xa4ca	; 0xa4ca <fputc>
    a3c2:	06 c0       	rjmp	.+12     	; 0xa3d0 <vfprintf+0x39e>
    a3c4:	80 e3       	ldi	r24, 0x30	; 48
    a3c6:	90 e0       	ldi	r25, 0x00	; 0
    a3c8:	b3 01       	movw	r22, r6
    a3ca:	0e 94 65 52 	call	0xa4ca	; 0xa4ca <fputc>
    a3ce:	9a 94       	dec	r9
    a3d0:	d9 14       	cp	r13, r9
    a3d2:	c0 f3       	brcs	.-16     	; 0xa3c4 <vfprintf+0x392>
    a3d4:	da 94       	dec	r13
    a3d6:	f1 01       	movw	r30, r2
    a3d8:	ed 0d       	add	r30, r13
    a3da:	f1 1d       	adc	r31, r1
    a3dc:	80 81       	ld	r24, Z
    a3de:	90 e0       	ldi	r25, 0x00	; 0
    a3e0:	b3 01       	movw	r22, r6
    a3e2:	0e 94 65 52 	call	0xa4ca	; 0xa4ca <fputc>
    a3e6:	dd 20       	and	r13, r13
    a3e8:	a9 f7       	brne	.-22     	; 0xa3d4 <vfprintf+0x3a2>
    a3ea:	06 c0       	rjmp	.+12     	; 0xa3f8 <vfprintf+0x3c6>
    a3ec:	80 e2       	ldi	r24, 0x20	; 32
    a3ee:	90 e0       	ldi	r25, 0x00	; 0
    a3f0:	b3 01       	movw	r22, r6
    a3f2:	0e 94 65 52 	call	0xa4ca	; 0xa4ca <fputc>
    a3f6:	ea 94       	dec	r14
    a3f8:	ee 20       	and	r14, r14
    a3fa:	c1 f7       	brne	.-16     	; 0xa3ec <vfprintf+0x3ba>
    a3fc:	43 ce       	rjmp	.-890    	; 0xa084 <vfprintf+0x52>
    a3fe:	f3 01       	movw	r30, r6
    a400:	66 81       	ldd	r22, Z+6	; 0x06
    a402:	77 81       	ldd	r23, Z+7	; 0x07
    a404:	cb 01       	movw	r24, r22
    a406:	2b 96       	adiw	r28, 0x0b	; 11
    a408:	cd bf       	out	0x3d, r28	; 61
    a40a:	de bf       	out	0x3e, r29	; 62
    a40c:	cf 91       	pop	r28
    a40e:	df 91       	pop	r29
    a410:	1f 91       	pop	r17
    a412:	0f 91       	pop	r16
    a414:	ff 90       	pop	r15
    a416:	ef 90       	pop	r14
    a418:	df 90       	pop	r13
    a41a:	cf 90       	pop	r12
    a41c:	bf 90       	pop	r11
    a41e:	af 90       	pop	r10
    a420:	9f 90       	pop	r9
    a422:	8f 90       	pop	r8
    a424:	7f 90       	pop	r7
    a426:	6f 90       	pop	r6
    a428:	5f 90       	pop	r5
    a42a:	4f 90       	pop	r4
    a42c:	3f 90       	pop	r3
    a42e:	2f 90       	pop	r2
    a430:	08 95       	ret

0000a432 <__eerd_byte_x128a1>:
    a432:	03 d0       	rcall	.+6      	; 0xa43a <eeprom_mapen>
    a434:	80 81       	ld	r24, Z
    a436:	99 27       	eor	r25, r25
    a438:	08 95       	ret

0000a43a <eeprom_mapen>:
    a43a:	e0 ec       	ldi	r30, 0xC0	; 192
    a43c:	f1 e0       	ldi	r31, 0x01	; 1
    a43e:	37 85       	ldd	r19, Z+15	; 0x0f
    a440:	37 fd       	sbrc	r19, 7
    a442:	fd cf       	rjmp	.-6      	; 0xa43e <eeprom_mapen+0x4>
    a444:	34 85       	ldd	r19, Z+12	; 0x0c
    a446:	38 60       	ori	r19, 0x08	; 8
    a448:	34 87       	std	Z+12, r19	; 0x0c
    a44a:	fc 01       	movw	r30, r24
    a44c:	e0 50       	subi	r30, 0x00	; 0
    a44e:	f0 4f       	sbci	r31, 0xF0	; 240
    a450:	08 95       	ret

0000a452 <__eewr_byte_x128a1>:
    a452:	26 2f       	mov	r18, r22

0000a454 <__eewr_r18_x128a1>:
    a454:	e0 ec       	ldi	r30, 0xC0	; 192
    a456:	f1 e0       	ldi	r31, 0x01	; 1
    a458:	37 85       	ldd	r19, Z+15	; 0x0f
    a45a:	37 fd       	sbrc	r19, 7
    a45c:	fd cf       	rjmp	.-6      	; 0xa458 <__eewr_r18_x128a1+0x4>
    a45e:	34 85       	ldd	r19, Z+12	; 0x0c
    a460:	37 7f       	andi	r19, 0xF7	; 247
    a462:	34 87       	std	Z+12, r19	; 0x0c
    a464:	37 85       	ldd	r19, Z+15	; 0x0f
    a466:	31 ff       	sbrs	r19, 1
    a468:	09 c0       	rjmp	.+18     	; 0xa47c <__eewr_r18_x128a1+0x28>
    a46a:	36 e3       	ldi	r19, 0x36	; 54
    a46c:	32 87       	std	Z+10, r19	; 0x0a
    a46e:	38 ed       	ldi	r19, 0xD8	; 216
    a470:	34 bf       	out	0x34, r19	; 52
    a472:	31 e0       	ldi	r19, 0x01	; 1
    a474:	33 87       	std	Z+11, r19	; 0x0b
    a476:	37 85       	ldd	r19, Z+15	; 0x0f
    a478:	37 fd       	sbrc	r19, 7
    a47a:	fd cf       	rjmp	.-6      	; 0xa476 <__eewr_r18_x128a1+0x22>
    a47c:	33 e3       	ldi	r19, 0x33	; 51
    a47e:	32 87       	std	Z+10, r19	; 0x0a
    a480:	80 83       	st	Z, r24
    a482:	91 83       	std	Z+1, r25	; 0x01
    a484:	12 82       	std	Z+2, r1	; 0x02
    a486:	24 83       	std	Z+4, r18	; 0x04
    a488:	25 e3       	ldi	r18, 0x35	; 53
    a48a:	22 87       	std	Z+10, r18	; 0x0a
    a48c:	28 ed       	ldi	r18, 0xD8	; 216
    a48e:	31 e0       	ldi	r19, 0x01	; 1
    a490:	24 bf       	out	0x34, r18	; 52
    a492:	33 87       	std	Z+11, r19	; 0x0b
    a494:	01 96       	adiw	r24, 0x01	; 1
    a496:	08 95       	ret

0000a498 <__ctype_isfalse>:
    a498:	99 27       	eor	r25, r25
    a49a:	88 27       	eor	r24, r24

0000a49c <__ctype_istrue>:
    a49c:	08 95       	ret

0000a49e <strnlen_P>:
    a49e:	fc 01       	movw	r30, r24
    a4a0:	05 90       	lpm	r0, Z+
    a4a2:	61 50       	subi	r22, 0x01	; 1
    a4a4:	70 40       	sbci	r23, 0x00	; 0
    a4a6:	01 10       	cpse	r0, r1
    a4a8:	d8 f7       	brcc	.-10     	; 0xa4a0 <strnlen_P+0x2>
    a4aa:	80 95       	com	r24
    a4ac:	90 95       	com	r25
    a4ae:	8e 0f       	add	r24, r30
    a4b0:	9f 1f       	adc	r25, r31
    a4b2:	08 95       	ret

0000a4b4 <strnlen>:
    a4b4:	fc 01       	movw	r30, r24
    a4b6:	61 50       	subi	r22, 0x01	; 1
    a4b8:	70 40       	sbci	r23, 0x00	; 0
    a4ba:	01 90       	ld	r0, Z+
    a4bc:	01 10       	cpse	r0, r1
    a4be:	d8 f7       	brcc	.-10     	; 0xa4b6 <strnlen+0x2>
    a4c0:	80 95       	com	r24
    a4c2:	90 95       	com	r25
    a4c4:	8e 0f       	add	r24, r30
    a4c6:	9f 1f       	adc	r25, r31
    a4c8:	08 95       	ret

0000a4ca <fputc>:
    a4ca:	0f 93       	push	r16
    a4cc:	1f 93       	push	r17
    a4ce:	cf 93       	push	r28
    a4d0:	df 93       	push	r29
    a4d2:	8c 01       	movw	r16, r24
    a4d4:	eb 01       	movw	r28, r22
    a4d6:	8b 81       	ldd	r24, Y+3	; 0x03
    a4d8:	81 ff       	sbrs	r24, 1
    a4da:	1b c0       	rjmp	.+54     	; 0xa512 <fputc+0x48>
    a4dc:	82 ff       	sbrs	r24, 2
    a4de:	0d c0       	rjmp	.+26     	; 0xa4fa <fputc+0x30>
    a4e0:	2e 81       	ldd	r18, Y+6	; 0x06
    a4e2:	3f 81       	ldd	r19, Y+7	; 0x07
    a4e4:	8c 81       	ldd	r24, Y+4	; 0x04
    a4e6:	9d 81       	ldd	r25, Y+5	; 0x05
    a4e8:	28 17       	cp	r18, r24
    a4ea:	39 07       	cpc	r19, r25
    a4ec:	64 f4       	brge	.+24     	; 0xa506 <fputc+0x3c>
    a4ee:	e8 81       	ld	r30, Y
    a4f0:	f9 81       	ldd	r31, Y+1	; 0x01
    a4f2:	01 93       	st	Z+, r16
    a4f4:	e8 83       	st	Y, r30
    a4f6:	f9 83       	std	Y+1, r31	; 0x01
    a4f8:	06 c0       	rjmp	.+12     	; 0xa506 <fputc+0x3c>
    a4fa:	e8 85       	ldd	r30, Y+8	; 0x08
    a4fc:	f9 85       	ldd	r31, Y+9	; 0x09
    a4fe:	80 2f       	mov	r24, r16
    a500:	19 95       	eicall
    a502:	89 2b       	or	r24, r25
    a504:	31 f4       	brne	.+12     	; 0xa512 <fputc+0x48>
    a506:	8e 81       	ldd	r24, Y+6	; 0x06
    a508:	9f 81       	ldd	r25, Y+7	; 0x07
    a50a:	01 96       	adiw	r24, 0x01	; 1
    a50c:	8e 83       	std	Y+6, r24	; 0x06
    a50e:	9f 83       	std	Y+7, r25	; 0x07
    a510:	02 c0       	rjmp	.+4      	; 0xa516 <fputc+0x4c>
    a512:	0f ef       	ldi	r16, 0xFF	; 255
    a514:	1f ef       	ldi	r17, 0xFF	; 255
    a516:	c8 01       	movw	r24, r16
    a518:	df 91       	pop	r29
    a51a:	cf 91       	pop	r28
    a51c:	1f 91       	pop	r17
    a51e:	0f 91       	pop	r16
    a520:	08 95       	ret

0000a522 <__ultoa_invert>:
    a522:	fa 01       	movw	r30, r20
    a524:	aa 27       	eor	r26, r26
    a526:	28 30       	cpi	r18, 0x08	; 8
    a528:	51 f1       	breq	.+84     	; 0xa57e <__ultoa_invert+0x5c>
    a52a:	20 31       	cpi	r18, 0x10	; 16
    a52c:	81 f1       	breq	.+96     	; 0xa58e <__ultoa_invert+0x6c>
    a52e:	e8 94       	clt
    a530:	6f 93       	push	r22
    a532:	6e 7f       	andi	r22, 0xFE	; 254
    a534:	6e 5f       	subi	r22, 0xFE	; 254
    a536:	7f 4f       	sbci	r23, 0xFF	; 255
    a538:	8f 4f       	sbci	r24, 0xFF	; 255
    a53a:	9f 4f       	sbci	r25, 0xFF	; 255
    a53c:	af 4f       	sbci	r26, 0xFF	; 255
    a53e:	b1 e0       	ldi	r27, 0x01	; 1
    a540:	3e d0       	rcall	.+124    	; 0xa5be <__ultoa_invert+0x9c>
    a542:	b4 e0       	ldi	r27, 0x04	; 4
    a544:	3c d0       	rcall	.+120    	; 0xa5be <__ultoa_invert+0x9c>
    a546:	67 0f       	add	r22, r23
    a548:	78 1f       	adc	r23, r24
    a54a:	89 1f       	adc	r24, r25
    a54c:	9a 1f       	adc	r25, r26
    a54e:	a1 1d       	adc	r26, r1
    a550:	68 0f       	add	r22, r24
    a552:	79 1f       	adc	r23, r25
    a554:	8a 1f       	adc	r24, r26
    a556:	91 1d       	adc	r25, r1
    a558:	a1 1d       	adc	r26, r1
    a55a:	6a 0f       	add	r22, r26
    a55c:	71 1d       	adc	r23, r1
    a55e:	81 1d       	adc	r24, r1
    a560:	91 1d       	adc	r25, r1
    a562:	a1 1d       	adc	r26, r1
    a564:	20 d0       	rcall	.+64     	; 0xa5a6 <__ultoa_invert+0x84>
    a566:	09 f4       	brne	.+2      	; 0xa56a <__ultoa_invert+0x48>
    a568:	68 94       	set
    a56a:	3f 91       	pop	r19
    a56c:	2a e0       	ldi	r18, 0x0A	; 10
    a56e:	26 9f       	mul	r18, r22
    a570:	11 24       	eor	r1, r1
    a572:	30 19       	sub	r19, r0
    a574:	30 5d       	subi	r19, 0xD0	; 208
    a576:	31 93       	st	Z+, r19
    a578:	de f6       	brtc	.-74     	; 0xa530 <__ultoa_invert+0xe>
    a57a:	cf 01       	movw	r24, r30
    a57c:	08 95       	ret
    a57e:	46 2f       	mov	r20, r22
    a580:	47 70       	andi	r20, 0x07	; 7
    a582:	40 5d       	subi	r20, 0xD0	; 208
    a584:	41 93       	st	Z+, r20
    a586:	b3 e0       	ldi	r27, 0x03	; 3
    a588:	0f d0       	rcall	.+30     	; 0xa5a8 <__ultoa_invert+0x86>
    a58a:	c9 f7       	brne	.-14     	; 0xa57e <__ultoa_invert+0x5c>
    a58c:	f6 cf       	rjmp	.-20     	; 0xa57a <__ultoa_invert+0x58>
    a58e:	46 2f       	mov	r20, r22
    a590:	4f 70       	andi	r20, 0x0F	; 15
    a592:	40 5d       	subi	r20, 0xD0	; 208
    a594:	4a 33       	cpi	r20, 0x3A	; 58
    a596:	18 f0       	brcs	.+6      	; 0xa59e <__ultoa_invert+0x7c>
    a598:	49 5d       	subi	r20, 0xD9	; 217
    a59a:	31 fd       	sbrc	r19, 1
    a59c:	40 52       	subi	r20, 0x20	; 32
    a59e:	41 93       	st	Z+, r20
    a5a0:	02 d0       	rcall	.+4      	; 0xa5a6 <__ultoa_invert+0x84>
    a5a2:	a9 f7       	brne	.-22     	; 0xa58e <__ultoa_invert+0x6c>
    a5a4:	ea cf       	rjmp	.-44     	; 0xa57a <__ultoa_invert+0x58>
    a5a6:	b4 e0       	ldi	r27, 0x04	; 4
    a5a8:	a6 95       	lsr	r26
    a5aa:	97 95       	ror	r25
    a5ac:	87 95       	ror	r24
    a5ae:	77 95       	ror	r23
    a5b0:	67 95       	ror	r22
    a5b2:	ba 95       	dec	r27
    a5b4:	c9 f7       	brne	.-14     	; 0xa5a8 <__ultoa_invert+0x86>
    a5b6:	00 97       	sbiw	r24, 0x00	; 0
    a5b8:	61 05       	cpc	r22, r1
    a5ba:	71 05       	cpc	r23, r1
    a5bc:	08 95       	ret
    a5be:	9b 01       	movw	r18, r22
    a5c0:	ac 01       	movw	r20, r24
    a5c2:	0a 2e       	mov	r0, r26
    a5c4:	06 94       	lsr	r0
    a5c6:	57 95       	ror	r21
    a5c8:	47 95       	ror	r20
    a5ca:	37 95       	ror	r19
    a5cc:	27 95       	ror	r18
    a5ce:	ba 95       	dec	r27
    a5d0:	c9 f7       	brne	.-14     	; 0xa5c4 <__ultoa_invert+0xa2>
    a5d2:	62 0f       	add	r22, r18
    a5d4:	73 1f       	adc	r23, r19
    a5d6:	84 1f       	adc	r24, r20
    a5d8:	95 1f       	adc	r25, r21
    a5da:	a0 1d       	adc	r26, r0
    a5dc:	08 95       	ret

0000a5de <_exit>:
    a5de:	f8 94       	cli

0000a5e0 <__stop_program>:
    a5e0:	ff cf       	rjmp	.-2      	; 0xa5e0 <__stop_program>
