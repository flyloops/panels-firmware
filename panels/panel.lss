
panel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00001a0e  00001ac2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a0e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a4  00800112  00800112  00001ad4  2**0
                  ALLOC
  3 .eeprom       000000d1  00810000  00810000  00001ad4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000060  00000000  00000000  00001ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000047c  00000000  00000000  00001c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fff  00000000  00000000  00002081  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000554  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001532  00000000  00000000  000035d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  00004b08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000611  00000000  00000000  00004e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f4  00000000  00000000  00005429  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00005d1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__vector_24>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e0       	ldi	r30, 0x0E	; 14
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a2 31       	cpi	r26, 0x12	; 18
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	14 e0       	ldi	r17, 0x04	; 4
      8c:	a2 e1       	ldi	r26, 0x12	; 18
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3b       	cpi	r26, 0xB6	; 182
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 05 09 	call	0x120a	; 0x120a <main>
      9e:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UpdateDisplay>:
}



void UpdateDisplay(void)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	0f 92       	push	r0
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
	const unsigned char addrval[] = 
			{0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
		

	// clear the data ports
	LED_DATA_PORT_05 = 0x00;
      b0:	15 b8       	out	0x05, r1	; 5
	LED_DATA_PORT_67 = 0x08;
      b2:	88 e0       	ldi	r24, 0x08	; 8
      b4:	88 b9       	out	0x08, r24	; 8
	//delay(10);
	LED_ADDRESS_PORT = addrval[CurrentCol];
      b6:	e0 91 a6 04 	lds	r30, 0x04A6
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	ee 5f       	subi	r30, 0xFE	; 254
      be:	fe 4f       	sbci	r31, 0xFE	; 254
      c0:	80 81       	ld	r24, Z
      c2:	8b b9       	out	0x0b, r24	; 11

	if (Gray_Scale == 1) {
      c4:	80 91 00 01 	lds	r24, 0x0100
      c8:	81 30       	cpi	r24, 0x01	; 1
      ca:	b1 f4       	brne	.+44     	; 0xf8 <UpdateDisplay+0x52>
		LED_DATA_PORT_05 = MASK_05 & DisplayBuffer[CurrentCol];
      cc:	e0 91 a6 04 	lds	r30, 0x04A6
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	e2 58       	subi	r30, 0x82	; 130
      d4:	fe 4f       	sbci	r31, 0xFE	; 254
      d6:	80 81       	ld	r24, Z
      d8:	8f 73       	andi	r24, 0x3F	; 63
      da:	85 b9       	out	0x05, r24	; 5
		LED_DATA_PORT_67 |= (MASK_67 & DisplayBuffer[CurrentCol]) >> 6;
      dc:	98 b1       	in	r25, 0x08	; 8
      de:	e0 91 a6 04 	lds	r30, 0x04A6
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	e2 58       	subi	r30, 0x82	; 130
      e6:	fe 4f       	sbci	r31, 0xFE	; 254
      e8:	80 81       	ld	r24, Z
      ea:	82 95       	swap	r24
      ec:	86 95       	lsr	r24
      ee:	86 95       	lsr	r24
      f0:	83 70       	andi	r24, 0x03	; 3
      f2:	89 2b       	or	r24, r25
      f4:	88 b9       	out	0x08, r24	; 8
      f6:	af c0       	rjmp	.+350    	; 0x256 <UpdateDisplay+0x1b0>
		
	} else if (Gray_Scale == 2) {
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	79 f5       	brne	.+94     	; 0x15a <UpdateDisplay+0xb4>
	
		switch(CurrentFrame) {
      fc:	20 91 a7 04 	lds	r18, 0x04A7
     100:	21 30       	cpi	r18, 0x01	; 1
     102:	29 f0       	breq	.+10     	; 0x10e <UpdateDisplay+0x68>
     104:	21 30       	cpi	r18, 0x01	; 1
     106:	18 f0       	brcs	.+6      	; 0x10e <UpdateDisplay+0x68>
     108:	22 30       	cpi	r18, 0x02	; 2
     10a:	79 f4       	brne	.+30     	; 0x12a <UpdateDisplay+0x84>
     10c:	07 c0       	rjmp	.+14     	; 0x11c <UpdateDisplay+0x76>
			case 0:
				temp_frame = GS_Buffer[0][CurrentCol];
				break;
			
			case 1:
				temp_frame = GS_Buffer[0][CurrentCol];
     10e:	e0 91 a6 04 	lds	r30, 0x04A6
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	e2 5a       	subi	r30, 0xA2	; 162
     116:	fe 4f       	sbci	r31, 0xFE	; 254
     118:	80 81       	ld	r24, Z
     11a:	06 c0       	rjmp	.+12     	; 0x128 <UpdateDisplay+0x82>
				break;
				
			case 2:
				temp_frame = GS_Buffer[1][CurrentCol];
     11c:	e0 91 a6 04 	lds	r30, 0x04A6
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	e2 5a       	subi	r30, 0xA2	; 162
     124:	fe 4f       	sbci	r31, 0xFE	; 254
     126:	80 85       	ldd	r24, Z+8	; 0x08
     128:	89 83       	std	Y+1, r24	; 0x01
				break;
			default:
				break;
		}
				
		LED_DATA_PORT_05 = MASK_05 & temp_frame;
     12a:	89 81       	ldd	r24, Y+1	; 0x01
     12c:	8f 73       	andi	r24, 0x3F	; 63
     12e:	85 b9       	out	0x05, r24	; 5
		LED_DATA_PORT_67 |= (MASK_67 & temp_frame) >> 6;
     130:	98 b1       	in	r25, 0x08	; 8
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	82 95       	swap	r24
     136:	86 95       	lsr	r24
     138:	86 95       	lsr	r24
     13a:	83 70       	andi	r24, 0x03	; 3
     13c:	89 2b       	or	r24, r25
     13e:	88 b9       	out	0x08, r24	; 8
		if (CurrentCol == 0) {
     140:	80 91 a6 04 	lds	r24, 0x04A6
     144:	88 23       	and	r24, r24
     146:	09 f0       	breq	.+2      	; 0x14a <UpdateDisplay+0xa4>
     148:	86 c0       	rjmp	.+268    	; 0x256 <UpdateDisplay+0x1b0>
			if(!(++CurrentFrame < 3)) 
     14a:	82 2f       	mov	r24, r18
     14c:	8f 5f       	subi	r24, 0xFF	; 255
     14e:	80 93 a7 04 	sts	0x04A7, r24
     152:	83 30       	cpi	r24, 0x03	; 3
     154:	08 f4       	brcc	.+2      	; 0x158 <UpdateDisplay+0xb2>
     156:	7f c0       	rjmp	.+254    	; 0x256 <UpdateDisplay+0x1b0>
     158:	7c c0       	rjmp	.+248    	; 0x252 <UpdateDisplay+0x1ac>
     15a:	20 91 a7 04 	lds	r18, 0x04A7
				CurrentFrame = 0;
		}	

	} else if (Gray_Scale == 3) {
     15e:	83 30       	cpi	r24, 0x03	; 3
     160:	c1 f5       	brne	.+112    	; 0x1d2 <UpdateDisplay+0x12c>

		switch(CurrentFrame) {
     162:	23 30       	cpi	r18, 0x03	; 3
     164:	49 f0       	breq	.+18     	; 0x178 <UpdateDisplay+0xd2>
     166:	24 30       	cpi	r18, 0x04	; 4
     168:	38 f0       	brcs	.+14     	; 0x178 <UpdateDisplay+0xd2>
     16a:	25 30       	cpi	r18, 0x05	; 5
     16c:	61 f0       	breq	.+24     	; 0x186 <UpdateDisplay+0xe0>
     16e:	25 30       	cpi	r18, 0x05	; 5
     170:	50 f0       	brcs	.+20     	; 0x186 <UpdateDisplay+0xe0>
     172:	26 30       	cpi	r18, 0x06	; 6
     174:	b1 f4       	brne	.+44     	; 0x1a2 <UpdateDisplay+0xfc>
     176:	0e c0       	rjmp	.+28     	; 0x194 <UpdateDisplay+0xee>
				break;
			case 2:
				temp_frame = GS_Buffer[0][CurrentCol];	
				break;
			case 3:
				temp_frame = (GS_Buffer[0][CurrentCol]);	
     178:	e0 91 a6 04 	lds	r30, 0x04A6
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	e2 5a       	subi	r30, 0xA2	; 162
     180:	fe 4f       	sbci	r31, 0xFE	; 254
     182:	80 81       	ld	r24, Z
     184:	0d c0       	rjmp	.+26     	; 0x1a0 <UpdateDisplay+0xfa>
				break;
			case 4:
				temp_frame = GS_Buffer[1][CurrentCol];	
				break;	
			case 5:
				temp_frame = GS_Buffer[1][CurrentCol];
     186:	e0 91 a6 04 	lds	r30, 0x04A6
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	e2 5a       	subi	r30, 0xA2	; 162
     18e:	fe 4f       	sbci	r31, 0xFE	; 254
     190:	80 85       	ldd	r24, Z+8	; 0x08
     192:	06 c0       	rjmp	.+12     	; 0x1a0 <UpdateDisplay+0xfa>
				break;
			case 6:
				temp_frame = GS_Buffer[2][CurrentCol];
     194:	e0 91 a6 04 	lds	r30, 0x04A6
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	e2 5a       	subi	r30, 0xA2	; 162
     19c:	fe 4f       	sbci	r31, 0xFE	; 254
     19e:	80 89       	ldd	r24, Z+16	; 0x10
     1a0:	89 83       	std	Y+1, r24	; 0x01
				break;				
			default:
				break;
		}

		LED_DATA_PORT_05 = MASK_05 & temp_frame;
     1a2:	89 81       	ldd	r24, Y+1	; 0x01
     1a4:	8f 73       	andi	r24, 0x3F	; 63
     1a6:	85 b9       	out	0x05, r24	; 5
		LED_DATA_PORT_67 |= (MASK_67 & temp_frame) >> 6;
     1a8:	98 b1       	in	r25, 0x08	; 8
     1aa:	89 81       	ldd	r24, Y+1	; 0x01
     1ac:	82 95       	swap	r24
     1ae:	86 95       	lsr	r24
     1b0:	86 95       	lsr	r24
     1b2:	83 70       	andi	r24, 0x03	; 3
     1b4:	89 2b       	or	r24, r25
     1b6:	88 b9       	out	0x08, r24	; 8
		if (CurrentCol == 0) {
     1b8:	80 91 a6 04 	lds	r24, 0x04A6
     1bc:	88 23       	and	r24, r24
     1be:	09 f0       	breq	.+2      	; 0x1c2 <UpdateDisplay+0x11c>
     1c0:	4a c0       	rjmp	.+148    	; 0x256 <UpdateDisplay+0x1b0>
			if(!(++CurrentFrame < 7)) 
     1c2:	82 2f       	mov	r24, r18
     1c4:	8f 5f       	subi	r24, 0xFF	; 255
     1c6:	80 93 a7 04 	sts	0x04A7, r24
     1ca:	87 30       	cpi	r24, 0x07	; 7
     1cc:	08 f4       	brcc	.+2      	; 0x1d0 <UpdateDisplay+0x12a>
     1ce:	43 c0       	rjmp	.+134    	; 0x256 <UpdateDisplay+0x1b0>
     1d0:	40 c0       	rjmp	.+128    	; 0x252 <UpdateDisplay+0x1ac>
				CurrentFrame = 0;
	}	
	} else {

		switch(CurrentFrame) {
     1d2:	27 30       	cpi	r18, 0x07	; 7
     1d4:	69 f0       	breq	.+26     	; 0x1f0 <UpdateDisplay+0x14a>
     1d6:	28 30       	cpi	r18, 0x08	; 8
     1d8:	58 f0       	brcs	.+22     	; 0x1f0 <UpdateDisplay+0x14a>
     1da:	2b 30       	cpi	r18, 0x0B	; 11
     1dc:	81 f0       	breq	.+32     	; 0x1fe <UpdateDisplay+0x158>
     1de:	2c 30       	cpi	r18, 0x0C	; 12
     1e0:	70 f0       	brcs	.+28     	; 0x1fe <UpdateDisplay+0x158>
     1e2:	2d 30       	cpi	r18, 0x0D	; 13
     1e4:	99 f0       	breq	.+38     	; 0x20c <UpdateDisplay+0x166>
     1e6:	2d 30       	cpi	r18, 0x0D	; 13
     1e8:	88 f0       	brcs	.+34     	; 0x20c <UpdateDisplay+0x166>
     1ea:	2e 30       	cpi	r18, 0x0E	; 14
     1ec:	e9 f4       	brne	.+58     	; 0x228 <UpdateDisplay+0x182>
     1ee:	15 c0       	rjmp	.+42     	; 0x21a <UpdateDisplay+0x174>
				break;
			case 6:
				temp_frame =  GS_Buffer[0][CurrentCol];;
				break;
 			case 7:
				temp_frame =  GS_Buffer[0][CurrentCol];
     1f0:	e0 91 a6 04 	lds	r30, 0x04A6
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	e2 5a       	subi	r30, 0xA2	; 162
     1f8:	fe 4f       	sbci	r31, 0xFE	; 254
     1fa:	80 81       	ld	r24, Z
     1fc:	14 c0       	rjmp	.+40     	; 0x226 <UpdateDisplay+0x180>
				break;
			case 10:
				temp_frame = GS_Buffer[1][CurrentCol];
				break;
			case 11:
				temp_frame = GS_Buffer[1][CurrentCol];
     1fe:	e0 91 a6 04 	lds	r30, 0x04A6
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	e2 5a       	subi	r30, 0xA2	; 162
     206:	fe 4f       	sbci	r31, 0xFE	; 254
     208:	80 85       	ldd	r24, Z+8	; 0x08
     20a:	0d c0       	rjmp	.+26     	; 0x226 <UpdateDisplay+0x180>
				break;	
			case 12:
				temp_frame = GS_Buffer[2][CurrentCol];
				break;
			case 13:
				temp_frame = GS_Buffer[2][CurrentCol];
     20c:	e0 91 a6 04 	lds	r30, 0x04A6
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	e2 5a       	subi	r30, 0xA2	; 162
     214:	fe 4f       	sbci	r31, 0xFE	; 254
     216:	80 89       	ldd	r24, Z+16	; 0x10
     218:	06 c0       	rjmp	.+12     	; 0x226 <UpdateDisplay+0x180>
				break;
 			case 14:
				temp_frame = GS_Buffer[3][CurrentCol];
     21a:	e0 91 a6 04 	lds	r30, 0x04A6
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	e2 5a       	subi	r30, 0xA2	; 162
     222:	fe 4f       	sbci	r31, 0xFE	; 254
     224:	80 8d       	ldd	r24, Z+24	; 0x18
     226:	89 83       	std	Y+1, r24	; 0x01
				break;
			default:
				break;
		}

		LED_DATA_PORT_05 = MASK_05 & temp_frame;
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	8f 73       	andi	r24, 0x3F	; 63
     22c:	85 b9       	out	0x05, r24	; 5
		LED_DATA_PORT_67 |= (MASK_67 & temp_frame) >> 6;
     22e:	98 b1       	in	r25, 0x08	; 8
     230:	89 81       	ldd	r24, Y+1	; 0x01
     232:	82 95       	swap	r24
     234:	86 95       	lsr	r24
     236:	86 95       	lsr	r24
     238:	83 70       	andi	r24, 0x03	; 3
     23a:	89 2b       	or	r24, r25
     23c:	88 b9       	out	0x08, r24	; 8
		if (CurrentCol == 0) {
     23e:	80 91 a6 04 	lds	r24, 0x04A6
     242:	88 23       	and	r24, r24
     244:	41 f4       	brne	.+16     	; 0x256 <UpdateDisplay+0x1b0>
			if(!(++CurrentFrame < 15)) 
     246:	82 2f       	mov	r24, r18
     248:	8f 5f       	subi	r24, 0xFF	; 255
     24a:	80 93 a7 04 	sts	0x04A7, r24
     24e:	8f 30       	cpi	r24, 0x0F	; 15
     250:	10 f0       	brcs	.+4      	; 0x256 <UpdateDisplay+0x1b0>
				CurrentFrame = 0;
     252:	10 92 a7 04 	sts	0x04A7, r1
	}	
	}


	CurrentCol = (CurrentCol + 1) & 0x7;
     256:	80 91 a6 04 	lds	r24, 0x04A6
     25a:	8f 5f       	subi	r24, 0xFF	; 255
     25c:	87 70       	andi	r24, 0x07	; 7
     25e:	80 93 a6 04 	sts	0x04A6, r24
} 
     262:	0f 90       	pop	r0
     264:	cf 91       	pop	r28
     266:	df 91       	pop	r29
     268:	08 95       	ret

0000026a <DisplayChar>:


void DisplayChar(unsigned char c,unsigned char col)
{
	DisplayBuffer[col]=c;
     26a:	ee e7       	ldi	r30, 0x7E	; 126
     26c:	f1 e0       	ldi	r31, 0x01	; 1
     26e:	e6 0f       	add	r30, r22
     270:	f1 1d       	adc	r31, r1
     272:	80 83       	st	Z, r24
}
     274:	08 95       	ret

00000276 <LoadPattern1>:


void LoadPattern1(unsigned char pattern_byte)
{
     276:	28 2f       	mov	r18, r24
	
	//should be done as above - but below is apparently 4 times faster!!!
	if (pattern_byte & (1<<0) ) DisplayBuffer[0] = 0xff; else DisplayBuffer[0] = 0x00;	
     278:	98 2f       	mov	r25, r24
     27a:	80 ff       	sbrs	r24, 0
     27c:	04 c0       	rjmp	.+8      	; 0x286 <LoadPattern1+0x10>
     27e:	8f ef       	ldi	r24, 0xFF	; 255
     280:	80 93 7e 01 	sts	0x017E, r24
     284:	02 c0       	rjmp	.+4      	; 0x28a <LoadPattern1+0x14>
     286:	10 92 7e 01 	sts	0x017E, r1
	if (pattern_byte & (1<<1) ) DisplayBuffer[1] = 0xff; else DisplayBuffer[1] = 0x00;	
     28a:	91 ff       	sbrs	r25, 1
     28c:	04 c0       	rjmp	.+8      	; 0x296 <LoadPattern1+0x20>
     28e:	8f ef       	ldi	r24, 0xFF	; 255
     290:	80 93 7f 01 	sts	0x017F, r24
     294:	02 c0       	rjmp	.+4      	; 0x29a <LoadPattern1+0x24>
     296:	10 92 7f 01 	sts	0x017F, r1
	if (pattern_byte & (1<<2) ) DisplayBuffer[2] = 0xff; else DisplayBuffer[2] = 0x00;	
     29a:	92 ff       	sbrs	r25, 2
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <LoadPattern1+0x30>
     29e:	8f ef       	ldi	r24, 0xFF	; 255
     2a0:	80 93 80 01 	sts	0x0180, r24
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <LoadPattern1+0x34>
     2a6:	10 92 80 01 	sts	0x0180, r1
	if (pattern_byte & (1<<3) ) DisplayBuffer[3] = 0xff; else DisplayBuffer[3] = 0x00;	
     2aa:	93 ff       	sbrs	r25, 3
     2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <LoadPattern1+0x40>
     2ae:	8f ef       	ldi	r24, 0xFF	; 255
     2b0:	80 93 81 01 	sts	0x0181, r24
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <LoadPattern1+0x44>
     2b6:	10 92 81 01 	sts	0x0181, r1
	if (pattern_byte & (1<<4) ) DisplayBuffer[4] = 0xff; else DisplayBuffer[4] = 0x00;	
     2ba:	94 ff       	sbrs	r25, 4
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <LoadPattern1+0x50>
     2be:	8f ef       	ldi	r24, 0xFF	; 255
     2c0:	80 93 82 01 	sts	0x0182, r24
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <LoadPattern1+0x54>
     2c6:	10 92 82 01 	sts	0x0182, r1
	if (pattern_byte & (1<<5) ) DisplayBuffer[5] = 0xff; else DisplayBuffer[5] = 0x00;	 
     2ca:	95 ff       	sbrs	r25, 5
     2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <LoadPattern1+0x60>
     2ce:	8f ef       	ldi	r24, 0xFF	; 255
     2d0:	80 93 83 01 	sts	0x0183, r24
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <LoadPattern1+0x64>
     2d6:	10 92 83 01 	sts	0x0183, r1
	if (pattern_byte & (1<<6) ) DisplayBuffer[6] = 0xff; else DisplayBuffer[6] = 0x00;	
     2da:	96 ff       	sbrs	r25, 6
     2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <LoadPattern1+0x70>
     2de:	8f ef       	ldi	r24, 0xFF	; 255
     2e0:	80 93 84 01 	sts	0x0184, r24
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <LoadPattern1+0x74>
     2e6:	10 92 84 01 	sts	0x0184, r1
	if (pattern_byte & (1<<7) ) DisplayBuffer[7] = 0xff; else DisplayBuffer[7] = 0x00;
     2ea:	27 ff       	sbrs	r18, 7
     2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <LoadPattern1+0x80>
     2ee:	8f ef       	ldi	r24, 0xFF	; 255
     2f0:	80 93 85 01 	sts	0x0185, r24
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <LoadPattern1+0x84>
     2f6:	10 92 85 01 	sts	0x0185, r1
	
	Gray_Scale = 1;
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	80 93 00 01 	sts	0x0100, r24
}
     300:	08 95       	ret

00000302 <LoadPattern3>:

void LoadPattern3(unsigned char* pattern)
{
     302:	fc 01       	movw	r30, r24
	
	//should be done as above - but below is apparently 4 times faster!!!
	if (*(pattern) & (1<<0) ) GS_Buffer[0][0] = 0xff; else GS_Buffer[0][0] = 0x00;
     304:	80 81       	ld	r24, Z
     306:	80 ff       	sbrs	r24, 0
     308:	04 c0       	rjmp	.+8      	; 0x312 <LoadPattern3+0x10>
     30a:	8f ef       	ldi	r24, 0xFF	; 255
     30c:	80 93 5e 01 	sts	0x015E, r24
     310:	02 c0       	rjmp	.+4      	; 0x316 <LoadPattern3+0x14>
     312:	10 92 5e 01 	sts	0x015E, r1
	if (*(pattern) & (1<<1) ) GS_Buffer[0][1] = 0xff; else GS_Buffer[0][1] = 0x00;
     316:	80 81       	ld	r24, Z
     318:	81 ff       	sbrs	r24, 1
     31a:	04 c0       	rjmp	.+8      	; 0x324 <LoadPattern3+0x22>
     31c:	8f ef       	ldi	r24, 0xFF	; 255
     31e:	80 93 5f 01 	sts	0x015F, r24
     322:	02 c0       	rjmp	.+4      	; 0x328 <LoadPattern3+0x26>
     324:	10 92 5f 01 	sts	0x015F, r1
	if (*(pattern) & (1<<2) ) GS_Buffer[0][2] = 0xff; else GS_Buffer[0][2] = 0x00;
     328:	80 81       	ld	r24, Z
     32a:	82 ff       	sbrs	r24, 2
     32c:	04 c0       	rjmp	.+8      	; 0x336 <LoadPattern3+0x34>
     32e:	8f ef       	ldi	r24, 0xFF	; 255
     330:	80 93 60 01 	sts	0x0160, r24
     334:	02 c0       	rjmp	.+4      	; 0x33a <LoadPattern3+0x38>
     336:	10 92 60 01 	sts	0x0160, r1
	if (*(pattern) & (1<<3) ) GS_Buffer[0][3] = 0xff; else GS_Buffer[0][3] = 0x00;
     33a:	80 81       	ld	r24, Z
     33c:	83 ff       	sbrs	r24, 3
     33e:	04 c0       	rjmp	.+8      	; 0x348 <LoadPattern3+0x46>
     340:	8f ef       	ldi	r24, 0xFF	; 255
     342:	80 93 61 01 	sts	0x0161, r24
     346:	02 c0       	rjmp	.+4      	; 0x34c <LoadPattern3+0x4a>
     348:	10 92 61 01 	sts	0x0161, r1
	if (*(pattern) & (1<<4) ) GS_Buffer[0][4] = 0xff; else GS_Buffer[0][4] = 0x00;
     34c:	80 81       	ld	r24, Z
     34e:	84 ff       	sbrs	r24, 4
     350:	04 c0       	rjmp	.+8      	; 0x35a <LoadPattern3+0x58>
     352:	8f ef       	ldi	r24, 0xFF	; 255
     354:	80 93 62 01 	sts	0x0162, r24
     358:	02 c0       	rjmp	.+4      	; 0x35e <LoadPattern3+0x5c>
     35a:	10 92 62 01 	sts	0x0162, r1
	if (*(pattern) & (1<<5) ) GS_Buffer[0][5] = 0xff; else GS_Buffer[0][5] = 0x00;
     35e:	80 81       	ld	r24, Z
     360:	85 ff       	sbrs	r24, 5
     362:	04 c0       	rjmp	.+8      	; 0x36c <LoadPattern3+0x6a>
     364:	8f ef       	ldi	r24, 0xFF	; 255
     366:	80 93 63 01 	sts	0x0163, r24
     36a:	02 c0       	rjmp	.+4      	; 0x370 <LoadPattern3+0x6e>
     36c:	10 92 63 01 	sts	0x0163, r1
	if (*(pattern) & (1<<6) ) GS_Buffer[0][6] = 0xff; else GS_Buffer[0][6] = 0x00;
     370:	80 81       	ld	r24, Z
     372:	86 ff       	sbrs	r24, 6
     374:	04 c0       	rjmp	.+8      	; 0x37e <LoadPattern3+0x7c>
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	80 93 64 01 	sts	0x0164, r24
     37c:	02 c0       	rjmp	.+4      	; 0x382 <LoadPattern3+0x80>
     37e:	10 92 64 01 	sts	0x0164, r1
	if (*(pattern) & (1<<7) ) GS_Buffer[0][7] = 0xff; else GS_Buffer[0][7] = 0x00;
     382:	80 81       	ld	r24, Z
     384:	87 ff       	sbrs	r24, 7
     386:	04 c0       	rjmp	.+8      	; 0x390 <LoadPattern3+0x8e>
     388:	8f ef       	ldi	r24, 0xFF	; 255
     38a:	80 93 65 01 	sts	0x0165, r24
     38e:	02 c0       	rjmp	.+4      	; 0x394 <LoadPattern3+0x92>
     390:	10 92 65 01 	sts	0x0165, r1

	if (*(pattern + 1) & (1<<0) ) GS_Buffer[1][0] = 0xff; else GS_Buffer[1][0] = 0x00;
     394:	81 81       	ldd	r24, Z+1	; 0x01
     396:	80 ff       	sbrs	r24, 0
     398:	04 c0       	rjmp	.+8      	; 0x3a2 <LoadPattern3+0xa0>
     39a:	8f ef       	ldi	r24, 0xFF	; 255
     39c:	80 93 66 01 	sts	0x0166, r24
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <LoadPattern3+0xa4>
     3a2:	10 92 66 01 	sts	0x0166, r1
	if (*(pattern + 1) & (1<<1) ) GS_Buffer[1][1] = 0xff; else GS_Buffer[1][1] = 0x00;
     3a6:	81 81       	ldd	r24, Z+1	; 0x01
     3a8:	81 ff       	sbrs	r24, 1
     3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <LoadPattern3+0xb2>
     3ac:	8f ef       	ldi	r24, 0xFF	; 255
     3ae:	80 93 67 01 	sts	0x0167, r24
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <LoadPattern3+0xb6>
     3b4:	10 92 67 01 	sts	0x0167, r1
	if (*(pattern + 1) & (1<<2) ) GS_Buffer[1][2] = 0xff; else GS_Buffer[1][2] = 0x00;
     3b8:	81 81       	ldd	r24, Z+1	; 0x01
     3ba:	82 ff       	sbrs	r24, 2
     3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <LoadPattern3+0xc4>
     3be:	8f ef       	ldi	r24, 0xFF	; 255
     3c0:	80 93 68 01 	sts	0x0168, r24
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <LoadPattern3+0xc8>
     3c6:	10 92 68 01 	sts	0x0168, r1
	if (*(pattern + 1) & (1<<3) ) GS_Buffer[1][3] = 0xff; else GS_Buffer[1][3] = 0x00;
     3ca:	81 81       	ldd	r24, Z+1	; 0x01
     3cc:	83 ff       	sbrs	r24, 3
     3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <LoadPattern3+0xd6>
     3d0:	8f ef       	ldi	r24, 0xFF	; 255
     3d2:	80 93 69 01 	sts	0x0169, r24
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <LoadPattern3+0xda>
     3d8:	10 92 69 01 	sts	0x0169, r1
	if (*(pattern + 1) & (1<<4) ) GS_Buffer[1][4] = 0xff; else GS_Buffer[1][4] = 0x00;
     3dc:	81 81       	ldd	r24, Z+1	; 0x01
     3de:	84 ff       	sbrs	r24, 4
     3e0:	04 c0       	rjmp	.+8      	; 0x3ea <LoadPattern3+0xe8>
     3e2:	8f ef       	ldi	r24, 0xFF	; 255
     3e4:	80 93 6a 01 	sts	0x016A, r24
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <LoadPattern3+0xec>
     3ea:	10 92 6a 01 	sts	0x016A, r1
	if (*(pattern + 1) & (1<<5) ) GS_Buffer[1][5] = 0xff; else GS_Buffer[1][5] = 0x00;
     3ee:	81 81       	ldd	r24, Z+1	; 0x01
     3f0:	85 ff       	sbrs	r24, 5
     3f2:	04 c0       	rjmp	.+8      	; 0x3fc <LoadPattern3+0xfa>
     3f4:	8f ef       	ldi	r24, 0xFF	; 255
     3f6:	80 93 6b 01 	sts	0x016B, r24
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <LoadPattern3+0xfe>
     3fc:	10 92 6b 01 	sts	0x016B, r1
	if (*(pattern + 1) & (1<<6) ) GS_Buffer[1][6] = 0xff; else GS_Buffer[1][6] = 0x00;
     400:	81 81       	ldd	r24, Z+1	; 0x01
     402:	86 ff       	sbrs	r24, 6
     404:	04 c0       	rjmp	.+8      	; 0x40e <LoadPattern3+0x10c>
     406:	8f ef       	ldi	r24, 0xFF	; 255
     408:	80 93 6c 01 	sts	0x016C, r24
     40c:	02 c0       	rjmp	.+4      	; 0x412 <LoadPattern3+0x110>
     40e:	10 92 6c 01 	sts	0x016C, r1
	if (*(pattern + 1) & (1<<7) ) GS_Buffer[1][7] = 0xff; else GS_Buffer[1][7] = 0x00;
     412:	81 81       	ldd	r24, Z+1	; 0x01
     414:	87 ff       	sbrs	r24, 7
     416:	04 c0       	rjmp	.+8      	; 0x420 <LoadPattern3+0x11e>
     418:	8f ef       	ldi	r24, 0xFF	; 255
     41a:	80 93 6d 01 	sts	0x016D, r24
     41e:	02 c0       	rjmp	.+4      	; 0x424 <LoadPattern3+0x122>
     420:	10 92 6d 01 	sts	0x016D, r1

	if (*(pattern + 2) & (1<<0) ) GS_Buffer[2][0] = 0xff; else GS_Buffer[2][0] = 0x00;
     424:	82 81       	ldd	r24, Z+2	; 0x02
     426:	80 ff       	sbrs	r24, 0
     428:	04 c0       	rjmp	.+8      	; 0x432 <LoadPattern3+0x130>
     42a:	8f ef       	ldi	r24, 0xFF	; 255
     42c:	80 93 6e 01 	sts	0x016E, r24
     430:	02 c0       	rjmp	.+4      	; 0x436 <LoadPattern3+0x134>
     432:	10 92 6e 01 	sts	0x016E, r1
	if (*(pattern + 2) & (1<<1) ) GS_Buffer[2][1] = 0xff; else GS_Buffer[2][1] = 0x00;
     436:	82 81       	ldd	r24, Z+2	; 0x02
     438:	81 ff       	sbrs	r24, 1
     43a:	04 c0       	rjmp	.+8      	; 0x444 <LoadPattern3+0x142>
     43c:	8f ef       	ldi	r24, 0xFF	; 255
     43e:	80 93 6f 01 	sts	0x016F, r24
     442:	02 c0       	rjmp	.+4      	; 0x448 <LoadPattern3+0x146>
     444:	10 92 6f 01 	sts	0x016F, r1
	if (*(pattern + 2) & (1<<2) ) GS_Buffer[2][2] = 0xff; else GS_Buffer[2][2] = 0x00;
     448:	82 81       	ldd	r24, Z+2	; 0x02
     44a:	82 ff       	sbrs	r24, 2
     44c:	04 c0       	rjmp	.+8      	; 0x456 <LoadPattern3+0x154>
     44e:	8f ef       	ldi	r24, 0xFF	; 255
     450:	80 93 70 01 	sts	0x0170, r24
     454:	02 c0       	rjmp	.+4      	; 0x45a <LoadPattern3+0x158>
     456:	10 92 70 01 	sts	0x0170, r1
	if (*(pattern + 2) & (1<<3) ) GS_Buffer[2][3] = 0xff; else GS_Buffer[2][3] = 0x00;
     45a:	82 81       	ldd	r24, Z+2	; 0x02
     45c:	83 ff       	sbrs	r24, 3
     45e:	04 c0       	rjmp	.+8      	; 0x468 <LoadPattern3+0x166>
     460:	8f ef       	ldi	r24, 0xFF	; 255
     462:	80 93 71 01 	sts	0x0171, r24
     466:	02 c0       	rjmp	.+4      	; 0x46c <LoadPattern3+0x16a>
     468:	10 92 71 01 	sts	0x0171, r1
	if (*(pattern + 2) & (1<<4) ) GS_Buffer[2][4] = 0xff; else GS_Buffer[2][4] = 0x00;
     46c:	82 81       	ldd	r24, Z+2	; 0x02
     46e:	84 ff       	sbrs	r24, 4
     470:	04 c0       	rjmp	.+8      	; 0x47a <LoadPattern3+0x178>
     472:	8f ef       	ldi	r24, 0xFF	; 255
     474:	80 93 72 01 	sts	0x0172, r24
     478:	02 c0       	rjmp	.+4      	; 0x47e <LoadPattern3+0x17c>
     47a:	10 92 72 01 	sts	0x0172, r1
	if (*(pattern + 2) & (1<<5) ) GS_Buffer[2][5] = 0xff; else GS_Buffer[2][5] = 0x00;
     47e:	82 81       	ldd	r24, Z+2	; 0x02
     480:	85 ff       	sbrs	r24, 5
     482:	04 c0       	rjmp	.+8      	; 0x48c <LoadPattern3+0x18a>
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	80 93 73 01 	sts	0x0173, r24
     48a:	02 c0       	rjmp	.+4      	; 0x490 <LoadPattern3+0x18e>
     48c:	10 92 73 01 	sts	0x0173, r1
	if (*(pattern + 2) & (1<<6) ) GS_Buffer[2][6] = 0xff; else GS_Buffer[2][6] = 0x00;
     490:	82 81       	ldd	r24, Z+2	; 0x02
     492:	86 ff       	sbrs	r24, 6
     494:	04 c0       	rjmp	.+8      	; 0x49e <LoadPattern3+0x19c>
     496:	8f ef       	ldi	r24, 0xFF	; 255
     498:	80 93 74 01 	sts	0x0174, r24
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <LoadPattern3+0x1a0>
     49e:	10 92 74 01 	sts	0x0174, r1
	if (*(pattern + 2) & (1<<7) ) GS_Buffer[2][7] = 0xff; else GS_Buffer[2][7] = 0x00;
     4a2:	82 81       	ldd	r24, Z+2	; 0x02
     4a4:	87 ff       	sbrs	r24, 7
     4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <LoadPattern3+0x1ae>
     4a8:	8f ef       	ldi	r24, 0xFF	; 255
     4aa:	80 93 75 01 	sts	0x0175, r24
     4ae:	08 95       	ret
     4b0:	10 92 75 01 	sts	0x0175, r1
     4b4:	08 95       	ret

000004b6 <LoadPattern4>:
}

void LoadPattern4(unsigned char* pattern)
{
     4b6:	fc 01       	movw	r30, r24

	if (*(pattern) & (1<<0) ) GS_Buffer[0][0] = 0xff; else GS_Buffer[0][0] = 0x00;
     4b8:	80 81       	ld	r24, Z
     4ba:	80 ff       	sbrs	r24, 0
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <LoadPattern4+0x10>
     4be:	8f ef       	ldi	r24, 0xFF	; 255
     4c0:	80 93 5e 01 	sts	0x015E, r24
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <LoadPattern4+0x14>
     4c6:	10 92 5e 01 	sts	0x015E, r1
	if (*(pattern) & (1<<1) ) GS_Buffer[0][1] = 0xff; else GS_Buffer[0][1] = 0x00;
     4ca:	80 81       	ld	r24, Z
     4cc:	81 ff       	sbrs	r24, 1
     4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <LoadPattern4+0x22>
     4d0:	8f ef       	ldi	r24, 0xFF	; 255
     4d2:	80 93 5f 01 	sts	0x015F, r24
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <LoadPattern4+0x26>
     4d8:	10 92 5f 01 	sts	0x015F, r1
	if (*(pattern) & (1<<2) ) GS_Buffer[0][2] = 0xff; else GS_Buffer[0][2] = 0x00;
     4dc:	80 81       	ld	r24, Z
     4de:	82 ff       	sbrs	r24, 2
     4e0:	04 c0       	rjmp	.+8      	; 0x4ea <LoadPattern4+0x34>
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	80 93 60 01 	sts	0x0160, r24
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <LoadPattern4+0x38>
     4ea:	10 92 60 01 	sts	0x0160, r1
	if (*(pattern) & (1<<3) ) GS_Buffer[0][3] = 0xff; else GS_Buffer[0][3] = 0x00;
     4ee:	80 81       	ld	r24, Z
     4f0:	83 ff       	sbrs	r24, 3
     4f2:	04 c0       	rjmp	.+8      	; 0x4fc <LoadPattern4+0x46>
     4f4:	8f ef       	ldi	r24, 0xFF	; 255
     4f6:	80 93 61 01 	sts	0x0161, r24
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <__stack+0x1>
     4fc:	10 92 61 01 	sts	0x0161, r1
	if (*(pattern) & (1<<4) ) GS_Buffer[0][4] = 0xff; else GS_Buffer[0][4] = 0x00;
     500:	80 81       	ld	r24, Z
     502:	84 ff       	sbrs	r24, 4
     504:	04 c0       	rjmp	.+8      	; 0x50e <__stack+0xf>
     506:	8f ef       	ldi	r24, 0xFF	; 255
     508:	80 93 62 01 	sts	0x0162, r24
     50c:	02 c0       	rjmp	.+4      	; 0x512 <__stack+0x13>
     50e:	10 92 62 01 	sts	0x0162, r1
	if (*(pattern) & (1<<5) ) GS_Buffer[0][5] = 0xff; else GS_Buffer[0][5] = 0x00;
     512:	80 81       	ld	r24, Z
     514:	85 ff       	sbrs	r24, 5
     516:	04 c0       	rjmp	.+8      	; 0x520 <__stack+0x21>
     518:	8f ef       	ldi	r24, 0xFF	; 255
     51a:	80 93 63 01 	sts	0x0163, r24
     51e:	02 c0       	rjmp	.+4      	; 0x524 <__stack+0x25>
     520:	10 92 63 01 	sts	0x0163, r1
	if (*(pattern) & (1<<6) ) GS_Buffer[0][6] = 0xff; else GS_Buffer[0][6] = 0x00;
     524:	80 81       	ld	r24, Z
     526:	86 ff       	sbrs	r24, 6
     528:	04 c0       	rjmp	.+8      	; 0x532 <__stack+0x33>
     52a:	8f ef       	ldi	r24, 0xFF	; 255
     52c:	80 93 64 01 	sts	0x0164, r24
     530:	02 c0       	rjmp	.+4      	; 0x536 <__stack+0x37>
     532:	10 92 64 01 	sts	0x0164, r1
	if (*(pattern) & (1<<7) ) GS_Buffer[0][7] = 0xff; else GS_Buffer[0][7] = 0x00;
     536:	80 81       	ld	r24, Z
     538:	87 ff       	sbrs	r24, 7
     53a:	04 c0       	rjmp	.+8      	; 0x544 <__stack+0x45>
     53c:	8f ef       	ldi	r24, 0xFF	; 255
     53e:	80 93 65 01 	sts	0x0165, r24
     542:	02 c0       	rjmp	.+4      	; 0x548 <__stack+0x49>
     544:	10 92 65 01 	sts	0x0165, r1

	if (*(pattern + 1) & (1<<0) ) GS_Buffer[1][0] = 0xff; else GS_Buffer[1][0] = 0x00;
     548:	81 81       	ldd	r24, Z+1	; 0x01
     54a:	80 ff       	sbrs	r24, 0
     54c:	04 c0       	rjmp	.+8      	; 0x556 <__stack+0x57>
     54e:	8f ef       	ldi	r24, 0xFF	; 255
     550:	80 93 66 01 	sts	0x0166, r24
     554:	02 c0       	rjmp	.+4      	; 0x55a <__stack+0x5b>
     556:	10 92 66 01 	sts	0x0166, r1
	if (*(pattern + 1) & (1<<1) ) GS_Buffer[1][1] = 0xff; else GS_Buffer[1][1] = 0x00;
     55a:	81 81       	ldd	r24, Z+1	; 0x01
     55c:	81 ff       	sbrs	r24, 1
     55e:	04 c0       	rjmp	.+8      	; 0x568 <__stack+0x69>
     560:	8f ef       	ldi	r24, 0xFF	; 255
     562:	80 93 67 01 	sts	0x0167, r24
     566:	02 c0       	rjmp	.+4      	; 0x56c <__stack+0x6d>
     568:	10 92 67 01 	sts	0x0167, r1
	if (*(pattern + 1) & (1<<2) ) GS_Buffer[1][2] = 0xff; else GS_Buffer[1][2] = 0x00;
     56c:	81 81       	ldd	r24, Z+1	; 0x01
     56e:	82 ff       	sbrs	r24, 2
     570:	04 c0       	rjmp	.+8      	; 0x57a <__stack+0x7b>
     572:	8f ef       	ldi	r24, 0xFF	; 255
     574:	80 93 68 01 	sts	0x0168, r24
     578:	02 c0       	rjmp	.+4      	; 0x57e <__stack+0x7f>
     57a:	10 92 68 01 	sts	0x0168, r1
	if (*(pattern + 1) & (1<<3) ) GS_Buffer[1][3] = 0xff; else GS_Buffer[1][3] = 0x00;
     57e:	81 81       	ldd	r24, Z+1	; 0x01
     580:	83 ff       	sbrs	r24, 3
     582:	04 c0       	rjmp	.+8      	; 0x58c <__stack+0x8d>
     584:	8f ef       	ldi	r24, 0xFF	; 255
     586:	80 93 69 01 	sts	0x0169, r24
     58a:	02 c0       	rjmp	.+4      	; 0x590 <__stack+0x91>
     58c:	10 92 69 01 	sts	0x0169, r1
	if (*(pattern + 1) & (1<<4) ) GS_Buffer[1][4] = 0xff; else GS_Buffer[1][4] = 0x00;
     590:	81 81       	ldd	r24, Z+1	; 0x01
     592:	84 ff       	sbrs	r24, 4
     594:	04 c0       	rjmp	.+8      	; 0x59e <__stack+0x9f>
     596:	8f ef       	ldi	r24, 0xFF	; 255
     598:	80 93 6a 01 	sts	0x016A, r24
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <__stack+0xa3>
     59e:	10 92 6a 01 	sts	0x016A, r1
	if (*(pattern + 1) & (1<<5) ) GS_Buffer[1][5] = 0xff; else GS_Buffer[1][5] = 0x00;
     5a2:	81 81       	ldd	r24, Z+1	; 0x01
     5a4:	85 ff       	sbrs	r24, 5
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <__stack+0xb1>
     5a8:	8f ef       	ldi	r24, 0xFF	; 255
     5aa:	80 93 6b 01 	sts	0x016B, r24
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <__stack+0xb5>
     5b0:	10 92 6b 01 	sts	0x016B, r1
	if (*(pattern + 1) & (1<<6) ) GS_Buffer[1][6] = 0xff; else GS_Buffer[1][6] = 0x00;
     5b4:	81 81       	ldd	r24, Z+1	; 0x01
     5b6:	86 ff       	sbrs	r24, 6
     5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <__stack+0xc3>
     5ba:	8f ef       	ldi	r24, 0xFF	; 255
     5bc:	80 93 6c 01 	sts	0x016C, r24
     5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <__stack+0xc7>
     5c2:	10 92 6c 01 	sts	0x016C, r1
	if (*(pattern + 1) & (1<<7) ) GS_Buffer[1][7] = 0xff; else GS_Buffer[1][7] = 0x00;
     5c6:	81 81       	ldd	r24, Z+1	; 0x01
     5c8:	87 ff       	sbrs	r24, 7
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <__stack+0xd5>
     5cc:	8f ef       	ldi	r24, 0xFF	; 255
     5ce:	80 93 6d 01 	sts	0x016D, r24
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <__stack+0xd9>
     5d4:	10 92 6d 01 	sts	0x016D, r1

	if (*(pattern + 2) & (1<<0) ) GS_Buffer[2][0] = 0xff; else GS_Buffer[2][0] = 0x00;
     5d8:	82 81       	ldd	r24, Z+2	; 0x02
     5da:	80 ff       	sbrs	r24, 0
     5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <__stack+0xe7>
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	80 93 6e 01 	sts	0x016E, r24
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <__stack+0xeb>
     5e6:	10 92 6e 01 	sts	0x016E, r1
	if (*(pattern + 2) & (1<<1) ) GS_Buffer[2][1] = 0xff; else GS_Buffer[2][1] = 0x00;
     5ea:	82 81       	ldd	r24, Z+2	; 0x02
     5ec:	81 ff       	sbrs	r24, 1
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <__stack+0xf9>
     5f0:	8f ef       	ldi	r24, 0xFF	; 255
     5f2:	80 93 6f 01 	sts	0x016F, r24
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <__stack+0xfd>
     5f8:	10 92 6f 01 	sts	0x016F, r1
	if (*(pattern + 2) & (1<<2) ) GS_Buffer[2][2] = 0xff; else GS_Buffer[2][2] = 0x00;
     5fc:	82 81       	ldd	r24, Z+2	; 0x02
     5fe:	82 ff       	sbrs	r24, 2
     600:	04 c0       	rjmp	.+8      	; 0x60a <__stack+0x10b>
     602:	8f ef       	ldi	r24, 0xFF	; 255
     604:	80 93 70 01 	sts	0x0170, r24
     608:	02 c0       	rjmp	.+4      	; 0x60e <__stack+0x10f>
     60a:	10 92 70 01 	sts	0x0170, r1
	if (*(pattern + 2) & (1<<3) ) GS_Buffer[2][3] = 0xff; else GS_Buffer[2][3] = 0x00;
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	83 ff       	sbrs	r24, 3
     612:	04 c0       	rjmp	.+8      	; 0x61c <__stack+0x11d>
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	80 93 71 01 	sts	0x0171, r24
     61a:	02 c0       	rjmp	.+4      	; 0x620 <__stack+0x121>
     61c:	10 92 71 01 	sts	0x0171, r1
	if (*(pattern + 2) & (1<<4) ) GS_Buffer[2][4] = 0xff; else GS_Buffer[2][4] = 0x00;
     620:	82 81       	ldd	r24, Z+2	; 0x02
     622:	84 ff       	sbrs	r24, 4
     624:	04 c0       	rjmp	.+8      	; 0x62e <__stack+0x12f>
     626:	8f ef       	ldi	r24, 0xFF	; 255
     628:	80 93 72 01 	sts	0x0172, r24
     62c:	02 c0       	rjmp	.+4      	; 0x632 <__stack+0x133>
     62e:	10 92 72 01 	sts	0x0172, r1
	if (*(pattern + 2) & (1<<5) ) GS_Buffer[2][5] = 0xff; else GS_Buffer[2][5] = 0x00;
     632:	82 81       	ldd	r24, Z+2	; 0x02
     634:	85 ff       	sbrs	r24, 5
     636:	04 c0       	rjmp	.+8      	; 0x640 <__stack+0x141>
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	80 93 73 01 	sts	0x0173, r24
     63e:	02 c0       	rjmp	.+4      	; 0x644 <__stack+0x145>
     640:	10 92 73 01 	sts	0x0173, r1
	if (*(pattern + 2) & (1<<6) ) GS_Buffer[2][6] = 0xff; else GS_Buffer[2][6] = 0x00;
     644:	82 81       	ldd	r24, Z+2	; 0x02
     646:	86 ff       	sbrs	r24, 6
     648:	04 c0       	rjmp	.+8      	; 0x652 <__stack+0x153>
     64a:	8f ef       	ldi	r24, 0xFF	; 255
     64c:	80 93 74 01 	sts	0x0174, r24
     650:	02 c0       	rjmp	.+4      	; 0x656 <__stack+0x157>
     652:	10 92 74 01 	sts	0x0174, r1
	if (*(pattern + 2) & (1<<7) ) GS_Buffer[2][7] = 0xff; else GS_Buffer[2][7] = 0x00;
     656:	82 81       	ldd	r24, Z+2	; 0x02
     658:	87 ff       	sbrs	r24, 7
     65a:	04 c0       	rjmp	.+8      	; 0x664 <__stack+0x165>
     65c:	8f ef       	ldi	r24, 0xFF	; 255
     65e:	80 93 75 01 	sts	0x0175, r24
     662:	02 c0       	rjmp	.+4      	; 0x668 <__stack+0x169>
     664:	10 92 75 01 	sts	0x0175, r1
	
	
	if (*(pattern + 3) & (1<<0) ) GS_Buffer[3][0] = 0xff; else GS_Buffer[3][0] = 0x00;
     668:	83 81       	ldd	r24, Z+3	; 0x03
     66a:	80 ff       	sbrs	r24, 0
     66c:	04 c0       	rjmp	.+8      	; 0x676 <__stack+0x177>
     66e:	8f ef       	ldi	r24, 0xFF	; 255
     670:	80 93 76 01 	sts	0x0176, r24
     674:	02 c0       	rjmp	.+4      	; 0x67a <__stack+0x17b>
     676:	10 92 76 01 	sts	0x0176, r1
	if (*(pattern + 3) & (1<<1) ) GS_Buffer[3][1] = 0xff; else GS_Buffer[3][1] = 0x00;
     67a:	83 81       	ldd	r24, Z+3	; 0x03
     67c:	81 ff       	sbrs	r24, 1
     67e:	04 c0       	rjmp	.+8      	; 0x688 <__stack+0x189>
     680:	8f ef       	ldi	r24, 0xFF	; 255
     682:	80 93 77 01 	sts	0x0177, r24
     686:	02 c0       	rjmp	.+4      	; 0x68c <__stack+0x18d>
     688:	10 92 77 01 	sts	0x0177, r1
	if (*(pattern + 3) & (1<<2) ) GS_Buffer[3][2] = 0xff; else GS_Buffer[3][2] = 0x00;
     68c:	83 81       	ldd	r24, Z+3	; 0x03
     68e:	82 ff       	sbrs	r24, 2
     690:	04 c0       	rjmp	.+8      	; 0x69a <__stack+0x19b>
     692:	8f ef       	ldi	r24, 0xFF	; 255
     694:	80 93 78 01 	sts	0x0178, r24
     698:	02 c0       	rjmp	.+4      	; 0x69e <__stack+0x19f>
     69a:	10 92 78 01 	sts	0x0178, r1
	if (*(pattern + 3) & (1<<3) ) GS_Buffer[3][3] = 0xff; else GS_Buffer[3][3] = 0x00;
     69e:	83 81       	ldd	r24, Z+3	; 0x03
     6a0:	83 ff       	sbrs	r24, 3
     6a2:	04 c0       	rjmp	.+8      	; 0x6ac <__stack+0x1ad>
     6a4:	8f ef       	ldi	r24, 0xFF	; 255
     6a6:	80 93 79 01 	sts	0x0179, r24
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <__stack+0x1b1>
     6ac:	10 92 79 01 	sts	0x0179, r1
	if (*(pattern + 3) & (1<<4) ) GS_Buffer[3][4] = 0xff; else GS_Buffer[3][4] = 0x00;
     6b0:	83 81       	ldd	r24, Z+3	; 0x03
     6b2:	84 ff       	sbrs	r24, 4
     6b4:	04 c0       	rjmp	.+8      	; 0x6be <__stack+0x1bf>
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	80 93 7a 01 	sts	0x017A, r24
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <__stack+0x1c3>
     6be:	10 92 7a 01 	sts	0x017A, r1
	if (*(pattern + 3) & (1<<5) ) GS_Buffer[3][5] = 0xff; else GS_Buffer[3][5] = 0x00;
     6c2:	83 81       	ldd	r24, Z+3	; 0x03
     6c4:	85 ff       	sbrs	r24, 5
     6c6:	04 c0       	rjmp	.+8      	; 0x6d0 <__stack+0x1d1>
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	80 93 7b 01 	sts	0x017B, r24
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <__stack+0x1d5>
     6d0:	10 92 7b 01 	sts	0x017B, r1
	if (*(pattern + 3) & (1<<6) ) GS_Buffer[3][6] = 0xff; else GS_Buffer[3][6] = 0x00;
     6d4:	83 81       	ldd	r24, Z+3	; 0x03
     6d6:	86 ff       	sbrs	r24, 6
     6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <__stack+0x1e3>
     6da:	8f ef       	ldi	r24, 0xFF	; 255
     6dc:	80 93 7c 01 	sts	0x017C, r24
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <__stack+0x1e7>
     6e2:	10 92 7c 01 	sts	0x017C, r1
	if (*(pattern + 3) & (1<<7) ) GS_Buffer[3][7] = 0xff; else GS_Buffer[3][7] = 0x00;
     6e6:	83 81       	ldd	r24, Z+3	; 0x03
     6e8:	87 ff       	sbrs	r24, 7
     6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <__stack+0x1f5>
     6ec:	8f ef       	ldi	r24, 0xFF	; 255
     6ee:	80 93 7d 01 	sts	0x017D, r24
     6f2:	08 95       	ret
     6f4:	10 92 7d 01 	sts	0x017D, r1
     6f8:	08 95       	ret

000006fa <LoadPattern8>:
}

void LoadPattern8(unsigned char* pattern)
{
     6fa:	fc 01       	movw	r30, r24

		DisplayBuffer[0] = (*(pattern + 0));
     6fc:	80 81       	ld	r24, Z
     6fe:	80 93 7e 01 	sts	0x017E, r24
		DisplayBuffer[1] = (*(pattern + 1));
     702:	81 81       	ldd	r24, Z+1	; 0x01
     704:	80 93 7f 01 	sts	0x017F, r24
		DisplayBuffer[2] = (*(pattern + 2));
     708:	82 81       	ldd	r24, Z+2	; 0x02
     70a:	80 93 80 01 	sts	0x0180, r24
		DisplayBuffer[3] = (*(pattern + 3));
     70e:	83 81       	ldd	r24, Z+3	; 0x03
     710:	80 93 81 01 	sts	0x0181, r24
		DisplayBuffer[4] = (*(pattern + 4));
     714:	84 81       	ldd	r24, Z+4	; 0x04
     716:	80 93 82 01 	sts	0x0182, r24
		DisplayBuffer[5] = (*(pattern + 5));
     71a:	85 81       	ldd	r24, Z+5	; 0x05
     71c:	80 93 83 01 	sts	0x0183, r24
		DisplayBuffer[6] = (*(pattern + 6));
     720:	86 81       	ldd	r24, Z+6	; 0x06
     722:	80 93 84 01 	sts	0x0184, r24
		DisplayBuffer[7] = (*(pattern + 7));
     726:	87 81       	ldd	r24, Z+7	; 0x07
     728:	80 93 85 01 	sts	0x0185, r24
		Gray_Scale = 1;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	80 93 00 01 	sts	0x0100, r24
}
     732:	08 95       	ret

00000734 <LoadPattern16>:


void LoadPattern16(unsigned char* pattern)
{
     734:	fc 01       	movw	r30, r24
	GS_Buffer[0][0] = (*(pattern + 0));
     736:	80 81       	ld	r24, Z
     738:	80 93 5e 01 	sts	0x015E, r24
	GS_Buffer[0][1] = (*(pattern + 1));
     73c:	81 81       	ldd	r24, Z+1	; 0x01
     73e:	80 93 5f 01 	sts	0x015F, r24
	GS_Buffer[0][2] = (*(pattern + 2));
     742:	82 81       	ldd	r24, Z+2	; 0x02
     744:	80 93 60 01 	sts	0x0160, r24
	GS_Buffer[0][3] = (*(pattern + 3));
     748:	83 81       	ldd	r24, Z+3	; 0x03
     74a:	80 93 61 01 	sts	0x0161, r24
	GS_Buffer[0][4] = (*(pattern + 4));
     74e:	84 81       	ldd	r24, Z+4	; 0x04
     750:	80 93 62 01 	sts	0x0162, r24
	GS_Buffer[0][5] = (*(pattern + 5));
     754:	85 81       	ldd	r24, Z+5	; 0x05
     756:	80 93 63 01 	sts	0x0163, r24
	GS_Buffer[0][6] = (*(pattern + 6));
     75a:	86 81       	ldd	r24, Z+6	; 0x06
     75c:	80 93 64 01 	sts	0x0164, r24
	GS_Buffer[0][7] = (*(pattern + 7));
     760:	87 81       	ldd	r24, Z+7	; 0x07
     762:	80 93 65 01 	sts	0x0165, r24
	
	GS_Buffer[1][0] = (*(pattern + 8));
     766:	80 85       	ldd	r24, Z+8	; 0x08
     768:	80 93 66 01 	sts	0x0166, r24
	GS_Buffer[1][1] = (*(pattern + 9));
     76c:	81 85       	ldd	r24, Z+9	; 0x09
     76e:	80 93 67 01 	sts	0x0167, r24
	GS_Buffer[1][2] = (*(pattern + 10));
     772:	82 85       	ldd	r24, Z+10	; 0x0a
     774:	80 93 68 01 	sts	0x0168, r24
	GS_Buffer[1][3] = (*(pattern + 11));
     778:	83 85       	ldd	r24, Z+11	; 0x0b
     77a:	80 93 69 01 	sts	0x0169, r24
	GS_Buffer[1][4] = (*(pattern + 12));
     77e:	84 85       	ldd	r24, Z+12	; 0x0c
     780:	80 93 6a 01 	sts	0x016A, r24
	GS_Buffer[1][5] = (*(pattern + 13));
     784:	85 85       	ldd	r24, Z+13	; 0x0d
     786:	80 93 6b 01 	sts	0x016B, r24
	GS_Buffer[1][6] = (*(pattern + 14));
     78a:	86 85       	ldd	r24, Z+14	; 0x0e
     78c:	80 93 6c 01 	sts	0x016C, r24
	GS_Buffer[1][7] = (*(pattern + 15));
     790:	87 85       	ldd	r24, Z+15	; 0x0f
     792:	80 93 6d 01 	sts	0x016D, r24
}
     796:	08 95       	ret

00000798 <LoadPattern24>:


void LoadPattern24(unsigned char* pattern)
{
     798:	fc 01       	movw	r30, r24
	GS_Buffer[0][0] = (*(pattern + 0));
     79a:	80 81       	ld	r24, Z
     79c:	80 93 5e 01 	sts	0x015E, r24
	GS_Buffer[0][1] = (*(pattern + 1));
     7a0:	81 81       	ldd	r24, Z+1	; 0x01
     7a2:	80 93 5f 01 	sts	0x015F, r24
	GS_Buffer[0][2] = (*(pattern + 2));
     7a6:	82 81       	ldd	r24, Z+2	; 0x02
     7a8:	80 93 60 01 	sts	0x0160, r24
	GS_Buffer[0][3] = (*(pattern + 3));
     7ac:	83 81       	ldd	r24, Z+3	; 0x03
     7ae:	80 93 61 01 	sts	0x0161, r24
	GS_Buffer[0][4] = (*(pattern + 4));
     7b2:	84 81       	ldd	r24, Z+4	; 0x04
     7b4:	80 93 62 01 	sts	0x0162, r24
	GS_Buffer[0][5] = (*(pattern + 5));
     7b8:	85 81       	ldd	r24, Z+5	; 0x05
     7ba:	80 93 63 01 	sts	0x0163, r24
	GS_Buffer[0][6] = (*(pattern + 6));
     7be:	86 81       	ldd	r24, Z+6	; 0x06
     7c0:	80 93 64 01 	sts	0x0164, r24
	GS_Buffer[0][7] = (*(pattern + 7));
     7c4:	87 81       	ldd	r24, Z+7	; 0x07
     7c6:	80 93 65 01 	sts	0x0165, r24
	
	GS_Buffer[1][0] = (*(pattern + 8));
     7ca:	80 85       	ldd	r24, Z+8	; 0x08
     7cc:	80 93 66 01 	sts	0x0166, r24
	GS_Buffer[1][1] = (*(pattern + 9));
     7d0:	81 85       	ldd	r24, Z+9	; 0x09
     7d2:	80 93 67 01 	sts	0x0167, r24
	GS_Buffer[1][2] = (*(pattern + 10));
     7d6:	82 85       	ldd	r24, Z+10	; 0x0a
     7d8:	80 93 68 01 	sts	0x0168, r24
	GS_Buffer[1][3] = (*(pattern + 11));
     7dc:	83 85       	ldd	r24, Z+11	; 0x0b
     7de:	80 93 69 01 	sts	0x0169, r24
	GS_Buffer[1][4] = (*(pattern + 12));
     7e2:	84 85       	ldd	r24, Z+12	; 0x0c
     7e4:	80 93 6a 01 	sts	0x016A, r24
	GS_Buffer[1][5] = (*(pattern + 13));
     7e8:	85 85       	ldd	r24, Z+13	; 0x0d
     7ea:	80 93 6b 01 	sts	0x016B, r24
	GS_Buffer[1][6] = (*(pattern + 14));
     7ee:	86 85       	ldd	r24, Z+14	; 0x0e
     7f0:	80 93 6c 01 	sts	0x016C, r24
	GS_Buffer[1][7] = (*(pattern + 15));
     7f4:	87 85       	ldd	r24, Z+15	; 0x0f
     7f6:	80 93 6d 01 	sts	0x016D, r24
	
	GS_Buffer[2][0] = (*(pattern + 16));
     7fa:	80 89       	ldd	r24, Z+16	; 0x10
     7fc:	80 93 6e 01 	sts	0x016E, r24
	GS_Buffer[2][1] = (*(pattern + 17));
     800:	81 89       	ldd	r24, Z+17	; 0x11
     802:	80 93 6f 01 	sts	0x016F, r24
	GS_Buffer[2][2] = (*(pattern + 18));
     806:	82 89       	ldd	r24, Z+18	; 0x12
     808:	80 93 70 01 	sts	0x0170, r24
	GS_Buffer[2][3] = (*(pattern + 19));
     80c:	83 89       	ldd	r24, Z+19	; 0x13
     80e:	80 93 71 01 	sts	0x0171, r24
	GS_Buffer[2][4] = (*(pattern + 20));
     812:	84 89       	ldd	r24, Z+20	; 0x14
     814:	80 93 72 01 	sts	0x0172, r24
	GS_Buffer[2][5] = (*(pattern + 21));
     818:	85 89       	ldd	r24, Z+21	; 0x15
     81a:	80 93 73 01 	sts	0x0173, r24
	GS_Buffer[2][6] = (*(pattern + 22));
     81e:	86 89       	ldd	r24, Z+22	; 0x16
     820:	80 93 74 01 	sts	0x0174, r24
	GS_Buffer[2][7] = (*(pattern + 23));
     824:	87 89       	ldd	r24, Z+23	; 0x17
     826:	80 93 75 01 	sts	0x0175, r24
}
     82a:	08 95       	ret

0000082c <LoadPattern32>:

void LoadPattern32(unsigned char* pattern)
{
     82c:	fc 01       	movw	r30, r24
	GS_Buffer[0][0] = (*(pattern + 0));
     82e:	80 81       	ld	r24, Z
     830:	80 93 5e 01 	sts	0x015E, r24
	GS_Buffer[0][1] = (*(pattern + 1));
     834:	81 81       	ldd	r24, Z+1	; 0x01
     836:	80 93 5f 01 	sts	0x015F, r24
	GS_Buffer[0][2] = (*(pattern + 2));
     83a:	82 81       	ldd	r24, Z+2	; 0x02
     83c:	80 93 60 01 	sts	0x0160, r24
	GS_Buffer[0][3] = (*(pattern + 3));
     840:	83 81       	ldd	r24, Z+3	; 0x03
     842:	80 93 61 01 	sts	0x0161, r24
	GS_Buffer[0][4] = (*(pattern + 4));
     846:	84 81       	ldd	r24, Z+4	; 0x04
     848:	80 93 62 01 	sts	0x0162, r24
	GS_Buffer[0][5] = (*(pattern + 5));
     84c:	85 81       	ldd	r24, Z+5	; 0x05
     84e:	80 93 63 01 	sts	0x0163, r24
	GS_Buffer[0][6] = (*(pattern + 6));
     852:	86 81       	ldd	r24, Z+6	; 0x06
     854:	80 93 64 01 	sts	0x0164, r24
	GS_Buffer[0][7] = (*(pattern + 7));
     858:	87 81       	ldd	r24, Z+7	; 0x07
     85a:	80 93 65 01 	sts	0x0165, r24
	
	GS_Buffer[1][0] = (*(pattern + 8));
     85e:	80 85       	ldd	r24, Z+8	; 0x08
     860:	80 93 66 01 	sts	0x0166, r24
	GS_Buffer[1][1] = (*(pattern + 9));
     864:	81 85       	ldd	r24, Z+9	; 0x09
     866:	80 93 67 01 	sts	0x0167, r24
	GS_Buffer[1][2] = (*(pattern + 10));
     86a:	82 85       	ldd	r24, Z+10	; 0x0a
     86c:	80 93 68 01 	sts	0x0168, r24
	GS_Buffer[1][3] = (*(pattern + 11));
     870:	83 85       	ldd	r24, Z+11	; 0x0b
     872:	80 93 69 01 	sts	0x0169, r24
	GS_Buffer[1][4] = (*(pattern + 12));
     876:	84 85       	ldd	r24, Z+12	; 0x0c
     878:	80 93 6a 01 	sts	0x016A, r24
	GS_Buffer[1][5] = (*(pattern + 13));
     87c:	85 85       	ldd	r24, Z+13	; 0x0d
     87e:	80 93 6b 01 	sts	0x016B, r24
	GS_Buffer[1][6] = (*(pattern + 14));
     882:	86 85       	ldd	r24, Z+14	; 0x0e
     884:	80 93 6c 01 	sts	0x016C, r24
	GS_Buffer[1][7] = (*(pattern + 15));
     888:	87 85       	ldd	r24, Z+15	; 0x0f
     88a:	80 93 6d 01 	sts	0x016D, r24
	
	GS_Buffer[2][0] = (*(pattern + 16));
     88e:	80 89       	ldd	r24, Z+16	; 0x10
     890:	80 93 6e 01 	sts	0x016E, r24
	GS_Buffer[2][1] = (*(pattern + 17));
     894:	81 89       	ldd	r24, Z+17	; 0x11
     896:	80 93 6f 01 	sts	0x016F, r24
	GS_Buffer[2][2] = (*(pattern + 18));
     89a:	82 89       	ldd	r24, Z+18	; 0x12
     89c:	80 93 70 01 	sts	0x0170, r24
	GS_Buffer[2][3] = (*(pattern + 19));
     8a0:	83 89       	ldd	r24, Z+19	; 0x13
     8a2:	80 93 71 01 	sts	0x0171, r24
	GS_Buffer[2][4] = (*(pattern + 20));
     8a6:	84 89       	ldd	r24, Z+20	; 0x14
     8a8:	80 93 72 01 	sts	0x0172, r24
	GS_Buffer[2][5] = (*(pattern + 21));
     8ac:	85 89       	ldd	r24, Z+21	; 0x15
     8ae:	80 93 73 01 	sts	0x0173, r24
	GS_Buffer[2][6] = (*(pattern + 22));
     8b2:	86 89       	ldd	r24, Z+22	; 0x16
     8b4:	80 93 74 01 	sts	0x0174, r24
	GS_Buffer[2][7] = (*(pattern + 23));
     8b8:	87 89       	ldd	r24, Z+23	; 0x17
     8ba:	80 93 75 01 	sts	0x0175, r24

 	GS_Buffer[3][0] = (*(pattern + 24));
     8be:	80 8d       	ldd	r24, Z+24	; 0x18
     8c0:	80 93 76 01 	sts	0x0176, r24
	GS_Buffer[3][1] = (*(pattern + 25));
     8c4:	81 8d       	ldd	r24, Z+25	; 0x19
     8c6:	80 93 77 01 	sts	0x0177, r24
	GS_Buffer[3][2] = (*(pattern + 26));
     8ca:	82 8d       	ldd	r24, Z+26	; 0x1a
     8cc:	80 93 78 01 	sts	0x0178, r24
	GS_Buffer[3][3] = (*(pattern + 27));
     8d0:	83 8d       	ldd	r24, Z+27	; 0x1b
     8d2:	80 93 79 01 	sts	0x0179, r24
	GS_Buffer[3][4] = (*(pattern + 28));
     8d6:	84 8d       	ldd	r24, Z+28	; 0x1c
     8d8:	80 93 7a 01 	sts	0x017A, r24
	GS_Buffer[3][5] = (*(pattern + 29));
     8dc:	85 8d       	ldd	r24, Z+29	; 0x1d
     8de:	80 93 7b 01 	sts	0x017B, r24
	GS_Buffer[3][6] = (*(pattern + 30));
     8e2:	86 8d       	ldd	r24, Z+30	; 0x1e
     8e4:	80 93 7c 01 	sts	0x017C, r24
	GS_Buffer[3][7] = (*(pattern + 31));
     8e8:	87 8d       	ldd	r24, Z+31	; 0x1f
     8ea:	80 93 7d 01 	sts	0x017D, r24
	}
     8ee:	08 95       	ret

000008f0 <StorePattern1>:
	DisplayBuffer[6] = eeprom_rb((uint8_t*)(pattern + 6));
	DisplayBuffer[7] = eeprom_rb((uint8_t*)(pattern + 7));
}

void StorePattern1(uint16_t frameNumber, unsigned char *pattern)
{	
     8f0:	fb 01       	movw	r30, r22
	PATTERNS[frameNumber] = *(pattern + 0);
     8f2:	dc 01       	movw	r26, r24
     8f4:	aa 57       	subi	r26, 0x7A	; 122
     8f6:	be 4f       	sbci	r27, 0xFE	; 254
     8f8:	80 81       	ld	r24, Z
     8fa:	8c 93       	st	X, r24
}
     8fc:	08 95       	ret

000008fe <StorePattern3>:

void StorePattern3(uint16_t frameNumber, unsigned char *pattern)
{	
     8fe:	db 01       	movw	r26, r22
	PATTERNS[frameNumber*3] = *(pattern + 0);
     900:	fc 01       	movw	r30, r24
     902:	ee 0f       	add	r30, r30
     904:	ff 1f       	adc	r31, r31
     906:	e8 0f       	add	r30, r24
     908:	f9 1f       	adc	r31, r25
     90a:	ea 57       	subi	r30, 0x7A	; 122
     90c:	fe 4f       	sbci	r31, 0xFE	; 254
     90e:	8c 91       	ld	r24, X
     910:	80 83       	st	Z, r24
	PATTERNS[frameNumber*3+1] = *(pattern + 1);
     912:	11 96       	adiw	r26, 0x01	; 1
     914:	8c 91       	ld	r24, X
     916:	11 97       	sbiw	r26, 0x01	; 1
     918:	81 83       	std	Z+1, r24	; 0x01
	PATTERNS[frameNumber*3+2] = *(pattern + 2);
     91a:	12 96       	adiw	r26, 0x02	; 2
     91c:	8c 91       	ld	r24, X
     91e:	82 83       	std	Z+2, r24	; 0x02
}
     920:	08 95       	ret

00000922 <StorePattern4>:

void StorePattern4(uint16_t frameNumber, unsigned char *pattern)
{	
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	db 01       	movw	r26, r22
	PATTERNS[frameNumber*4] = *(pattern + 0);
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	e6 e8       	ldi	r30, 0x86	; 134
     932:	f1 e0       	ldi	r31, 0x01	; 1
     934:	af 01       	movw	r20, r30
     936:	48 0f       	add	r20, r24
     938:	59 1f       	adc	r21, r25
     93a:	2c 91       	ld	r18, X
     93c:	ea 01       	movw	r28, r20
     93e:	28 83       	st	Y, r18
	PATTERNS[frameNumber*4+1] = *(pattern + 1);
     940:	11 96       	adiw	r26, 0x01	; 1
     942:	2c 91       	ld	r18, X
     944:	11 97       	sbiw	r26, 0x01	; 1
     946:	29 83       	std	Y+1, r18	; 0x01
	PATTERNS[frameNumber*4+2] = *(pattern + 2);
     948:	e8 0f       	add	r30, r24
     94a:	f9 1f       	adc	r31, r25
     94c:	12 96       	adiw	r26, 0x02	; 2
     94e:	8c 91       	ld	r24, X
     950:	12 97       	sbiw	r26, 0x02	; 2
     952:	82 83       	std	Z+2, r24	; 0x02
	PATTERNS[frameNumber*4+3] = *(pattern + 3);
     954:	13 96       	adiw	r26, 0x03	; 3
     956:	8c 91       	ld	r24, X
     958:	8b 83       	std	Y+3, r24	; 0x03

}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <StorePattern8>:

void StorePattern8(uint16_t frameNumber, unsigned char *pattern)
{	
     960:	fb 01       	movw	r30, r22
	PATTERNS[frameNumber*8] = *(pattern);
     962:	23 e0       	ldi	r18, 0x03	; 3
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	2a 95       	dec	r18
     96a:	e1 f7       	brne	.-8      	; 0x964 <StorePattern8+0x4>
     96c:	46 e8       	ldi	r20, 0x86	; 134
     96e:	51 e0       	ldi	r21, 0x01	; 1
     970:	ba 01       	movw	r22, r20
     972:	68 0f       	add	r22, r24
     974:	79 1f       	adc	r23, r25
     976:	20 81       	ld	r18, Z
     978:	db 01       	movw	r26, r22
     97a:	2c 93       	st	X, r18
	PATTERNS[frameNumber*8+1] = *(pattern + 1);
     97c:	21 81       	ldd	r18, Z+1	; 0x01
     97e:	11 96       	adiw	r26, 0x01	; 1
     980:	2c 93       	st	X, r18
	PATTERNS[frameNumber*8+2] = *(pattern + 2);
     982:	da 01       	movw	r26, r20
     984:	a8 0f       	add	r26, r24
     986:	b9 1f       	adc	r27, r25
     988:	22 81       	ldd	r18, Z+2	; 0x02
     98a:	12 96       	adiw	r26, 0x02	; 2
     98c:	2c 93       	st	X, r18
	PATTERNS[frameNumber*8+3] = *(pattern + 3);
     98e:	23 81       	ldd	r18, Z+3	; 0x03
     990:	db 01       	movw	r26, r22
     992:	13 96       	adiw	r26, 0x03	; 3
     994:	2c 93       	st	X, r18
	PATTERNS[frameNumber*8+4] = *(pattern + 4);
     996:	48 0f       	add	r20, r24
     998:	59 1f       	adc	r21, r25
     99a:	84 81       	ldd	r24, Z+4	; 0x04
     99c:	da 01       	movw	r26, r20
     99e:	14 96       	adiw	r26, 0x04	; 4
     9a0:	8c 93       	st	X, r24
	PATTERNS[frameNumber*8+5] = *(pattern + 5);
     9a2:	85 81       	ldd	r24, Z+5	; 0x05
     9a4:	db 01       	movw	r26, r22
     9a6:	15 96       	adiw	r26, 0x05	; 5
     9a8:	8c 93       	st	X, r24
     9aa:	15 97       	sbiw	r26, 0x05	; 5
	PATTERNS[frameNumber*8+6] = *(pattern + 6);
     9ac:	86 81       	ldd	r24, Z+6	; 0x06
     9ae:	16 96       	adiw	r26, 0x06	; 6
     9b0:	8c 93       	st	X, r24
     9b2:	16 97       	sbiw	r26, 0x06	; 6
	PATTERNS[frameNumber*8+7] = *(pattern + 7);
     9b4:	87 81       	ldd	r24, Z+7	; 0x07
     9b6:	17 96       	adiw	r26, 0x07	; 7
     9b8:	8c 93       	st	X, r24
}
     9ba:	08 95       	ret

000009bc <StorePattern16>:

void StorePattern16(uint16_t frameNumber, unsigned char *pattern)
{	
     9bc:	db 01       	movw	r26, r22
	PATTERNS[frameNumber*16] = *(pattern);
     9be:	9c 01       	movw	r18, r24
     9c0:	54 e0       	ldi	r21, 0x04	; 4
     9c2:	22 0f       	add	r18, r18
     9c4:	33 1f       	adc	r19, r19
     9c6:	5a 95       	dec	r21
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <StorePattern16+0x6>
     9ca:	66 e8       	ldi	r22, 0x86	; 134
     9cc:	71 e0       	ldi	r23, 0x01	; 1
     9ce:	26 0f       	add	r18, r22
     9d0:	37 1f       	adc	r19, r23
     9d2:	4c 91       	ld	r20, X
     9d4:	f9 01       	movw	r30, r18
     9d6:	40 83       	st	Z, r20
	PATTERNS[frameNumber*16+1] = *(pattern + 1);
     9d8:	11 96       	adiw	r26, 0x01	; 1
     9da:	4c 91       	ld	r20, X
     9dc:	11 97       	sbiw	r26, 0x01	; 1
     9de:	41 83       	std	Z+1, r20	; 0x01
	PATTERNS[frameNumber*16+2] = *(pattern + 2);
     9e0:	f9 01       	movw	r30, r18
     9e2:	12 96       	adiw	r26, 0x02	; 2
     9e4:	4c 91       	ld	r20, X
     9e6:	12 97       	sbiw	r26, 0x02	; 2
     9e8:	42 83       	std	Z+2, r20	; 0x02
	PATTERNS[frameNumber*16+3] = *(pattern + 3);
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	4c 91       	ld	r20, X
     9ee:	13 97       	sbiw	r26, 0x03	; 3
     9f0:	43 83       	std	Z+3, r20	; 0x03
	PATTERNS[frameNumber*16+4] = *(pattern + 4);
     9f2:	54 e0       	ldi	r21, 0x04	; 4
     9f4:	88 0f       	add	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	5a 95       	dec	r21
     9fa:	e1 f7       	brne	.-8      	; 0x9f4 <StorePattern16+0x38>
     9fc:	f9 01       	movw	r30, r18
     9fe:	14 96       	adiw	r26, 0x04	; 4
     a00:	4c 91       	ld	r20, X
     a02:	14 97       	sbiw	r26, 0x04	; 4
     a04:	44 83       	std	Z+4, r20	; 0x04
	PATTERNS[frameNumber*16+5] = *(pattern + 5);
     a06:	15 96       	adiw	r26, 0x05	; 5
     a08:	4c 91       	ld	r20, X
     a0a:	15 97       	sbiw	r26, 0x05	; 5
     a0c:	45 83       	std	Z+5, r20	; 0x05
	PATTERNS[frameNumber*16+6] = *(pattern + 6);
     a0e:	16 96       	adiw	r26, 0x06	; 6
     a10:	4c 91       	ld	r20, X
     a12:	16 97       	sbiw	r26, 0x06	; 6
     a14:	46 83       	std	Z+6, r20	; 0x06
	PATTERNS[frameNumber*16+7] = *(pattern + 7);
     a16:	17 96       	adiw	r26, 0x07	; 7
     a18:	4c 91       	ld	r20, X
     a1a:	17 97       	sbiw	r26, 0x07	; 7
     a1c:	47 83       	std	Z+7, r20	; 0x07
	PATTERNS[frameNumber*16+8] = *(pattern + 8);
     a1e:	68 0f       	add	r22, r24
     a20:	79 1f       	adc	r23, r25
     a22:	18 96       	adiw	r26, 0x08	; 8
     a24:	8c 91       	ld	r24, X
     a26:	18 97       	sbiw	r26, 0x08	; 8
     a28:	fb 01       	movw	r30, r22
     a2a:	80 87       	std	Z+8, r24	; 0x08
	PATTERNS[frameNumber*16+9] = *(pattern + 9);
     a2c:	19 96       	adiw	r26, 0x09	; 9
     a2e:	8c 91       	ld	r24, X
     a30:	19 97       	sbiw	r26, 0x09	; 9
     a32:	f9 01       	movw	r30, r18
     a34:	81 87       	std	Z+9, r24	; 0x09
	PATTERNS[frameNumber*16+10] = *(pattern + 10);
     a36:	1a 96       	adiw	r26, 0x0a	; 10
     a38:	8c 91       	ld	r24, X
     a3a:	1a 97       	sbiw	r26, 0x0a	; 10
     a3c:	82 87       	std	Z+10, r24	; 0x0a
	PATTERNS[frameNumber*16+11] = *(pattern + 11);
     a3e:	1b 96       	adiw	r26, 0x0b	; 11
     a40:	8c 91       	ld	r24, X
     a42:	1b 97       	sbiw	r26, 0x0b	; 11
     a44:	83 87       	std	Z+11, r24	; 0x0b
	PATTERNS[frameNumber*16+12] = *(pattern + 12);
     a46:	1c 96       	adiw	r26, 0x0c	; 12
     a48:	8c 91       	ld	r24, X
     a4a:	1c 97       	sbiw	r26, 0x0c	; 12
     a4c:	84 87       	std	Z+12, r24	; 0x0c
	PATTERNS[frameNumber*16+13] = *(pattern + 13);
     a4e:	1d 96       	adiw	r26, 0x0d	; 13
     a50:	8c 91       	ld	r24, X
     a52:	1d 97       	sbiw	r26, 0x0d	; 13
     a54:	85 87       	std	Z+13, r24	; 0x0d
	PATTERNS[frameNumber*16+14] = *(pattern + 14);
     a56:	1e 96       	adiw	r26, 0x0e	; 14
     a58:	8c 91       	ld	r24, X
     a5a:	1e 97       	sbiw	r26, 0x0e	; 14
     a5c:	86 87       	std	Z+14, r24	; 0x0e
	PATTERNS[frameNumber*16+15] = *(pattern + 16);
     a5e:	50 96       	adiw	r26, 0x10	; 16
     a60:	8c 91       	ld	r24, X
     a62:	87 87       	std	Z+15, r24	; 0x0f
}
     a64:	08 95       	ret

00000a66 <StorePattern24>:

void StorePattern24(uint16_t frameNumber, unsigned char *pattern)
{	
     a66:	db 01       	movw	r26, r22
	PATTERNS[frameNumber*24] = *(pattern);
     a68:	9c 01       	movw	r18, r24
     a6a:	22 0f       	add	r18, r18
     a6c:	33 1f       	adc	r19, r19
     a6e:	28 0f       	add	r18, r24
     a70:	39 1f       	adc	r19, r25
     a72:	c9 01       	movw	r24, r18
     a74:	63 e0       	ldi	r22, 0x03	; 3
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	6a 95       	dec	r22
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <StorePattern24+0x10>
     a7e:	66 e8       	ldi	r22, 0x86	; 134
     a80:	71 e0       	ldi	r23, 0x01	; 1
     a82:	86 0f       	add	r24, r22
     a84:	97 1f       	adc	r25, r23
     a86:	4c 91       	ld	r20, X
     a88:	fc 01       	movw	r30, r24
     a8a:	40 83       	st	Z, r20
	PATTERNS[frameNumber*24+1] = *(pattern + 1);
     a8c:	11 96       	adiw	r26, 0x01	; 1
     a8e:	4c 91       	ld	r20, X
     a90:	11 97       	sbiw	r26, 0x01	; 1
     a92:	41 83       	std	Z+1, r20	; 0x01
	PATTERNS[frameNumber*24+2] = *(pattern + 2);
     a94:	fc 01       	movw	r30, r24
     a96:	12 96       	adiw	r26, 0x02	; 2
     a98:	4c 91       	ld	r20, X
     a9a:	12 97       	sbiw	r26, 0x02	; 2
     a9c:	42 83       	std	Z+2, r20	; 0x02
	PATTERNS[frameNumber*24+3] = *(pattern + 3);
     a9e:	13 96       	adiw	r26, 0x03	; 3
     aa0:	4c 91       	ld	r20, X
     aa2:	13 97       	sbiw	r26, 0x03	; 3
     aa4:	43 83       	std	Z+3, r20	; 0x03
	PATTERNS[frameNumber*24+4] = *(pattern + 4);
     aa6:	fc 01       	movw	r30, r24
     aa8:	14 96       	adiw	r26, 0x04	; 4
     aaa:	4c 91       	ld	r20, X
     aac:	14 97       	sbiw	r26, 0x04	; 4
     aae:	44 83       	std	Z+4, r20	; 0x04
	PATTERNS[frameNumber*24+5] = *(pattern + 5);
     ab0:	15 96       	adiw	r26, 0x05	; 5
     ab2:	4c 91       	ld	r20, X
     ab4:	15 97       	sbiw	r26, 0x05	; 5
     ab6:	45 83       	std	Z+5, r20	; 0x05
	PATTERNS[frameNumber*24+6] = *(pattern + 6);
     ab8:	16 96       	adiw	r26, 0x06	; 6
     aba:	4c 91       	ld	r20, X
     abc:	16 97       	sbiw	r26, 0x06	; 6
     abe:	46 83       	std	Z+6, r20	; 0x06
	PATTERNS[frameNumber*24+7] = *(pattern + 7);
     ac0:	17 96       	adiw	r26, 0x07	; 7
     ac2:	4c 91       	ld	r20, X
     ac4:	17 97       	sbiw	r26, 0x07	; 7
     ac6:	47 83       	std	Z+7, r20	; 0x07
	PATTERNS[frameNumber*24+8] = *(pattern + 8);
     ac8:	2f 5f       	subi	r18, 0xFF	; 255
     aca:	3f 4f       	sbci	r19, 0xFF	; 255
     acc:	e3 e0       	ldi	r30, 0x03	; 3
     ace:	22 0f       	add	r18, r18
     ad0:	33 1f       	adc	r19, r19
     ad2:	ea 95       	dec	r30
     ad4:	e1 f7       	brne	.-8      	; 0xace <StorePattern24+0x68>
     ad6:	62 0f       	add	r22, r18
     ad8:	73 1f       	adc	r23, r19
     ada:	18 96       	adiw	r26, 0x08	; 8
     adc:	2c 91       	ld	r18, X
     ade:	18 97       	sbiw	r26, 0x08	; 8
     ae0:	fb 01       	movw	r30, r22
     ae2:	20 83       	st	Z, r18
	PATTERNS[frameNumber*24+9] = *(pattern + 9);
     ae4:	19 96       	adiw	r26, 0x09	; 9
     ae6:	2c 91       	ld	r18, X
     ae8:	19 97       	sbiw	r26, 0x09	; 9
     aea:	fc 01       	movw	r30, r24
     aec:	21 87       	std	Z+9, r18	; 0x09
	PATTERNS[frameNumber*24+10] = *(pattern + 10);
     aee:	1a 96       	adiw	r26, 0x0a	; 10
     af0:	2c 91       	ld	r18, X
     af2:	1a 97       	sbiw	r26, 0x0a	; 10
     af4:	22 87       	std	Z+10, r18	; 0x0a
	PATTERNS[frameNumber*24+11] = *(pattern + 11);
     af6:	1b 96       	adiw	r26, 0x0b	; 11
     af8:	2c 91       	ld	r18, X
     afa:	1b 97       	sbiw	r26, 0x0b	; 11
     afc:	23 87       	std	Z+11, r18	; 0x0b
	PATTERNS[frameNumber*24+12] = *(pattern + 12);
     afe:	1c 96       	adiw	r26, 0x0c	; 12
     b00:	2c 91       	ld	r18, X
     b02:	1c 97       	sbiw	r26, 0x0c	; 12
     b04:	24 87       	std	Z+12, r18	; 0x0c
	PATTERNS[frameNumber*24+13] = *(pattern + 13);
     b06:	1d 96       	adiw	r26, 0x0d	; 13
     b08:	2c 91       	ld	r18, X
     b0a:	1d 97       	sbiw	r26, 0x0d	; 13
     b0c:	25 87       	std	Z+13, r18	; 0x0d
	PATTERNS[frameNumber*24+14] = *(pattern + 14);
     b0e:	1e 96       	adiw	r26, 0x0e	; 14
     b10:	2c 91       	ld	r18, X
     b12:	1e 97       	sbiw	r26, 0x0e	; 14
     b14:	26 87       	std	Z+14, r18	; 0x0e
	PATTERNS[frameNumber*24+15] = *(pattern + 15);
     b16:	1f 96       	adiw	r26, 0x0f	; 15
     b18:	2c 91       	ld	r18, X
     b1a:	1f 97       	sbiw	r26, 0x0f	; 15
     b1c:	27 87       	std	Z+15, r18	; 0x0f
	PATTERNS[frameNumber*24+16] = *(pattern + 16);
     b1e:	50 96       	adiw	r26, 0x10	; 16
     b20:	2c 91       	ld	r18, X
     b22:	50 97       	sbiw	r26, 0x10	; 16
     b24:	20 8b       	std	Z+16, r18	; 0x10
	PATTERNS[frameNumber*24+17] = *(pattern + 17);
     b26:	51 96       	adiw	r26, 0x11	; 17
     b28:	2c 91       	ld	r18, X
     b2a:	51 97       	sbiw	r26, 0x11	; 17
     b2c:	21 8b       	std	Z+17, r18	; 0x11
	PATTERNS[frameNumber*24+18] = *(pattern + 18);
     b2e:	52 96       	adiw	r26, 0x12	; 18
     b30:	2c 91       	ld	r18, X
     b32:	52 97       	sbiw	r26, 0x12	; 18
     b34:	22 8b       	std	Z+18, r18	; 0x12
	PATTERNS[frameNumber*24+19] = *(pattern + 19);
     b36:	53 96       	adiw	r26, 0x13	; 19
     b38:	2c 91       	ld	r18, X
     b3a:	53 97       	sbiw	r26, 0x13	; 19
     b3c:	23 8b       	std	Z+19, r18	; 0x13
	PATTERNS[frameNumber*24+20] = *(pattern + 20);
     b3e:	54 96       	adiw	r26, 0x14	; 20
     b40:	2c 91       	ld	r18, X
     b42:	54 97       	sbiw	r26, 0x14	; 20
     b44:	24 8b       	std	Z+20, r18	; 0x14
	PATTERNS[frameNumber*24+21] = *(pattern + 21);
     b46:	55 96       	adiw	r26, 0x15	; 21
     b48:	2c 91       	ld	r18, X
     b4a:	55 97       	sbiw	r26, 0x15	; 21
     b4c:	25 8b       	std	Z+21, r18	; 0x15
	PATTERNS[frameNumber*24+22] = *(pattern + 22);
     b4e:	56 96       	adiw	r26, 0x16	; 22
     b50:	2c 91       	ld	r18, X
     b52:	56 97       	sbiw	r26, 0x16	; 22
     b54:	26 8b       	std	Z+22, r18	; 0x16
	PATTERNS[frameNumber*24+23] = *(pattern + 23);
     b56:	57 96       	adiw	r26, 0x17	; 23
     b58:	2c 91       	ld	r18, X
     b5a:	27 8b       	std	Z+23, r18	; 0x17
}
     b5c:	08 95       	ret

00000b5e <StorePattern32>:

void StorePattern32(uint16_t frameNumber, unsigned char *pattern)
{	
     b5e:	db 01       	movw	r26, r22
	PATTERNS[frameNumber*32] = *(pattern + 0);
     b60:	9c 01       	movw	r18, r24
     b62:	65 e0       	ldi	r22, 0x05	; 5
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	6a 95       	dec	r22
     b6a:	e1 f7       	brne	.-8      	; 0xb64 <StorePattern32+0x6>
     b6c:	66 e8       	ldi	r22, 0x86	; 134
     b6e:	71 e0       	ldi	r23, 0x01	; 1
     b70:	26 0f       	add	r18, r22
     b72:	37 1f       	adc	r19, r23
     b74:	4c 91       	ld	r20, X
     b76:	f9 01       	movw	r30, r18
     b78:	40 83       	st	Z, r20
	PATTERNS[frameNumber*32+1] = *(pattern + 1);
     b7a:	11 96       	adiw	r26, 0x01	; 1
     b7c:	4c 91       	ld	r20, X
     b7e:	11 97       	sbiw	r26, 0x01	; 1
     b80:	41 83       	std	Z+1, r20	; 0x01
	PATTERNS[frameNumber*32+2] = *(pattern + 2);
     b82:	f9 01       	movw	r30, r18
     b84:	12 96       	adiw	r26, 0x02	; 2
     b86:	4c 91       	ld	r20, X
     b88:	12 97       	sbiw	r26, 0x02	; 2
     b8a:	42 83       	std	Z+2, r20	; 0x02
	PATTERNS[frameNumber*32+3] = *(pattern + 3);
     b8c:	13 96       	adiw	r26, 0x03	; 3
     b8e:	4c 91       	ld	r20, X
     b90:	13 97       	sbiw	r26, 0x03	; 3
     b92:	43 83       	std	Z+3, r20	; 0x03
	PATTERNS[frameNumber*32+4] = *(pattern + 4);
     b94:	f9 01       	movw	r30, r18
     b96:	14 96       	adiw	r26, 0x04	; 4
     b98:	4c 91       	ld	r20, X
     b9a:	14 97       	sbiw	r26, 0x04	; 4
     b9c:	44 83       	std	Z+4, r20	; 0x04
	PATTERNS[frameNumber*32+5] = *(pattern + 5);
     b9e:	15 96       	adiw	r26, 0x05	; 5
     ba0:	4c 91       	ld	r20, X
     ba2:	15 97       	sbiw	r26, 0x05	; 5
     ba4:	45 83       	std	Z+5, r20	; 0x05
	PATTERNS[frameNumber*32+6] = *(pattern + 6);
     ba6:	16 96       	adiw	r26, 0x06	; 6
     ba8:	4c 91       	ld	r20, X
     baa:	16 97       	sbiw	r26, 0x06	; 6
     bac:	46 83       	std	Z+6, r20	; 0x06
	PATTERNS[frameNumber*32+7] = *(pattern + 7);
     bae:	17 96       	adiw	r26, 0x07	; 7
     bb0:	4c 91       	ld	r20, X
     bb2:	17 97       	sbiw	r26, 0x07	; 7
     bb4:	47 83       	std	Z+7, r20	; 0x07
	PATTERNS[frameNumber*32+8] = *(pattern + 8);
     bb6:	f5 e0       	ldi	r31, 0x05	; 5
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	fa 95       	dec	r31
     bbe:	e1 f7       	brne	.-8      	; 0xbb8 <StorePattern32+0x5a>
     bc0:	f9 01       	movw	r30, r18
     bc2:	18 96       	adiw	r26, 0x08	; 8
     bc4:	4c 91       	ld	r20, X
     bc6:	18 97       	sbiw	r26, 0x08	; 8
     bc8:	40 87       	std	Z+8, r20	; 0x08
	PATTERNS[frameNumber*32+9] = *(pattern + 9);
     bca:	19 96       	adiw	r26, 0x09	; 9
     bcc:	4c 91       	ld	r20, X
     bce:	19 97       	sbiw	r26, 0x09	; 9
     bd0:	41 87       	std	Z+9, r20	; 0x09
	PATTERNS[frameNumber*32+10] = *(pattern + 10);
     bd2:	1a 96       	adiw	r26, 0x0a	; 10
     bd4:	4c 91       	ld	r20, X
     bd6:	1a 97       	sbiw	r26, 0x0a	; 10
     bd8:	42 87       	std	Z+10, r20	; 0x0a
	PATTERNS[frameNumber*32+11] = *(pattern + 11);
     bda:	1b 96       	adiw	r26, 0x0b	; 11
     bdc:	4c 91       	ld	r20, X
     bde:	1b 97       	sbiw	r26, 0x0b	; 11
     be0:	43 87       	std	Z+11, r20	; 0x0b
	PATTERNS[frameNumber*32+12] = *(pattern + 12);
     be2:	1c 96       	adiw	r26, 0x0c	; 12
     be4:	4c 91       	ld	r20, X
     be6:	1c 97       	sbiw	r26, 0x0c	; 12
     be8:	44 87       	std	Z+12, r20	; 0x0c
	PATTERNS[frameNumber*32+13] = *(pattern + 13);
     bea:	1d 96       	adiw	r26, 0x0d	; 13
     bec:	4c 91       	ld	r20, X
     bee:	1d 97       	sbiw	r26, 0x0d	; 13
     bf0:	45 87       	std	Z+13, r20	; 0x0d
	PATTERNS[frameNumber*32+14] = *(pattern + 14);
     bf2:	1e 96       	adiw	r26, 0x0e	; 14
     bf4:	4c 91       	ld	r20, X
     bf6:	1e 97       	sbiw	r26, 0x0e	; 14
     bf8:	46 87       	std	Z+14, r20	; 0x0e
	PATTERNS[frameNumber*32+15] = *(pattern + 15);
     bfa:	1f 96       	adiw	r26, 0x0f	; 15
     bfc:	4c 91       	ld	r20, X
     bfe:	1f 97       	sbiw	r26, 0x0f	; 15
     c00:	47 87       	std	Z+15, r20	; 0x0f
	PATTERNS[frameNumber*32+16] = *(pattern + 16);
     c02:	68 0f       	add	r22, r24
     c04:	79 1f       	adc	r23, r25
     c06:	50 96       	adiw	r26, 0x10	; 16
     c08:	8c 91       	ld	r24, X
     c0a:	50 97       	sbiw	r26, 0x10	; 16
     c0c:	fb 01       	movw	r30, r22
     c0e:	80 8b       	std	Z+16, r24	; 0x10
	PATTERNS[frameNumber*32+17] = *(pattern + 17);
     c10:	51 96       	adiw	r26, 0x11	; 17
     c12:	8c 91       	ld	r24, X
     c14:	51 97       	sbiw	r26, 0x11	; 17
     c16:	f9 01       	movw	r30, r18
     c18:	81 8b       	std	Z+17, r24	; 0x11
	PATTERNS[frameNumber*32+18] = *(pattern + 18);
     c1a:	52 96       	adiw	r26, 0x12	; 18
     c1c:	8c 91       	ld	r24, X
     c1e:	52 97       	sbiw	r26, 0x12	; 18
     c20:	82 8b       	std	Z+18, r24	; 0x12
	PATTERNS[frameNumber*32+19] = *(pattern + 19);
     c22:	53 96       	adiw	r26, 0x13	; 19
     c24:	8c 91       	ld	r24, X
     c26:	53 97       	sbiw	r26, 0x13	; 19
     c28:	83 8b       	std	Z+19, r24	; 0x13
	PATTERNS[frameNumber*32+20] = *(pattern + 20);
     c2a:	54 96       	adiw	r26, 0x14	; 20
     c2c:	8c 91       	ld	r24, X
     c2e:	54 97       	sbiw	r26, 0x14	; 20
     c30:	84 8b       	std	Z+20, r24	; 0x14
	PATTERNS[frameNumber*32+21] = *(pattern + 21);
     c32:	55 96       	adiw	r26, 0x15	; 21
     c34:	8c 91       	ld	r24, X
     c36:	55 97       	sbiw	r26, 0x15	; 21
     c38:	85 8b       	std	Z+21, r24	; 0x15
	PATTERNS[frameNumber*32+22] = *(pattern + 22);
     c3a:	56 96       	adiw	r26, 0x16	; 22
     c3c:	8c 91       	ld	r24, X
     c3e:	56 97       	sbiw	r26, 0x16	; 22
     c40:	86 8b       	std	Z+22, r24	; 0x16
	PATTERNS[frameNumber*32+23] = *(pattern + 23);
     c42:	57 96       	adiw	r26, 0x17	; 23
     c44:	8c 91       	ld	r24, X
     c46:	57 97       	sbiw	r26, 0x17	; 23
     c48:	87 8b       	std	Z+23, r24	; 0x17
	PATTERNS[frameNumber*32+24] = *(pattern + 24);
     c4a:	58 96       	adiw	r26, 0x18	; 24
     c4c:	8c 91       	ld	r24, X
     c4e:	58 97       	sbiw	r26, 0x18	; 24
     c50:	80 8f       	std	Z+24, r24	; 0x18
	PATTERNS[frameNumber*32+25] = *(pattern + 25);
     c52:	59 96       	adiw	r26, 0x19	; 25
     c54:	8c 91       	ld	r24, X
     c56:	59 97       	sbiw	r26, 0x19	; 25
     c58:	81 8f       	std	Z+25, r24	; 0x19
	PATTERNS[frameNumber*32+26] = *(pattern + 26);
     c5a:	5a 96       	adiw	r26, 0x1a	; 26
     c5c:	8c 91       	ld	r24, X
     c5e:	5a 97       	sbiw	r26, 0x1a	; 26
     c60:	82 8f       	std	Z+26, r24	; 0x1a
	PATTERNS[frameNumber*32+27] = *(pattern + 27);
     c62:	5b 96       	adiw	r26, 0x1b	; 27
     c64:	8c 91       	ld	r24, X
     c66:	5b 97       	sbiw	r26, 0x1b	; 27
     c68:	83 8f       	std	Z+27, r24	; 0x1b
	PATTERNS[frameNumber*32+28] = *(pattern + 28);
     c6a:	5c 96       	adiw	r26, 0x1c	; 28
     c6c:	8c 91       	ld	r24, X
     c6e:	5c 97       	sbiw	r26, 0x1c	; 28
     c70:	84 8f       	std	Z+28, r24	; 0x1c
	PATTERNS[frameNumber*32+29] = *(pattern + 29);
     c72:	5d 96       	adiw	r26, 0x1d	; 29
     c74:	8c 91       	ld	r24, X
     c76:	5d 97       	sbiw	r26, 0x1d	; 29
     c78:	85 8f       	std	Z+29, r24	; 0x1d
	PATTERNS[frameNumber*32+30] = *(pattern + 30);
     c7a:	5e 96       	adiw	r26, 0x1e	; 30
     c7c:	8c 91       	ld	r24, X
     c7e:	5e 97       	sbiw	r26, 0x1e	; 30
     c80:	86 8f       	std	Z+30, r24	; 0x1e
	PATTERNS[frameNumber*32+31] = *(pattern + 31);
     c82:	5f 96       	adiw	r26, 0x1f	; 31
     c84:	8c 91       	ld	r24, X
     c86:	87 8f       	std	Z+31, r24	; 0x1f
}
     c88:	08 95       	ret

00000c8a <delay>:
// e.g. with 8Mhz and 5 cycles per loop, the resolution is 0.625 us 
void delay(unsigned short us) 
{
	unsigned short delay_loops;
	register unsigned short i;
	delay_loops = (us+3)/5*CYCLES_PER_US; // +3 for rounding up (rough) 
     c8a:	03 96       	adiw	r24, 0x03	; 3
     c8c:	65 e0       	ldi	r22, 0x05	; 5
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	0e 94 9e 0c 	call	0x193c	; 0x193c <__udivmodhi4>
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	24 e1       	ldi	r18, 0x14	; 20
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__mulsi3>
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <delay+0x26>
	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) { asm volatile ("nop"); };
     caa:	00 00       	nop
     cac:	2f 5f       	subi	r18, 0xFF	; 255
     cae:	3f 4f       	sbci	r19, 0xFF	; 255
     cb0:	26 17       	cp	r18, r22
     cb2:	37 07       	cpc	r19, r23
     cb4:	d0 f3       	brcs	.-12     	; 0xcaa <delay+0x20>
} 
     cb6:	08 95       	ret

00000cb8 <long_delay>:


//for longer delays, use this function - gives delay
//time in ms. Can delay up to about 1 minute.
void long_delay(unsigned short ms) 
{
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	8c 01       	movw	r16, r24
     cc2:	c0 e0       	ldi	r28, 0x00	; 0
     cc4:	d0 e0       	ldi	r29, 0x00	; 0
     cc6:	05 c0       	rjmp	.+10     	; 0xcd2 <long_delay+0x1a>
	register unsigned short i;
	for (i=0; i < ms; i++)
	{
	delay(1000);	
     cc8:	88 ee       	ldi	r24, 0xE8	; 232
     cca:	93 e0       	ldi	r25, 0x03	; 3
     ccc:	0e 94 45 06 	call	0xc8a	; 0xc8a <delay>
//for longer delays, use this function - gives delay
//time in ms. Can delay up to about 1 minute.
void long_delay(unsigned short ms) 
{
	register unsigned short i;
	for (i=0; i < ms; i++)
     cd0:	21 96       	adiw	r28, 0x01	; 1
     cd2:	c0 17       	cp	r28, r16
     cd4:	d1 07       	cpc	r29, r17
     cd6:	c0 f3       	brcs	.-16     	; 0xcc8 <long_delay+0x10>
	{
	delay(1000);	
	};
} 
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	08 95       	ret

00000ce2 <SystemReset>:


// resets the chip
void SystemReset()
{
asm volatile ("cli"); // turn off interrupts
     ce2:	f8 94       	cli
//WDTCR = _BV(WDE) | _BV(WDP2); // init WatchDog
//WDTCSR = _BV(WDE) | _BV(WDP2); // init WatchDog
WDTCSR |= (1<<WDCE) | (1<<WDE);
     ce4:	80 91 60 00 	lds	r24, 0x0060
     ce8:	88 61       	ori	r24, 0x18	; 24
     cea:	80 93 60 00 	sts	0x0060, r24
WDTCSR = (1<<WDE) | (1<<WDP0); //32 ms to timeout
     cee:	89 e0       	ldi	r24, 0x09	; 9
     cf0:	80 93 60 00 	sts	0x0060, r24

while (1) asm volatile ("nop"); // wait for reset
     cf4:	00 00       	nop
     cf6:	fe cf       	rjmp	.-4      	; 0xcf4 <SystemReset+0x12>

00000cf8 <DisplayBusNum>:
}


void DisplayBusNum(uint8_t busNum)
//display the current bus number
{
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	18 2f       	mov	r17, r24
	
	dig1 = 0;
	dig2 = busNum;
		
	for (i = 0; i < 4; i++)	//first character
	{ DisplayChar( (eeprom_rb((uint8_t*)(&NUMS[dig1][i]))),i);}	
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 ef 0c 	call	0x19de	; 0x19de <__eerd_byte_m168>
} 


void DisplayChar(unsigned char c,unsigned char col)
{
	DisplayBuffer[col]=c;
     d0a:	80 93 7e 01 	sts	0x017E, r24
	
	dig1 = 0;
	dig2 = busNum;
		
	for (i = 0; i < 4; i++)	//first character
	{ DisplayChar( (eeprom_rb((uint8_t*)(&NUMS[dig1][i]))),i);}	
     d0e:	82 e0       	ldi	r24, 0x02	; 2
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 ef 0c 	call	0x19de	; 0x19de <__eerd_byte_m168>
} 


void DisplayChar(unsigned char c,unsigned char col)
{
	DisplayBuffer[col]=c;
     d16:	80 93 7f 01 	sts	0x017F, r24
	
	dig1 = 0;
	dig2 = busNum;
		
	for (i = 0; i < 4; i++)	//first character
	{ DisplayChar( (eeprom_rb((uint8_t*)(&NUMS[dig1][i]))),i);}	
     d1a:	83 e0       	ldi	r24, 0x03	; 3
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 ef 0c 	call	0x19de	; 0x19de <__eerd_byte_m168>
} 


void DisplayChar(unsigned char c,unsigned char col)
{
	DisplayBuffer[col]=c;
     d22:	80 93 80 01 	sts	0x0180, r24
	
	dig1 = 0;
	dig2 = busNum;
		
	for (i = 0; i < 4; i++)	//first character
	{ DisplayChar( (eeprom_rb((uint8_t*)(&NUMS[dig1][i]))),i);}	
     d26:	84 e0       	ldi	r24, 0x04	; 4
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 ef 0c 	call	0x19de	; 0x19de <__eerd_byte_m168>
} 


void DisplayChar(unsigned char c,unsigned char col)
{
	DisplayBuffer[col]=c;
     d2e:	80 93 81 01 	sts	0x0181, r24
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	81 1b       	sub	r24, r17
     d38:	91 09       	sbc	r25, r1
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	cc 27       	eor	r28, r28
     d44:	dd 27       	eor	r29, r29
     d46:	c8 1b       	sub	r28, r24
     d48:	d9 0b       	sbc	r29, r25
     d4a:	cb 5f       	subi	r28, 0xFB	; 251
     d4c:	df 4f       	sbci	r29, 0xFF	; 255
     d4e:	02 e8       	ldi	r16, 0x82	; 130
     d50:	11 e0       	ldi	r17, 0x01	; 1
	dig2 = busNum;
		
	for (i = 0; i < 4; i++)	//first character
	{ DisplayChar( (eeprom_rb((uint8_t*)(&NUMS[dig1][i]))),i);}	
	for (i = 4; i < 8; i++) //second character
	{ DisplayChar( (eeprom_rb((uint8_t*)(&NUMS[dig2][i-4]))),i);}	
     d52:	ce 01       	movw	r24, r28
     d54:	0e 94 ef 0c 	call	0x19de	; 0x19de <__eerd_byte_m168>
} 


void DisplayChar(unsigned char c,unsigned char col)
{
	DisplayBuffer[col]=c;
     d58:	f8 01       	movw	r30, r16
     d5a:	81 93       	st	Z+, r24
     d5c:	8f 01       	movw	r16, r30
     d5e:	21 96       	adiw	r28, 0x01	; 1
	dig1 = 0;
	dig2 = busNum;
		
	for (i = 0; i < 4; i++)	//first character
	{ DisplayChar( (eeprom_rb((uint8_t*)(&NUMS[dig1][i]))),i);}	
	for (i = 4; i < 8; i++) //second character
     d60:	f1 e0       	ldi	r31, 0x01	; 1
     d62:	06 38       	cpi	r16, 0x86	; 134
     d64:	1f 07       	cpc	r17, r31
     d66:	a9 f7       	brne	.-22     	; 0xd52 <DisplayBusNum+0x5a>
	{ DisplayChar( (eeprom_rb((uint8_t*)(&NUMS[dig2][i-4]))),i);}	
}
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	08 95       	ret

00000d72 <DisplayNum>:
}

void DisplayNum()
//display the current panel ID, for numbers upto 127
//this will in fact coorectly enumerate beyond 127 to 199
{
     d72:	cf 92       	push	r12
     d74:	df 92       	push	r13
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
	int i, dig1, dig2, One_mask;
	//create a mask to append a row on top if the ID > 99
	if (deviceAddr > 99)	One_mask = 0x01;
     d82:	e0 90 a8 04 	lds	r14, 0x04A8
	else		One_mask = 0x00;	
	
	dig1 = (deviceAddr%100)/10;
     d86:	8e 2d       	mov	r24, r14
     d88:	64 e6       	ldi	r22, 0x64	; 100
     d8a:	0e 94 92 0c 	call	0x1924	; 0x1924 <__udivmodqi4>
     d8e:	29 2f       	mov	r18, r25
	dig2 = (deviceAddr%100)%10;
     d90:	89 2f       	mov	r24, r25
     d92:	6a e0       	ldi	r22, 0x0A	; 10
     d94:	0e 94 92 0c 	call	0x1924	; 0x1924 <__udivmodqi4>
     d98:	c9 2e       	mov	r12, r25
     d9a:	dd 24       	eor	r13, r13
}

void DisplayNum()
//display the current panel ID, for numbers upto 127
//this will in fact coorectly enumerate beyond 127 to 199
{
     d9c:	82 2f       	mov	r24, r18
     d9e:	0e 94 92 0c 	call	0x1924	; 0x1924 <__udivmodqi4>
     da2:	c8 2f       	mov	r28, r24
     da4:	d0 e0       	ldi	r29, 0x00	; 0
     da6:	cc 0f       	add	r28, r28
     da8:	dd 1f       	adc	r29, r29
     daa:	cc 0f       	add	r28, r28
     dac:	dd 1f       	adc	r29, r29
     dae:	cf 5f       	subi	r28, 0xFF	; 255
     db0:	df 4f       	sbci	r29, 0xFF	; 255
     db2:	0e e7       	ldi	r16, 0x7E	; 126
     db4:	11 e0       	ldi	r17, 0x01	; 1
	
	dig1 = (deviceAddr%100)/10;
	dig2 = (deviceAddr%100)%10;
		
	for (i = 0; i < 4; i++)	//first character
	{ DisplayChar( (eeprom_rb((uint8_t*)(&NUMS[dig1][i])))|One_mask ,i);    }	
     db6:	ce 01       	movw	r24, r28
     db8:	0e 94 ef 0c 	call	0x19de	; 0x19de <__eerd_byte_m168>
     dbc:	ff 24       	eor	r15, r15
     dbe:	93 e6       	ldi	r25, 0x63	; 99
     dc0:	9e 15       	cp	r25, r14
     dc2:	10 f4       	brcc	.+4      	; 0xdc8 <DisplayNum+0x56>
     dc4:	ff 24       	eor	r15, r15
     dc6:	f3 94       	inc	r15
} 


void DisplayChar(unsigned char c,unsigned char col)
{
	DisplayBuffer[col]=c;
     dc8:	8f 29       	or	r24, r15
     dca:	f8 01       	movw	r30, r16
     dcc:	81 93       	st	Z+, r24
     dce:	8f 01       	movw	r16, r30
     dd0:	21 96       	adiw	r28, 0x01	; 1
	else		One_mask = 0x00;	
	
	dig1 = (deviceAddr%100)/10;
	dig2 = (deviceAddr%100)%10;
		
	for (i = 0; i < 4; i++)	//first character
     dd2:	f1 e0       	ldi	r31, 0x01	; 1
     dd4:	02 38       	cpi	r16, 0x82	; 130
     dd6:	1f 07       	cpc	r17, r31
     dd8:	71 f7       	brne	.-36     	; 0xdb6 <DisplayNum+0x44>
     dda:	e6 01       	movw	r28, r12
     ddc:	cc 0f       	add	r28, r28
     dde:	dd 1f       	adc	r29, r29
     de0:	cc 0f       	add	r28, r28
     de2:	dd 1f       	adc	r29, r29
     de4:	cf 5f       	subi	r28, 0xFF	; 255
     de6:	df 4f       	sbci	r29, 0xFF	; 255
	{ DisplayChar( (eeprom_rb((uint8_t*)(&NUMS[dig1][i])))|One_mask ,i);    }	
	for (i = 4; i < 8; i++) //second character
	{ DisplayChar( (eeprom_rb((uint8_t*)(&NUMS[dig2][i-4])))|One_mask ,i); 	}	
     de8:	ce 01       	movw	r24, r28
     dea:	0e 94 ef 0c 	call	0x19de	; 0x19de <__eerd_byte_m168>
} 


void DisplayChar(unsigned char c,unsigned char col)
{
	DisplayBuffer[col]=c;
     dee:	8f 29       	or	r24, r15
     df0:	f8 01       	movw	r30, r16
     df2:	81 93       	st	Z+, r24
     df4:	8f 01       	movw	r16, r30
     df6:	21 96       	adiw	r28, 0x01	; 1
	dig1 = (deviceAddr%100)/10;
	dig2 = (deviceAddr%100)%10;
		
	for (i = 0; i < 4; i++)	//first character
	{ DisplayChar( (eeprom_rb((uint8_t*)(&NUMS[dig1][i])))|One_mask ,i);    }	
	for (i = 4; i < 8; i++) //second character
     df8:	f1 e0       	ldi	r31, 0x01	; 1
     dfa:	06 38       	cpi	r16, 0x86	; 134
     dfc:	1f 07       	cpc	r17, r31
     dfe:	a1 f7       	brne	.-24     	; 0xde8 <DisplayNum+0x76>
	{ DisplayChar( (eeprom_rb((uint8_t*)(&NUMS[dig2][i-4])))|One_mask ,i); 	}	
}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	df 90       	pop	r13
     e0e:	cf 90       	pop	r12
     e10:	08 95       	ret

00000e12 <LoadPatternEEP>:
	GS_Buffer[3][6] = (*(pattern + 30));
	GS_Buffer[3][7] = (*(pattern + 31));
	}

void LoadPatternEEP(unsigned char *pattern)
{
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	8c 01       	movw	r16, r24
	DisplayBuffer[0] = eeprom_rb((uint8_t*)(pattern + 0));
     e18:	0e 94 ef 0c 	call	0x19de	; 0x19de <__eerd_byte_m168>
     e1c:	80 93 7e 01 	sts	0x017E, r24
	DisplayBuffer[1] = eeprom_rb((uint8_t*)(pattern + 1));
     e20:	c8 01       	movw	r24, r16
     e22:	01 96       	adiw	r24, 0x01	; 1
     e24:	0e 94 ef 0c 	call	0x19de	; 0x19de <__eerd_byte_m168>
     e28:	80 93 7f 01 	sts	0x017F, r24
	DisplayBuffer[2] = eeprom_rb((uint8_t*)(pattern + 2));
     e2c:	c8 01       	movw	r24, r16
     e2e:	02 96       	adiw	r24, 0x02	; 2
     e30:	0e 94 ef 0c 	call	0x19de	; 0x19de <__eerd_byte_m168>
     e34:	80 93 80 01 	sts	0x0180, r24
	DisplayBuffer[3] = eeprom_rb((uint8_t*)(pattern + 3));
     e38:	c8 01       	movw	r24, r16
     e3a:	03 96       	adiw	r24, 0x03	; 3
     e3c:	0e 94 ef 0c 	call	0x19de	; 0x19de <__eerd_byte_m168>
     e40:	80 93 81 01 	sts	0x0181, r24
	DisplayBuffer[4] = eeprom_rb((uint8_t*)(pattern + 4));
     e44:	c8 01       	movw	r24, r16
     e46:	04 96       	adiw	r24, 0x04	; 4
     e48:	0e 94 ef 0c 	call	0x19de	; 0x19de <__eerd_byte_m168>
     e4c:	80 93 82 01 	sts	0x0182, r24
	DisplayBuffer[5] = eeprom_rb((uint8_t*)(pattern + 5));
     e50:	c8 01       	movw	r24, r16
     e52:	05 96       	adiw	r24, 0x05	; 5
     e54:	0e 94 ef 0c 	call	0x19de	; 0x19de <__eerd_byte_m168>
     e58:	80 93 83 01 	sts	0x0183, r24
	DisplayBuffer[6] = eeprom_rb((uint8_t*)(pattern + 6));
     e5c:	c8 01       	movw	r24, r16
     e5e:	06 96       	adiw	r24, 0x06	; 6
     e60:	0e 94 ef 0c 	call	0x19de	; 0x19de <__eerd_byte_m168>
     e64:	80 93 84 01 	sts	0x0184, r24
	DisplayBuffer[7] = eeprom_rb((uint8_t*)(pattern + 7));
     e68:	c8 01       	movw	r24, r16
     e6a:	07 96       	adiw	r24, 0x07	; 7
     e6c:	0e 94 ef 0c 	call	0x19de	; 0x19de <__eerd_byte_m168>
     e70:	80 93 85 01 	sts	0x0185, r24
}
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	08 95       	ret

00000e7a <i2cSlaveReceiveService>:
	return 0;
}


void i2cSlaveReceiveService(u08 receiveDataLength, u08* receiveData)
{	
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	00 d0       	rcall	.+0      	; 0xe86 <i2cSlaveReceiveService+0xc>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	f8 2e       	mov	r15, r24
     e8c:	8b 01       	movw	r16, r22
	u08 EEpat_num;
	uint16_t frame_num;
		
	//use the length of the received packet to determine action
	switch(receiveDataLength) {
     e8e:	88 e0       	ldi	r24, 0x08	; 8
     e90:	f8 16       	cp	r15, r24
     e92:	09 f4       	brne	.+2      	; 0xe96 <i2cSlaveReceiveService+0x1c>
     e94:	63 c1       	rjmp	.+710    	; 0x115c <i2cSlaveReceiveService+0x2e2>
     e96:	8f 15       	cp	r24, r15
     e98:	e0 f0       	brcs	.+56     	; 0xed2 <i2cSlaveReceiveService+0x58>
     e9a:	a4 e0       	ldi	r26, 0x04	; 4
     e9c:	fa 16       	cp	r15, r26
     e9e:	09 f4       	brne	.+2      	; 0xea2 <i2cSlaveReceiveService+0x28>
     ea0:	26 c1       	rjmp	.+588    	; 0x10ee <i2cSlaveReceiveService+0x274>
     ea2:	af 15       	cp	r26, r15
     ea4:	58 f0       	brcs	.+22     	; 0xebc <i2cSlaveReceiveService+0x42>
     ea6:	b2 e0       	ldi	r27, 0x02	; 2
     ea8:	fb 16       	cp	r15, r27
     eaa:	a9 f1       	breq	.+106    	; 0xf16 <i2cSlaveReceiveService+0x9c>
     eac:	bf 15       	cp	r27, r15
     eae:	08 f4       	brcc	.+2      	; 0xeb2 <i2cSlaveReceiveService+0x38>
     eb0:	1a c1       	rjmp	.+564    	; 0x10e6 <i2cSlaveReceiveService+0x26c>
     eb2:	e1 e0       	ldi	r30, 0x01	; 1
     eb4:	fe 16       	cp	r15, r30
     eb6:	09 f0       	breq	.+2      	; 0xeba <i2cSlaveReceiveService+0x40>
     eb8:	9c c1       	rjmp	.+824    	; 0x11f2 <i2cSlaveReceiveService+0x378>
     eba:	2b c0       	rjmp	.+86     	; 0xf12 <i2cSlaveReceiveService+0x98>
     ebc:	f6 e0       	ldi	r31, 0x06	; 6
     ebe:	ff 16       	cp	r15, r31
     ec0:	09 f4       	brne	.+2      	; 0xec4 <i2cSlaveReceiveService+0x4a>
     ec2:	2e c1       	rjmp	.+604    	; 0x1120 <i2cSlaveReceiveService+0x2a6>
     ec4:	fe 01       	movw	r30, r28
     ec6:	31 96       	adiw	r30, 0x01	; 1
     ec8:	86 e0       	ldi	r24, 0x06	; 6
     eca:	8f 15       	cp	r24, r15
     ecc:	08 f4       	brcc	.+2      	; 0xed0 <i2cSlaveReceiveService+0x56>
     ece:	33 c1       	rjmp	.+614    	; 0x1136 <i2cSlaveReceiveService+0x2bc>
     ed0:	14 c1       	rjmp	.+552    	; 0x10fa <i2cSlaveReceiveService+0x280>
     ed2:	a8 e1       	ldi	r26, 0x18	; 24
     ed4:	fa 16       	cp	r15, r26
     ed6:	09 f4       	brne	.+2      	; 0xeda <i2cSlaveReceiveService+0x60>
     ed8:	63 c1       	rjmp	.+710    	; 0x11a0 <i2cSlaveReceiveService+0x326>
     eda:	af 15       	cp	r26, r15
     edc:	68 f0       	brcs	.+26     	; 0xef8 <i2cSlaveReceiveService+0x7e>
     ede:	b0 e1       	ldi	r27, 0x10	; 16
     ee0:	fb 16       	cp	r15, r27
     ee2:	09 f4       	brne	.+2      	; 0xee6 <i2cSlaveReceiveService+0x6c>
     ee4:	4a c1       	rjmp	.+660    	; 0x117a <i2cSlaveReceiveService+0x300>
     ee6:	e2 e1       	ldi	r30, 0x12	; 18
     ee8:	fe 16       	cp	r15, r30
     eea:	09 f4       	brne	.+2      	; 0xeee <i2cSlaveReceiveService+0x74>
     eec:	4b c1       	rjmp	.+662    	; 0x1184 <i2cSlaveReceiveService+0x30a>
     eee:	fa e0       	ldi	r31, 0x0A	; 10
     ef0:	ff 16       	cp	r15, r31
     ef2:	09 f0       	breq	.+2      	; 0xef6 <i2cSlaveReceiveService+0x7c>
     ef4:	7e c1       	rjmp	.+764    	; 0x11f2 <i2cSlaveReceiveService+0x378>
     ef6:	36 c1       	rjmp	.+620    	; 0x1164 <i2cSlaveReceiveService+0x2ea>
     ef8:	80 e2       	ldi	r24, 0x20	; 32
     efa:	f8 16       	cp	r15, r24
     efc:	09 f4       	brne	.+2      	; 0xf00 <i2cSlaveReceiveService+0x86>
     efe:	60 c1       	rjmp	.+704    	; 0x11c0 <i2cSlaveReceiveService+0x346>
     f00:	a2 e2       	ldi	r26, 0x22	; 34
     f02:	fa 16       	cp	r15, r26
     f04:	09 f4       	brne	.+2      	; 0xf08 <i2cSlaveReceiveService+0x8e>
     f06:	63 c1       	rjmp	.+710    	; 0x11ce <i2cSlaveReceiveService+0x354>
     f08:	ba e1       	ldi	r27, 0x1A	; 26
     f0a:	fb 16       	cp	r15, r27
     f0c:	09 f0       	breq	.+2      	; 0xf10 <i2cSlaveReceiveService+0x96>
     f0e:	71 c1       	rjmp	.+738    	; 0x11f2 <i2cSlaveReceiveService+0x378>
     f10:	4c c1       	rjmp	.+664    	; 0x11aa <i2cSlaveReceiveService+0x330>
	case 1: // if length 1, then this is 1 byte - need to stretch to 8 bytes
		LoadPattern1(*receiveData);
     f12:	fb 01       	movw	r30, r22
     f14:	3a c0       	rjmp	.+116    	; 0xf8a <i2cSlaveReceiveService+0x110>
	//a reset is 0x00, 0x01; display ID is: 0x00 0x02 Update ID is 0xFF, New Address
	//diplay bus number is 0xFE, bus#
	// for first digit different than 0x00, first char is ID for pattern in eeprom - 0x10, 
	// and second char is pattern number.
	//note - for row compressed patterns, 2 byte patterns are not supported!
		switch(*receiveData) {
     f16:	db 01       	movw	r26, r22
     f18:	9c 91       	ld	r25, X
     f1a:	95 3f       	cpi	r25, 0xF5	; 245
     f1c:	28 f4       	brcc	.+10     	; 0xf28 <i2cSlaveReceiveService+0xae>
     f1e:	90 3f       	cpi	r25, 0xF0	; 240
     f20:	e8 f4       	brcc	.+58     	; 0xf5c <i2cSlaveReceiveService+0xe2>
     f22:	99 23       	and	r25, r25
     f24:	41 f0       	breq	.+16     	; 0xf36 <i2cSlaveReceiveService+0xbc>
     f26:	b7 c0       	rjmp	.+366    	; 0x1096 <i2cSlaveReceiveService+0x21c>
     f28:	9e 3f       	cpi	r25, 0xFE	; 254
     f2a:	09 f4       	brne	.+2      	; 0xf2e <i2cSlaveReceiveService+0xb4>
     f2c:	8a c0       	rjmp	.+276    	; 0x1042 <i2cSlaveReceiveService+0x1c8>
     f2e:	9f 3f       	cpi	r25, 0xFF	; 255
     f30:	09 f0       	breq	.+2      	; 0xf34 <i2cSlaveReceiveService+0xba>
     f32:	b1 c0       	rjmp	.+354    	; 0x1096 <i2cSlaveReceiveService+0x21c>
     f34:	8b c0       	rjmp	.+278    	; 0x104c <i2cSlaveReceiveService+0x1d2>
		
		case 0x00: 
			if (*(receiveData+1) == 0x01) SystemReset();
     f36:	fb 01       	movw	r30, r22
     f38:	61 81       	ldd	r22, Z+1	; 0x01
     f3a:	61 30       	cpi	r22, 0x01	; 1
     f3c:	59 f4       	brne	.+22     	; 0xf54 <i2cSlaveReceiveService+0xda>


// resets the chip
void SystemReset()
{
asm volatile ("cli"); // turn off interrupts
     f3e:	f8 94       	cli
//WDTCR = _BV(WDE) | _BV(WDP2); // init WatchDog
//WDTCSR = _BV(WDE) | _BV(WDP2); // init WatchDog
WDTCSR |= (1<<WDCE) | (1<<WDE);
     f40:	80 91 60 00 	lds	r24, 0x0060
     f44:	88 61       	ori	r24, 0x18	; 24
     f46:	80 93 60 00 	sts	0x0060, r24
WDTCSR = (1<<WDE) | (1<<WDP0); //32 ms to timeout
     f4a:	89 e0       	ldi	r24, 0x09	; 9
     f4c:	80 93 60 00 	sts	0x0060, r24

while (1) asm volatile ("nop"); // wait for reset
     f50:	00 00       	nop
     f52:	fe cf       	rjmp	.-4      	; 0xf50 <i2cSlaveReceiveService+0xd6>
	//note - for row compressed patterns, 2 byte patterns are not supported!
		switch(*receiveData) {
		
		case 0x00: 
			if (*(receiveData+1) == 0x01) SystemReset();
			else if (*(receiveData+1) == 0x02) DisplayNum();
     f54:	62 30       	cpi	r22, 0x02	; 2
     f56:	09 f0       	breq	.+2      	; 0xf5a <i2cSlaveReceiveService+0xe0>
     f58:	50 c1       	rjmp	.+672    	; 0x11fa <i2cSlaveReceiveService+0x380>
     f5a:	97 c0       	rjmp	.+302    	; 0x108a <i2cSlaveReceiveService+0x210>
		case 0xF1:
		case 0xF2:
		case 0xF3:
		case 0xF4:
			// just load that pattern from PATTERNS
			*(uint8_t *)&frame_num = *(receiveData+1);  //reverse the high byte and low byte when tranfering
     f5c:	db 01       	movw	r26, r22
     f5e:	11 96       	adiw	r26, 0x01	; 1
     f60:	8c 91       	ld	r24, X
     f62:	89 83       	std	Y+1, r24	; 0x01
			*((uint8_t *)&frame_num + 1) = *(receiveData) & 0x0F; //reverse it back after receiving
     f64:	9f 70       	andi	r25, 0x0F	; 15
     f66:	9a 83       	std	Y+2, r25	; 0x02
			if (Row_Compression == 1){
     f68:	80 91 13 01 	lds	r24, 0x0113
     f6c:	90 91 00 01 	lds	r25, 0x0100
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	31 f5       	brne	.+76     	; 0xfc0 <i2cSlaveReceiveService+0x146>
			
				switch(Gray_Scale) {
     f74:	93 30       	cpi	r25, 0x03	; 3
     f76:	69 f0       	breq	.+26     	; 0xf92 <i2cSlaveReceiveService+0x118>
     f78:	94 30       	cpi	r25, 0x04	; 4
     f7a:	b9 f0       	breq	.+46     	; 0xfaa <i2cSlaveReceiveService+0x130>
     f7c:	91 30       	cpi	r25, 0x01	; 1
     f7e:	09 f0       	breq	.+2      	; 0xf82 <i2cSlaveReceiveService+0x108>
     f80:	3c c1       	rjmp	.+632    	; 0x11fa <i2cSlaveReceiveService+0x380>
				case 1: 
					LoadPattern1(PATTERNS[frame_num]);
     f82:	e9 81       	ldd	r30, Y+1	; 0x01
     f84:	fa 81       	ldd	r31, Y+2	; 0x02
     f86:	ea 57       	subi	r30, 0x7A	; 122
     f88:	fe 4f       	sbci	r31, 0xFE	; 254
     f8a:	80 81       	ld	r24, Z
     f8c:	0e 94 3b 01 	call	0x276	; 0x276 <LoadPattern1>
     f90:	34 c1       	rjmp	.+616    	; 0x11fa <i2cSlaveReceiveService+0x380>
					break;
					
				case 3:
					LoadPattern3(&PATTERNS[frame_num*3]);
     f92:	29 81       	ldd	r18, Y+1	; 0x01
     f94:	3a 81       	ldd	r19, Y+2	; 0x02
     f96:	c9 01       	movw	r24, r18
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	82 0f       	add	r24, r18
     f9e:	93 1f       	adc	r25, r19
     fa0:	8a 57       	subi	r24, 0x7A	; 122
     fa2:	9e 4f       	sbci	r25, 0xFE	; 254
     fa4:	0e 94 81 01 	call	0x302	; 0x302 <LoadPattern3>
     fa8:	28 c1       	rjmp	.+592    	; 0x11fa <i2cSlaveReceiveService+0x380>
					break; 
					
				case 4:
					LoadPattern4(&PATTERNS[frame_num*4]);
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	8a 57       	subi	r24, 0x7A	; 122
     fb8:	9e 4f       	sbci	r25, 0xFE	; 254
     fba:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LoadPattern4>
     fbe:	1d c1       	rjmp	.+570    	; 0x11fa <i2cSlaveReceiveService+0x380>
					break; 
				}
			}
			else{
				switch(Gray_Scale) {
     fc0:	92 30       	cpi	r25, 0x02	; 2
     fc2:	b1 f0       	breq	.+44     	; 0xff0 <i2cSlaveReceiveService+0x176>
     fc4:	93 30       	cpi	r25, 0x03	; 3
     fc6:	20 f4       	brcc	.+8      	; 0xfd0 <i2cSlaveReceiveService+0x156>
     fc8:	91 30       	cpi	r25, 0x01	; 1
     fca:	09 f0       	breq	.+2      	; 0xfce <i2cSlaveReceiveService+0x154>
     fcc:	16 c1       	rjmp	.+556    	; 0x11fa <i2cSlaveReceiveService+0x380>
     fce:	06 c0       	rjmp	.+12     	; 0xfdc <i2cSlaveReceiveService+0x162>
     fd0:	93 30       	cpi	r25, 0x03	; 3
     fd2:	d1 f0       	breq	.+52     	; 0x1008 <i2cSlaveReceiveService+0x18e>
     fd4:	94 30       	cpi	r25, 0x04	; 4
     fd6:	09 f0       	breq	.+2      	; 0xfda <i2cSlaveReceiveService+0x160>
     fd8:	10 c1       	rjmp	.+544    	; 0x11fa <i2cSlaveReceiveService+0x380>
     fda:	27 c0       	rjmp	.+78     	; 0x102a <i2cSlaveReceiveService+0x1b0>
				case 1: 
					LoadPattern8(&PATTERNS[frame_num*8]);
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	9a 81       	ldd	r25, Y+2	; 0x02
     fe0:	63 e0       	ldi	r22, 0x03	; 3
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	6a 95       	dec	r22
     fe8:	e1 f7       	brne	.-8      	; 0xfe2 <i2cSlaveReceiveService+0x168>
     fea:	8a 57       	subi	r24, 0x7A	; 122
     fec:	9e 4f       	sbci	r25, 0xFE	; 254
     fee:	b7 c0       	rjmp	.+366    	; 0x115e <i2cSlaveReceiveService+0x2e4>
					break;
		
				case 2:
					LoadPattern16(&PATTERNS[frame_num*16]);
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	54 e0       	ldi	r21, 0x04	; 4
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	5a 95       	dec	r21
     ffc:	e1 f7       	brne	.-8      	; 0xff6 <i2cSlaveReceiveService+0x17c>
     ffe:	8a 57       	subi	r24, 0x7A	; 122
    1000:	9e 4f       	sbci	r25, 0xFE	; 254
    1002:	0e 94 9a 03 	call	0x734	; 0x734 <LoadPattern16>
    1006:	f9 c0       	rjmp	.+498    	; 0x11fa <i2cSlaveReceiveService+0x380>
					break; 
					
				case 3:
					LoadPattern24(&PATTERNS[frame_num*24]);
    1008:	29 81       	ldd	r18, Y+1	; 0x01
    100a:	3a 81       	ldd	r19, Y+2	; 0x02
    100c:	c9 01       	movw	r24, r18
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	82 0f       	add	r24, r18
    1014:	93 1f       	adc	r25, r19
    1016:	23 e0       	ldi	r18, 0x03	; 3
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	2a 95       	dec	r18
    101e:	e1 f7       	brne	.-8      	; 0x1018 <i2cSlaveReceiveService+0x19e>
    1020:	8a 57       	subi	r24, 0x7A	; 122
    1022:	9e 4f       	sbci	r25, 0xFE	; 254
    1024:	0e 94 cc 03 	call	0x798	; 0x798 <LoadPattern24>
    1028:	e8 c0       	rjmp	.+464    	; 0x11fa <i2cSlaveReceiveService+0x380>
					break; 
					
				case 4:
					LoadPattern32(&PATTERNS[frame_num*32]);
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	05 e0       	ldi	r16, 0x05	; 5
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 95       	dec	r16
    1036:	e1 f7       	brne	.-8      	; 0x1030 <i2cSlaveReceiveService+0x1b6>
    1038:	8a 57       	subi	r24, 0x7A	; 122
    103a:	9e 4f       	sbci	r25, 0xFE	; 254
    103c:	0e 94 16 04 	call	0x82c	; 0x82c <LoadPattern32>
    1040:	dc c0       	rjmp	.+440    	; 0x11fa <i2cSlaveReceiveService+0x380>
				}
			
			}
			break;
		case 0xFE:
		    DisplayBusNum(*(receiveData+1));
    1042:	fb 01       	movw	r30, r22
    1044:	81 81       	ldd	r24, Z+1	; 0x01
    1046:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <DisplayBusNum>
    104a:	d7 c0       	rjmp	.+430    	; 0x11fa <i2cSlaveReceiveService+0x380>
			break;
	
		case 0xFF:   //updates the address, checks for gencall
			if ( start_up && ( ( i2cGetGenCall() && ( deviceAddr == 0 ) ) || (i2cGetGenCall() == 0 ) ) ){ 
    104c:	80 91 01 01 	lds	r24, 0x0101
    1050:	88 23       	and	r24, r24
    1052:	f1 f0       	breq	.+60     	; 0x1090 <i2cSlaveReceiveService+0x216>
    1054:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <i2cGetGenCall>
    1058:	88 23       	and	r24, r24
    105a:	21 f0       	breq	.+8      	; 0x1064 <i2cSlaveReceiveService+0x1ea>
    105c:	80 91 a8 04 	lds	r24, 0x04A8
    1060:	88 23       	and	r24, r24
    1062:	21 f0       	breq	.+8      	; 0x106c <i2cSlaveReceiveService+0x1f2>
    1064:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <i2cGetGenCall>
    1068:	88 23       	and	r24, r24
    106a:	91 f4       	brne	.+36     	; 0x1090 <i2cSlaveReceiveService+0x216>
				deviceAddr = *(receiveData+1);
    106c:	d8 01       	movw	r26, r16
    106e:	11 96       	adiw	r26, 0x01	; 1
    1070:	6c 91       	ld	r22, X
    1072:	60 93 a8 04 	sts	0x04A8, r22
				eeprom_write_byte( Panel_ID, deviceAddr);
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__eewr_byte_m168>
				i2cSetLocalDeviceAddr(deviceAddr << 1, TRUE);
    107e:	80 91 a8 04 	lds	r24, 0x04A8
    1082:	88 0f       	add	r24, r24
    1084:	61 e0       	ldi	r22, 0x01	; 1
    1086:	0e 94 1a 0a 	call	0x1434	; 0x1434 <i2cSetLocalDeviceAddr>
				DisplayNum();
    108a:	0e 94 b9 06 	call	0xd72	; 0xd72 <DisplayNum>
    108e:	b5 c0       	rjmp	.+362    	; 0x11fa <i2cSlaveReceiveService+0x380>
				}
			else {LoadPatternEEP(SYMBOLS[1]);}	//first dot means not addressed correctly to update
    1090:	81 e3       	ldi	r24, 0x31	; 49
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	b0 c0       	rjmp	.+352    	; 0x11f6 <i2cSlaveReceiveService+0x37c>
			break;
			
			 
		default:
			EEpat_num = (*receiveData) - 0x10;
    1096:	90 51       	subi	r25, 0x10	; 16
			frame_num = *(receiveData+1);
    1098:	f8 01       	movw	r30, r16
    109a:	81 81       	ldd	r24, Z+1	; 0x01
    109c:	68 2f       	mov	r22, r24
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	7a 83       	std	Y+2, r23	; 0x02
    10a2:	69 83       	std	Y+1, r22	; 0x01
			
			if ( (EEpat_num < EEPAT_NUMS) & (frame_num < EEPAT_LENGTH[EEpat_num]) )			
    10a4:	e9 2f       	mov	r30, r25
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	92 30       	cpi	r25, 0x02	; 2
    10aa:	d0 f4       	brcc	.+52     	; 0x10e0 <i2cSlaveReceiveService+0x266>
    10ac:	df 01       	movw	r26, r30
    10ae:	aa 0f       	add	r26, r26
    10b0:	bb 1f       	adc	r27, r27
    10b2:	fd 01       	movw	r30, r26
    10b4:	e6 5f       	subi	r30, 0xF6	; 246
    10b6:	fe 4f       	sbci	r31, 0xFE	; 254
    10b8:	80 81       	ld	r24, Z
    10ba:	91 81       	ldd	r25, Z+1	; 0x01
    10bc:	68 17       	cp	r22, r24
    10be:	79 07       	cpc	r23, r25
    10c0:	78 f4       	brcc	.+30     	; 0x10e0 <i2cSlaveReceiveService+0x266>
				LoadPatternEEP(EEPATTERNS[EEPAT_START[EEpat_num]+frame_num]);
    10c2:	a2 5f       	subi	r26, 0xF2	; 242
    10c4:	be 4f       	sbci	r27, 0xFE	; 254
    10c6:	8d 91       	ld	r24, X+
    10c8:	9c 91       	ld	r25, X
    10ca:	68 0f       	add	r22, r24
    10cc:	79 1f       	adc	r23, r25
    10ce:	a3 e0       	ldi	r26, 0x03	; 3
    10d0:	66 0f       	add	r22, r22
    10d2:	77 1f       	adc	r23, r23
    10d4:	aa 95       	dec	r26
    10d6:	e1 f7       	brne	.-8      	; 0x10d0 <i2cSlaveReceiveService+0x256>
    10d8:	cb 01       	movw	r24, r22
    10da:	8f 58       	subi	r24, 0x8F	; 143
    10dc:	9f 4f       	sbci	r25, 0xFF	; 255
    10de:	8b c0       	rjmp	.+278    	; 0x11f6 <i2cSlaveReceiveService+0x37c>
			else			
			LoadPatternEEP(SYMBOLS[2]);	//second dot means 'pattern referrenced to is invalid'
    10e0:	89 e3       	ldi	r24, 0x39	; 57
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	88 c0       	rjmp	.+272    	; 0x11f6 <i2cSlaveReceiveService+0x37c>
		}
		break;
	
	case 3: // if length 3, then this is a compressed g_scale pattern need to stretch to 24 bytes
		LoadPattern3(receiveData);
    10e6:	cb 01       	movw	r24, r22
    10e8:	0e 94 81 01 	call	0x302	; 0x302 <LoadPattern3>
    10ec:	5c c0       	rjmp	.+184    	; 0x11a6 <i2cSlaveReceiveService+0x32c>
		break; 
		
	
		
	case 4: // if length 4, then this is a compressed g_scale pattern need to stretch to 32 bytes
        LoadPattern4(receiveData);
    10ee:	cb 01       	movw	r24, r22
    10f0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LoadPattern4>
        Gray_Scale = 4;
    10f4:	f0 92 00 01 	sts	0x0100, r15
    10f8:	80 c0       	rjmp	.+256    	; 0x11fa <i2cSlaveReceiveService+0x380>
        break;
		
	case 5: // save pattern data for gs = 1 rc = 1
		//the data format is [5, data, f_num_HB, f_num_LB , x, x]
		*(uint8_t *)&frame_num =*(receiveData+1);
    10fa:	db 01       	movw	r26, r22
    10fc:	11 96       	adiw	r26, 0x01	; 1
    10fe:	8c 91       	ld	r24, X
    1100:	11 97       	sbiw	r26, 0x01	; 1
    1102:	89 83       	std	Y+1, r24	; 0x01
		*((uint8_t *)&frame_num + 1) = *(receiveData+2);
    1104:	12 96       	adiw	r26, 0x02	; 2
    1106:	8c 91       	ld	r24, X
    1108:	12 97       	sbiw	r26, 0x02	; 2
    110a:	81 83       	std	Z+1, r24	; 0x01
	DisplayBuffer[7] = eeprom_rb((uint8_t*)(pattern + 7));
}

void StorePattern1(uint16_t frameNumber, unsigned char *pattern)
{	
	PATTERNS[frameNumber] = *(pattern + 0);
    110c:	e9 81       	ldd	r30, Y+1	; 0x01
    110e:	fa 81       	ldd	r31, Y+2	; 0x02
    1110:	ea 57       	subi	r30, 0x7A	; 122
    1112:	fe 4f       	sbci	r31, 0xFE	; 254
    1114:	8c 91       	ld	r24, X
    1116:	80 83       	st	Z, r24
	case 5: // save pattern data for gs = 1 rc = 1
		//the data format is [5, data, f_num_HB, f_num_LB , x, x]
		*(uint8_t *)&frame_num =*(receiveData+1);
		*((uint8_t *)&frame_num + 1) = *(receiveData+2);
		StorePattern1(frame_num, receiveData);
		Gray_Scale = 1;     
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	80 93 00 01 	sts	0x0100, r24
    111e:	1b c0       	rjmp	.+54     	; 0x1156 <i2cSlaveReceiveService+0x2dc>
		Row_Compression = 1;
		break; 

	case 6: // save pattern data for gs = 3 rc = 1
		//the data format is [6, data1, data2, data 3, f_num_HB, f_num_LB , x]
		*(uint8_t *)&frame_num =*(receiveData+3);
    1120:	fb 01       	movw	r30, r22
    1122:	83 81       	ldd	r24, Z+3	; 0x03
    1124:	89 83       	std	Y+1, r24	; 0x01
		*((uint8_t *)&frame_num + 1) = *(receiveData+4);
    1126:	84 81       	ldd	r24, Z+4	; 0x04
    1128:	8a 83       	std	Y+2, r24	; 0x02
		StorePattern3(frame_num, receiveData);
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	9a 81       	ldd	r25, Y+2	; 0x02
    112e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <StorePattern3>
		Gray_Scale = 3;     
    1132:	83 e0       	ldi	r24, 0x03	; 3
    1134:	0d c0       	rjmp	.+26     	; 0x1150 <i2cSlaveReceiveService+0x2d6>
		Row_Compression = 1;
		break; 
		
	case 7: // save pattern data for gs = 4 rc = 1
		//the data format is [7, data1, data2, data 3, data4, f_num_HB, f_num_LB , x]
		*(uint8_t *)&frame_num =*(receiveData+4);
    1136:	db 01       	movw	r26, r22
    1138:	14 96       	adiw	r26, 0x04	; 4
    113a:	8c 91       	ld	r24, X
    113c:	14 97       	sbiw	r26, 0x04	; 4
    113e:	89 83       	std	Y+1, r24	; 0x01
		*((uint8_t *)&frame_num + 1) = *(receiveData+5);
    1140:	15 96       	adiw	r26, 0x05	; 5
    1142:	8c 91       	ld	r24, X
    1144:	81 83       	std	Z+1, r24	; 0x01
		StorePattern4(frame_num, receiveData);
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
    114a:	0e 94 91 04 	call	0x922	; 0x922 <StorePattern4>
		Gray_Scale = 4;     
    114e:	84 e0       	ldi	r24, 0x04	; 4
    1150:	80 93 00 01 	sts	0x0100, r24
		Row_Compression = 1;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	80 93 13 01 	sts	0x0113, r24
    115a:	4f c0       	rjmp	.+158    	; 0x11fa <i2cSlaveReceiveService+0x380>
		break; 		
		
	case 8: LoadPattern8(receiveData);	//stream in pattern		
    115c:	cb 01       	movw	r24, r22
    115e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LoadPattern8>
    1162:	4b c0       	rjmp	.+150    	; 0x11fa <i2cSlaveReceiveService+0x380>
		//Gray_Scale = 1;  , This is now set in LoadPattern.
		break;	
	
	case 10:	// save pattern data for gs = 1 rc = 0
		*(uint8_t *)&frame_num =*(receiveData+8);
    1164:	fb 01       	movw	r30, r22
    1166:	80 85       	ldd	r24, Z+8	; 0x08
    1168:	89 83       	std	Y+1, r24	; 0x01
		*((uint8_t *)&frame_num + 1) = *(receiveData+9);
    116a:	81 85       	ldd	r24, Z+9	; 0x09
    116c:	8a 83       	std	Y+2, r24	; 0x02
		StorePattern8(frame_num, receiveData);
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	0e 94 b0 04 	call	0x960	; 0x960 <StorePattern8>
		Gray_Scale = 1; 
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	37 c0       	rjmp	.+110    	; 0x11e8 <i2cSlaveReceiveService+0x36e>
		Row_Compression = 0;	
		break;		
		
			
	case 16: LoadPattern16(receiveData);	//stream in pattern		
    117a:	cb 01       	movw	r24, r22
    117c:	0e 94 9a 03 	call	0x734	; 0x734 <LoadPattern16>
		Gray_Scale = 2;     // this is a 2 byte pattern - so Gray_Scale is 2
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	22 c0       	rjmp	.+68     	; 0x11c8 <i2cSlaveReceiveService+0x34e>
		break;

	case 18:// save pattern data for gs = 2 rc = 0
		*(uint8_t *)&frame_num =*(receiveData+16);
    1184:	db 01       	movw	r26, r22
    1186:	50 96       	adiw	r26, 0x10	; 16
    1188:	8c 91       	ld	r24, X
    118a:	50 97       	sbiw	r26, 0x10	; 16
    118c:	89 83       	std	Y+1, r24	; 0x01
		*((uint8_t *)&frame_num + 1) = *(receiveData+17);
    118e:	51 96       	adiw	r26, 0x11	; 17
    1190:	8c 91       	ld	r24, X
    1192:	8a 83       	std	Y+2, r24	; 0x02
		StorePattern16(frame_num, receiveData);
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	9a 81       	ldd	r25, Y+2	; 0x02
    1198:	0e 94 de 04 	call	0x9bc	; 0x9bc <StorePattern16>
		Gray_Scale = 2; 
    119c:	82 e0       	ldi	r24, 0x02	; 2
    119e:	24 c0       	rjmp	.+72     	; 0x11e8 <i2cSlaveReceiveService+0x36e>
		Row_Compression = 0;	
		break;		
		
	case 24: LoadPattern24(receiveData);	//stream in pattern		
    11a0:	cb 01       	movw	r24, r22
    11a2:	0e 94 cc 03 	call	0x798	; 0x798 <LoadPattern24>
		Gray_Scale = 3;     // this is a 8 level pattern - so Gray_Scale is 3
    11a6:	83 e0       	ldi	r24, 0x03	; 3
    11a8:	0f c0       	rjmp	.+30     	; 0x11c8 <i2cSlaveReceiveService+0x34e>
		break;	
		
	case 26:	// save pattern data for gs = 3 rc = 0
		*(uint8_t *)&frame_num =*(receiveData+24);
    11aa:	fb 01       	movw	r30, r22
    11ac:	80 8d       	ldd	r24, Z+24	; 0x18
    11ae:	89 83       	std	Y+1, r24	; 0x01
		*((uint8_t *)&frame_num + 1) = *(receiveData+25);
    11b0:	81 8d       	ldd	r24, Z+25	; 0x19
    11b2:	8a 83       	std	Y+2, r24	; 0x02
		StorePattern24(frame_num, receiveData);
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	0e 94 33 05 	call	0xa66	; 0xa66 <StorePattern24>
		Gray_Scale = 3; 
    11bc:	83 e0       	ldi	r24, 0x03	; 3
    11be:	14 c0       	rjmp	.+40     	; 0x11e8 <i2cSlaveReceiveService+0x36e>
		Row_Compression = 0;	
		break;			

  	case 32: LoadPattern32(receiveData);	//stream in pattern
    11c0:	cb 01       	movw	r24, r22
    11c2:	0e 94 16 04 	call	0x82c	; 0x82c <LoadPattern32>
		Gray_Scale = 4;     // this is a 4 byte pattern - so Gray_Scale is 4
    11c6:	84 e0       	ldi	r24, 0x04	; 4
    11c8:	80 93 00 01 	sts	0x0100, r24
    11cc:	16 c0       	rjmp	.+44     	; 0x11fa <i2cSlaveReceiveService+0x380>
		break;

	case 34:	// save pattern data for gs = 4 rc = 0
		*(uint8_t *)&frame_num =*(receiveData+32);
    11ce:	db 01       	movw	r26, r22
    11d0:	90 96       	adiw	r26, 0x20	; 32
    11d2:	8c 91       	ld	r24, X
    11d4:	90 97       	sbiw	r26, 0x20	; 32
    11d6:	89 83       	std	Y+1, r24	; 0x01
		*((uint8_t *)&frame_num + 1) = *(receiveData+33);
    11d8:	91 96       	adiw	r26, 0x21	; 33
    11da:	8c 91       	ld	r24, X
    11dc:	8a 83       	std	Y+2, r24	; 0x02
		StorePattern32(frame_num, receiveData);
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	0e 94 af 05 	call	0xb5e	; 0xb5e <StorePattern32>
		Gray_Scale = 4; 
    11e6:	84 e0       	ldi	r24, 0x04	; 4
    11e8:	80 93 00 01 	sts	0x0100, r24
		Row_Compression = 0;	
    11ec:	10 92 13 01 	sts	0x0113, r1
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <i2cSlaveReceiveService+0x380>
		break;			
		
	default:
		LoadPatternEEP(SYMBOLS[3]);   //third dot means wierd packet size received
    11f2:	81 e4       	ldi	r24, 0x41	; 65
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 09 07 	call	0xe12	; 0xe12 <LoadPatternEEP>
		}
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	ff 90       	pop	r15
    1208:	08 95       	ret

0000120a <main>:

int main(void)
{	
	int j;
	
	deviceAddr = eeprom_read_byte(Panel_ID);
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 ef 0c 	call	0x19de	; 0x19de <__eerd_byte_m168>
    1212:	80 93 a8 04 	sts	0x04A8, r24
	
	outp(MASK_05, LED_DATA_PORT_DIRECTION_05);		/* set LED DATA, bits 0 - 5, to write mode */
    1216:	8f e3       	ldi	r24, 0x3F	; 63
    1218:	84 b9       	out	0x04, r24	; 4
	sbi(DDRC,PC0);
    121a:	38 9a       	sbi	0x07, 0	; 7
	sbi(DDRC,PC1);
    121c:	39 9a       	sbi	0x07, 1	; 7
	//outp(MASK_67, LED_DATA_PORT_DIRECTION_67);		/* set LED DATA, bits 6 - 7, to write mode */
		
	outp(DD_WRITE,LED_ADDRESS_PORT_DIRECTION);	/* set LED ADDRESS to write mode */
    121e:	8f ef       	ldi	r24, 0xFF	; 255
    1220:	8a b9       	out	0x0a, r24	; 10
	sbi(DDRC,PC3);
    1222:	3b 9a       	sbi	0x07, 3	; 7
	sbi(PORTC,PC3);
    1224:	43 9a       	sbi	0x08, 3	; 8
	
	//take care of Watchdog timer
	MCUSR &= ~(1<<WDRF); //clear WDRF in MCUSR
    1226:	84 b7       	in	r24, 0x34	; 52
    1228:	87 7f       	andi	r24, 0xF7	; 247
    122a:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE) | (1<<WDE);  //send logical one to WDCE and WDE
    122c:	80 91 60 00 	lds	r24, 0x0060
    1230:	88 61       	ori	r24, 0x18	; 24
    1232:	80 93 60 00 	sts	0x0060, r24
	//turn off WDT
	WDTCSR = 0x00;	
    1236:	10 92 60 00 	sts	0x0060, r1
		
	//CurrentCol = 0;			/* init current column variable */
	CurrentCol = 5;			/* init current column variable */
    123a:	85 e0       	ldi	r24, 0x05	; 5
    123c:	80 93 a6 04 	sts	0x04A6, r24
	CurrentFrame = 0;
    1240:	10 92 a7 04 	sts	0x04A7, r1
	Gray_Scale = 1;				
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	80 93 00 01 	sts	0x0100, r24
	
	Handler_Init();					/* setup handlers */
    124a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <Handler_Init>
	Reg_Handler(UpdateDisplay,2,1);	//runs at about 1/(4*256*8*(1/16E6)) = 2.44 Khz
    124e:	83 e5       	ldi	r24, 0x53	; 83
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	42 e0       	ldi	r20, 0x02	; 2
    1254:	50 e0       	ldi	r21, 0x00	; 0
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	21 e0       	ldi	r18, 0x01	; 1
    125c:	0e 94 c0 09 	call	0x1380	; 0x1380 <Reg_Handler>

	
	DisplayNum();
    1260:	0e 94 b9 06 	call	0xd72	; 0xd72 <DisplayNum>
	
	i2cInit(); 
    1264:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <i2cInit>
	i2cSetBitrate(400);
    1268:	80 e9       	ldi	r24, 0x90	; 144
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <i2cSetBitrate>
 	i2cSetLocalDeviceAddr(deviceAddr << 1, TRUE);
    1270:	80 91 a8 04 	lds	r24, 0x04A8
    1274:	88 0f       	add	r24, r24
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	0e 94 1a 0a 	call	0x1434	; 0x1434 <i2cSetLocalDeviceAddr>
	i2cSetSlaveReceiveHandler( i2cSlaveReceiveService );
    127c:	8d e3       	ldi	r24, 0x3D	; 61
    127e:	97 e0       	ldi	r25, 0x07	; 7
    1280:	0e 94 22 0a 	call	0x1444	; 0x1444 <i2cSetSlaveReceiveHandler>
	
	long_delay(400);
    1284:	80 e9       	ldi	r24, 0x90	; 144
    1286:	91 e0       	ldi	r25, 0x01	; 1
    1288:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <long_delay>
	start_up = 0;	
    128c:	10 92 01 01 	sts	0x0101, r1
    1290:	e6 e8       	ldi	r30, 0x86	; 134
    1292:	f1 e0       	ldi	r31, 0x01	; 1
	
	//to test for maximum number of patterns that can be held in PATTERNS - zero all of them
	for (j = 0; j < RAM_PAT_NUMS*8; j++){
		PATTERNS[j] = 0x00;
    1294:	11 92       	st	Z+, r1
	
	long_delay(400);
	start_up = 0;	
	
	//to test for maximum number of patterns that can be held in PATTERNS - zero all of them
	for (j = 0; j < RAM_PAT_NUMS*8; j++){
    1296:	84 e0       	ldi	r24, 0x04	; 4
    1298:	e6 3a       	cpi	r30, 0xA6	; 166
    129a:	f8 07       	cpc	r31, r24
    129c:	d9 f7       	brne	.-10     	; 0x1294 <main+0x8a>
    129e:	ff cf       	rjmp	.-2      	; 0x129e <main+0x94>

000012a0 <Handler_Init>:
Limitations: 
Notes:
*/
void Handler_Init(void)
{
	cli();
    12a0:	f8 94       	cli
	
	mask = FALSE;	/* Initialize mask to FALSE */
    12a2:	10 92 ac 04 	sts	0x04AC, r1
	        
	outp(TCCR0_VAL,TCCR0B);				/* write timer prescaler */
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	85 bd       	out	0x25, r24	; 37
	sbi(TIMSK0,TOIE0);				/* enable timer ovf irq */
    12aa:	ee e6       	ldi	r30, 0x6E	; 110
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	81 60       	ori	r24, 0x01	; 1
    12b2:	80 83       	st	Z, r24
	sei();						/* enable interrupts */
    12b4:	78 94       	sei
}
    12b6:	08 95       	ret

000012b8 <__vector_16>:

Limitations: 
Notes:
*/
SIGNAL(SIG_OVERFLOW0)					/* timer 0 ovf int handler */
{
    12b8:	1f 92       	push	r1
    12ba:	0f 92       	push	r0
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	0f 92       	push	r0
    12c0:	11 24       	eor	r1, r1
    12c2:	2f 93       	push	r18
    12c4:	3f 93       	push	r19
    12c6:	4f 93       	push	r20
    12c8:	5f 93       	push	r21
    12ca:	6f 93       	push	r22
    12cc:	7f 93       	push	r23
    12ce:	8f 93       	push	r24
    12d0:	9f 93       	push	r25
    12d2:	af 93       	push	r26
    12d4:	bf 93       	push	r27
    12d6:	ef 93       	push	r30
    12d8:	ff 93       	push	r31
	cbi(TIMSK0,TOIE0);				/* disable timer ovf irq */
    12da:	80 91 6e 00 	lds	r24, 0x006E
    12de:	8e 7f       	andi	r24, 0xFE	; 254
    12e0:	80 93 6e 00 	sts	0x006E, r24
	
	if(mask==TRUE)			/* if int enabled check count */
    12e4:	80 91 ac 04 	lds	r24, 0x04AC
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	99 f4       	brne	.+38     	; 0x1312 <__vector_16+0x5a>
		count--;			
    12ec:	80 91 b1 04 	lds	r24, 0x04B1
    12f0:	90 91 b2 04 	lds	r25, 0x04B2
    12f4:	a0 91 b3 04 	lds	r26, 0x04B3
    12f8:	b0 91 b4 04 	lds	r27, 0x04B4
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	a1 09       	sbc	r26, r1
    1300:	b1 09       	sbc	r27, r1
    1302:	80 93 b1 04 	sts	0x04B1, r24
    1306:	90 93 b2 04 	sts	0x04B2, r25
    130a:	a0 93 b3 04 	sts	0x04B3, r26
    130e:	b0 93 b4 04 	sts	0x04B4, r27
	if(count==0)		/* if count=0, perform function call and reset */
    1312:	80 91 b1 04 	lds	r24, 0x04B1
    1316:	90 91 b2 04 	lds	r25, 0x04B2
    131a:	a0 91 b3 04 	lds	r26, 0x04B3
    131e:	b0 91 b4 04 	lds	r27, 0x04B4
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	a1 05       	cpc	r26, r1
    1326:	b1 05       	cpc	r27, r1
    1328:	a9 f4       	brne	.+42     	; 0x1354 <__vector_16+0x9c>
	{
		count=start_count;
    132a:	80 91 ad 04 	lds	r24, 0x04AD
    132e:	90 91 ae 04 	lds	r25, 0x04AE
    1332:	a0 91 af 04 	lds	r26, 0x04AF
    1336:	b0 91 b0 04 	lds	r27, 0x04B0
    133a:	80 93 b1 04 	sts	0x04B1, r24
    133e:	90 93 b2 04 	sts	0x04B2, r25
    1342:	a0 93 b3 04 	sts	0x04B3, r26
    1346:	b0 93 b4 04 	sts	0x04B4, r27
		(*p_handler_func) ();
    134a:	e0 91 aa 04 	lds	r30, 0x04AA
    134e:	f0 91 ab 04 	lds	r31, 0x04AB
    1352:	09 95       	icall
	}

	sbi(TIMSK0,TOIE0);				/* enable timer ovf irq */
    1354:	80 91 6e 00 	lds	r24, 0x006E
    1358:	81 60       	ori	r24, 0x01	; 1
    135a:	80 93 6e 00 	sts	0x006E, r24
}
    135e:	ff 91       	pop	r31
    1360:	ef 91       	pop	r30
    1362:	bf 91       	pop	r27
    1364:	af 91       	pop	r26
    1366:	9f 91       	pop	r25
    1368:	8f 91       	pop	r24
    136a:	7f 91       	pop	r23
    136c:	6f 91       	pop	r22
    136e:	5f 91       	pop	r21
    1370:	4f 91       	pop	r20
    1372:	3f 91       	pop	r19
    1374:	2f 91       	pop	r18
    1376:	0f 90       	pop	r0
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	0f 90       	pop	r0
    137c:	1f 90       	pop	r1
    137e:	18 95       	reti

00001380 <Reg_Handler>:
Notes:
*/
void Reg_Handler(void* fptr,unsigned long s_cnt,unsigned char msk)
{	
	mask = FALSE;				/* disable while modifying vector */
	p_handler_func =fptr;			/* set function pointer */
    1380:	90 93 ab 04 	sts	0x04AB, r25
    1384:	80 93 aa 04 	sts	0x04AA, r24
	start_count =s_cnt;			/* set start count */
    1388:	40 93 ad 04 	sts	0x04AD, r20
    138c:	50 93 ae 04 	sts	0x04AE, r21
    1390:	60 93 af 04 	sts	0x04AF, r22
    1394:	70 93 b0 04 	sts	0x04B0, r23
	count=s_cnt;				/* set count */
    1398:	40 93 b1 04 	sts	0x04B1, r20
    139c:	50 93 b2 04 	sts	0x04B2, r21
    13a0:	60 93 b3 04 	sts	0x04B3, r22
    13a4:	70 93 b4 04 	sts	0x04B4, r23
	mask =msk;				/* set interrupt mask */
    13a8:	20 93 ac 04 	sts	0x04AC, r18
}
    13ac:	08 95       	ret

000013ae <i2cSetBitrate>:
	// SCL freq = F_CPU/(16+2*TWBR))
	#ifdef TWPS0
		// for processors with additional bitrate division (mega128)
		// SCL freq = F_CPU/(16+2*TWBR*4^TWPS)
		// set TWPS to zero
		cbi(TWSR, TWPS0);
    13ae:	20 91 b9 00 	lds	r18, 0x00B9
    13b2:	2e 7f       	andi	r18, 0xFE	; 254
    13b4:	20 93 b9 00 	sts	0x00B9, r18
		cbi(TWSR, TWPS1);
    13b8:	20 91 b9 00 	lds	r18, 0x00B9
    13bc:	2d 7f       	andi	r18, 0xFD	; 253
    13be:	20 93 b9 00 	sts	0x00B9, r18
	outb(TWBR, bitrate_div); */
	
	//modified by MBR 11/19/03 
	//(CPU/1000/bitrate - 16)/2
	
	bitrate_div = (((F_CPU/1000)/bitrateKHz) - 16)/2;
    13c2:	9c 01       	movw	r18, r24
    13c4:	40 e0       	ldi	r20, 0x00	; 0
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	60 e2       	ldi	r22, 0x20	; 32
    13ca:	7e e4       	ldi	r23, 0x4E	; 78
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__divmodsi4>
    13d4:	20 51       	subi	r18, 0x10	; 16
    13d6:	30 40       	sbci	r19, 0x00	; 0
    13d8:	40 40       	sbci	r20, 0x00	; 0
    13da:	50 40       	sbci	r21, 0x00	; 0
    13dc:	ca 01       	movw	r24, r20
    13de:	b9 01       	movw	r22, r18
    13e0:	22 e0       	ldi	r18, 0x02	; 2
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e0       	ldi	r20, 0x00	; 0
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__divmodsi4>
	
	if(bitrate_div < 10)
    13ec:	2a 30       	cpi	r18, 0x0A	; 10
    13ee:	08 f4       	brcc	.+2      	; 0x13f2 <i2cSetBitrate+0x44>
    13f0:	2a e0       	ldi	r18, 0x0A	; 10
		bitrate_div = 10;
		
	outb(TWBR, bitrate_div);
    13f2:	20 93 b8 00 	sts	0x00B8, r18
}
    13f6:	08 95       	ret

000013f8 <i2cInit>:
static u08 (*i2cSlaveTransmit)(u08 transmitDataLengthMax, u08* transmitData);

// functions
void i2cInit(void)
{
	GenCal_Flag = 1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	80 93 b5 04 	sts	0x04B5, r24
	sbi(PORTC, 1);	// i2c SDA on ATmega163,323,16,32,etc
	sbi(PORTD, 0);	// i2c SCL on ATmega128,64
	sbi(PORTD, 1);	// i2c SDA on ATmega128,64
*/
	// clear SlaveReceive and SlaveTransmit handler to null
	i2cSlaveReceive = 0;
    13fe:	10 92 5b 01 	sts	0x015B, r1
    1402:	10 92 5a 01 	sts	0x015A, r1
	i2cSlaveTransmit = 0;
    1406:	10 92 5d 01 	sts	0x015D, r1
    140a:	10 92 5c 01 	sts	0x015C, r1
	// set i2c bit rate to 100KHz
	i2cSetBitrate(100);
    140e:	84 e6       	ldi	r24, 0x64	; 100
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 d7 09 	call	0x13ae	; 0x13ae <i2cSetBitrate>
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);
    1416:	ec eb       	ldi	r30, 0xBC	; 188
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	84 60       	ori	r24, 0x04	; 4
    141e:	80 83       	st	Z, r24
	// set state
	I2cState = I2C_IDLE;
    1420:	10 92 14 01 	sts	0x0114, r1
	// enable TWI interrupt and slave address ACK
	sbi(TWCR, TWIE);
    1424:	80 81       	ld	r24, Z
    1426:	81 60       	ori	r24, 0x01	; 1
    1428:	80 83       	st	Z, r24
	sbi(TWCR, TWEA);
    142a:	80 81       	ld	r24, Z
    142c:	80 64       	ori	r24, 0x40	; 64
    142e:	80 83       	st	Z, r24
	//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	// enable interrupts
	sei();
    1430:	78 94       	sei
}
    1432:	08 95       	ret

00001434 <i2cSetLocalDeviceAddr>:


void i2cSetLocalDeviceAddr(u08 deviceAddr, u08 genCallEn)
{
	// set local device address (used in slave mode only)
	outb(TWAR, ((deviceAddr&0xFE) | (genCallEn?1:0)) );
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	61 11       	cpse	r22, r1
    1438:	91 e0       	ldi	r25, 0x01	; 1
    143a:	8e 7f       	andi	r24, 0xFE	; 254
    143c:	98 2b       	or	r25, r24
    143e:	90 93 ba 00 	sts	0x00BA, r25
}
    1442:	08 95       	ret

00001444 <i2cSetSlaveReceiveHandler>:

void i2cSetSlaveReceiveHandler(void (*i2cSlaveRx_func)(u08 receiveDataLength, u08* recieveData))
{
	i2cSlaveReceive = i2cSlaveRx_func;
    1444:	90 93 5b 01 	sts	0x015B, r25
    1448:	80 93 5a 01 	sts	0x015A, r24
}
    144c:	08 95       	ret

0000144e <i2cSetSlaveTransmitHandler>:

void i2cSetSlaveTransmitHandler(u08 (*i2cSlaveTx_func)(u08 transmitDataLengthMax, u08* transmitData))
{
	i2cSlaveTransmit = i2cSlaveTx_func;
    144e:	90 93 5d 01 	sts	0x015D, r25
    1452:	80 93 5c 01 	sts	0x015C, r24
}
    1456:	08 95       	ret

00001458 <i2cSendStart>:

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    1458:	ec eb       	ldi	r30, 0xBC	; 188
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	8f 70       	andi	r24, 0x0F	; 15
    1460:	80 6a       	ori	r24, 0xA0	; 160
    1462:	80 83       	st	Z, r24
}
    1464:	08 95       	ret

00001466 <i2cSendStop>:

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    1466:	ec eb       	ldi	r30, 0xBC	; 188
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	8f 70       	andi	r24, 0x0F	; 15
    146e:	80 6d       	ori	r24, 0xD0	; 208
    1470:	80 83       	st	Z, r24
}
    1472:	08 95       	ret

00001474 <i2cWaitForComplete>:

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    1474:	80 91 bc 00 	lds	r24, 0x00BC
    1478:	87 ff       	sbrs	r24, 7
    147a:	fc cf       	rjmp	.-8      	; 0x1474 <i2cWaitForComplete>
}
    147c:	08 95       	ret

0000147e <i2cSendByte>:

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    147e:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    1482:	ec eb       	ldi	r30, 0xBC	; 188
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	8f 70       	andi	r24, 0x0F	; 15
    148a:	80 68       	ori	r24, 0x80	; 128
    148c:	80 83       	st	Z, r24
}
    148e:	08 95       	ret

00001490 <i2cReceiveByte>:

inline void i2cReceiveByte(u08 ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
    1490:	88 23       	and	r24, r24
    1492:	29 f0       	breq	.+10     	; 0x149e <i2cReceiveByte+0xe>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    1494:	80 91 bc 00 	lds	r24, 0x00BC
    1498:	8f 70       	andi	r24, 0x0F	; 15
    149a:	80 6c       	ori	r24, 0xC0	; 192
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <i2cReceiveByte+0x16>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    149e:	80 91 bc 00 	lds	r24, 0x00BC
    14a2:	8f 70       	andi	r24, 0x0F	; 15
    14a4:	80 68       	ori	r24, 0x80	; 128
    14a6:	80 93 bc 00 	sts	0x00BC, r24
    14aa:	08 95       	ret

000014ac <i2cGetReceivedByte>:
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    14ac:	80 91 bb 00 	lds	r24, 0x00BB
}
    14b0:	08 95       	ret

000014b2 <i2cGetStatus>:

inline u08 i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
    14b2:	80 91 b9 00 	lds	r24, 0x00B9
}
    14b6:	08 95       	ret

000014b8 <i2cMasterSend>:

void i2cMasterSend(u08 deviceAddr, u08 length, u08* data)
{
    14b8:	98 2f       	mov	r25, r24
	u08 i;
	// wait for interface to be ready
	while(I2cState);
    14ba:	80 91 14 01 	lds	r24, 0x0114
    14be:	88 23       	and	r24, r24
    14c0:	e1 f7       	brne	.-8      	; 0x14ba <i2cMasterSend+0x2>
	// set state
	I2cState = I2C_MASTER_TX;
    14c2:	82 e0       	ldi	r24, 0x02	; 2
    14c4:	80 93 14 01 	sts	0x0114, r24
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
    14c8:	9e 7f       	andi	r25, 0xFE	; 254
    14ca:	90 93 15 01 	sts	0x0115, r25
    14ce:	a6 e1       	ldi	r26, 0x16	; 22
    14d0:	b1 e0       	ldi	r27, 0x01	; 1
    14d2:	fa 01       	movw	r30, r20
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <i2cMasterSend+0x22>
	for(i=0; i<length; i++)
		I2cSendData[i] = *data++;
    14d6:	81 91       	ld	r24, Z+
    14d8:	8d 93       	st	X+, r24
	while(I2cState);
	// set state
	I2cState = I2C_MASTER_TX;
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
	for(i=0; i<length; i++)
    14da:	8e 2f       	mov	r24, r30
    14dc:	84 1b       	sub	r24, r20
    14de:	86 17       	cp	r24, r22
    14e0:	d0 f3       	brcs	.-12     	; 0x14d6 <i2cMasterSend+0x1e>
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
    14e2:	10 92 36 01 	sts	0x0136, r1
	I2cSendDataLength = length;
    14e6:	60 93 37 01 	sts	0x0137, r22
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    14ea:	80 91 bc 00 	lds	r24, 0x00BC
    14ee:	8f 70       	andi	r24, 0x0F	; 15
    14f0:	80 6a       	ori	r24, 0xA0	; 160
    14f2:	80 93 bc 00 	sts	0x00BC, r24
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
	I2cSendDataLength = length;
	// send start condition
	i2cSendStart();
}
    14f6:	08 95       	ret

000014f8 <i2cMasterReceive>:

void i2cMasterReceive(u08 deviceAddr, u08 length, u08* data)
{
    14f8:	98 2f       	mov	r25, r24
	u08 i;
	// wait for interface to be ready
	while(I2cState);
    14fa:	80 91 14 01 	lds	r24, 0x0114
    14fe:	88 23       	and	r24, r24
    1500:	e1 f7       	brne	.-8      	; 0x14fa <i2cMasterReceive+0x2>
	// set state
	I2cState = I2C_MASTER_RX;
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	80 93 14 01 	sts	0x0114, r24
	// save data
	I2cDeviceAddrRW = (deviceAddr|0x01);	// RW set: read operation
    1508:	91 60       	ori	r25, 0x01	; 1
    150a:	90 93 15 01 	sts	0x0115, r25
	I2cReceiveDataIndex = 0;
    150e:	10 92 58 01 	sts	0x0158, r1
	I2cReceiveDataLength = length;
    1512:	60 93 59 01 	sts	0x0159, r22
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    1516:	80 91 bc 00 	lds	r24, 0x00BC
    151a:	8f 70       	andi	r24, 0x0F	; 15
    151c:	80 6a       	ori	r24, 0xA0	; 160
    151e:	80 93 bc 00 	sts	0x00BC, r24
	I2cReceiveDataIndex = 0;
	I2cReceiveDataLength = length;
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
    1522:	80 91 14 01 	lds	r24, 0x0114
    1526:	88 23       	and	r24, r24
    1528:	e1 f7       	brne	.-8      	; 0x1522 <i2cMasterReceive+0x2a>
    152a:	a8 e3       	ldi	r26, 0x38	; 56
    152c:	b1 e0       	ldi	r27, 0x01	; 1
    152e:	fa 01       	movw	r30, r20
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <i2cMasterReceive+0x3e>
	// return data
	for(i=0; i<length; i++)
		*data++ = I2cReceiveData[i];
    1532:	8d 91       	ld	r24, X+
    1534:	81 93       	st	Z+, r24
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
	// return data
	for(i=0; i<length; i++)
    1536:	8e 2f       	mov	r24, r30
    1538:	84 1b       	sub	r24, r20
    153a:	86 17       	cp	r24, r22
    153c:	d0 f3       	brcs	.-12     	; 0x1532 <i2cMasterReceive+0x3a>
		*data++ = I2cReceiveData[i];
}
    153e:	08 95       	ret

00001540 <i2cMasterSendNI>:

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
    1540:	98 2f       	mov	r25, r24
    1542:	fa 01       	movw	r30, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
    1544:	80 91 bc 00 	lds	r24, 0x00BC
    1548:	8e 7f       	andi	r24, 0xFE	; 254
    154a:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    154e:	80 91 bc 00 	lds	r24, 0x00BC
    1552:	8f 70       	andi	r24, 0x0F	; 15
    1554:	80 6a       	ori	r24, 0xA0	; 160
    1556:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    155a:	80 91 bc 00 	lds	r24, 0x00BC
    155e:	87 ff       	sbrs	r24, 7
    1560:	fc cf       	rjmp	.-8      	; 0x155a <i2cMasterSendNI+0x1a>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
    1562:	9e 7f       	andi	r25, 0xFE	; 254
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    1564:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    1568:	80 91 bc 00 	lds	r24, 0x00BC
    156c:	8f 70       	andi	r24, 0x0F	; 15
    156e:	80 68       	ori	r24, 0x80	; 128
    1570:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    1574:	80 91 bc 00 	lds	r24, 0x00BC
    1578:	87 ff       	sbrs	r24, 7
    157a:	fc cf       	rjmp	.-8      	; 0x1574 <i2cMasterSendNI+0x34>
	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
    157c:	80 91 b9 00 	lds	r24, 0x00B9
    1580:	88 31       	cpi	r24, 0x18	; 24
    1582:	89 f0       	breq	.+34     	; 0x15a6 <i2cMasterSendNI+0x66>
    1584:	91 e0       	ldi	r25, 0x01	; 1
    1586:	12 c0       	rjmp	.+36     	; 0x15ac <i2cMasterSendNI+0x6c>
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
    1588:	80 81       	ld	r24, Z
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    158a:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    158e:	80 91 bc 00 	lds	r24, 0x00BC
    1592:	8f 70       	andi	r24, 0x0F	; 15
    1594:	80 68       	ori	r24, 0x80	; 128
    1596:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    159a:	80 91 bc 00 	lds	r24, 0x00BC
    159e:	87 ff       	sbrs	r24, 7
    15a0:	fc cf       	rjmp	.-8      	; 0x159a <i2cMasterSendNI+0x5a>
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
    15a2:	31 96       	adiw	r30, 0x01	; 1
			i2cWaitForComplete();
			length--;
    15a4:	61 50       	subi	r22, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
    15a6:	66 23       	and	r22, r22
    15a8:	79 f7       	brne	.-34     	; 0x1588 <i2cMasterSendNI+0x48>
    15aa:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    15ac:	80 91 bc 00 	lds	r24, 0x00BC
    15b0:	8f 70       	andi	r24, 0x0F	; 15
    15b2:	80 6d       	ori	r24, 0xD0	; 208
    15b4:	80 93 bc 00 	sts	0x00BC, r24
	}

	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();
	while( !(inb(TWCR) & BV(TWSTO)) );
    15b8:	80 91 bc 00 	lds	r24, 0x00BC
    15bc:	84 ff       	sbrs	r24, 4
    15be:	fc cf       	rjmp	.-8      	; 0x15b8 <i2cMasterSendNI+0x78>

	// enable TWI interrupt
	sbi(TWCR, TWIE);
    15c0:	80 91 bc 00 	lds	r24, 0x00BC
    15c4:	81 60       	ori	r24, 0x01	; 1
    15c6:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    15ca:	89 2f       	mov	r24, r25
    15cc:	08 95       	ret

000015ce <i2cMasterReceiveNI>:

u08 i2cMasterReceiveNI(u08 deviceAddr, u08 length, u08 *data)
{
    15ce:	1f 93       	push	r17
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	98 2f       	mov	r25, r24
    15d6:	16 2f       	mov	r17, r22
    15d8:	ea 01       	movw	r28, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
    15da:	80 91 bc 00 	lds	r24, 0x00BC
    15de:	8e 7f       	andi	r24, 0xFE	; 254
    15e0:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    15e4:	80 91 bc 00 	lds	r24, 0x00BC
    15e8:	8f 70       	andi	r24, 0x0F	; 15
    15ea:	80 6a       	ori	r24, 0xA0	; 160
    15ec:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    15f0:	80 91 bc 00 	lds	r24, 0x00BC
    15f4:	87 ff       	sbrs	r24, 7
    15f6:	fc cf       	rjmp	.-8      	; 0x15f0 <i2cMasterReceiveNI+0x22>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
    15f8:	91 60       	ori	r25, 0x01	; 1
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    15fa:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    15fe:	80 91 bc 00 	lds	r24, 0x00BC
    1602:	8f 70       	andi	r24, 0x0F	; 15
    1604:	80 68       	ori	r24, 0x80	; 128
    1606:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    160a:	80 91 bc 00 	lds	r24, 0x00BC
    160e:	87 ff       	sbrs	r24, 7
    1610:	fc cf       	rjmp	.-8      	; 0x160a <i2cMasterReceiveNI+0x3c>
	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
    1612:	80 91 b9 00 	lds	r24, 0x00B9
    1616:	80 34       	cpi	r24, 0x40	; 64
    1618:	69 f0       	breq	.+26     	; 0x1634 <i2cMasterReceiveNI+0x66>
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	18 c0       	rjmp	.+48     	; 0x164e <i2cMasterReceiveNI+0x80>
	{
		// accept receive data and ack it
		while(length > 1)
		{
			i2cReceiveByte(TRUE);
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	0e 94 48 0a 	call	0x1490	; 0x1490 <i2cReceiveByte>
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    1624:	80 91 bc 00 	lds	r24, 0x00BC
    1628:	87 ff       	sbrs	r24, 7
    162a:	fc cf       	rjmp	.-8      	; 0x1624 <i2cMasterReceiveNI+0x56>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    162c:	80 91 bb 00 	lds	r24, 0x00BB
		// accept receive data and ack it
		while(length > 1)
		{
			i2cReceiveByte(TRUE);
			i2cWaitForComplete();
			*data++ = i2cGetReceivedByte();
    1630:	89 93       	st	Y+, r24
			// decrement length
			length--;
    1632:	11 50       	subi	r17, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
	{
		// accept receive data and ack it
		while(length > 1)
    1634:	12 30       	cpi	r17, 0x02	; 2
    1636:	98 f7       	brcc	.-26     	; 0x161e <i2cMasterReceiveNI+0x50>
			// decrement length
			length--;
		}

		// accept receive data and nack it (last-byte signal)
		i2cReceiveByte(FALSE);
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	0e 94 48 0a 	call	0x1490	; 0x1490 <i2cReceiveByte>
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    163e:	80 91 bc 00 	lds	r24, 0x00BC
    1642:	87 ff       	sbrs	r24, 7
    1644:	fc cf       	rjmp	.-8      	; 0x163e <i2cMasterReceiveNI+0x70>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    1646:	80 91 bb 00 	lds	r24, 0x00BB
		}

		// accept receive data and nack it (last-byte signal)
		i2cReceiveByte(FALSE);
		i2cWaitForComplete();
		*data++ = i2cGetReceivedByte();
    164a:	88 83       	st	Y, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    164e:	80 91 bc 00 	lds	r24, 0x00BC
    1652:	8f 70       	andi	r24, 0x0F	; 15
    1654:	80 6d       	ori	r24, 0xD0	; 208
    1656:	80 93 bc 00 	sts	0x00BC, r24
	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();

	// enable TWI interrupt
	sbi(TWCR, TWIE);
    165a:	80 91 bc 00 	lds	r24, 0x00BC
    165e:	81 60       	ori	r24, 0x01	; 1
    1660:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    1664:	89 2f       	mov	r24, r25
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	1f 91       	pop	r17
    166c:	08 95       	ret

0000166e <__vector_24>:


//! I2C (TWI) interrupt service routine
SIGNAL(SIG_2WIRE_SERIAL)
{
    166e:	1f 92       	push	r1
    1670:	0f 92       	push	r0
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	0f 92       	push	r0
    1676:	11 24       	eor	r1, r1
    1678:	2f 93       	push	r18
    167a:	3f 93       	push	r19
    167c:	4f 93       	push	r20
    167e:	5f 93       	push	r21
    1680:	6f 93       	push	r22
    1682:	7f 93       	push	r23
    1684:	8f 93       	push	r24
    1686:	9f 93       	push	r25
    1688:	af 93       	push	r26
    168a:	bf 93       	push	r27
    168c:	ef 93       	push	r30
    168e:	ff 93       	push	r31
	// read status bits
	u08 status = inb(TWSR) & TWSR_STATUS_MASK;
    1690:	80 91 b9 00 	lds	r24, 0x00B9

	switch(status)
    1694:	88 7f       	andi	r24, 0xF8	; 248
    1696:	80 36       	cpi	r24, 0x60	; 96
    1698:	09 f4       	brne	.+2      	; 0x169c <__vector_24+0x2e>
    169a:	9f c0       	rjmp	.+318    	; 0x17da <__vector_24+0x16c>
    169c:	81 36       	cpi	r24, 0x61	; 97
    169e:	70 f5       	brcc	.+92     	; 0x16fc <__vector_24+0x8e>
    16a0:	88 32       	cpi	r24, 0x28	; 40
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <__vector_24+0x38>
    16a4:	5f c0       	rjmp	.+190    	; 0x1764 <__vector_24+0xf6>
    16a6:	89 32       	cpi	r24, 0x29	; 41
    16a8:	98 f4       	brcc	.+38     	; 0x16d0 <__vector_24+0x62>
    16aa:	80 31       	cpi	r24, 0x10	; 16
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <__vector_24+0x42>
    16ae:	57 c0       	rjmp	.+174    	; 0x175e <__vector_24+0xf0>
    16b0:	81 31       	cpi	r24, 0x11	; 17
    16b2:	38 f4       	brcc	.+14     	; 0x16c2 <__vector_24+0x54>
    16b4:	88 23       	and	r24, r24
    16b6:	09 f4       	brne	.+2      	; 0x16ba <__vector_24+0x4c>
    16b8:	f7 c0       	rjmp	.+494    	; 0x18a8 <__vector_24+0x23a>
    16ba:	88 30       	cpi	r24, 0x08	; 8
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <__vector_24+0x52>
    16be:	fc c0       	rjmp	.+504    	; 0x18b8 <__vector_24+0x24a>
    16c0:	4e c0       	rjmp	.+156    	; 0x175e <__vector_24+0xf0>
    16c2:	88 31       	cpi	r24, 0x18	; 24
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <__vector_24+0x5a>
    16c6:	4e c0       	rjmp	.+156    	; 0x1764 <__vector_24+0xf6>
    16c8:	80 32       	cpi	r24, 0x20	; 32
    16ca:	09 f0       	breq	.+2      	; 0x16ce <__vector_24+0x60>
    16cc:	f5 c0       	rjmp	.+490    	; 0x18b8 <__vector_24+0x24a>
    16ce:	ec c0       	rjmp	.+472    	; 0x18a8 <__vector_24+0x23a>
    16d0:	80 34       	cpi	r24, 0x40	; 64
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <__vector_24+0x68>
    16d4:	77 c0       	rjmp	.+238    	; 0x17c4 <__vector_24+0x156>
    16d6:	81 34       	cpi	r24, 0x41	; 65
    16d8:	38 f4       	brcc	.+14     	; 0x16e8 <__vector_24+0x7a>
    16da:	80 33       	cpi	r24, 0x30	; 48
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <__vector_24+0x72>
    16de:	e4 c0       	rjmp	.+456    	; 0x18a8 <__vector_24+0x23a>
    16e0:	88 33       	cpi	r24, 0x38	; 56
    16e2:	09 f0       	breq	.+2      	; 0x16e6 <__vector_24+0x78>
    16e4:	e9 c0       	rjmp	.+466    	; 0x18b8 <__vector_24+0x24a>
    16e6:	5d c0       	rjmp	.+186    	; 0x17a2 <__vector_24+0x134>
    16e8:	80 35       	cpi	r24, 0x50	; 80
    16ea:	09 f4       	brne	.+2      	; 0x16ee <__vector_24+0x80>
    16ec:	5f c0       	rjmp	.+190    	; 0x17ac <__vector_24+0x13e>
    16ee:	88 35       	cpi	r24, 0x58	; 88
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <__vector_24+0x86>
    16f2:	4a c0       	rjmp	.+148    	; 0x1788 <__vector_24+0x11a>
    16f4:	88 34       	cpi	r24, 0x48	; 72
    16f6:	09 f0       	breq	.+2      	; 0x16fa <__vector_24+0x8c>
    16f8:	df c0       	rjmp	.+446    	; 0x18b8 <__vector_24+0x24a>
    16fa:	d6 c0       	rjmp	.+428    	; 0x18a8 <__vector_24+0x23a>
    16fc:	88 39       	cpi	r24, 0x98	; 152
    16fe:	09 f4       	brne	.+2      	; 0x1702 <__vector_24+0x94>
    1700:	84 c0       	rjmp	.+264    	; 0x180a <__vector_24+0x19c>
    1702:	89 39       	cpi	r24, 0x99	; 153
    1704:	b0 f4       	brcc	.+44     	; 0x1732 <__vector_24+0xc4>
    1706:	88 37       	cpi	r24, 0x78	; 120
    1708:	09 f4       	brne	.+2      	; 0x170c <__vector_24+0x9e>
    170a:	67 c0       	rjmp	.+206    	; 0x17da <__vector_24+0x16c>
    170c:	89 37       	cpi	r24, 0x79	; 121
    170e:	38 f4       	brcc	.+14     	; 0x171e <__vector_24+0xb0>
    1710:	88 36       	cpi	r24, 0x68	; 104
    1712:	09 f4       	brne	.+2      	; 0x1716 <__vector_24+0xa8>
    1714:	62 c0       	rjmp	.+196    	; 0x17da <__vector_24+0x16c>
    1716:	80 37       	cpi	r24, 0x70	; 112
    1718:	09 f0       	breq	.+2      	; 0x171c <__vector_24+0xae>
    171a:	ce c0       	rjmp	.+412    	; 0x18b8 <__vector_24+0x24a>
    171c:	5e c0       	rjmp	.+188    	; 0x17da <__vector_24+0x16c>
    171e:	88 38       	cpi	r24, 0x88	; 136
    1720:	09 f4       	brne	.+2      	; 0x1724 <__vector_24+0xb6>
    1722:	73 c0       	rjmp	.+230    	; 0x180a <__vector_24+0x19c>
    1724:	80 39       	cpi	r24, 0x90	; 144
    1726:	09 f4       	brne	.+2      	; 0x172a <__vector_24+0xbc>
    1728:	60 c0       	rjmp	.+192    	; 0x17ea <__vector_24+0x17c>
    172a:	80 38       	cpi	r24, 0x80	; 128
    172c:	09 f0       	breq	.+2      	; 0x1730 <__vector_24+0xc2>
    172e:	c4 c0       	rjmp	.+392    	; 0x18b8 <__vector_24+0x24a>
    1730:	5a c0       	rjmp	.+180    	; 0x17e6 <__vector_24+0x178>
    1732:	80 3b       	cpi	r24, 0xB0	; 176
    1734:	09 f4       	brne	.+2      	; 0x1738 <__vector_24+0xca>
    1736:	86 c0       	rjmp	.+268    	; 0x1844 <__vector_24+0x1d6>
    1738:	81 3b       	cpi	r24, 0xB1	; 177
    173a:	38 f4       	brcc	.+14     	; 0x174a <__vector_24+0xdc>
    173c:	80 3a       	cpi	r24, 0xA0	; 160
    173e:	09 f4       	brne	.+2      	; 0x1742 <__vector_24+0xd4>
    1740:	6a c0       	rjmp	.+212    	; 0x1816 <__vector_24+0x1a8>
    1742:	88 3a       	cpi	r24, 0xA8	; 168
    1744:	09 f0       	breq	.+2      	; 0x1748 <__vector_24+0xda>
    1746:	b8 c0       	rjmp	.+368    	; 0x18b8 <__vector_24+0x24a>
    1748:	7d c0       	rjmp	.+250    	; 0x1844 <__vector_24+0x1d6>
    174a:	80 3c       	cpi	r24, 0xC0	; 192
    174c:	09 f4       	brne	.+2      	; 0x1750 <__vector_24+0xe2>
    174e:	a7 c0       	rjmp	.+334    	; 0x189e <__vector_24+0x230>
    1750:	88 3c       	cpi	r24, 0xC8	; 200
    1752:	09 f4       	brne	.+2      	; 0x1756 <__vector_24+0xe8>
    1754:	a4 c0       	rjmp	.+328    	; 0x189e <__vector_24+0x230>
    1756:	88 3b       	cpi	r24, 0xB8	; 184
    1758:	09 f0       	breq	.+2      	; 0x175c <__vector_24+0xee>
    175a:	ae c0       	rjmp	.+348    	; 0x18b8 <__vector_24+0x24a>
    175c:	84 c0       	rjmp	.+264    	; 0x1866 <__vector_24+0x1f8>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: M->START\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// send device address
		i2cSendByte(I2cDeviceAddrRW);
    175e:	80 91 15 01 	lds	r24, 0x0115
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <__vector_24+0x114>
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->SLA_ACK or DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cSendDataIndex < I2cSendDataLength)
    1764:	90 91 36 01 	lds	r25, 0x0136
    1768:	80 91 37 01 	lds	r24, 0x0137
    176c:	98 17       	cp	r25, r24
    176e:	08 f0       	brcs	.+2      	; 0x1772 <__vector_24+0x104>
    1770:	9b c0       	rjmp	.+310    	; 0x18a8 <__vector_24+0x23a>
		{
			// send data
			i2cSendByte( I2cSendData[I2cSendDataIndex++] );
    1772:	e9 2f       	mov	r30, r25
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	ea 5e       	subi	r30, 0xEA	; 234
    1778:	fe 4f       	sbci	r31, 0xFE	; 254
    177a:	80 81       	ld	r24, Z
    177c:	9f 5f       	subi	r25, 0xFF	; 255
    177e:	90 93 36 01 	sts	0x0136, r25
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    1782:	80 93 bb 00 	sts	0x00BB, r24
    1786:	84 c0       	rjmp	.+264    	; 0x1890 <__vector_24+0x222>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_NACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store final received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    1788:	80 91 58 01 	lds	r24, 0x0158
    178c:	90 91 bb 00 	lds	r25, 0x00BB
    1790:	e8 2f       	mov	r30, r24
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	e8 5c       	subi	r30, 0xC8	; 200
    1796:	fe 4f       	sbci	r31, 0xFE	; 254
    1798:	90 83       	st	Z, r25
    179a:	8f 5f       	subi	r24, 0xFF	; 255
    179c:	80 93 58 01 	sts	0x0158, r24
    17a0:	83 c0       	rjmp	.+262    	; 0x18a8 <__vector_24+0x23a>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->ARB_LOST\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    17a2:	80 91 bc 00 	lds	r24, 0x00BC
    17a6:	8f 70       	andi	r24, 0x0F	; 15
    17a8:	80 68       	ori	r24, 0x80	; 128
    17aa:	82 c0       	rjmp	.+260    	; 0x18b0 <__vector_24+0x242>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    17ac:	80 91 58 01 	lds	r24, 0x0158
    17b0:	90 91 bb 00 	lds	r25, 0x00BB
    17b4:	e8 2f       	mov	r30, r24
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	e8 5c       	subi	r30, 0xC8	; 200
    17ba:	fe 4f       	sbci	r31, 0xFE	; 254
    17bc:	90 83       	st	Z, r25
    17be:	8f 5f       	subi	r24, 0xFF	; 255
    17c0:	80 93 58 01 	sts	0x0158, r24
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cReceiveDataIndex < (I2cReceiveDataLength-1))
    17c4:	20 91 58 01 	lds	r18, 0x0158
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	80 91 59 01 	lds	r24, 0x0159
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	28 17       	cp	r18, r24
    17d4:	39 07       	cpc	r19, r25
    17d6:	dc f4       	brge	.+54     	; 0x180e <__vector_24+0x1a0>
    17d8:	16 c0       	rjmp	.+44     	; 0x1806 <__vector_24+0x198>
		rprintf("I2C: SR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for writing (data will be received from master)
		// set state
		I2cState = I2C_SLAVE_RX;
    17da:	85 e0       	ldi	r24, 0x05	; 5
    17dc:	80 93 14 01 	sts	0x0114, r24
		// prepare buffer
		I2cReceiveDataIndex = 0;
    17e0:	10 92 58 01 	sts	0x0158, r1
    17e4:	50 c0       	rjmp	.+160    	; 0x1886 <__vector_24+0x218>
		// receive data byte and return ACK
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
		break;
	case TW_SR_DATA_ACK:
		GenCal_Flag = 0;				// 0x80: data byte has been received, ACK has been returned
    17e6:	10 92 b5 04 	sts	0x04B5, r1
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// get previously received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    17ea:	80 91 58 01 	lds	r24, 0x0158
    17ee:	90 91 bb 00 	lds	r25, 0x00BB
    17f2:	e8 2f       	mov	r30, r24
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	e8 5c       	subi	r30, 0xC8	; 200
    17f8:	fe 4f       	sbci	r31, 0xFE	; 254
    17fa:	90 83       	st	Z, r25
    17fc:	8f 5f       	subi	r24, 0xFF	; 255
    17fe:	80 93 58 01 	sts	0x0158, r24
		// check receive buffer status
		if(I2cReceiveDataIndex < I2C_RECEIVE_DATA_BUFFER_SIZE)
    1802:	80 32       	cpi	r24, 0x20	; 32
    1804:	20 f4       	brcc	.+8      	; 0x180e <__vector_24+0x1a0>
		{
			// receive data byte and return ACK
			i2cReceiveByte(TRUE);
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	03 c0       	rjmp	.+6      	; 0x1810 <__vector_24+0x1a2>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->DATA_NACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// receive data byte and return NACK
		GenCal_Flag = 0;
    180a:	10 92 b5 04 	sts	0x04B5, r1
		i2cReceiveByte(FALSE);
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	0e 94 48 0a 	call	0x1490	; 0x1490 <i2cReceiveByte>
    1814:	51 c0       	rjmp	.+162    	; 0x18b8 <__vector_24+0x24a>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->SR_STOP\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// switch to SR mode with SLA ACK
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    1816:	80 91 bc 00 	lds	r24, 0x00BC
    181a:	8f 70       	andi	r24, 0x0F	; 15
    181c:	80 6c       	ori	r24, 0xC0	; 192
    181e:	80 93 bc 00 	sts	0x00BC, r24
		// i2c receive is complete, call i2cSlaveReceive
		if(i2cSlaveReceive) i2cSlaveReceive(I2cReceiveDataIndex, I2cReceiveData);
    1822:	e0 91 5a 01 	lds	r30, 0x015A
    1826:	f0 91 5b 01 	lds	r31, 0x015B
    182a:	30 97       	sbiw	r30, 0x00	; 0
    182c:	29 f0       	breq	.+10     	; 0x1838 <__vector_24+0x1ca>
    182e:	80 91 58 01 	lds	r24, 0x0158
    1832:	68 e3       	ldi	r22, 0x38	; 56
    1834:	71 e0       	ldi	r23, 0x01	; 1
    1836:	09 95       	icall
		// set state
		I2cState = I2C_IDLE;
    1838:	10 92 14 01 	sts	0x0114, r1
		GenCal_Flag = 1;
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	80 93 b5 04 	sts	0x04B5, r24
    1842:	3a c0       	rjmp	.+116    	; 0x18b8 <__vector_24+0x24a>
		rprintf("I2C: ST->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for reading (data must be transmitted back to master)
		// set state
		I2cState = I2C_SLAVE_TX;
    1844:	84 e0       	ldi	r24, 0x04	; 4
    1846:	80 93 14 01 	sts	0x0114, r24
		// request data from application
		if(i2cSlaveTransmit) I2cSendDataLength = i2cSlaveTransmit(I2C_SEND_DATA_BUFFER_SIZE, I2cSendData);
    184a:	e0 91 5c 01 	lds	r30, 0x015C
    184e:	f0 91 5d 01 	lds	r31, 0x015D
    1852:	30 97       	sbiw	r30, 0x00	; 0
    1854:	31 f0       	breq	.+12     	; 0x1862 <__vector_24+0x1f4>
    1856:	80 e2       	ldi	r24, 0x20	; 32
    1858:	66 e1       	ldi	r22, 0x16	; 22
    185a:	71 e0       	ldi	r23, 0x01	; 1
    185c:	09 95       	icall
    185e:	80 93 37 01 	sts	0x0137, r24
		// reset data index
		I2cSendDataIndex = 0;
    1862:	10 92 36 01 	sts	0x0136, r1
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: ST->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// transmit data byte
		outb(TWDR, I2cSendData[I2cSendDataIndex++]);
    1866:	90 91 36 01 	lds	r25, 0x0136
    186a:	e9 2f       	mov	r30, r25
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	ea 5e       	subi	r30, 0xEA	; 234
    1870:	fe 4f       	sbci	r31, 0xFE	; 254
    1872:	80 81       	ld	r24, Z
    1874:	80 93 bb 00 	sts	0x00BB, r24
    1878:	9f 5f       	subi	r25, 0xFF	; 255
    187a:	90 93 36 01 	sts	0x0136, r25
		if(I2cSendDataIndex < I2cSendDataLength)
    187e:	80 91 37 01 	lds	r24, 0x0137
    1882:	98 17       	cp	r25, r24
    1884:	28 f4       	brcc	.+10     	; 0x1890 <__vector_24+0x222>
			// expect ACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    1886:	80 91 bc 00 	lds	r24, 0x00BC
    188a:	8f 70       	andi	r24, 0x0F	; 15
    188c:	80 6c       	ori	r24, 0xC0	; 192
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <__vector_24+0x22a>
		else
			// expect NACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    1890:	80 91 bc 00 	lds	r24, 0x00BC
    1894:	8f 70       	andi	r24, 0x0F	; 15
    1896:	80 68       	ori	r24, 0x80	; 128
    1898:	80 93 bc 00 	sts	0x00BC, r24
    189c:	0d c0       	rjmp	.+26     	; 0x18b8 <__vector_24+0x24a>
		rprintf("I2C: ST->DATA_NACK or LAST_DATA\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// all done
		// switch to open slave
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    189e:	80 91 bc 00 	lds	r24, 0x00BC
    18a2:	8f 70       	andi	r24, 0x0F	; 15
    18a4:	80 6c       	ori	r24, 0xC0	; 192
    18a6:	04 c0       	rjmp	.+8      	; 0x18b0 <__vector_24+0x242>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: BUS_ERROR\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// reset internal hardware and release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTO)|BV(TWEA));
    18a8:	80 91 bc 00 	lds	r24, 0x00BC
    18ac:	8f 70       	andi	r24, 0x0F	; 15
    18ae:	80 6d       	ori	r24, 0xD0	; 208
    18b0:	80 93 bc 00 	sts	0x00BC, r24
		// set state
		I2cState = I2C_IDLE;
    18b4:	10 92 14 01 	sts	0x0114, r1
		break;
	}
}
    18b8:	ff 91       	pop	r31
    18ba:	ef 91       	pop	r30
    18bc:	bf 91       	pop	r27
    18be:	af 91       	pop	r26
    18c0:	9f 91       	pop	r25
    18c2:	8f 91       	pop	r24
    18c4:	7f 91       	pop	r23
    18c6:	6f 91       	pop	r22
    18c8:	5f 91       	pop	r21
    18ca:	4f 91       	pop	r20
    18cc:	3f 91       	pop	r19
    18ce:	2f 91       	pop	r18
    18d0:	0f 90       	pop	r0
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	0f 90       	pop	r0
    18d6:	1f 90       	pop	r1
    18d8:	18 95       	reti

000018da <i2cGetState>:

eI2cStateType i2cGetState(void)
{
	return I2cState;
    18da:	80 91 14 01 	lds	r24, 0x0114
}
    18de:	08 95       	ret

000018e0 <i2cGetGenCall>:

u08 i2cGetGenCall(void)
{
	return GenCal_Flag;
    18e0:	80 91 b5 04 	lds	r24, 0x04B5
    18e4:	08 95       	ret

000018e6 <__mulsi3>:
    18e6:	62 9f       	mul	r22, r18
    18e8:	d0 01       	movw	r26, r0
    18ea:	73 9f       	mul	r23, r19
    18ec:	f0 01       	movw	r30, r0
    18ee:	82 9f       	mul	r24, r18
    18f0:	e0 0d       	add	r30, r0
    18f2:	f1 1d       	adc	r31, r1
    18f4:	64 9f       	mul	r22, r20
    18f6:	e0 0d       	add	r30, r0
    18f8:	f1 1d       	adc	r31, r1
    18fa:	92 9f       	mul	r25, r18
    18fc:	f0 0d       	add	r31, r0
    18fe:	83 9f       	mul	r24, r19
    1900:	f0 0d       	add	r31, r0
    1902:	74 9f       	mul	r23, r20
    1904:	f0 0d       	add	r31, r0
    1906:	65 9f       	mul	r22, r21
    1908:	f0 0d       	add	r31, r0
    190a:	99 27       	eor	r25, r25
    190c:	72 9f       	mul	r23, r18
    190e:	b0 0d       	add	r27, r0
    1910:	e1 1d       	adc	r30, r1
    1912:	f9 1f       	adc	r31, r25
    1914:	63 9f       	mul	r22, r19
    1916:	b0 0d       	add	r27, r0
    1918:	e1 1d       	adc	r30, r1
    191a:	f9 1f       	adc	r31, r25
    191c:	bd 01       	movw	r22, r26
    191e:	cf 01       	movw	r24, r30
    1920:	11 24       	eor	r1, r1
    1922:	08 95       	ret

00001924 <__udivmodqi4>:
    1924:	99 1b       	sub	r25, r25
    1926:	79 e0       	ldi	r23, 0x09	; 9
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <__udivmodqi4_ep>

0000192a <__udivmodqi4_loop>:
    192a:	99 1f       	adc	r25, r25
    192c:	96 17       	cp	r25, r22
    192e:	08 f0       	brcs	.+2      	; 0x1932 <__udivmodqi4_ep>
    1930:	96 1b       	sub	r25, r22

00001932 <__udivmodqi4_ep>:
    1932:	88 1f       	adc	r24, r24
    1934:	7a 95       	dec	r23
    1936:	c9 f7       	brne	.-14     	; 0x192a <__udivmodqi4_loop>
    1938:	80 95       	com	r24
    193a:	08 95       	ret

0000193c <__udivmodhi4>:
    193c:	aa 1b       	sub	r26, r26
    193e:	bb 1b       	sub	r27, r27
    1940:	51 e1       	ldi	r21, 0x11	; 17
    1942:	07 c0       	rjmp	.+14     	; 0x1952 <__udivmodhi4_ep>

00001944 <__udivmodhi4_loop>:
    1944:	aa 1f       	adc	r26, r26
    1946:	bb 1f       	adc	r27, r27
    1948:	a6 17       	cp	r26, r22
    194a:	b7 07       	cpc	r27, r23
    194c:	10 f0       	brcs	.+4      	; 0x1952 <__udivmodhi4_ep>
    194e:	a6 1b       	sub	r26, r22
    1950:	b7 0b       	sbc	r27, r23

00001952 <__udivmodhi4_ep>:
    1952:	88 1f       	adc	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	5a 95       	dec	r21
    1958:	a9 f7       	brne	.-22     	; 0x1944 <__udivmodhi4_loop>
    195a:	80 95       	com	r24
    195c:	90 95       	com	r25
    195e:	bc 01       	movw	r22, r24
    1960:	cd 01       	movw	r24, r26
    1962:	08 95       	ret

00001964 <__divmodsi4>:
    1964:	97 fb       	bst	r25, 7
    1966:	09 2e       	mov	r0, r25
    1968:	05 26       	eor	r0, r21
    196a:	0e d0       	rcall	.+28     	; 0x1988 <__divmodsi4_neg1>
    196c:	57 fd       	sbrc	r21, 7
    196e:	04 d0       	rcall	.+8      	; 0x1978 <__divmodsi4_neg2>
    1970:	14 d0       	rcall	.+40     	; 0x199a <__udivmodsi4>
    1972:	0a d0       	rcall	.+20     	; 0x1988 <__divmodsi4_neg1>
    1974:	00 1c       	adc	r0, r0
    1976:	38 f4       	brcc	.+14     	; 0x1986 <__divmodsi4_exit>

00001978 <__divmodsi4_neg2>:
    1978:	50 95       	com	r21
    197a:	40 95       	com	r20
    197c:	30 95       	com	r19
    197e:	21 95       	neg	r18
    1980:	3f 4f       	sbci	r19, 0xFF	; 255
    1982:	4f 4f       	sbci	r20, 0xFF	; 255
    1984:	5f 4f       	sbci	r21, 0xFF	; 255

00001986 <__divmodsi4_exit>:
    1986:	08 95       	ret

00001988 <__divmodsi4_neg1>:
    1988:	f6 f7       	brtc	.-4      	; 0x1986 <__divmodsi4_exit>
    198a:	90 95       	com	r25
    198c:	80 95       	com	r24
    198e:	70 95       	com	r23
    1990:	61 95       	neg	r22
    1992:	7f 4f       	sbci	r23, 0xFF	; 255
    1994:	8f 4f       	sbci	r24, 0xFF	; 255
    1996:	9f 4f       	sbci	r25, 0xFF	; 255
    1998:	08 95       	ret

0000199a <__udivmodsi4>:
    199a:	a1 e2       	ldi	r26, 0x21	; 33
    199c:	1a 2e       	mov	r1, r26
    199e:	aa 1b       	sub	r26, r26
    19a0:	bb 1b       	sub	r27, r27
    19a2:	fd 01       	movw	r30, r26
    19a4:	0d c0       	rjmp	.+26     	; 0x19c0 <__udivmodsi4_ep>

000019a6 <__udivmodsi4_loop>:
    19a6:	aa 1f       	adc	r26, r26
    19a8:	bb 1f       	adc	r27, r27
    19aa:	ee 1f       	adc	r30, r30
    19ac:	ff 1f       	adc	r31, r31
    19ae:	a2 17       	cp	r26, r18
    19b0:	b3 07       	cpc	r27, r19
    19b2:	e4 07       	cpc	r30, r20
    19b4:	f5 07       	cpc	r31, r21
    19b6:	20 f0       	brcs	.+8      	; 0x19c0 <__udivmodsi4_ep>
    19b8:	a2 1b       	sub	r26, r18
    19ba:	b3 0b       	sbc	r27, r19
    19bc:	e4 0b       	sbc	r30, r20
    19be:	f5 0b       	sbc	r31, r21

000019c0 <__udivmodsi4_ep>:
    19c0:	66 1f       	adc	r22, r22
    19c2:	77 1f       	adc	r23, r23
    19c4:	88 1f       	adc	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	1a 94       	dec	r1
    19ca:	69 f7       	brne	.-38     	; 0x19a6 <__udivmodsi4_loop>
    19cc:	60 95       	com	r22
    19ce:	70 95       	com	r23
    19d0:	80 95       	com	r24
    19d2:	90 95       	com	r25
    19d4:	9b 01       	movw	r18, r22
    19d6:	ac 01       	movw	r20, r24
    19d8:	bd 01       	movw	r22, r26
    19da:	cf 01       	movw	r24, r30
    19dc:	08 95       	ret

000019de <__eerd_byte_m168>:
    19de:	f9 99       	sbic	0x1f, 1	; 31
    19e0:	fe cf       	rjmp	.-4      	; 0x19de <__eerd_byte_m168>
    19e2:	92 bd       	out	0x22, r25	; 34
    19e4:	81 bd       	out	0x21, r24	; 33
    19e6:	f8 9a       	sbi	0x1f, 0	; 31
    19e8:	99 27       	eor	r25, r25
    19ea:	80 b5       	in	r24, 0x20	; 32
    19ec:	08 95       	ret

000019ee <__eewr_byte_m168>:
    19ee:	26 2f       	mov	r18, r22

000019f0 <__eewr_r18_m168>:
    19f0:	f9 99       	sbic	0x1f, 1	; 31
    19f2:	fe cf       	rjmp	.-4      	; 0x19f0 <__eewr_r18_m168>
    19f4:	1f ba       	out	0x1f, r1	; 31
    19f6:	92 bd       	out	0x22, r25	; 34
    19f8:	81 bd       	out	0x21, r24	; 33
    19fa:	20 bd       	out	0x20, r18	; 32
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	fa 9a       	sbi	0x1f, 2	; 31
    1a02:	f9 9a       	sbi	0x1f, 1	; 31
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	08 95       	ret

00001a0a <_exit>:
    1a0a:	f8 94       	cli

00001a0c <__stop_program>:
    1a0c:	ff cf       	rjmp	.-2      	; 0x1a0c <__stop_program>
